
;;; GENERATED BY CHICKEN-BIND FROM -

(begin
  (define-constant al:vertex-shader 1)
  (define al:vertex-shader al:vertex-shader)
  (define-constant al:pixel-shader 2)
  (define al:pixel-shader al:pixel-shader)
  (define-constant al:shader-auto 0)
  (define al:shader-auto al:shader-auto)
  (define-constant al:shader-glsl 1)
  (define al:shader-glsl al:shader-glsl)
  (define-constant al:shader-hlsl 2)
  (define al:shader-hlsl al:shader-hlsl)
  (define-constant al:shader-auto-minimal 3)
  (define al:shader-auto-minimal al:shader-auto-minimal)
  (define-constant al:shader-glsl-minimal 4)
  (define al:shader-glsl-minimal al:shader-glsl-minimal)
  (define-constant al:shader-hlsl-minimal 5)
  (define al:shader-hlsl-minimal al:shader-hlsl-minimal)
  (define-constant al:shader-hlsl-sm-3-0 6)
  (define al:shader-hlsl-sm-3-0 al:shader-hlsl-sm-3-0)
  (begin
    (define al:create-shader
      (foreign-lambda*
        (c-pointer (struct "ALLEGRO_SHADER"))
        ((integer a0))
        "return(al_create_shader(a0));")))
  (begin
    (define al:attach-shader-source
      (foreign-lambda*
        bool
        (((c-pointer (struct "ALLEGRO_SHADER")) a0) (integer a1) (c-string a2))
        "return(al_attach_shader_source(a0 , a1 , a2));")))
  (begin
    (define al:attach-shader-source-file
      (foreign-lambda*
        bool
        (((c-pointer (struct "ALLEGRO_SHADER")) a0) (integer a1) (c-string a2))
        "return(al_attach_shader_source_file(a0 , a1 , a2));")))
  (begin
    (define al:build-shader
      (foreign-lambda*
        bool
        (((c-pointer (struct "ALLEGRO_SHADER")) a0))
        "return(al_build_shader(a0));")))
  (begin
    (define al:get-shader-log
      (foreign-lambda*
        c-string
        (((c-pointer (struct "ALLEGRO_SHADER")) a0))
        "return(al_get_shader_log(a0));")))
  (begin
    (define al:get-shader-platform
      (foreign-lambda*
        integer
        (((c-pointer (struct "ALLEGRO_SHADER")) a0))
        "return(al_get_shader_platform(a0));")))
  (begin
    (define al:use-shader
      (foreign-lambda*
        bool
        (((c-pointer (struct "ALLEGRO_SHADER")) a0))
        "return(al_use_shader(a0));")))
  (begin
    (define al:get-current-shader
      (foreign-lambda*
        (c-pointer (struct "ALLEGRO_SHADER"))
        ()
        "return(al_get_current_shader());")))
  (begin
    (define al:destroy-shader
      (foreign-lambda*
        void
        (((c-pointer (struct "ALLEGRO_SHADER")) a0))
        "al_destroy_shader(a0);")))
  (begin
    (define al:set-shader-sampler
      (foreign-lambda*
        bool
        ((c-string a0) ((c-pointer "ALLEGRO_BITMAP") a1) (integer a2))
        "return(al_set_shader_sampler(a0 , a1 , a2));")))
  (begin
    (define al:set-shader-matrix
      (foreign-lambda*
        bool
        ((c-string a0) ((c-pointer "ALLEGRO_TRANSFORM") a1))
        "return(al_set_shader_matrix(a0 , a1));")))
  (begin
    (define al:set-shader-int
      (foreign-lambda*
        bool
        ((c-string a0) (integer a1))
        "return(al_set_shader_int(a0 , a1));")))
  (begin
    (define al:set-shader-float
      (foreign-lambda*
        bool
        ((c-string a0) (float a1))
        "return(al_set_shader_float(a0 , a1));")))
  (begin
    (define al:set-shader-int-vector
      (foreign-lambda*
        bool
        ((c-string a0) (integer a1) (s32vector a2) (integer a3))
        "return(al_set_shader_int_vector(a0 , a1 , a2 , a3));")))
  (begin
    (define al:set-shader-float-vector
      (foreign-lambda*
        bool
        ((c-string a0) (integer a1) (f32vector a2) (integer a3))
        "return(al_set_shader_float_vector(a0 , a1 , a2 , a3));")))
  (begin
    (define al:set-shader-bool
      (foreign-lambda*
        bool
        ((c-string a0) (bool a1))
        "return(al_set_shader_bool(a0 , a1));")))
  (begin
    (define al:get-default-shader-source
      (foreign-lambda*
        (c-pointer (c-pointer (const char)))
        ((integer a0) (integer a1))
        "return(al_get_default_shader_source(a0 , a1));"))))

;;; END OF FILE
