[[tags: allegro game]]

== allegro

This document pertains to memory related methods found in the Allegro egg.

Please see the main [allegro] wiki page for more information.

[[toc:]]

== Records

=== memory-interface

<record>memory-interface</record>
<procedure>(make-memory-interface*)</procedure>
<procedure>(make-memory-interface)</procedure>
<procedure>(free-memory-interface! memory-interface)</procedure>
<procedure>(memory-interface-malloc memory-interface)</procedure>
<setter>(memory-interface-malloc-set! memory-interface (function c-pointer (integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-realloc memory-interface)</procedure>
<setter>(memory-interface-realloc-set! memory-interface (function void      (c-pointer integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-calloc memory-interface)</procedure>
<setter>(memory-interface-calloc-set! memory-interface (function c-pointer (c-pointer integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-free memory-interface)</procedure>
<setter>(memory-interface-free-set! memory-interface (function c-pointer (integer32 integer32 integer (const c-string) (const c-string))))</setter>

== Functions

=== Memory

<procedure>(memory-interface-set! memory-interface)</procedure>

Implements al_set_memory_interface.

<procedure>(malloc* integer)</procedure>

Implements al_malloc.

<procedure>(malloc integer)</procedure>

Implements al_malloc, with (free!) declared as a finalizer.

<procedure>(free! ptr)</procedure>

Implements al_free.

<procedure>(realloc* ptr integer)</procedure>

Implements al_realloc.

<procedure>(realloc ptr integer)</procedure>

Implements al_realloc, with (free!) declared as a finalizer.

<procedure>(calloc* integer integer)</procedure>

Implements al_calloc.

<procedure>(calloc integer integer)</procedure>

Implements al_calloc, with (free!) declared as a finalizer.

<procedure>(malloc/context* (int size) (int line) (string file) (string function))</procedure>

Implements al_malloc_with_context.

<procedure>(malloc/context (int size) (int line) (string file) (string function))</procedure>

Implements al_malloc_with_context, with (free/context!) declared as a finalizer.

<procedure>(free/context! ptr (int line) (string file) (string function))</procedure>

Implements al_free_with_context.

<procedure>(realloc/context* ptr (int size) (int line) (string file) (string function))</procedure>

Implements al_realloc_with_context.

<procedure>(realloc/context ptr (int size) (int line) (string file) (string function))</procedure>

Implements al_realloc_with_context, with (free/context!) declared as a finalizer.

<procedure>(calloc/context* (int count) (int size) (int line) (string file) (string function))</procedure>

Implements al_calloc_with_context.

<procedure>(calloc/context (int count) (int size) (int line) (string file) (string function))</procedure>

Implements al_calloc_with_context, with (free/context!) declared as a finalizer.

=== Memory Files

<procedure>(open-memfile* (c-pointer mem) (unsigned-integer size) (string mode))</procedure>

Implements al_open_memfile.

<procedure>(open-memfile (c-pointer mem) (unsigned-integer size) (string mode))</procedure>

Implements al_open_memfile, with (free&close-file!) declared as a finalizer.

<procedure>(memfile-version)</procedure>

Implements al_get_allegro_memfile_version.

=== Miscellaneous

<procedure>(combine-flags converter flags)</procedure>

For combining enum flags together, ie:

<enscript highlight="scheme">
(combine-flags display-flag->int '(windowed opengl resizable generate-expose-events))
</enscript>

<procedure>(make-id a b c d)</procedure>

Implements AL_ID.

<procedure>(run-main argc argv (function integer (integer (c-pointer c-string))))</procedure>

Implements al_run_main.

<procedure>(init-everything)</procedure>

Initializes all sub-systems.

<procedure>(init-symbol s)</procedure>

Initializes sub-systems by symbol-name. Valid symbols are: allegro, audio, font, image, joystick, keyboard, mouse, primitives, and ttf.

<procedure>(init-this arg)</procedure>

Initializes sub-systems either by a single symbol or by a list of symbols. Ie:

<enscript highlight="scheme">
(init-this (list 'allegro 'audio 'font 'image 'joystick 'keyboard 'mouse 'primitives 'ttf))
</enscript>

<procedure>(uninstall-everything)</procedure>

Attempts to uninitialize all loaded sub-systems.

<procedure>(uninstall-this arg)</procedure>

Attempts to uninitialize sub-systems by either a single symbol or by a list of symbols. Ie:

<enscript highlight="scheme">
(uninstall-this (list 'system 'audio 'font 'image 'joystick 'keyboard 'mouse 'primitives 'ttf))
</enscript>

