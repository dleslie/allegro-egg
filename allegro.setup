;;;; allegro.setup -*- Scheme -*-
(use posix srfi-13 make)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Config
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define compile-options "-O3 -C -O3")
(define link-options "")
(define extra-defines
  (if (version>=? (chicken-version) "4.7.0")
	  '(-Dimproved-64-bit-support)
	  '()))

(define (pkg-config lib-name)
  (let ((output (call-with-input-pipe (string-append "pkg-config --libs " lib-name) read-all)))
    (if (string-null? output)
	#f
	(string-delete (lambda (c) (char=? #\newline c)) output))))

(let* ((allegro-version (call-with-input-pipe "pkg-config --variable=version allegro-5.0" read-all))
       (allegro-version (if (string-null? allegro-version) #f
			    (string-delete (lambda (c) (char=? #\newline c)) allegro-version))))
  (when (or (version>=? "5.0.9" allegro-version)
	    (version>=? allegro-version "5.0.12"))
    (error (string-append "Allegro version " allegro-version " is not supported."))))

(let ((allegro (pkg-config "allegro-5.0")))
  (when allegro
	(set! link-options (string-append link-options " " allegro))))

(let ((primitives (pkg-config "allegro_primitives-5.0")))
  (when primitives
	(set! link-options (string-append link-options " " primitives))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-primitives)))))

(let ((color (pkg-config "allegro_color-5.0")))
  (when color
	(set! link-options (string-append link-options " " color))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-color)))))

(let ((dialog (pkg-config "allegro_dialog-5.0")))
  (when dialog
	(set! link-options (string-append link-options " " dialog))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-dialog)))))

(let ((main (pkg-config "allegro_main-5.0")))
  (when main
	(set! link-options (string-append link-options " " main))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-main)))))
  
(let ((physfs (pkg-config "allegro_physfs-5.0")))
  (when physfs
	(set! link-options (string-append link-options " " physfs))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-physfs)))))

(let ((font (pkg-config "allegro_font-5.0")))
  (when font
	(set! link-options (string-append link-options " " font))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-font)))))

(let ((ttf (pkg-config "allegro_ttf-5.0")))
  (when ttf
	(set! link-options (string-append link-options " " ttf))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-ttf)))))

(let ((audio (pkg-config "allegro_audio-5.0")))
  (when audio
	(set! link-options (string-append link-options " " audio))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-audio)))))

(let ((memfile (pkg-config "allegro_memfile-5.0")))
  (when memfile
	(set! link-options (string-append link-options " " memfile))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-memfile)))))

(let ((acodec (pkg-config "allegro_acodec-5.0")))
  (when acodec
	(set! link-options (string-append link-options " " acodec))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-acodec)))))

(let ((image (pkg-config "allegro_image-5.0")))
  (when image
	(set! link-options (string-append link-options " " image))
	(set! extra-defines (append extra-defines '(-Dhas-allegro-image)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compile
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-syntax build
  (syntax-rules ()
    ((build scm imp)
     (begin
       (compile -s -d1 scm ,link-options ,compile-options ,@extra-defines)
       (compile -s imp -d0 ,link-options ,compile-options ,@extra-defines)))))

(make
    (("allegro.import.so" ("acodec.scm" "altime.scm" "audio.scm" "allegro.scm" "base.scm" "bitmap_io.scm" "bitmap.scm" "color.scm" "config.scm" "constants.scm" "debug.scm" "direct3d.scm" "display.scm" "enums.scm" "error.scm" "events.scm" "file.scm" "fixed.scm" "fmaths.scm" "font.scm" "fshook.scm" "image.scm" "joystick.scm" "keyboard.scm" "memfile.scm" "memory.scm" "mouse.scm" "opengl.scm" "path.scm" "physfs.scm" "primitives.scm" "system.scm" "threads.scm" "timer.scm" "tls.scm" "transformations.scm" "ttf.scm" "types.scm" "utf8.scm" "windows.scm")
      (build allegro.scm allegro.import.scm))
     ("allegro-glext.import.so" ("allegro-glext.scm" "gl_ext_api.scm" "gl_ext_defs.scm")
      (build allegro-glext.scm allegro-glext.import.scm))
     ("allegro-c-util.import.so" ("allegro-c-util.scm")
      (build allegro-c-util.scm allegro-c-util.import.scm))
     ("all" ("allegro.import.so" "allegro-glext.import.so" "allegro-c-util.import.so")
      (lambda () (display "Building of Allegro completed"))))
  "all")

(install-extension
 'allegro
 '("allegro.so" "allegro.import.so" "allegro-glext.so" "allegro-glext.import.so" "allegro-c-util.so" "allegro-c-util.import.so")
 '((version 2.4.6)))
