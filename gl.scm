
;;; GENERATED BY CHICKEN-BIND FROM -

(begin
  (define-constant gl::version-1-1 1)
  (define gl::version-1-1 gl::version-1-1)
  (define-constant gl::accum 256)
  (define gl::accum gl::accum)
  (define-constant gl::load 257)
  (define gl::load gl::load)
  (define-constant gl::return 258)
  (define gl::return gl::return)
  (define-constant gl::mult 259)
  (define gl::mult gl::mult)
  (define-constant gl::add 260)
  (define gl::add gl::add)
  (define-constant gl::never 512)
  (define gl::never gl::never)
  (define-constant gl::less 513)
  (define gl::less gl::less)
  (define-constant gl::equal 514)
  (define gl::equal gl::equal)
  (define-constant gl::lequal 515)
  (define gl::lequal gl::lequal)
  (define-constant gl::greater 516)
  (define gl::greater gl::greater)
  (define-constant gl::notequal 517)
  (define gl::notequal gl::notequal)
  (define-constant gl::gequal 518)
  (define gl::gequal gl::gequal)
  (define-constant gl::always 519)
  (define gl::always gl::always)
  (define-constant gl::current-bit 1)
  (define gl::current-bit gl::current-bit)
  (define-constant gl::point-bit 2)
  (define gl::point-bit gl::point-bit)
  (define-constant gl::line-bit 4)
  (define gl::line-bit gl::line-bit)
  (define-constant gl::polygon-bit 8)
  (define gl::polygon-bit gl::polygon-bit)
  (define-constant gl::polygon-stipple-bit 16)
  (define gl::polygon-stipple-bit gl::polygon-stipple-bit)
  (define-constant gl::pixel-mode-bit 32)
  (define gl::pixel-mode-bit gl::pixel-mode-bit)
  (define-constant gl::lighting-bit 64)
  (define gl::lighting-bit gl::lighting-bit)
  (define-constant gl::fog-bit 128)
  (define gl::fog-bit gl::fog-bit)
  (define-constant gl::depth-buffer-bit 256)
  (define gl::depth-buffer-bit gl::depth-buffer-bit)
  (define-constant gl::accum-buffer-bit 512)
  (define gl::accum-buffer-bit gl::accum-buffer-bit)
  (define-constant gl::stencil-buffer-bit 1024)
  (define gl::stencil-buffer-bit gl::stencil-buffer-bit)
  (define-constant gl::viewport-bit 2048)
  (define gl::viewport-bit gl::viewport-bit)
  (define-constant gl::transform-bit 4096)
  (define gl::transform-bit gl::transform-bit)
  (define-constant gl::enable-bit 8192)
  (define gl::enable-bit gl::enable-bit)
  (define-constant gl::color-buffer-bit 16384)
  (define gl::color-buffer-bit gl::color-buffer-bit)
  (define-constant gl::hint-bit 32768)
  (define gl::hint-bit gl::hint-bit)
  (define-constant gl::eval-bit 65536)
  (define gl::eval-bit gl::eval-bit)
  (define-constant gl::list-bit 131072)
  (define gl::list-bit gl::list-bit)
  (define-constant gl::texture-bit 262144)
  (define gl::texture-bit gl::texture-bit)
  (define-constant gl::scissor-bit 524288)
  (define gl::scissor-bit gl::scissor-bit)
  (define-constant gl::all-attrib-bits 1048575)
  (define gl::all-attrib-bits gl::all-attrib-bits)
  (define-constant gl::points 0)
  (define gl::points gl::points)
  (define-constant gl::lines 1)
  (define gl::lines gl::lines)
  (define-constant gl::line-loop 2)
  (define gl::line-loop gl::line-loop)
  (define-constant gl::line-strip 3)
  (define gl::line-strip gl::line-strip)
  (define-constant gl::triangles 4)
  (define gl::triangles gl::triangles)
  (define-constant gl::triangle-strip 5)
  (define gl::triangle-strip gl::triangle-strip)
  (define-constant gl::triangle-fan 6)
  (define gl::triangle-fan gl::triangle-fan)
  (define-constant gl::quads 7)
  (define gl::quads gl::quads)
  (define-constant gl::quad-strip 8)
  (define gl::quad-strip gl::quad-strip)
  (define-constant gl::polygon 9)
  (define gl::polygon gl::polygon)
  (define-constant gl::zero 0)
  (define gl::zero gl::zero)
  (define-constant gl::one 1)
  (define gl::one gl::one)
  (define-constant gl::src-color 768)
  (define gl::src-color gl::src-color)
  (define-constant gl::one-minus-src-color 769)
  (define gl::one-minus-src-color gl::one-minus-src-color)
  (define-constant gl::src-alpha 770)
  (define gl::src-alpha gl::src-alpha)
  (define-constant gl::one-minus-src-alpha 771)
  (define gl::one-minus-src-alpha gl::one-minus-src-alpha)
  (define-constant gl::dst-alpha 772)
  (define gl::dst-alpha gl::dst-alpha)
  (define-constant gl::one-minus-dst-alpha 773)
  (define gl::one-minus-dst-alpha gl::one-minus-dst-alpha)
  (define-constant gl::dst-color 774)
  (define gl::dst-color gl::dst-color)
  (define-constant gl::one-minus-dst-color 775)
  (define gl::one-minus-dst-color gl::one-minus-dst-color)
  (define-constant gl::src-alpha-saturate 776)
  (define gl::src-alpha-saturate gl::src-alpha-saturate)
  (define-constant gl::true 1)
  (define gl::true gl::true)
  (define-constant gl::false 0)
  (define gl::false gl::false)
  (define-constant gl::clip-plane0 12288)
  (define gl::clip-plane0 gl::clip-plane0)
  (define-constant gl::clip-plane1 12289)
  (define gl::clip-plane1 gl::clip-plane1)
  (define-constant gl::clip-plane2 12290)
  (define gl::clip-plane2 gl::clip-plane2)
  (define-constant gl::clip-plane3 12291)
  (define gl::clip-plane3 gl::clip-plane3)
  (define-constant gl::clip-plane4 12292)
  (define gl::clip-plane4 gl::clip-plane4)
  (define-constant gl::clip-plane5 12293)
  (define gl::clip-plane5 gl::clip-plane5)
  (define-constant gl::byte 5120)
  (define gl::byte gl::byte)
  (define-constant gl::unsigned-byte 5121)
  (define gl::unsigned-byte gl::unsigned-byte)
  (define-constant gl::short 5122)
  (define gl::short gl::short)
  (define-constant gl::unsigned-short 5123)
  (define gl::unsigned-short gl::unsigned-short)
  (define-constant gl::int 5124)
  (define gl::int gl::int)
  (define-constant gl::unsigned-int 5125)
  (define gl::unsigned-int gl::unsigned-int)
  (define-constant gl::float 5126)
  (define gl::float gl::float)
  (define-constant gl::2-bytes 5127)
  (define gl::2-bytes gl::2-bytes)
  (define-constant gl::3-bytes 5128)
  (define gl::3-bytes gl::3-bytes)
  (define-constant gl::4-bytes 5129)
  (define gl::4-bytes gl::4-bytes)
  (define-constant gl::double 5130)
  (define gl::double gl::double)
  (define-constant gl::none 0)
  (define gl::none gl::none)
  (define-constant gl::front-left 1024)
  (define gl::front-left gl::front-left)
  (define-constant gl::front-right 1025)
  (define gl::front-right gl::front-right)
  (define-constant gl::back-left 1026)
  (define gl::back-left gl::back-left)
  (define-constant gl::back-right 1027)
  (define gl::back-right gl::back-right)
  (define-constant gl::front 1028)
  (define gl::front gl::front)
  (define-constant gl::back 1029)
  (define gl::back gl::back)
  (define-constant gl::left 1030)
  (define gl::left gl::left)
  (define-constant gl::right 1031)
  (define gl::right gl::right)
  (define-constant gl::front-and-back 1032)
  (define gl::front-and-back gl::front-and-back)
  (define-constant gl::aux0 1033)
  (define gl::aux0 gl::aux0)
  (define-constant gl::aux1 1034)
  (define gl::aux1 gl::aux1)
  (define-constant gl::aux2 1035)
  (define gl::aux2 gl::aux2)
  (define-constant gl::aux3 1036)
  (define gl::aux3 gl::aux3)
  (define-constant gl::no-error 0)
  (define gl::no-error gl::no-error)
  (define-constant gl::invalid-enum 1280)
  (define gl::invalid-enum gl::invalid-enum)
  (define-constant gl::invalid-value 1281)
  (define gl::invalid-value gl::invalid-value)
  (define-constant gl::invalid-operation 1282)
  (define gl::invalid-operation gl::invalid-operation)
  (define-constant gl::stack-overflow 1283)
  (define gl::stack-overflow gl::stack-overflow)
  (define-constant gl::stack-underflow 1284)
  (define gl::stack-underflow gl::stack-underflow)
  (define-constant gl::out-of-memory 1285)
  (define gl::out-of-memory gl::out-of-memory)
  (define-constant gl::2d 1536)
  (define gl::2d gl::2d)
  (define-constant gl::3d 1537)
  (define gl::3d gl::3d)
  (define-constant gl::3d-color 1538)
  (define gl::3d-color gl::3d-color)
  (define-constant gl::3d-color-texture 1539)
  (define gl::3d-color-texture gl::3d-color-texture)
  (define-constant gl::4d-color-texture 1540)
  (define gl::4d-color-texture gl::4d-color-texture)
  (define-constant gl::pass-through-token 1792)
  (define gl::pass-through-token gl::pass-through-token)
  (define-constant gl::point-token 1793)
  (define gl::point-token gl::point-token)
  (define-constant gl::line-token 1794)
  (define gl::line-token gl::line-token)
  (define-constant gl::polygon-token 1795)
  (define gl::polygon-token gl::polygon-token)
  (define-constant gl::bitmap-token 1796)
  (define gl::bitmap-token gl::bitmap-token)
  (define-constant gl::draw-pixel-token 1797)
  (define gl::draw-pixel-token gl::draw-pixel-token)
  (define-constant gl::copy-pixel-token 1798)
  (define gl::copy-pixel-token gl::copy-pixel-token)
  (define-constant gl::line-reset-token 1799)
  (define gl::line-reset-token gl::line-reset-token)
  (define-constant gl::exp 2048)
  (define gl::exp gl::exp)
  (define-constant gl::exp2 2049)
  (define gl::exp2 gl::exp2)
  (define-constant gl::cw 2304)
  (define gl::cw gl::cw)
  (define-constant gl::ccw 2305)
  (define gl::ccw gl::ccw)
  (define-constant gl::coeff 2560)
  (define gl::coeff gl::coeff)
  (define-constant gl::order 2561)
  (define gl::order gl::order)
  (define-constant gl::domain 2562)
  (define gl::domain gl::domain)
  (define-constant gl::current-color 2816)
  (define gl::current-color gl::current-color)
  (define-constant gl::current-index 2817)
  (define gl::current-index gl::current-index)
  (define-constant gl::current-normal 2818)
  (define gl::current-normal gl::current-normal)
  (define-constant gl::current-texture-coords 2819)
  (define gl::current-texture-coords gl::current-texture-coords)
  (define-constant gl::current-raster-color 2820)
  (define gl::current-raster-color gl::current-raster-color)
  (define-constant gl::current-raster-index 2821)
  (define gl::current-raster-index gl::current-raster-index)
  (define-constant gl::current-raster-texture-coords 2822)
  (define gl::current-raster-texture-coords gl::current-raster-texture-coords)
  (define-constant gl::current-raster-position 2823)
  (define gl::current-raster-position gl::current-raster-position)
  (define-constant gl::current-raster-position-valid 2824)
  (define gl::current-raster-position-valid gl::current-raster-position-valid)
  (define-constant gl::current-raster-distance 2825)
  (define gl::current-raster-distance gl::current-raster-distance)
  (define-constant gl::point-smooth 2832)
  (define gl::point-smooth gl::point-smooth)
  (define-constant gl::point-size 2833)
  (define gl::point-size gl::point-size)
  (define-constant gl::point-size-range 2834)
  (define gl::point-size-range gl::point-size-range)
  (define-constant gl::point-size-granularity 2835)
  (define gl::point-size-granularity gl::point-size-granularity)
  (define-constant gl::line-smooth 2848)
  (define gl::line-smooth gl::line-smooth)
  (define-constant gl::line-width 2849)
  (define gl::line-width gl::line-width)
  (define-constant gl::line-width-range 2850)
  (define gl::line-width-range gl::line-width-range)
  (define-constant gl::line-width-granularity 2851)
  (define gl::line-width-granularity gl::line-width-granularity)
  (define-constant gl::line-stipple 2852)
  (define gl::line-stipple gl::line-stipple)
  (define-constant gl::line-stipple-pattern 2853)
  (define gl::line-stipple-pattern gl::line-stipple-pattern)
  (define-constant gl::line-stipple-repeat 2854)
  (define gl::line-stipple-repeat gl::line-stipple-repeat)
  (define-constant gl::list-mode 2864)
  (define gl::list-mode gl::list-mode)
  (define-constant gl::max-list-nesting 2865)
  (define gl::max-list-nesting gl::max-list-nesting)
  (define-constant gl::list-base 2866)
  (define gl::list-base gl::list-base)
  (define-constant gl::list-index 2867)
  (define gl::list-index gl::list-index)
  (define-constant gl::polygon-mode 2880)
  (define gl::polygon-mode gl::polygon-mode)
  (define-constant gl::polygon-smooth 2881)
  (define gl::polygon-smooth gl::polygon-smooth)
  (define-constant gl::polygon-stipple 2882)
  (define gl::polygon-stipple gl::polygon-stipple)
  (define-constant gl::edge-flag 2883)
  (define gl::edge-flag gl::edge-flag)
  (define-constant gl::cull-face 2884)
  (define gl::cull-face gl::cull-face)
  (define-constant gl::cull-face-mode 2885)
  (define gl::cull-face-mode gl::cull-face-mode)
  (define-constant gl::front-face 2886)
  (define gl::front-face gl::front-face)
  (define-constant gl::lighting 2896)
  (define gl::lighting gl::lighting)
  (define-constant gl::light-model-local-viewer 2897)
  (define gl::light-model-local-viewer gl::light-model-local-viewer)
  (define-constant gl::light-model-two-side 2898)
  (define gl::light-model-two-side gl::light-model-two-side)
  (define-constant gl::light-model-ambient 2899)
  (define gl::light-model-ambient gl::light-model-ambient)
  (define-constant gl::shade-model 2900)
  (define gl::shade-model gl::shade-model)
  (define-constant gl::color-material-face 2901)
  (define gl::color-material-face gl::color-material-face)
  (define-constant gl::color-material-parameter 2902)
  (define gl::color-material-parameter gl::color-material-parameter)
  (define-constant gl::color-material 2903)
  (define gl::color-material gl::color-material)
  (define-constant gl::fog 2912)
  (define gl::fog gl::fog)
  (define-constant gl::fog-index 2913)
  (define gl::fog-index gl::fog-index)
  (define-constant gl::fog-density 2914)
  (define gl::fog-density gl::fog-density)
  (define-constant gl::fog-start 2915)
  (define gl::fog-start gl::fog-start)
  (define-constant gl::fog-end 2916)
  (define gl::fog-end gl::fog-end)
  (define-constant gl::fog-mode 2917)
  (define gl::fog-mode gl::fog-mode)
  (define-constant gl::fog-color 2918)
  (define gl::fog-color gl::fog-color)
  (define-constant gl::depth-range 2928)
  (define gl::depth-range gl::depth-range)
  (define-constant gl::depth-test 2929)
  (define gl::depth-test gl::depth-test)
  (define-constant gl::depth-writemask 2930)
  (define gl::depth-writemask gl::depth-writemask)
  (define-constant gl::depth-clear-value 2931)
  (define gl::depth-clear-value gl::depth-clear-value)
  (define-constant gl::depth-func 2932)
  (define gl::depth-func gl::depth-func)
  (define-constant gl::accum-clear-value 2944)
  (define gl::accum-clear-value gl::accum-clear-value)
  (define-constant gl::stencil-test 2960)
  (define gl::stencil-test gl::stencil-test)
  (define-constant gl::stencil-clear-value 2961)
  (define gl::stencil-clear-value gl::stencil-clear-value)
  (define-constant gl::stencil-func 2962)
  (define gl::stencil-func gl::stencil-func)
  (define-constant gl::stencil-value-mask 2963)
  (define gl::stencil-value-mask gl::stencil-value-mask)
  (define-constant gl::stencil-fail 2964)
  (define gl::stencil-fail gl::stencil-fail)
  (define-constant gl::stencil-pass-depth-fail 2965)
  (define gl::stencil-pass-depth-fail gl::stencil-pass-depth-fail)
  (define-constant gl::stencil-pass-depth-pass 2966)
  (define gl::stencil-pass-depth-pass gl::stencil-pass-depth-pass)
  (define-constant gl::stencil-ref 2967)
  (define gl::stencil-ref gl::stencil-ref)
  (define-constant gl::stencil-writemask 2968)
  (define gl::stencil-writemask gl::stencil-writemask)
  (define-constant gl::matrix-mode 2976)
  (define gl::matrix-mode gl::matrix-mode)
  (define-constant gl::normalize 2977)
  (define gl::normalize gl::normalize)
  (define-constant gl::viewport 2978)
  (define gl::viewport gl::viewport)
  (define-constant gl::modelview-stack-depth 2979)
  (define gl::modelview-stack-depth gl::modelview-stack-depth)
  (define-constant gl::projection-stack-depth 2980)
  (define gl::projection-stack-depth gl::projection-stack-depth)
  (define-constant gl::texture-stack-depth 2981)
  (define gl::texture-stack-depth gl::texture-stack-depth)
  (define-constant gl::modelview-matrix 2982)
  (define gl::modelview-matrix gl::modelview-matrix)
  (define-constant gl::projection-matrix 2983)
  (define gl::projection-matrix gl::projection-matrix)
  (define-constant gl::texture-matrix 2984)
  (define gl::texture-matrix gl::texture-matrix)
  (define-constant gl::attrib-stack-depth 2992)
  (define gl::attrib-stack-depth gl::attrib-stack-depth)
  (define-constant gl::client-attrib-stack-depth 2993)
  (define gl::client-attrib-stack-depth gl::client-attrib-stack-depth)
  (define-constant gl::alpha-test 3008)
  (define gl::alpha-test gl::alpha-test)
  (define-constant gl::alpha-test-func 3009)
  (define gl::alpha-test-func gl::alpha-test-func)
  (define-constant gl::alpha-test-ref 3010)
  (define gl::alpha-test-ref gl::alpha-test-ref)
  (define-constant gl::dither 3024)
  (define gl::dither gl::dither)
  (define-constant gl::blend-dst 3040)
  (define gl::blend-dst gl::blend-dst)
  (define-constant gl::blend-src 3041)
  (define gl::blend-src gl::blend-src)
  (define-constant gl::blend 3042)
  (define gl::blend gl::blend)
  (define-constant gl::logic-op-mode 3056)
  (define gl::logic-op-mode gl::logic-op-mode)
  (define-constant gl::index-logic-op 3057)
  (define gl::index-logic-op gl::index-logic-op)
  (define-constant gl::color-logic-op 3058)
  (define gl::color-logic-op gl::color-logic-op)
  (define-constant gl::aux-buffers 3072)
  (define gl::aux-buffers gl::aux-buffers)
  (define-constant gl::draw-buffer 3073)
  (define gl::draw-buffer gl::draw-buffer)
  (define-constant gl::read-buffer 3074)
  (define gl::read-buffer gl::read-buffer)
  (define-constant gl::scissor-box 3088)
  (define gl::scissor-box gl::scissor-box)
  (define-constant gl::scissor-test 3089)
  (define gl::scissor-test gl::scissor-test)
  (define-constant gl::index-clear-value 3104)
  (define gl::index-clear-value gl::index-clear-value)
  (define-constant gl::index-writemask 3105)
  (define gl::index-writemask gl::index-writemask)
  (define-constant gl::color-clear-value 3106)
  (define gl::color-clear-value gl::color-clear-value)
  (define-constant gl::color-writemask 3107)
  (define gl::color-writemask gl::color-writemask)
  (define-constant gl::index-mode 3120)
  (define gl::index-mode gl::index-mode)
  (define-constant gl::rgba-mode 3121)
  (define gl::rgba-mode gl::rgba-mode)
  (define-constant gl::doublebuffer 3122)
  (define gl::doublebuffer gl::doublebuffer)
  (define-constant gl::stereo 3123)
  (define gl::stereo gl::stereo)
  (define-constant gl::render-mode 3136)
  (define gl::render-mode gl::render-mode)
  (define-constant gl::perspective-correction-hint 3152)
  (define gl::perspective-correction-hint gl::perspective-correction-hint)
  (define-constant gl::point-smooth-hint 3153)
  (define gl::point-smooth-hint gl::point-smooth-hint)
  (define-constant gl::line-smooth-hint 3154)
  (define gl::line-smooth-hint gl::line-smooth-hint)
  (define-constant gl::polygon-smooth-hint 3155)
  (define gl::polygon-smooth-hint gl::polygon-smooth-hint)
  (define-constant gl::fog-hint 3156)
  (define gl::fog-hint gl::fog-hint)
  (define-constant gl::texture-gen-s 3168)
  (define gl::texture-gen-s gl::texture-gen-s)
  (define-constant gl::texture-gen-t 3169)
  (define gl::texture-gen-t gl::texture-gen-t)
  (define-constant gl::texture-gen-r 3170)
  (define gl::texture-gen-r gl::texture-gen-r)
  (define-constant gl::texture-gen-q 3171)
  (define gl::texture-gen-q gl::texture-gen-q)
  (define-constant gl::pixel-map-i-to-i 3184)
  (define gl::pixel-map-i-to-i gl::pixel-map-i-to-i)
  (define-constant gl::pixel-map-s-to-s 3185)
  (define gl::pixel-map-s-to-s gl::pixel-map-s-to-s)
  (define-constant gl::pixel-map-i-to-r 3186)
  (define gl::pixel-map-i-to-r gl::pixel-map-i-to-r)
  (define-constant gl::pixel-map-i-to-g 3187)
  (define gl::pixel-map-i-to-g gl::pixel-map-i-to-g)
  (define-constant gl::pixel-map-i-to-b 3188)
  (define gl::pixel-map-i-to-b gl::pixel-map-i-to-b)
  (define-constant gl::pixel-map-i-to-a 3189)
  (define gl::pixel-map-i-to-a gl::pixel-map-i-to-a)
  (define-constant gl::pixel-map-r-to-r 3190)
  (define gl::pixel-map-r-to-r gl::pixel-map-r-to-r)
  (define-constant gl::pixel-map-g-to-g 3191)
  (define gl::pixel-map-g-to-g gl::pixel-map-g-to-g)
  (define-constant gl::pixel-map-b-to-b 3192)
  (define gl::pixel-map-b-to-b gl::pixel-map-b-to-b)
  (define-constant gl::pixel-map-a-to-a 3193)
  (define gl::pixel-map-a-to-a gl::pixel-map-a-to-a)
  (define-constant gl::pixel-map-i-to-i-size 3248)
  (define gl::pixel-map-i-to-i-size gl::pixel-map-i-to-i-size)
  (define-constant gl::pixel-map-s-to-s-size 3249)
  (define gl::pixel-map-s-to-s-size gl::pixel-map-s-to-s-size)
  (define-constant gl::pixel-map-i-to-r-size 3250)
  (define gl::pixel-map-i-to-r-size gl::pixel-map-i-to-r-size)
  (define-constant gl::pixel-map-i-to-g-size 3251)
  (define gl::pixel-map-i-to-g-size gl::pixel-map-i-to-g-size)
  (define-constant gl::pixel-map-i-to-b-size 3252)
  (define gl::pixel-map-i-to-b-size gl::pixel-map-i-to-b-size)
  (define-constant gl::pixel-map-i-to-a-size 3253)
  (define gl::pixel-map-i-to-a-size gl::pixel-map-i-to-a-size)
  (define-constant gl::pixel-map-r-to-r-size 3254)
  (define gl::pixel-map-r-to-r-size gl::pixel-map-r-to-r-size)
  (define-constant gl::pixel-map-g-to-g-size 3255)
  (define gl::pixel-map-g-to-g-size gl::pixel-map-g-to-g-size)
  (define-constant gl::pixel-map-b-to-b-size 3256)
  (define gl::pixel-map-b-to-b-size gl::pixel-map-b-to-b-size)
  (define-constant gl::pixel-map-a-to-a-size 3257)
  (define gl::pixel-map-a-to-a-size gl::pixel-map-a-to-a-size)
  (define-constant gl::unpack-swap-bytes 3312)
  (define gl::unpack-swap-bytes gl::unpack-swap-bytes)
  (define-constant gl::unpack-lsb-first 3313)
  (define gl::unpack-lsb-first gl::unpack-lsb-first)
  (define-constant gl::unpack-row-length 3314)
  (define gl::unpack-row-length gl::unpack-row-length)
  (define-constant gl::unpack-skip-rows 3315)
  (define gl::unpack-skip-rows gl::unpack-skip-rows)
  (define-constant gl::unpack-skip-pixels 3316)
  (define gl::unpack-skip-pixels gl::unpack-skip-pixels)
  (define-constant gl::unpack-alignment 3317)
  (define gl::unpack-alignment gl::unpack-alignment)
  (define-constant gl::pack-swap-bytes 3328)
  (define gl::pack-swap-bytes gl::pack-swap-bytes)
  (define-constant gl::pack-lsb-first 3329)
  (define gl::pack-lsb-first gl::pack-lsb-first)
  (define-constant gl::pack-row-length 3330)
  (define gl::pack-row-length gl::pack-row-length)
  (define-constant gl::pack-skip-rows 3331)
  (define gl::pack-skip-rows gl::pack-skip-rows)
  (define-constant gl::pack-skip-pixels 3332)
  (define gl::pack-skip-pixels gl::pack-skip-pixels)
  (define-constant gl::pack-alignment 3333)
  (define gl::pack-alignment gl::pack-alignment)
  (define-constant gl::map-color 3344)
  (define gl::map-color gl::map-color)
  (define-constant gl::map-stencil 3345)
  (define gl::map-stencil gl::map-stencil)
  (define-constant gl::index-shift 3346)
  (define gl::index-shift gl::index-shift)
  (define-constant gl::index-offset 3347)
  (define gl::index-offset gl::index-offset)
  (define-constant gl::red-scale 3348)
  (define gl::red-scale gl::red-scale)
  (define-constant gl::red-bias 3349)
  (define gl::red-bias gl::red-bias)
  (define-constant gl::zoom-x 3350)
  (define gl::zoom-x gl::zoom-x)
  (define-constant gl::zoom-y 3351)
  (define gl::zoom-y gl::zoom-y)
  (define-constant gl::green-scale 3352)
  (define gl::green-scale gl::green-scale)
  (define-constant gl::green-bias 3353)
  (define gl::green-bias gl::green-bias)
  (define-constant gl::blue-scale 3354)
  (define gl::blue-scale gl::blue-scale)
  (define-constant gl::blue-bias 3355)
  (define gl::blue-bias gl::blue-bias)
  (define-constant gl::alpha-scale 3356)
  (define gl::alpha-scale gl::alpha-scale)
  (define-constant gl::alpha-bias 3357)
  (define gl::alpha-bias gl::alpha-bias)
  (define-constant gl::depth-scale 3358)
  (define gl::depth-scale gl::depth-scale)
  (define-constant gl::depth-bias 3359)
  (define gl::depth-bias gl::depth-bias)
  (define-constant gl::max-eval-order 3376)
  (define gl::max-eval-order gl::max-eval-order)
  (define-constant gl::max-lights 3377)
  (define gl::max-lights gl::max-lights)
  (define-constant gl::max-clip-planes 3378)
  (define gl::max-clip-planes gl::max-clip-planes)
  (define-constant gl::max-texture-size 3379)
  (define gl::max-texture-size gl::max-texture-size)
  (define-constant gl::max-pixel-map-table 3380)
  (define gl::max-pixel-map-table gl::max-pixel-map-table)
  (define-constant gl::max-attrib-stack-depth 3381)
  (define gl::max-attrib-stack-depth gl::max-attrib-stack-depth)
  (define-constant gl::max-modelview-stack-depth 3382)
  (define gl::max-modelview-stack-depth gl::max-modelview-stack-depth)
  (define-constant gl::max-name-stack-depth 3383)
  (define gl::max-name-stack-depth gl::max-name-stack-depth)
  (define-constant gl::max-projection-stack-depth 3384)
  (define gl::max-projection-stack-depth gl::max-projection-stack-depth)
  (define-constant gl::max-texture-stack-depth 3385)
  (define gl::max-texture-stack-depth gl::max-texture-stack-depth)
  (define-constant gl::max-viewport-dims 3386)
  (define gl::max-viewport-dims gl::max-viewport-dims)
  (define-constant gl::max-client-attrib-stack-depth 3387)
  (define gl::max-client-attrib-stack-depth gl::max-client-attrib-stack-depth)
  (define-constant gl::subpixel-bits 3408)
  (define gl::subpixel-bits gl::subpixel-bits)
  (define-constant gl::index-bits 3409)
  (define gl::index-bits gl::index-bits)
  (define-constant gl::red-bits 3410)
  (define gl::red-bits gl::red-bits)
  (define-constant gl::green-bits 3411)
  (define gl::green-bits gl::green-bits)
  (define-constant gl::blue-bits 3412)
  (define gl::blue-bits gl::blue-bits)
  (define-constant gl::alpha-bits 3413)
  (define gl::alpha-bits gl::alpha-bits)
  (define-constant gl::depth-bits 3414)
  (define gl::depth-bits gl::depth-bits)
  (define-constant gl::stencil-bits 3415)
  (define gl::stencil-bits gl::stencil-bits)
  (define-constant gl::accum-red-bits 3416)
  (define gl::accum-red-bits gl::accum-red-bits)
  (define-constant gl::accum-green-bits 3417)
  (define gl::accum-green-bits gl::accum-green-bits)
  (define-constant gl::accum-blue-bits 3418)
  (define gl::accum-blue-bits gl::accum-blue-bits)
  (define-constant gl::accum-alpha-bits 3419)
  (define gl::accum-alpha-bits gl::accum-alpha-bits)
  (define-constant gl::name-stack-depth 3440)
  (define gl::name-stack-depth gl::name-stack-depth)
  (define-constant gl::auto-normal 3456)
  (define gl::auto-normal gl::auto-normal)
  (define-constant gl::map1-color-4 3472)
  (define gl::map1-color-4 gl::map1-color-4)
  (define-constant gl::map1-index 3473)
  (define gl::map1-index gl::map1-index)
  (define-constant gl::map1-normal 3474)
  (define gl::map1-normal gl::map1-normal)
  (define-constant gl::map1-texture-coord-1 3475)
  (define gl::map1-texture-coord-1 gl::map1-texture-coord-1)
  (define-constant gl::map1-texture-coord-2 3476)
  (define gl::map1-texture-coord-2 gl::map1-texture-coord-2)
  (define-constant gl::map1-texture-coord-3 3477)
  (define gl::map1-texture-coord-3 gl::map1-texture-coord-3)
  (define-constant gl::map1-texture-coord-4 3478)
  (define gl::map1-texture-coord-4 gl::map1-texture-coord-4)
  (define-constant gl::map1-vertex-3 3479)
  (define gl::map1-vertex-3 gl::map1-vertex-3)
  (define-constant gl::map1-vertex-4 3480)
  (define gl::map1-vertex-4 gl::map1-vertex-4)
  (define-constant gl::map2-color-4 3504)
  (define gl::map2-color-4 gl::map2-color-4)
  (define-constant gl::map2-index 3505)
  (define gl::map2-index gl::map2-index)
  (define-constant gl::map2-normal 3506)
  (define gl::map2-normal gl::map2-normal)
  (define-constant gl::map2-texture-coord-1 3507)
  (define gl::map2-texture-coord-1 gl::map2-texture-coord-1)
  (define-constant gl::map2-texture-coord-2 3508)
  (define gl::map2-texture-coord-2 gl::map2-texture-coord-2)
  (define-constant gl::map2-texture-coord-3 3509)
  (define gl::map2-texture-coord-3 gl::map2-texture-coord-3)
  (define-constant gl::map2-texture-coord-4 3510)
  (define gl::map2-texture-coord-4 gl::map2-texture-coord-4)
  (define-constant gl::map2-vertex-3 3511)
  (define gl::map2-vertex-3 gl::map2-vertex-3)
  (define-constant gl::map2-vertex-4 3512)
  (define gl::map2-vertex-4 gl::map2-vertex-4)
  (define-constant gl::map1-grid-domain 3536)
  (define gl::map1-grid-domain gl::map1-grid-domain)
  (define-constant gl::map1-grid-segments 3537)
  (define gl::map1-grid-segments gl::map1-grid-segments)
  (define-constant gl::map2-grid-domain 3538)
  (define gl::map2-grid-domain gl::map2-grid-domain)
  (define-constant gl::map2-grid-segments 3539)
  (define gl::map2-grid-segments gl::map2-grid-segments)
  (define-constant gl::texture-1d 3552)
  (define gl::texture-1d gl::texture-1d)
  (define-constant gl::texture-2d 3553)
  (define gl::texture-2d gl::texture-2d)
  (define-constant gl::feedback-buffer-pointer 3568)
  (define gl::feedback-buffer-pointer gl::feedback-buffer-pointer)
  (define-constant gl::feedback-buffer-size 3569)
  (define gl::feedback-buffer-size gl::feedback-buffer-size)
  (define-constant gl::feedback-buffer-type 3570)
  (define gl::feedback-buffer-type gl::feedback-buffer-type)
  (define-constant gl::selection-buffer-pointer 3571)
  (define gl::selection-buffer-pointer gl::selection-buffer-pointer)
  (define-constant gl::selection-buffer-size 3572)
  (define gl::selection-buffer-size gl::selection-buffer-size)
  (define-constant gl::texture-width 4096)
  (define gl::texture-width gl::texture-width)
  (define-constant gl::texture-height 4097)
  (define gl::texture-height gl::texture-height)
  (define-constant gl::texture-internal-format 4099)
  (define gl::texture-internal-format gl::texture-internal-format)
  (define-constant gl::texture-border-color 4100)
  (define gl::texture-border-color gl::texture-border-color)
  (define-constant gl::texture-border 4101)
  (define gl::texture-border gl::texture-border)
  (define-constant gl::dont-care 4352)
  (define gl::dont-care gl::dont-care)
  (define-constant gl::fastest 4353)
  (define gl::fastest gl::fastest)
  (define-constant gl::nicest 4354)
  (define gl::nicest gl::nicest)
  (define-constant gl::light0 16384)
  (define gl::light0 gl::light0)
  (define-constant gl::light1 16385)
  (define gl::light1 gl::light1)
  (define-constant gl::light2 16386)
  (define gl::light2 gl::light2)
  (define-constant gl::light3 16387)
  (define gl::light3 gl::light3)
  (define-constant gl::light4 16388)
  (define gl::light4 gl::light4)
  (define-constant gl::light5 16389)
  (define gl::light5 gl::light5)
  (define-constant gl::light6 16390)
  (define gl::light6 gl::light6)
  (define-constant gl::light7 16391)
  (define gl::light7 gl::light7)
  (define-constant gl::ambient 4608)
  (define gl::ambient gl::ambient)
  (define-constant gl::diffuse 4609)
  (define gl::diffuse gl::diffuse)
  (define-constant gl::specular 4610)
  (define gl::specular gl::specular)
  (define-constant gl::position 4611)
  (define gl::position gl::position)
  (define-constant gl::spot-direction 4612)
  (define gl::spot-direction gl::spot-direction)
  (define-constant gl::spot-exponent 4613)
  (define gl::spot-exponent gl::spot-exponent)
  (define-constant gl::spot-cutoff 4614)
  (define gl::spot-cutoff gl::spot-cutoff)
  (define-constant gl::constant-attenuation 4615)
  (define gl::constant-attenuation gl::constant-attenuation)
  (define-constant gl::linear-attenuation 4616)
  (define gl::linear-attenuation gl::linear-attenuation)
  (define-constant gl::quadratic-attenuation 4617)
  (define gl::quadratic-attenuation gl::quadratic-attenuation)
  (define-constant gl::compile 4864)
  (define gl::compile gl::compile)
  (define-constant gl::compile-and-execute 4865)
  (define gl::compile-and-execute gl::compile-and-execute)
  (define-constant gl::clear 5376)
  (define gl::clear gl::clear)
  (define-constant gl::and 5377)
  (define gl::and gl::and)
  (define-constant gl::and-reverse 5378)
  (define gl::and-reverse gl::and-reverse)
  (define-constant gl::copy 5379)
  (define gl::copy gl::copy)
  (define-constant gl::and-inverted 5380)
  (define gl::and-inverted gl::and-inverted)
  (define-constant gl::noop 5381)
  (define gl::noop gl::noop)
  (define-constant gl::xor 5382)
  (define gl::xor gl::xor)
  (define-constant gl::or 5383)
  (define gl::or gl::or)
  (define-constant gl::nor 5384)
  (define gl::nor gl::nor)
  (define-constant gl::equiv 5385)
  (define gl::equiv gl::equiv)
  (define-constant gl::invert 5386)
  (define gl::invert gl::invert)
  (define-constant gl::or-reverse 5387)
  (define gl::or-reverse gl::or-reverse)
  (define-constant gl::copy-inverted 5388)
  (define gl::copy-inverted gl::copy-inverted)
  (define-constant gl::or-inverted 5389)
  (define gl::or-inverted gl::or-inverted)
  (define-constant gl::nand 5390)
  (define gl::nand gl::nand)
  (define-constant gl::set 5391)
  (define gl::set gl::set)
  (define-constant gl::emission 5632)
  (define gl::emission gl::emission)
  (define-constant gl::shininess 5633)
  (define gl::shininess gl::shininess)
  (define-constant gl::ambient-and-diffuse 5634)
  (define gl::ambient-and-diffuse gl::ambient-and-diffuse)
  (define-constant gl::color-indexes 5635)
  (define gl::color-indexes gl::color-indexes)
  (define-constant gl::modelview 5888)
  (define gl::modelview gl::modelview)
  (define-constant gl::projection 5889)
  (define gl::projection gl::projection)
  (define-constant gl::texture 5890)
  (define gl::texture gl::texture)
  (define-constant gl::color 6144)
  (define gl::color gl::color)
  (define-constant gl::depth 6145)
  (define gl::depth gl::depth)
  (define-constant gl::stencil 6146)
  (define gl::stencil gl::stencil)
  (define-constant gl::color-index 6400)
  (define gl::color-index gl::color-index)
  (define-constant gl::stencil-index 6401)
  (define gl::stencil-index gl::stencil-index)
  (define-constant gl::depth-component 6402)
  (define gl::depth-component gl::depth-component)
  (define-constant gl::red 6403)
  (define gl::red gl::red)
  (define-constant gl::green 6404)
  (define gl::green gl::green)
  (define-constant gl::blue 6405)
  (define gl::blue gl::blue)
  (define-constant gl::alpha 6406)
  (define gl::alpha gl::alpha)
  (define-constant gl::rgb 6407)
  (define gl::rgb gl::rgb)
  (define-constant gl::rgba 6408)
  (define gl::rgba gl::rgba)
  (define-constant gl::luminance 6409)
  (define gl::luminance gl::luminance)
  (define-constant gl::luminance-alpha 6410)
  (define gl::luminance-alpha gl::luminance-alpha)
  (define-constant gl::bitmap 6656)
  (define gl::bitmap gl::bitmap)
  (define-constant gl::point 6912)
  (define gl::point gl::point)
  (define-constant gl::line 6913)
  (define gl::line gl::line)
  (define-constant gl::fill 6914)
  (define gl::fill gl::fill)
  (define-constant gl::render 7168)
  (define gl::render gl::render)
  (define-constant gl::feedback 7169)
  (define gl::feedback gl::feedback)
  (define-constant gl::select 7170)
  (define gl::select gl::select)
  (define-constant gl::flat 7424)
  (define gl::flat gl::flat)
  (define-constant gl::smooth 7425)
  (define gl::smooth gl::smooth)
  (define-constant gl::keep 7680)
  (define gl::keep gl::keep)
  (define-constant gl::replace 7681)
  (define gl::replace gl::replace)
  (define-constant gl::incr 7682)
  (define gl::incr gl::incr)
  (define-constant gl::decr 7683)
  (define gl::decr gl::decr)
  (define-constant gl::vendor 7936)
  (define gl::vendor gl::vendor)
  (define-constant gl::renderer 7937)
  (define gl::renderer gl::renderer)
  (define-constant gl::version 7938)
  (define gl::version gl::version)
  (define-constant gl::extensions 7939)
  (define gl::extensions gl::extensions)
  (define-constant gl::s 8192)
  (define gl::s gl::s)
  (define-constant gl::t 8193)
  (define gl::t gl::t)
  (define-constant gl::r 8194)
  (define gl::r gl::r)
  (define-constant gl::q 8195)
  (define gl::q gl::q)
  (define-constant gl::modulate 8448)
  (define gl::modulate gl::modulate)
  (define-constant gl::decal 8449)
  (define gl::decal gl::decal)
  (define-constant gl::texture-env-mode 8704)
  (define gl::texture-env-mode gl::texture-env-mode)
  (define-constant gl::texture-env-color 8705)
  (define gl::texture-env-color gl::texture-env-color)
  (define-constant gl::texture-env 8960)
  (define gl::texture-env gl::texture-env)
  (define-constant gl::eye-linear 9216)
  (define gl::eye-linear gl::eye-linear)
  (define-constant gl::object-linear 9217)
  (define gl::object-linear gl::object-linear)
  (define-constant gl::sphere-map 9218)
  (define gl::sphere-map gl::sphere-map)
  (define-constant gl::texture-gen-mode 9472)
  (define gl::texture-gen-mode gl::texture-gen-mode)
  (define-constant gl::object-plane 9473)
  (define gl::object-plane gl::object-plane)
  (define-constant gl::eye-plane 9474)
  (define gl::eye-plane gl::eye-plane)
  (define-constant gl::nearest 9728)
  (define gl::nearest gl::nearest)
  (define-constant gl::linear 9729)
  (define gl::linear gl::linear)
  (define-constant gl::nearest-mipmap-nearest 9984)
  (define gl::nearest-mipmap-nearest gl::nearest-mipmap-nearest)
  (define-constant gl::linear-mipmap-nearest 9985)
  (define gl::linear-mipmap-nearest gl::linear-mipmap-nearest)
  (define-constant gl::nearest-mipmap-linear 9986)
  (define gl::nearest-mipmap-linear gl::nearest-mipmap-linear)
  (define-constant gl::linear-mipmap-linear 9987)
  (define gl::linear-mipmap-linear gl::linear-mipmap-linear)
  (define-constant gl::texture-mag-filter 10240)
  (define gl::texture-mag-filter gl::texture-mag-filter)
  (define-constant gl::texture-min-filter 10241)
  (define gl::texture-min-filter gl::texture-min-filter)
  (define-constant gl::texture-wrap-s 10242)
  (define gl::texture-wrap-s gl::texture-wrap-s)
  (define-constant gl::texture-wrap-t 10243)
  (define gl::texture-wrap-t gl::texture-wrap-t)
  (define-constant gl::clamp 10496)
  (define gl::clamp gl::clamp)
  (define-constant gl::repeat 10497)
  (define gl::repeat gl::repeat)
  (define-constant gl::client-pixel-store-bit 1)
  (define gl::client-pixel-store-bit gl::client-pixel-store-bit)
  (define-constant gl::client-vertex-array-bit 2)
  (define gl::client-vertex-array-bit gl::client-vertex-array-bit)
  (define-constant gl::client-all-attrib-bits 4294967295)
  (define gl::client-all-attrib-bits gl::client-all-attrib-bits)
  (define-constant gl::polygon-offset-factor 32824)
  (define gl::polygon-offset-factor gl::polygon-offset-factor)
  (define-constant gl::polygon-offset-units 10752)
  (define gl::polygon-offset-units gl::polygon-offset-units)
  (define-constant gl::polygon-offset-point 10753)
  (define gl::polygon-offset-point gl::polygon-offset-point)
  (define-constant gl::polygon-offset-line 10754)
  (define gl::polygon-offset-line gl::polygon-offset-line)
  (define-constant gl::polygon-offset-fill 32823)
  (define gl::polygon-offset-fill gl::polygon-offset-fill)
  (define-constant gl::alpha4 32827)
  (define gl::alpha4 gl::alpha4)
  (define-constant gl::alpha8 32828)
  (define gl::alpha8 gl::alpha8)
  (define-constant gl::alpha12 32829)
  (define gl::alpha12 gl::alpha12)
  (define-constant gl::alpha16 32830)
  (define gl::alpha16 gl::alpha16)
  (define-constant gl::luminance4 32831)
  (define gl::luminance4 gl::luminance4)
  (define-constant gl::luminance8 32832)
  (define gl::luminance8 gl::luminance8)
  (define-constant gl::luminance12 32833)
  (define gl::luminance12 gl::luminance12)
  (define-constant gl::luminance16 32834)
  (define gl::luminance16 gl::luminance16)
  (define-constant gl::luminance4-alpha4 32835)
  (define gl::luminance4-alpha4 gl::luminance4-alpha4)
  (define-constant gl::luminance6-alpha2 32836)
  (define gl::luminance6-alpha2 gl::luminance6-alpha2)
  (define-constant gl::luminance8-alpha8 32837)
  (define gl::luminance8-alpha8 gl::luminance8-alpha8)
  (define-constant gl::luminance12-alpha4 32838)
  (define gl::luminance12-alpha4 gl::luminance12-alpha4)
  (define-constant gl::luminance12-alpha12 32839)
  (define gl::luminance12-alpha12 gl::luminance12-alpha12)
  (define-constant gl::luminance16-alpha16 32840)
  (define gl::luminance16-alpha16 gl::luminance16-alpha16)
  (define-constant gl::intensity 32841)
  (define gl::intensity gl::intensity)
  (define-constant gl::intensity4 32842)
  (define gl::intensity4 gl::intensity4)
  (define-constant gl::intensity8 32843)
  (define gl::intensity8 gl::intensity8)
  (define-constant gl::intensity12 32844)
  (define gl::intensity12 gl::intensity12)
  (define-constant gl::intensity16 32845)
  (define gl::intensity16 gl::intensity16)
  (define-constant gl::r3-g3-b2 10768)
  (define gl::r3-g3-b2 gl::r3-g3-b2)
  (define-constant gl::rgb4 32847)
  (define gl::rgb4 gl::rgb4)
  (define-constant gl::rgb5 32848)
  (define gl::rgb5 gl::rgb5)
  (define-constant gl::rgb8 32849)
  (define gl::rgb8 gl::rgb8)
  (define-constant gl::rgb10 32850)
  (define gl::rgb10 gl::rgb10)
  (define-constant gl::rgb12 32851)
  (define gl::rgb12 gl::rgb12)
  (define-constant gl::rgb16 32852)
  (define gl::rgb16 gl::rgb16)
  (define-constant gl::rgba2 32853)
  (define gl::rgba2 gl::rgba2)
  (define-constant gl::rgba4 32854)
  (define gl::rgba4 gl::rgba4)
  (define-constant gl::rgb5-a1 32855)
  (define gl::rgb5-a1 gl::rgb5-a1)
  (define-constant gl::rgba8 32856)
  (define gl::rgba8 gl::rgba8)
  (define-constant gl::rgb10-a2 32857)
  (define gl::rgb10-a2 gl::rgb10-a2)
  (define-constant gl::rgba12 32858)
  (define gl::rgba12 gl::rgba12)
  (define-constant gl::rgba16 32859)
  (define gl::rgba16 gl::rgba16)
  (define-constant gl::texture-red-size 32860)
  (define gl::texture-red-size gl::texture-red-size)
  (define-constant gl::texture-green-size 32861)
  (define gl::texture-green-size gl::texture-green-size)
  (define-constant gl::texture-blue-size 32862)
  (define gl::texture-blue-size gl::texture-blue-size)
  (define-constant gl::texture-alpha-size 32863)
  (define gl::texture-alpha-size gl::texture-alpha-size)
  (define-constant gl::texture-luminance-size 32864)
  (define gl::texture-luminance-size gl::texture-luminance-size)
  (define-constant gl::texture-intensity-size 32865)
  (define gl::texture-intensity-size gl::texture-intensity-size)
  (define-constant gl::proxy-texture-1d 32867)
  (define gl::proxy-texture-1d gl::proxy-texture-1d)
  (define-constant gl::proxy-texture-2d 32868)
  (define gl::proxy-texture-2d gl::proxy-texture-2d)
  (define-constant gl::texture-priority 32870)
  (define gl::texture-priority gl::texture-priority)
  (define-constant gl::texture-resident 32871)
  (define gl::texture-resident gl::texture-resident)
  (define-constant gl::texture-binding-1d 32872)
  (define gl::texture-binding-1d gl::texture-binding-1d)
  (define-constant gl::texture-binding-2d 32873)
  (define gl::texture-binding-2d gl::texture-binding-2d)
  (define-constant gl::vertex-array 32884)
  (define gl::vertex-array gl::vertex-array)
  (define-constant gl::normal-array 32885)
  (define gl::normal-array gl::normal-array)
  (define-constant gl::color-array 32886)
  (define gl::color-array gl::color-array)
  (define-constant gl::index-array 32887)
  (define gl::index-array gl::index-array)
  (define-constant gl::texture-coord-array 32888)
  (define gl::texture-coord-array gl::texture-coord-array)
  (define-constant gl::edge-flag-array 32889)
  (define gl::edge-flag-array gl::edge-flag-array)
  (define-constant gl::vertex-array-size 32890)
  (define gl::vertex-array-size gl::vertex-array-size)
  (define-constant gl::vertex-array-type 32891)
  (define gl::vertex-array-type gl::vertex-array-type)
  (define-constant gl::vertex-array-stride 32892)
  (define gl::vertex-array-stride gl::vertex-array-stride)
  (define-constant gl::normal-array-type 32894)
  (define gl::normal-array-type gl::normal-array-type)
  (define-constant gl::normal-array-stride 32895)
  (define gl::normal-array-stride gl::normal-array-stride)
  (define-constant gl::color-array-size 32897)
  (define gl::color-array-size gl::color-array-size)
  (define-constant gl::color-array-type 32898)
  (define gl::color-array-type gl::color-array-type)
  (define-constant gl::color-array-stride 32899)
  (define gl::color-array-stride gl::color-array-stride)
  (define-constant gl::index-array-type 32901)
  (define gl::index-array-type gl::index-array-type)
  (define-constant gl::index-array-stride 32902)
  (define gl::index-array-stride gl::index-array-stride)
  (define-constant gl::texture-coord-array-size 32904)
  (define gl::texture-coord-array-size gl::texture-coord-array-size)
  (define-constant gl::texture-coord-array-type 32905)
  (define gl::texture-coord-array-type gl::texture-coord-array-type)
  (define-constant gl::texture-coord-array-stride 32906)
  (define gl::texture-coord-array-stride gl::texture-coord-array-stride)
  (define-constant gl::edge-flag-array-stride 32908)
  (define gl::edge-flag-array-stride gl::edge-flag-array-stride)
  (define-constant gl::vertex-array-pointer 32910)
  (define gl::vertex-array-pointer gl::vertex-array-pointer)
  (define-constant gl::normal-array-pointer 32911)
  (define gl::normal-array-pointer gl::normal-array-pointer)
  (define-constant gl::color-array-pointer 32912)
  (define gl::color-array-pointer gl::color-array-pointer)
  (define-constant gl::index-array-pointer 32913)
  (define gl::index-array-pointer gl::index-array-pointer)
  (define-constant gl::texture-coord-array-pointer 32914)
  (define gl::texture-coord-array-pointer gl::texture-coord-array-pointer)
  (define-constant gl::edge-flag-array-pointer 32915)
  (define gl::edge-flag-array-pointer gl::edge-flag-array-pointer)
  (define-constant gl::v2f 10784)
  (define gl::v2f gl::v2f)
  (define-constant gl::v3f 10785)
  (define gl::v3f gl::v3f)
  (define-constant gl::c4ub-v2f 10786)
  (define gl::c4ub-v2f gl::c4ub-v2f)
  (define-constant gl::c4ub-v3f 10787)
  (define gl::c4ub-v3f gl::c4ub-v3f)
  (define-constant gl::c3f-v3f 10788)
  (define gl::c3f-v3f gl::c3f-v3f)
  (define-constant gl::n3f-v3f 10789)
  (define gl::n3f-v3f gl::n3f-v3f)
  (define-constant gl::c4f-n3f-v3f 10790)
  (define gl::c4f-n3f-v3f gl::c4f-n3f-v3f)
  (define-constant gl::t2f-v3f 10791)
  (define gl::t2f-v3f gl::t2f-v3f)
  (define-constant gl::t4f-v4f 10792)
  (define gl::t4f-v4f gl::t4f-v4f)
  (define-constant gl::t2f-c4ub-v3f 10793)
  (define gl::t2f-c4ub-v3f gl::t2f-c4ub-v3f)
  (define-constant gl::t2f-c3f-v3f 10794)
  (define gl::t2f-c3f-v3f gl::t2f-c3f-v3f)
  (define-constant gl::t2f-n3f-v3f 10795)
  (define gl::t2f-n3f-v3f gl::t2f-n3f-v3f)
  (define-constant gl::t2f-c4f-n3f-v3f 10796)
  (define gl::t2f-c4f-n3f-v3f gl::t2f-c4f-n3f-v3f)
  (define-constant gl::t4f-c4f-n3f-v4f 10797)
  (define gl::t4f-c4f-n3f-v4f gl::t4f-c4f-n3f-v4f)
  (define-constant gl::ext-vertex-array 1)
  (define gl::ext-vertex-array gl::ext-vertex-array)
  (define-constant gl::ext-bgra 1)
  (define gl::ext-bgra gl::ext-bgra)
  (define-constant gl::ext-paletted-texture 1)
  (define gl::ext-paletted-texture gl::ext-paletted-texture)
  (define-constant gl::win-swap-hint 1)
  (define gl::win-swap-hint gl::win-swap-hint)
  (define-constant gl::win-draw-range-elements 1)
  (define gl::win-draw-range-elements gl::win-draw-range-elements)
  (define-constant gl::vertex-array-ext 32884)
  (define gl::vertex-array-ext gl::vertex-array-ext)
  (define-constant gl::normal-array-ext 32885)
  (define gl::normal-array-ext gl::normal-array-ext)
  (define-constant gl::color-array-ext 32886)
  (define gl::color-array-ext gl::color-array-ext)
  (define-constant gl::index-array-ext 32887)
  (define gl::index-array-ext gl::index-array-ext)
  (define-constant gl::texture-coord-array-ext 32888)
  (define gl::texture-coord-array-ext gl::texture-coord-array-ext)
  (define-constant gl::edge-flag-array-ext 32889)
  (define gl::edge-flag-array-ext gl::edge-flag-array-ext)
  (define-constant gl::vertex-array-size-ext 32890)
  (define gl::vertex-array-size-ext gl::vertex-array-size-ext)
  (define-constant gl::vertex-array-type-ext 32891)
  (define gl::vertex-array-type-ext gl::vertex-array-type-ext)
  (define-constant gl::vertex-array-stride-ext 32892)
  (define gl::vertex-array-stride-ext gl::vertex-array-stride-ext)
  (define-constant gl::vertex-array-count-ext 32893)
  (define gl::vertex-array-count-ext gl::vertex-array-count-ext)
  (define-constant gl::normal-array-type-ext 32894)
  (define gl::normal-array-type-ext gl::normal-array-type-ext)
  (define-constant gl::normal-array-stride-ext 32895)
  (define gl::normal-array-stride-ext gl::normal-array-stride-ext)
  (define-constant gl::normal-array-count-ext 32896)
  (define gl::normal-array-count-ext gl::normal-array-count-ext)
  (define-constant gl::color-array-size-ext 32897)
  (define gl::color-array-size-ext gl::color-array-size-ext)
  (define-constant gl::color-array-type-ext 32898)
  (define gl::color-array-type-ext gl::color-array-type-ext)
  (define-constant gl::color-array-stride-ext 32899)
  (define gl::color-array-stride-ext gl::color-array-stride-ext)
  (define-constant gl::color-array-count-ext 32900)
  (define gl::color-array-count-ext gl::color-array-count-ext)
  (define-constant gl::index-array-type-ext 32901)
  (define gl::index-array-type-ext gl::index-array-type-ext)
  (define-constant gl::index-array-stride-ext 32902)
  (define gl::index-array-stride-ext gl::index-array-stride-ext)
  (define-constant gl::index-array-count-ext 32903)
  (define gl::index-array-count-ext gl::index-array-count-ext)
  (define-constant gl::texture-coord-array-size-ext 32904)
  (define gl::texture-coord-array-size-ext gl::texture-coord-array-size-ext)
  (define-constant gl::texture-coord-array-type-ext 32905)
  (define gl::texture-coord-array-type-ext gl::texture-coord-array-type-ext)
  (define-constant gl::texture-coord-array-stride-ext 32906)
  (define gl::texture-coord-array-stride-ext
    gl::texture-coord-array-stride-ext)
  (define-constant gl::texture-coord-array-count-ext 32907)
  (define gl::texture-coord-array-count-ext gl::texture-coord-array-count-ext)
  (define-constant gl::edge-flag-array-stride-ext 32908)
  (define gl::edge-flag-array-stride-ext gl::edge-flag-array-stride-ext)
  (define-constant gl::edge-flag-array-count-ext 32909)
  (define gl::edge-flag-array-count-ext gl::edge-flag-array-count-ext)
  (define-constant gl::vertex-array-pointer-ext 32910)
  (define gl::vertex-array-pointer-ext gl::vertex-array-pointer-ext)
  (define-constant gl::normal-array-pointer-ext 32911)
  (define gl::normal-array-pointer-ext gl::normal-array-pointer-ext)
  (define-constant gl::color-array-pointer-ext 32912)
  (define gl::color-array-pointer-ext gl::color-array-pointer-ext)
  (define-constant gl::index-array-pointer-ext 32913)
  (define gl::index-array-pointer-ext gl::index-array-pointer-ext)
  (define-constant gl::texture-coord-array-pointer-ext 32914)
  (define gl::texture-coord-array-pointer-ext
    gl::texture-coord-array-pointer-ext)
  (define-constant gl::edge-flag-array-pointer-ext 32915)
  (define gl::edge-flag-array-pointer-ext gl::edge-flag-array-pointer-ext)
  (define-foreign-variable gl::double-ext integer "GL_DOUBLE_EXT")
  (define gl::double-ext gl::double-ext)
  (define-constant gl::bgr-ext 32992)
  (define gl::bgr-ext gl::bgr-ext)
  (define-constant gl::bgra-ext 32993)
  (define gl::bgra-ext gl::bgra-ext)
  (define-constant gl::color-table-format-ext 32984)
  (define gl::color-table-format-ext gl::color-table-format-ext)
  (define-constant gl::color-table-width-ext 32985)
  (define gl::color-table-width-ext gl::color-table-width-ext)
  (define-constant gl::color-table-red-size-ext 32986)
  (define gl::color-table-red-size-ext gl::color-table-red-size-ext)
  (define-constant gl::color-table-green-size-ext 32987)
  (define gl::color-table-green-size-ext gl::color-table-green-size-ext)
  (define-constant gl::color-table-blue-size-ext 32988)
  (define gl::color-table-blue-size-ext gl::color-table-blue-size-ext)
  (define-constant gl::color-table-alpha-size-ext 32989)
  (define gl::color-table-alpha-size-ext gl::color-table-alpha-size-ext)
  (define-constant gl::color-table-luminance-size-ext 32990)
  (define gl::color-table-luminance-size-ext
    gl::color-table-luminance-size-ext)
  (define-constant gl::color-table-intensity-size-ext 32991)
  (define gl::color-table-intensity-size-ext
    gl::color-table-intensity-size-ext)
  (define-constant gl::color-index1-ext 32994)
  (define gl::color-index1-ext gl::color-index1-ext)
  (define-constant gl::color-index2-ext 32995)
  (define gl::color-index2-ext gl::color-index2-ext)
  (define-constant gl::color-index4-ext 32996)
  (define gl::color-index4-ext gl::color-index4-ext)
  (define-constant gl::color-index8-ext 32997)
  (define gl::color-index8-ext gl::color-index8-ext)
  (define-constant gl::color-index12-ext 32998)
  (define gl::color-index12-ext gl::color-index12-ext)
  (define-constant gl::color-index16-ext 32999)
  (define gl::color-index16-ext gl::color-index16-ext)
  (define-constant gl::max-elements-vertices-win 33000)
  (define gl::max-elements-vertices-win gl::max-elements-vertices-win)
  (define-constant gl::max-elements-indices-win 33001)
  (define gl::max-elements-indices-win gl::max-elements-indices-win)
  (define-constant gl::phong-win 33002)
  (define gl::phong-win gl::phong-win)
  (define-constant gl::phong-hint-win 33003)
  (define gl::phong-hint-win gl::phong-hint-win)
  (define-constant gl::fog-specular-texture-win 33004)
  (define gl::fog-specular-texture-win gl::fog-specular-texture-win)
  (define-foreign-variable gl::logic-op integer "GL_LOGIC_OP")
  (define gl::logic-op gl::logic-op)
  (define-foreign-variable
    gl::texture-components
    integer
    "GL_TEXTURE_COMPONENTS")
  (define gl::texture-components gl::texture-components)
  (define-constant gl::version-1-2 1)
  (define gl::version-1-2 gl::version-1-2)
  (define-constant gl::unsigned-byte-3-3-2 32818)
  (define gl::unsigned-byte-3-3-2 gl::unsigned-byte-3-3-2)
  (define-constant gl::unsigned-short-4-4-4-4 32819)
  (define gl::unsigned-short-4-4-4-4 gl::unsigned-short-4-4-4-4)
  (define-constant gl::unsigned-short-5-5-5-1 32820)
  (define gl::unsigned-short-5-5-5-1 gl::unsigned-short-5-5-5-1)
  (define-constant gl::unsigned-int-8-8-8-8 32821)
  (define gl::unsigned-int-8-8-8-8 gl::unsigned-int-8-8-8-8)
  (define-constant gl::unsigned-int-10-10-10-2 32822)
  (define gl::unsigned-int-10-10-10-2 gl::unsigned-int-10-10-10-2)
  (define-constant gl::rescale-normal 32826)
  (define gl::rescale-normal gl::rescale-normal)
  (define-constant gl::texture-binding-3d 32874)
  (define gl::texture-binding-3d gl::texture-binding-3d)
  (define-constant gl::pack-skip-images 32875)
  (define gl::pack-skip-images gl::pack-skip-images)
  (define-constant gl::pack-image-height 32876)
  (define gl::pack-image-height gl::pack-image-height)
  (define-constant gl::unpack-skip-images 32877)
  (define gl::unpack-skip-images gl::unpack-skip-images)
  (define-constant gl::unpack-image-height 32878)
  (define gl::unpack-image-height gl::unpack-image-height)
  (define-constant gl::texture-3d 32879)
  (define gl::texture-3d gl::texture-3d)
  (define-constant gl::proxy-texture-3d 32880)
  (define gl::proxy-texture-3d gl::proxy-texture-3d)
  (define-constant gl::texture-depth 32881)
  (define gl::texture-depth gl::texture-depth)
  (define-constant gl::texture-wrap-r 32882)
  (define gl::texture-wrap-r gl::texture-wrap-r)
  (define-constant gl::max-3d-texture-size 32883)
  (define gl::max-3d-texture-size gl::max-3d-texture-size)
  (define-constant gl::unsigned-byte-2-3-3-rev 33634)
  (define gl::unsigned-byte-2-3-3-rev gl::unsigned-byte-2-3-3-rev)
  (define-constant gl::unsigned-short-5-6-5 33635)
  (define gl::unsigned-short-5-6-5 gl::unsigned-short-5-6-5)
  (define-constant gl::unsigned-short-5-6-5-rev 33636)
  (define gl::unsigned-short-5-6-5-rev gl::unsigned-short-5-6-5-rev)
  (define-constant gl::unsigned-short-4-4-4-4-rev 33637)
  (define gl::unsigned-short-4-4-4-4-rev gl::unsigned-short-4-4-4-4-rev)
  (define-constant gl::unsigned-short-1-5-5-5-rev 33638)
  (define gl::unsigned-short-1-5-5-5-rev gl::unsigned-short-1-5-5-5-rev)
  (define-constant gl::unsigned-int-8-8-8-8-rev 33639)
  (define gl::unsigned-int-8-8-8-8-rev gl::unsigned-int-8-8-8-8-rev)
  (define-constant gl::unsigned-int-2-10-10-10-rev 33640)
  (define gl::unsigned-int-2-10-10-10-rev gl::unsigned-int-2-10-10-10-rev)
  (define-constant gl::bgr 32992)
  (define gl::bgr gl::bgr)
  (define-constant gl::bgra 32993)
  (define gl::bgra gl::bgra)
  (define-constant gl::max-elements-vertices 33000)
  (define gl::max-elements-vertices gl::max-elements-vertices)
  (define-constant gl::max-elements-indices 33001)
  (define gl::max-elements-indices gl::max-elements-indices)
  (define-constant gl::clamp-to-edge 33071)
  (define gl::clamp-to-edge gl::clamp-to-edge)
  (define-constant gl::texture-min-lod 33082)
  (define gl::texture-min-lod gl::texture-min-lod)
  (define-constant gl::texture-max-lod 33083)
  (define gl::texture-max-lod gl::texture-max-lod)
  (define-constant gl::texture-base-level 33084)
  (define gl::texture-base-level gl::texture-base-level)
  (define-constant gl::texture-max-level 33085)
  (define gl::texture-max-level gl::texture-max-level)
  (define-constant gl::light-model-color-control 33272)
  (define gl::light-model-color-control gl::light-model-color-control)
  (define-constant gl::single-color 33273)
  (define gl::single-color gl::single-color)
  (define-constant gl::separate-specular-color 33274)
  (define gl::separate-specular-color gl::separate-specular-color)
  (define-constant gl::smooth-point-size-range 2834)
  (define gl::smooth-point-size-range gl::smooth-point-size-range)
  (define-constant gl::smooth-point-size-granularity 2835)
  (define gl::smooth-point-size-granularity gl::smooth-point-size-granularity)
  (define-constant gl::smooth-line-width-range 2850)
  (define gl::smooth-line-width-range gl::smooth-line-width-range)
  (define-constant gl::smooth-line-width-granularity 2851)
  (define gl::smooth-line-width-granularity gl::smooth-line-width-granularity)
  (define-constant gl::aliased-point-size-range 33901)
  (define gl::aliased-point-size-range gl::aliased-point-size-range)
  (define-constant gl::aliased-line-width-range 33902)
  (define gl::aliased-line-width-range gl::aliased-line-width-range)
  (define-constant gl::constant-color 32769)
  (define gl::constant-color gl::constant-color)
  (define-constant gl::one-minus-constant-color 32770)
  (define gl::one-minus-constant-color gl::one-minus-constant-color)
  (define-constant gl::constant-alpha 32771)
  (define gl::constant-alpha gl::constant-alpha)
  (define-constant gl::one-minus-constant-alpha 32772)
  (define gl::one-minus-constant-alpha gl::one-minus-constant-alpha)
  (define-constant gl::blend-color 32773)
  (define gl::blend-color gl::blend-color)
  (define-constant gl::func-add 32774)
  (define gl::func-add gl::func-add)
  (define-constant gl::min 32775)
  (define gl::min gl::min)
  (define-constant gl::max 32776)
  (define gl::max gl::max)
  (define-constant gl::blend-equation 32777)
  (define gl::blend-equation gl::blend-equation)
  (define-constant gl::func-subtract 32778)
  (define gl::func-subtract gl::func-subtract)
  (define-constant gl::func-reverse-subtract 32779)
  (define gl::func-reverse-subtract gl::func-reverse-subtract)
  (define-constant gl::convolution-1d 32784)
  (define gl::convolution-1d gl::convolution-1d)
  (define-constant gl::convolution-2d 32785)
  (define gl::convolution-2d gl::convolution-2d)
  (define-constant gl::separable-2d 32786)
  (define gl::separable-2d gl::separable-2d)
  (define-constant gl::convolution-border-mode 32787)
  (define gl::convolution-border-mode gl::convolution-border-mode)
  (define-constant gl::convolution-filter-scale 32788)
  (define gl::convolution-filter-scale gl::convolution-filter-scale)
  (define-constant gl::convolution-filter-bias 32789)
  (define gl::convolution-filter-bias gl::convolution-filter-bias)
  (define-constant gl::reduce 32790)
  (define gl::reduce gl::reduce)
  (define-constant gl::convolution-format 32791)
  (define gl::convolution-format gl::convolution-format)
  (define-constant gl::convolution-width 32792)
  (define gl::convolution-width gl::convolution-width)
  (define-constant gl::convolution-height 32793)
  (define gl::convolution-height gl::convolution-height)
  (define-constant gl::max-convolution-width 32794)
  (define gl::max-convolution-width gl::max-convolution-width)
  (define-constant gl::max-convolution-height 32795)
  (define gl::max-convolution-height gl::max-convolution-height)
  (define-constant gl::post-convolution-red-scale 32796)
  (define gl::post-convolution-red-scale gl::post-convolution-red-scale)
  (define-constant gl::post-convolution-green-scale 32797)
  (define gl::post-convolution-green-scale gl::post-convolution-green-scale)
  (define-constant gl::post-convolution-blue-scale 32798)
  (define gl::post-convolution-blue-scale gl::post-convolution-blue-scale)
  (define-constant gl::post-convolution-alpha-scale 32799)
  (define gl::post-convolution-alpha-scale gl::post-convolution-alpha-scale)
  (define-constant gl::post-convolution-red-bias 32800)
  (define gl::post-convolution-red-bias gl::post-convolution-red-bias)
  (define-constant gl::post-convolution-green-bias 32801)
  (define gl::post-convolution-green-bias gl::post-convolution-green-bias)
  (define-constant gl::post-convolution-blue-bias 32802)
  (define gl::post-convolution-blue-bias gl::post-convolution-blue-bias)
  (define-constant gl::post-convolution-alpha-bias 32803)
  (define gl::post-convolution-alpha-bias gl::post-convolution-alpha-bias)
  (define-constant gl::histogram 32804)
  (define gl::histogram gl::histogram)
  (define-constant gl::proxy-histogram 32805)
  (define gl::proxy-histogram gl::proxy-histogram)
  (define-constant gl::histogram-width 32806)
  (define gl::histogram-width gl::histogram-width)
  (define-constant gl::histogram-format 32807)
  (define gl::histogram-format gl::histogram-format)
  (define-constant gl::histogram-red-size 32808)
  (define gl::histogram-red-size gl::histogram-red-size)
  (define-constant gl::histogram-green-size 32809)
  (define gl::histogram-green-size gl::histogram-green-size)
  (define-constant gl::histogram-blue-size 32810)
  (define gl::histogram-blue-size gl::histogram-blue-size)
  (define-constant gl::histogram-alpha-size 32811)
  (define gl::histogram-alpha-size gl::histogram-alpha-size)
  (define-constant gl::histogram-luminance-size 32812)
  (define gl::histogram-luminance-size gl::histogram-luminance-size)
  (define-constant gl::histogram-sink 32813)
  (define gl::histogram-sink gl::histogram-sink)
  (define-constant gl::minmax 32814)
  (define gl::minmax gl::minmax)
  (define-constant gl::minmax-format 32815)
  (define gl::minmax-format gl::minmax-format)
  (define-constant gl::minmax-sink 32816)
  (define gl::minmax-sink gl::minmax-sink)
  (define-constant gl::table-too-large 32817)
  (define gl::table-too-large gl::table-too-large)
  (define-constant gl::color-matrix 32945)
  (define gl::color-matrix gl::color-matrix)
  (define-constant gl::color-matrix-stack-depth 32946)
  (define gl::color-matrix-stack-depth gl::color-matrix-stack-depth)
  (define-constant gl::max-color-matrix-stack-depth 32947)
  (define gl::max-color-matrix-stack-depth gl::max-color-matrix-stack-depth)
  (define-constant gl::post-color-matrix-red-scale 32948)
  (define gl::post-color-matrix-red-scale gl::post-color-matrix-red-scale)
  (define-constant gl::post-color-matrix-green-scale 32949)
  (define gl::post-color-matrix-green-scale gl::post-color-matrix-green-scale)
  (define-constant gl::post-color-matrix-blue-scale 32950)
  (define gl::post-color-matrix-blue-scale gl::post-color-matrix-blue-scale)
  (define-constant gl::post-color-matrix-alpha-scale 32951)
  (define gl::post-color-matrix-alpha-scale gl::post-color-matrix-alpha-scale)
  (define-constant gl::post-color-matrix-red-bias 32952)
  (define gl::post-color-matrix-red-bias gl::post-color-matrix-red-bias)
  (define-constant gl::post-color-matrix-green-bias 32953)
  (define gl::post-color-matrix-green-bias gl::post-color-matrix-green-bias)
  (define-constant gl::post-color-matrix-blue-bias 32954)
  (define gl::post-color-matrix-blue-bias gl::post-color-matrix-blue-bias)
  (define-constant gl::post-color-matrix-alpha-bias 32955)
  (define gl::post-color-matrix-alpha-bias gl::post-color-matrix-alpha-bias)
  (define-constant gl::color-table 32976)
  (define gl::color-table gl::color-table)
  (define-constant gl::post-convolution-color-table 32977)
  (define gl::post-convolution-color-table gl::post-convolution-color-table)
  (define-constant gl::post-color-matrix-color-table 32978)
  (define gl::post-color-matrix-color-table gl::post-color-matrix-color-table)
  (define-constant gl::proxy-color-table 32979)
  (define gl::proxy-color-table gl::proxy-color-table)
  (define-constant gl::proxy-post-convolution-color-table 32980)
  (define gl::proxy-post-convolution-color-table
    gl::proxy-post-convolution-color-table)
  (define-constant gl::proxy-post-color-matrix-color-table 32981)
  (define gl::proxy-post-color-matrix-color-table
    gl::proxy-post-color-matrix-color-table)
  (define-constant gl::color-table-scale 32982)
  (define gl::color-table-scale gl::color-table-scale)
  (define-constant gl::color-table-bias 32983)
  (define gl::color-table-bias gl::color-table-bias)
  (define-constant gl::color-table-format 32984)
  (define gl::color-table-format gl::color-table-format)
  (define-constant gl::color-table-width 32985)
  (define gl::color-table-width gl::color-table-width)
  (define-constant gl::color-table-red-size 32986)
  (define gl::color-table-red-size gl::color-table-red-size)
  (define-constant gl::color-table-green-size 32987)
  (define gl::color-table-green-size gl::color-table-green-size)
  (define-constant gl::color-table-blue-size 32988)
  (define gl::color-table-blue-size gl::color-table-blue-size)
  (define-constant gl::color-table-alpha-size 32989)
  (define gl::color-table-alpha-size gl::color-table-alpha-size)
  (define-constant gl::color-table-luminance-size 32990)
  (define gl::color-table-luminance-size gl::color-table-luminance-size)
  (define-constant gl::color-table-intensity-size 32991)
  (define gl::color-table-intensity-size gl::color-table-intensity-size)
  (define-constant gl::constant-border 33105)
  (define gl::constant-border gl::constant-border)
  (define-constant gl::replicate-border 33107)
  (define gl::replicate-border gl::replicate-border)
  (define-constant gl::convolution-border-color 33108)
  (define gl::convolution-border-color gl::convolution-border-color)
  (define-constant gl::version-1-3 1)
  (define gl::version-1-3 gl::version-1-3)
  (define-constant gl::texture0 33984)
  (define gl::texture0 gl::texture0)
  (define-constant gl::texture1 33985)
  (define gl::texture1 gl::texture1)
  (define-constant gl::texture2 33986)
  (define gl::texture2 gl::texture2)
  (define-constant gl::texture3 33987)
  (define gl::texture3 gl::texture3)
  (define-constant gl::texture4 33988)
  (define gl::texture4 gl::texture4)
  (define-constant gl::texture5 33989)
  (define gl::texture5 gl::texture5)
  (define-constant gl::texture6 33990)
  (define gl::texture6 gl::texture6)
  (define-constant gl::texture7 33991)
  (define gl::texture7 gl::texture7)
  (define-constant gl::texture8 33992)
  (define gl::texture8 gl::texture8)
  (define-constant gl::texture9 33993)
  (define gl::texture9 gl::texture9)
  (define-constant gl::texture10 33994)
  (define gl::texture10 gl::texture10)
  (define-constant gl::texture11 33995)
  (define gl::texture11 gl::texture11)
  (define-constant gl::texture12 33996)
  (define gl::texture12 gl::texture12)
  (define-constant gl::texture13 33997)
  (define gl::texture13 gl::texture13)
  (define-constant gl::texture14 33998)
  (define gl::texture14 gl::texture14)
  (define-constant gl::texture15 33999)
  (define gl::texture15 gl::texture15)
  (define-constant gl::texture16 34000)
  (define gl::texture16 gl::texture16)
  (define-constant gl::texture17 34001)
  (define gl::texture17 gl::texture17)
  (define-constant gl::texture18 34002)
  (define gl::texture18 gl::texture18)
  (define-constant gl::texture19 34003)
  (define gl::texture19 gl::texture19)
  (define-constant gl::texture20 34004)
  (define gl::texture20 gl::texture20)
  (define-constant gl::texture21 34005)
  (define gl::texture21 gl::texture21)
  (define-constant gl::texture22 34006)
  (define gl::texture22 gl::texture22)
  (define-constant gl::texture23 34007)
  (define gl::texture23 gl::texture23)
  (define-constant gl::texture24 34008)
  (define gl::texture24 gl::texture24)
  (define-constant gl::texture25 34009)
  (define gl::texture25 gl::texture25)
  (define-constant gl::texture26 34010)
  (define gl::texture26 gl::texture26)
  (define-constant gl::texture27 34011)
  (define gl::texture27 gl::texture27)
  (define-constant gl::texture28 34012)
  (define gl::texture28 gl::texture28)
  (define-constant gl::texture29 34013)
  (define gl::texture29 gl::texture29)
  (define-constant gl::texture30 34014)
  (define gl::texture30 gl::texture30)
  (define-constant gl::texture31 34015)
  (define gl::texture31 gl::texture31)
  (define-constant gl::active-texture 34016)
  (define gl::active-texture gl::active-texture)
  (define-constant gl::client-active-texture 34017)
  (define gl::client-active-texture gl::client-active-texture)
  (define-constant gl::max-texture-units 34018)
  (define gl::max-texture-units gl::max-texture-units)
  (define-constant gl::transpose-modelview-matrix 34019)
  (define gl::transpose-modelview-matrix gl::transpose-modelview-matrix)
  (define-constant gl::transpose-projection-matrix 34020)
  (define gl::transpose-projection-matrix gl::transpose-projection-matrix)
  (define-constant gl::transpose-texture-matrix 34021)
  (define gl::transpose-texture-matrix gl::transpose-texture-matrix)
  (define-constant gl::transpose-color-matrix 34022)
  (define gl::transpose-color-matrix gl::transpose-color-matrix)
  (define-constant gl::multisample 32925)
  (define gl::multisample gl::multisample)
  (define-constant gl::sample-alpha-to-coverage 32926)
  (define gl::sample-alpha-to-coverage gl::sample-alpha-to-coverage)
  (define-constant gl::sample-alpha-to-one 32927)
  (define gl::sample-alpha-to-one gl::sample-alpha-to-one)
  (define-constant gl::sample-coverage 32928)
  (define gl::sample-coverage gl::sample-coverage)
  (define-constant gl::sample-buffers 32936)
  (define gl::sample-buffers gl::sample-buffers)
  (define-constant gl::samples 32937)
  (define gl::samples gl::samples)
  (define-constant gl::sample-coverage-value 32938)
  (define gl::sample-coverage-value gl::sample-coverage-value)
  (define-constant gl::sample-coverage-invert 32939)
  (define gl::sample-coverage-invert gl::sample-coverage-invert)
  (define-constant gl::multisample-bit 536870912)
  (define gl::multisample-bit gl::multisample-bit)
  (define-constant gl::normal-map 34065)
  (define gl::normal-map gl::normal-map)
  (define-constant gl::reflection-map 34066)
  (define gl::reflection-map gl::reflection-map)
  (define-constant gl::texture-cube-map 34067)
  (define gl::texture-cube-map gl::texture-cube-map)
  (define-constant gl::texture-binding-cube-map 34068)
  (define gl::texture-binding-cube-map gl::texture-binding-cube-map)
  (define-constant gl::texture-cube-map-positive-x 34069)
  (define gl::texture-cube-map-positive-x gl::texture-cube-map-positive-x)
  (define-constant gl::texture-cube-map-negative-x 34070)
  (define gl::texture-cube-map-negative-x gl::texture-cube-map-negative-x)
  (define-constant gl::texture-cube-map-positive-y 34071)
  (define gl::texture-cube-map-positive-y gl::texture-cube-map-positive-y)
  (define-constant gl::texture-cube-map-negative-y 34072)
  (define gl::texture-cube-map-negative-y gl::texture-cube-map-negative-y)
  (define-constant gl::texture-cube-map-positive-z 34073)
  (define gl::texture-cube-map-positive-z gl::texture-cube-map-positive-z)
  (define-constant gl::texture-cube-map-negative-z 34074)
  (define gl::texture-cube-map-negative-z gl::texture-cube-map-negative-z)
  (define-constant gl::proxy-texture-cube-map 34075)
  (define gl::proxy-texture-cube-map gl::proxy-texture-cube-map)
  (define-constant gl::max-cube-map-texture-size 34076)
  (define gl::max-cube-map-texture-size gl::max-cube-map-texture-size)
  (define-constant gl::compressed-alpha 34025)
  (define gl::compressed-alpha gl::compressed-alpha)
  (define-constant gl::compressed-luminance 34026)
  (define gl::compressed-luminance gl::compressed-luminance)
  (define-constant gl::compressed-luminance-alpha 34027)
  (define gl::compressed-luminance-alpha gl::compressed-luminance-alpha)
  (define-constant gl::compressed-intensity 34028)
  (define gl::compressed-intensity gl::compressed-intensity)
  (define-constant gl::compressed-rgb 34029)
  (define gl::compressed-rgb gl::compressed-rgb)
  (define-constant gl::compressed-rgba 34030)
  (define gl::compressed-rgba gl::compressed-rgba)
  (define-constant gl::texture-compression-hint 34031)
  (define gl::texture-compression-hint gl::texture-compression-hint)
  (define-constant gl::texture-compressed-image-size 34464)
  (define gl::texture-compressed-image-size gl::texture-compressed-image-size)
  (define-constant gl::texture-compressed 34465)
  (define gl::texture-compressed gl::texture-compressed)
  (define-constant gl::num-compressed-texture-formats 34466)
  (define gl::num-compressed-texture-formats
    gl::num-compressed-texture-formats)
  (define-constant gl::compressed-texture-formats 34467)
  (define gl::compressed-texture-formats gl::compressed-texture-formats)
  (define-constant gl::clamp-to-border 33069)
  (define gl::clamp-to-border gl::clamp-to-border)
  (define-constant gl::clamp-to-border-sgis 33069)
  (define gl::clamp-to-border-sgis gl::clamp-to-border-sgis)
  (define-constant gl::combine 34160)
  (define gl::combine gl::combine)
  (define-constant gl::combine-rgb 34161)
  (define gl::combine-rgb gl::combine-rgb)
  (define-constant gl::combine-alpha 34162)
  (define gl::combine-alpha gl::combine-alpha)
  (define-constant gl::source0-rgb 34176)
  (define gl::source0-rgb gl::source0-rgb)
  (define-constant gl::source1-rgb 34177)
  (define gl::source1-rgb gl::source1-rgb)
  (define-constant gl::source2-rgb 34178)
  (define gl::source2-rgb gl::source2-rgb)
  (define-constant gl::source0-alpha 34184)
  (define gl::source0-alpha gl::source0-alpha)
  (define-constant gl::source1-alpha 34185)
  (define gl::source1-alpha gl::source1-alpha)
  (define-constant gl::source2-alpha 34186)
  (define gl::source2-alpha gl::source2-alpha)
  (define-constant gl::operand0-rgb 34192)
  (define gl::operand0-rgb gl::operand0-rgb)
  (define-constant gl::operand1-rgb 34193)
  (define gl::operand1-rgb gl::operand1-rgb)
  (define-constant gl::operand2-rgb 34194)
  (define gl::operand2-rgb gl::operand2-rgb)
  (define-constant gl::operand0-alpha 34200)
  (define gl::operand0-alpha gl::operand0-alpha)
  (define-constant gl::operand1-alpha 34201)
  (define gl::operand1-alpha gl::operand1-alpha)
  (define-constant gl::operand2-alpha 34202)
  (define gl::operand2-alpha gl::operand2-alpha)
  (define-constant gl::rgb-scale 34163)
  (define gl::rgb-scale gl::rgb-scale)
  (define-constant gl::add-signed 34164)
  (define gl::add-signed gl::add-signed)
  (define-constant gl::interpolate 34165)
  (define gl::interpolate gl::interpolate)
  (define-constant gl::subtract 34023)
  (define gl::subtract gl::subtract)
  (define-constant gl::constant 34166)
  (define gl::constant gl::constant)
  (define-constant gl::primary-color 34167)
  (define gl::primary-color gl::primary-color)
  (define-constant gl::previous 34168)
  (define gl::previous gl::previous)
  (define-constant gl::dot3-rgb 34478)
  (define gl::dot3-rgb gl::dot3-rgb)
  (define-constant gl::dot3-rgba 34479)
  (define gl::dot3-rgba gl::dot3-rgba)
  (define-constant gl::version-1-4 1)
  (define gl::version-1-4 gl::version-1-4)
  (define-constant gl::blend-dst-rgb 32968)
  (define gl::blend-dst-rgb gl::blend-dst-rgb)
  (define-constant gl::blend-src-rgb 32969)
  (define gl::blend-src-rgb gl::blend-src-rgb)
  (define-constant gl::blend-dst-alpha 32970)
  (define gl::blend-dst-alpha gl::blend-dst-alpha)
  (define-constant gl::blend-src-alpha 32971)
  (define gl::blend-src-alpha gl::blend-src-alpha)
  (define-constant gl::point-size-min 33062)
  (define gl::point-size-min gl::point-size-min)
  (define-constant gl::point-size-max 33063)
  (define gl::point-size-max gl::point-size-max)
  (define-constant gl::point-fade-threshold-size 33064)
  (define gl::point-fade-threshold-size gl::point-fade-threshold-size)
  (define-constant gl::point-distance-attenuation 33065)
  (define gl::point-distance-attenuation gl::point-distance-attenuation)
  (define-constant gl::generate-mipmap 33169)
  (define gl::generate-mipmap gl::generate-mipmap)
  (define-constant gl::generate-mipmap-hint 33170)
  (define gl::generate-mipmap-hint gl::generate-mipmap-hint)
  (define-constant gl::depth-component16 33189)
  (define gl::depth-component16 gl::depth-component16)
  (define-constant gl::depth-component24 33190)
  (define gl::depth-component24 gl::depth-component24)
  (define-constant gl::depth-component32 33191)
  (define gl::depth-component32 gl::depth-component32)
  (define-constant gl::mirrored-repeat 33648)
  (define gl::mirrored-repeat gl::mirrored-repeat)
  (define-constant gl::fog-coordinate-source 33872)
  (define gl::fog-coordinate-source gl::fog-coordinate-source)
  (define-constant gl::fog-coordinate 33873)
  (define gl::fog-coordinate gl::fog-coordinate)
  (define-constant gl::fragment-depth 33874)
  (define gl::fragment-depth gl::fragment-depth)
  (define-constant gl::current-fog-coordinate 33875)
  (define gl::current-fog-coordinate gl::current-fog-coordinate)
  (define-constant gl::fog-coordinate-array-type 33876)
  (define gl::fog-coordinate-array-type gl::fog-coordinate-array-type)
  (define-constant gl::fog-coordinate-array-stride 33877)
  (define gl::fog-coordinate-array-stride gl::fog-coordinate-array-stride)
  (define-constant gl::fog-coordinate-array-pointer 33878)
  (define gl::fog-coordinate-array-pointer gl::fog-coordinate-array-pointer)
  (define-constant gl::fog-coordinate-array 33879)
  (define gl::fog-coordinate-array gl::fog-coordinate-array)
  (define-constant gl::color-sum 33880)
  (define gl::color-sum gl::color-sum)
  (define-constant gl::current-secondary-color 33881)
  (define gl::current-secondary-color gl::current-secondary-color)
  (define-constant gl::secondary-color-array-size 33882)
  (define gl::secondary-color-array-size gl::secondary-color-array-size)
  (define-constant gl::secondary-color-array-type 33883)
  (define gl::secondary-color-array-type gl::secondary-color-array-type)
  (define-constant gl::secondary-color-array-stride 33884)
  (define gl::secondary-color-array-stride gl::secondary-color-array-stride)
  (define-constant gl::secondary-color-array-pointer 33885)
  (define gl::secondary-color-array-pointer gl::secondary-color-array-pointer)
  (define-constant gl::secondary-color-array 33886)
  (define gl::secondary-color-array gl::secondary-color-array)
  (define-constant gl::max-texture-lod-bias 34045)
  (define gl::max-texture-lod-bias gl::max-texture-lod-bias)
  (define-constant gl::texture-filter-control 34048)
  (define gl::texture-filter-control gl::texture-filter-control)
  (define-constant gl::texture-lod-bias 34049)
  (define gl::texture-lod-bias gl::texture-lod-bias)
  (define-constant gl::incr-wrap 34055)
  (define gl::incr-wrap gl::incr-wrap)
  (define-constant gl::decr-wrap 34056)
  (define gl::decr-wrap gl::decr-wrap)
  (define-constant gl::texture-depth-size 34890)
  (define gl::texture-depth-size gl::texture-depth-size)
  (define-constant gl::depth-texture-mode 34891)
  (define gl::depth-texture-mode gl::depth-texture-mode)
  (define-constant gl::texture-compare-mode 34892)
  (define gl::texture-compare-mode gl::texture-compare-mode)
  (define-constant gl::texture-compare-func 34893)
  (define gl::texture-compare-func gl::texture-compare-func)
  (define-constant gl::compare-r-to-texture 34894)
  (define gl::compare-r-to-texture gl::compare-r-to-texture)
  (define-constant gl::version-1-5 1)
  (define gl::version-1-5 gl::version-1-5)
  (define-foreign-variable gl::fog-coord-src integer "GL_FOG_COORD_SRC")
  (define gl::fog-coord-src gl::fog-coord-src)
  (define-foreign-variable gl::fog-coord integer "GL_FOG_COORD")
  (define gl::fog-coord gl::fog-coord)
  (define-foreign-variable
    gl::current-fog-coord
    integer
    "GL_CURRENT_FOG_COORD")
  (define gl::current-fog-coord gl::current-fog-coord)
  (define-foreign-variable
    gl::fog-coord-array-type
    integer
    "GL_FOG_COORD_ARRAY_TYPE")
  (define gl::fog-coord-array-type gl::fog-coord-array-type)
  (define-foreign-variable
    gl::fog-coord-array-stride
    integer
    "GL_FOG_COORD_ARRAY_STRIDE")
  (define gl::fog-coord-array-stride gl::fog-coord-array-stride)
  (define-foreign-variable
    gl::fog-coord-array-pointer
    integer
    "GL_FOG_COORD_ARRAY_POINTER")
  (define gl::fog-coord-array-pointer gl::fog-coord-array-pointer)
  (define-foreign-variable gl::fog-coord-array integer "GL_FOG_COORD_ARRAY")
  (define gl::fog-coord-array gl::fog-coord-array)
  (define-foreign-variable gl::src0-rgb integer "GL_SRC0_RGB")
  (define gl::src0-rgb gl::src0-rgb)
  (define-foreign-variable gl::src1-rgb integer "GL_SRC1_RGB")
  (define gl::src1-rgb gl::src1-rgb)
  (define-foreign-variable gl::src2-rgb integer "GL_SRC2_RGB")
  (define gl::src2-rgb gl::src2-rgb)
  (define-foreign-variable gl::src0-alpha integer "GL_SRC0_ALPHA")
  (define gl::src0-alpha gl::src0-alpha)
  (define-foreign-variable gl::src1-alpha integer "GL_SRC1_ALPHA")
  (define gl::src1-alpha gl::src1-alpha)
  (define-foreign-variable gl::src2-alpha integer "GL_SRC2_ALPHA")
  (define gl::src2-alpha gl::src2-alpha)
  (define-constant gl::buffer-size 34660)
  (define gl::buffer-size gl::buffer-size)
  (define-constant gl::buffer-usage 34661)
  (define gl::buffer-usage gl::buffer-usage)
  (define-constant gl::array-buffer 34962)
  (define gl::array-buffer gl::array-buffer)
  (define-constant gl::element-array-buffer 34963)
  (define gl::element-array-buffer gl::element-array-buffer)
  (define-constant gl::array-buffer-binding 34964)
  (define gl::array-buffer-binding gl::array-buffer-binding)
  (define-constant gl::element-array-buffer-binding 34965)
  (define gl::element-array-buffer-binding gl::element-array-buffer-binding)
  (define-constant gl::vertex-array-buffer-binding 34966)
  (define gl::vertex-array-buffer-binding gl::vertex-array-buffer-binding)
  (define-constant gl::normal-array-buffer-binding 34967)
  (define gl::normal-array-buffer-binding gl::normal-array-buffer-binding)
  (define-constant gl::color-array-buffer-binding 34968)
  (define gl::color-array-buffer-binding gl::color-array-buffer-binding)
  (define-constant gl::index-array-buffer-binding 34969)
  (define gl::index-array-buffer-binding gl::index-array-buffer-binding)
  (define-constant gl::texture-coord-array-buffer-binding 34970)
  (define gl::texture-coord-array-buffer-binding
    gl::texture-coord-array-buffer-binding)
  (define-constant gl::edge-flag-array-buffer-binding 34971)
  (define gl::edge-flag-array-buffer-binding
    gl::edge-flag-array-buffer-binding)
  (define-constant gl::secondary-color-array-buffer-binding 34972)
  (define gl::secondary-color-array-buffer-binding
    gl::secondary-color-array-buffer-binding)
  (define-constant gl::fog-coordinate-array-buffer-binding 34973)
  (define gl::fog-coordinate-array-buffer-binding
    gl::fog-coordinate-array-buffer-binding)
  (define-constant gl::weight-array-buffer-binding 34974)
  (define gl::weight-array-buffer-binding gl::weight-array-buffer-binding)
  (define-constant gl::vertex-attrib-array-buffer-binding 34975)
  (define gl::vertex-attrib-array-buffer-binding
    gl::vertex-attrib-array-buffer-binding)
  (define-constant gl::read-only 35000)
  (define gl::read-only gl::read-only)
  (define-constant gl::write-only 35001)
  (define gl::write-only gl::write-only)
  (define-constant gl::read-write 35002)
  (define gl::read-write gl::read-write)
  (define-constant gl::buffer-access 35003)
  (define gl::buffer-access gl::buffer-access)
  (define-constant gl::buffer-mapped 35004)
  (define gl::buffer-mapped gl::buffer-mapped)
  (define-constant gl::buffer-map-pointer 35005)
  (define gl::buffer-map-pointer gl::buffer-map-pointer)
  (define-constant gl::stream-draw 35040)
  (define gl::stream-draw gl::stream-draw)
  (define-constant gl::stream-read 35041)
  (define gl::stream-read gl::stream-read)
  (define-constant gl::stream-copy 35042)
  (define gl::stream-copy gl::stream-copy)
  (define-constant gl::static-draw 35044)
  (define gl::static-draw gl::static-draw)
  (define-constant gl::static-read 35045)
  (define gl::static-read gl::static-read)
  (define-constant gl::static-copy 35046)
  (define gl::static-copy gl::static-copy)
  (define-constant gl::dynamic-draw 35048)
  (define gl::dynamic-draw gl::dynamic-draw)
  (define-constant gl::dynamic-read 35049)
  (define gl::dynamic-read gl::dynamic-read)
  (define-constant gl::dynamic-copy 35050)
  (define gl::dynamic-copy gl::dynamic-copy)
  (define-constant gl::samples-passed 35092)
  (define gl::samples-passed gl::samples-passed)
  (define-constant gl::query-counter-bits 34916)
  (define gl::query-counter-bits gl::query-counter-bits)
  (define-constant gl::current-query 34917)
  (define gl::current-query gl::current-query)
  (define-constant gl::query-result 34918)
  (define gl::query-result gl::query-result)
  (define-constant gl::query-result-available 34919)
  (define gl::query-result-available gl::query-result-available)
  (define-constant gl::version-2-0 1)
  (define gl::version-2-0 gl::version-2-0)
  (define-foreign-variable
    gl::blend-equation-rgb
    integer
    "GL_BLEND_EQUATION_RGB")
  (define gl::blend-equation-rgb gl::blend-equation-rgb)
  (define-constant gl::vertex-attrib-array-enabled 34338)
  (define gl::vertex-attrib-array-enabled gl::vertex-attrib-array-enabled)
  (define-constant gl::vertex-attrib-array-size 34339)
  (define gl::vertex-attrib-array-size gl::vertex-attrib-array-size)
  (define-constant gl::vertex-attrib-array-stride 34340)
  (define gl::vertex-attrib-array-stride gl::vertex-attrib-array-stride)
  (define-constant gl::vertex-attrib-array-type 34341)
  (define gl::vertex-attrib-array-type gl::vertex-attrib-array-type)
  (define-constant gl::current-vertex-attrib 34342)
  (define gl::current-vertex-attrib gl::current-vertex-attrib)
  (define-constant gl::vertex-program-point-size 34370)
  (define gl::vertex-program-point-size gl::vertex-program-point-size)
  (define-constant gl::vertex-program-two-side 34371)
  (define gl::vertex-program-two-side gl::vertex-program-two-side)
  (define-constant gl::vertex-attrib-array-pointer 34373)
  (define gl::vertex-attrib-array-pointer gl::vertex-attrib-array-pointer)
  (define-constant gl::stencil-back-func 34816)
  (define gl::stencil-back-func gl::stencil-back-func)
  (define-constant gl::stencil-back-fail 34817)
  (define gl::stencil-back-fail gl::stencil-back-fail)
  (define-constant gl::stencil-back-pass-depth-fail 34818)
  (define gl::stencil-back-pass-depth-fail gl::stencil-back-pass-depth-fail)
  (define-constant gl::stencil-back-pass-depth-pass 34819)
  (define gl::stencil-back-pass-depth-pass gl::stencil-back-pass-depth-pass)
  (define-constant gl::max-draw-buffers 34852)
  (define gl::max-draw-buffers gl::max-draw-buffers)
  (define-constant gl::draw-buffer0 34853)
  (define gl::draw-buffer0 gl::draw-buffer0)
  (define-constant gl::draw-buffer1 34854)
  (define gl::draw-buffer1 gl::draw-buffer1)
  (define-constant gl::draw-buffer2 34855)
  (define gl::draw-buffer2 gl::draw-buffer2)
  (define-constant gl::draw-buffer3 34856)
  (define gl::draw-buffer3 gl::draw-buffer3)
  (define-constant gl::draw-buffer4 34857)
  (define gl::draw-buffer4 gl::draw-buffer4)
  (define-constant gl::draw-buffer5 34858)
  (define gl::draw-buffer5 gl::draw-buffer5)
  (define-constant gl::draw-buffer6 34859)
  (define gl::draw-buffer6 gl::draw-buffer6)
  (define-constant gl::draw-buffer7 34860)
  (define gl::draw-buffer7 gl::draw-buffer7)
  (define-constant gl::draw-buffer8 34861)
  (define gl::draw-buffer8 gl::draw-buffer8)
  (define-constant gl::draw-buffer9 34862)
  (define gl::draw-buffer9 gl::draw-buffer9)
  (define-constant gl::draw-buffer10 34863)
  (define gl::draw-buffer10 gl::draw-buffer10)
  (define-constant gl::draw-buffer11 34864)
  (define gl::draw-buffer11 gl::draw-buffer11)
  (define-constant gl::draw-buffer12 34865)
  (define gl::draw-buffer12 gl::draw-buffer12)
  (define-constant gl::draw-buffer13 34866)
  (define gl::draw-buffer13 gl::draw-buffer13)
  (define-constant gl::draw-buffer14 34867)
  (define gl::draw-buffer14 gl::draw-buffer14)
  (define-constant gl::draw-buffer15 34868)
  (define gl::draw-buffer15 gl::draw-buffer15)
  (define-constant gl::blend-equation-alpha 34877)
  (define gl::blend-equation-alpha gl::blend-equation-alpha)
  (define-constant gl::point-sprite 34913)
  (define gl::point-sprite gl::point-sprite)
  (define-constant gl::coord-replace 34914)
  (define gl::coord-replace gl::coord-replace)
  (define-constant gl::max-vertex-attribs 34921)
  (define gl::max-vertex-attribs gl::max-vertex-attribs)
  (define-constant gl::vertex-attrib-array-normalized 34922)
  (define gl::vertex-attrib-array-normalized
    gl::vertex-attrib-array-normalized)
  (define-constant gl::max-texture-coords 34929)
  (define gl::max-texture-coords gl::max-texture-coords)
  (define-constant gl::max-texture-image-units 34930)
  (define gl::max-texture-image-units gl::max-texture-image-units)
  (define-constant gl::fragment-shader 35632)
  (define gl::fragment-shader gl::fragment-shader)
  (define-constant gl::vertex-shader 35633)
  (define gl::vertex-shader gl::vertex-shader)
  (define-constant gl::max-fragment-uniform-components 35657)
  (define gl::max-fragment-uniform-components
    gl::max-fragment-uniform-components)
  (define-constant gl::max-vertex-uniform-components 35658)
  (define gl::max-vertex-uniform-components gl::max-vertex-uniform-components)
  (define-constant gl::max-varying-floats 35659)
  (define gl::max-varying-floats gl::max-varying-floats)
  (define-constant gl::max-vertex-texture-image-units 35660)
  (define gl::max-vertex-texture-image-units
    gl::max-vertex-texture-image-units)
  (define-constant gl::max-combined-texture-image-units 35661)
  (define gl::max-combined-texture-image-units
    gl::max-combined-texture-image-units)
  (define-constant gl::shader-type 35663)
  (define gl::shader-type gl::shader-type)
  (define-constant gl::float-vec2 35664)
  (define gl::float-vec2 gl::float-vec2)
  (define-constant gl::float-vec3 35665)
  (define gl::float-vec3 gl::float-vec3)
  (define-constant gl::float-vec4 35666)
  (define gl::float-vec4 gl::float-vec4)
  (define-constant gl::int-vec2 35667)
  (define gl::int-vec2 gl::int-vec2)
  (define-constant gl::int-vec3 35668)
  (define gl::int-vec3 gl::int-vec3)
  (define-constant gl::int-vec4 35669)
  (define gl::int-vec4 gl::int-vec4)
  (define-constant gl::bool 35670)
  (define gl::bool gl::bool)
  (define-constant gl::bool-vec2 35671)
  (define gl::bool-vec2 gl::bool-vec2)
  (define-constant gl::bool-vec3 35672)
  (define gl::bool-vec3 gl::bool-vec3)
  (define-constant gl::bool-vec4 35673)
  (define gl::bool-vec4 gl::bool-vec4)
  (define-constant gl::float-mat2 35674)
  (define gl::float-mat2 gl::float-mat2)
  (define-constant gl::float-mat3 35675)
  (define gl::float-mat3 gl::float-mat3)
  (define-constant gl::float-mat4 35676)
  (define gl::float-mat4 gl::float-mat4)
  (define-constant gl::sampler-1d 35677)
  (define gl::sampler-1d gl::sampler-1d)
  (define-constant gl::sampler-2d 35678)
  (define gl::sampler-2d gl::sampler-2d)
  (define-constant gl::sampler-3d 35679)
  (define gl::sampler-3d gl::sampler-3d)
  (define-constant gl::sampler-cube 35680)
  (define gl::sampler-cube gl::sampler-cube)
  (define-constant gl::sampler-1d-shadow 35681)
  (define gl::sampler-1d-shadow gl::sampler-1d-shadow)
  (define-constant gl::sampler-2d-shadow 35682)
  (define gl::sampler-2d-shadow gl::sampler-2d-shadow)
  (define-constant gl::delete-status 35712)
  (define gl::delete-status gl::delete-status)
  (define-constant gl::compile-status 35713)
  (define gl::compile-status gl::compile-status)
  (define-constant gl::link-status 35714)
  (define gl::link-status gl::link-status)
  (define-constant gl::validate-status 35715)
  (define gl::validate-status gl::validate-status)
  (define-constant gl::info-log-length 35716)
  (define gl::info-log-length gl::info-log-length)
  (define-constant gl::attached-shaders 35717)
  (define gl::attached-shaders gl::attached-shaders)
  (define-constant gl::active-uniforms 35718)
  (define gl::active-uniforms gl::active-uniforms)
  (define-constant gl::active-uniform-max-length 35719)
  (define gl::active-uniform-max-length gl::active-uniform-max-length)
  (define-constant gl::shader-source-length 35720)
  (define gl::shader-source-length gl::shader-source-length)
  (define-constant gl::active-attributes 35721)
  (define gl::active-attributes gl::active-attributes)
  (define-constant gl::active-attribute-max-length 35722)
  (define gl::active-attribute-max-length gl::active-attribute-max-length)
  (define-constant gl::fragment-shader-derivative-hint 35723)
  (define gl::fragment-shader-derivative-hint
    gl::fragment-shader-derivative-hint)
  (define-constant gl::shading-language-version 35724)
  (define gl::shading-language-version gl::shading-language-version)
  (define-constant gl::current-program 35725)
  (define gl::current-program gl::current-program)
  (define-constant gl::point-sprite-coord-origin 36000)
  (define gl::point-sprite-coord-origin gl::point-sprite-coord-origin)
  (define-constant gl::lower-left 36001)
  (define gl::lower-left gl::lower-left)
  (define-constant gl::upper-left 36002)
  (define gl::upper-left gl::upper-left)
  (define-constant gl::stencil-back-ref 36003)
  (define gl::stencil-back-ref gl::stencil-back-ref)
  (define-constant gl::stencil-back-value-mask 36004)
  (define gl::stencil-back-value-mask gl::stencil-back-value-mask)
  (define-constant gl::stencil-back-writemask 36005)
  (define gl::stencil-back-writemask gl::stencil-back-writemask)
  (define-constant gl::version-2-1 1)
  (define gl::version-2-1 gl::version-2-1)
  (define-constant gl::current-raster-secondary-color 33887)
  (define gl::current-raster-secondary-color
    gl::current-raster-secondary-color)
  (define-constant gl::pixel-pack-buffer 35051)
  (define gl::pixel-pack-buffer gl::pixel-pack-buffer)
  (define-constant gl::pixel-unpack-buffer 35052)
  (define gl::pixel-unpack-buffer gl::pixel-unpack-buffer)
  (define-constant gl::pixel-pack-buffer-binding 35053)
  (define gl::pixel-pack-buffer-binding gl::pixel-pack-buffer-binding)
  (define-constant gl::pixel-unpack-buffer-binding 35055)
  (define gl::pixel-unpack-buffer-binding gl::pixel-unpack-buffer-binding)
  (define-constant gl::float-mat2x3 35685)
  (define gl::float-mat2x3 gl::float-mat2x3)
  (define-constant gl::float-mat2x4 35686)
  (define gl::float-mat2x4 gl::float-mat2x4)
  (define-constant gl::float-mat3x2 35687)
  (define gl::float-mat3x2 gl::float-mat3x2)
  (define-constant gl::float-mat3x4 35688)
  (define gl::float-mat3x4 gl::float-mat3x4)
  (define-constant gl::float-mat4x2 35689)
  (define gl::float-mat4x2 gl::float-mat4x2)
  (define-constant gl::float-mat4x3 35690)
  (define gl::float-mat4x3 gl::float-mat4x3)
  (define-constant gl::srgb 35904)
  (define gl::srgb gl::srgb)
  (define-constant gl::srgb8 35905)
  (define gl::srgb8 gl::srgb8)
  (define-constant gl::srgb-alpha 35906)
  (define gl::srgb-alpha gl::srgb-alpha)
  (define-constant gl::srgb8-alpha8 35907)
  (define gl::srgb8-alpha8 gl::srgb8-alpha8)
  (define-constant gl::sluminance-alpha 35908)
  (define gl::sluminance-alpha gl::sluminance-alpha)
  (define-constant gl::sluminance8-alpha8 35909)
  (define gl::sluminance8-alpha8 gl::sluminance8-alpha8)
  (define-constant gl::sluminance 35910)
  (define gl::sluminance gl::sluminance)
  (define-constant gl::sluminance8 35911)
  (define gl::sluminance8 gl::sluminance8)
  (define-constant gl::compressed-srgb 35912)
  (define gl::compressed-srgb gl::compressed-srgb)
  (define-constant gl::compressed-srgb-alpha 35913)
  (define gl::compressed-srgb-alpha gl::compressed-srgb-alpha)
  (define-constant gl::compressed-sluminance 35914)
  (define gl::compressed-sluminance gl::compressed-sluminance)
  (define-constant gl::compressed-sluminance-alpha 35915)
  (define gl::compressed-sluminance-alpha gl::compressed-sluminance-alpha)
  (define-foreign-variable gl::clip-distance0 integer "GL_CLIP_DISTANCE0")
  (define gl::clip-distance0 gl::clip-distance0)
  (define-foreign-variable gl::clip-distance1 integer "GL_CLIP_DISTANCE1")
  (define gl::clip-distance1 gl::clip-distance1)
  (define-foreign-variable gl::clip-distance2 integer "GL_CLIP_DISTANCE2")
  (define gl::clip-distance2 gl::clip-distance2)
  (define-foreign-variable gl::clip-distance3 integer "GL_CLIP_DISTANCE3")
  (define gl::clip-distance3 gl::clip-distance3)
  (define-foreign-variable gl::clip-distance4 integer "GL_CLIP_DISTANCE4")
  (define gl::clip-distance4 gl::clip-distance4)
  (define-foreign-variable gl::clip-distance5 integer "GL_CLIP_DISTANCE5")
  (define gl::clip-distance5 gl::clip-distance5)
  (define-foreign-variable
    gl::max-clip-distances
    integer
    "GL_MAX_CLIP_DISTANCES")
  (define gl::max-clip-distances gl::max-clip-distances)
  (define-constant gl::major-version 33307)
  (define gl::major-version gl::major-version)
  (define-constant gl::minor-version 33308)
  (define gl::minor-version gl::minor-version)
  (define-constant gl::num-extensions 33309)
  (define gl::num-extensions gl::num-extensions)
  (define-constant gl::context-flags 33310)
  (define gl::context-flags gl::context-flags)
  (define-constant gl::depth-buffer 33315)
  (define gl::depth-buffer gl::depth-buffer)
  (define-constant gl::stencil-buffer 33316)
  (define gl::stencil-buffer gl::stencil-buffer)
  (define-constant gl::compressed-red 33317)
  (define gl::compressed-red gl::compressed-red)
  (define-constant gl::compressed-rg 33318)
  (define gl::compressed-rg gl::compressed-rg)
  (define-constant gl::context-flag-forward-compatible-bit 1)
  (define gl::context-flag-forward-compatible-bit
    gl::context-flag-forward-compatible-bit)
  (define-constant gl::rgba32f 34836)
  (define gl::rgba32f gl::rgba32f)
  (define-constant gl::rgb32f 34837)
  (define gl::rgb32f gl::rgb32f)
  (define-constant gl::rgba16f 34842)
  (define gl::rgba16f gl::rgba16f)
  (define-constant gl::rgb16f 34843)
  (define gl::rgb16f gl::rgb16f)
  (define-constant gl::vertex-attrib-array-integer 35069)
  (define gl::vertex-attrib-array-integer gl::vertex-attrib-array-integer)
  (define-constant gl::max-array-texture-layers 35071)
  (define gl::max-array-texture-layers gl::max-array-texture-layers)
  (define-constant gl::min-program-texel-offset 35076)
  (define gl::min-program-texel-offset gl::min-program-texel-offset)
  (define-constant gl::max-program-texel-offset 35077)
  (define gl::max-program-texel-offset gl::max-program-texel-offset)
  (define-constant gl::clamp-vertex-color 35098)
  (define gl::clamp-vertex-color gl::clamp-vertex-color)
  (define-constant gl::clamp-fragment-color 35099)
  (define gl::clamp-fragment-color gl::clamp-fragment-color)
  (define-constant gl::clamp-read-color 35100)
  (define gl::clamp-read-color gl::clamp-read-color)
  (define-constant gl::fixed-only 35101)
  (define gl::fixed-only gl::fixed-only)
  (define-foreign-variable
    gl::max-varying-components
    integer
    "GL_MAX_VARYING_COMPONENTS")
  (define gl::max-varying-components gl::max-varying-components)
  (define-constant gl::texture-red-type 35856)
  (define gl::texture-red-type gl::texture-red-type)
  (define-constant gl::texture-green-type 35857)
  (define gl::texture-green-type gl::texture-green-type)
  (define-constant gl::texture-blue-type 35858)
  (define gl::texture-blue-type gl::texture-blue-type)
  (define-constant gl::texture-alpha-type 35859)
  (define gl::texture-alpha-type gl::texture-alpha-type)
  (define-constant gl::texture-luminance-type 35860)
  (define gl::texture-luminance-type gl::texture-luminance-type)
  (define-constant gl::texture-intensity-type 35861)
  (define gl::texture-intensity-type gl::texture-intensity-type)
  (define-constant gl::texture-depth-type 35862)
  (define gl::texture-depth-type gl::texture-depth-type)
  (define-constant gl::unsigned-normalized 35863)
  (define gl::unsigned-normalized gl::unsigned-normalized)
  (define-constant gl::texture-1d-array 35864)
  (define gl::texture-1d-array gl::texture-1d-array)
  (define-constant gl::proxy-texture-1d-array 35865)
  (define gl::proxy-texture-1d-array gl::proxy-texture-1d-array)
  (define-constant gl::texture-2d-array 35866)
  (define gl::texture-2d-array gl::texture-2d-array)
  (define-constant gl::proxy-texture-2d-array 35867)
  (define gl::proxy-texture-2d-array gl::proxy-texture-2d-array)
  (define-constant gl::texture-binding-1d-array 35868)
  (define gl::texture-binding-1d-array gl::texture-binding-1d-array)
  (define-constant gl::texture-binding-2d-array 35869)
  (define gl::texture-binding-2d-array gl::texture-binding-2d-array)
  (define-constant gl::r11f-g11f-b10f 35898)
  (define gl::r11f-g11f-b10f gl::r11f-g11f-b10f)
  (define-constant gl::unsigned-int-10f-11f-11f-rev 35899)
  (define gl::unsigned-int-10f-11f-11f-rev gl::unsigned-int-10f-11f-11f-rev)
  (define-constant gl::rgb9-e5 35901)
  (define gl::rgb9-e5 gl::rgb9-e5)
  (define-constant gl::unsigned-int-5-9-9-9-rev 35902)
  (define gl::unsigned-int-5-9-9-9-rev gl::unsigned-int-5-9-9-9-rev)
  (define-constant gl::texture-shared-size 35903)
  (define gl::texture-shared-size gl::texture-shared-size)
  (define-constant gl::transform-feedback-varying-max-length 35958)
  (define gl::transform-feedback-varying-max-length
    gl::transform-feedback-varying-max-length)
  (define-constant gl::transform-feedback-buffer-mode 35967)
  (define gl::transform-feedback-buffer-mode
    gl::transform-feedback-buffer-mode)
  (define-constant gl::max-transform-feedback-separate-components 35968)
  (define gl::max-transform-feedback-separate-components
    gl::max-transform-feedback-separate-components)
  (define-constant gl::transform-feedback-varyings 35971)
  (define gl::transform-feedback-varyings gl::transform-feedback-varyings)
  (define-constant gl::transform-feedback-buffer-start 35972)
  (define gl::transform-feedback-buffer-start
    gl::transform-feedback-buffer-start)
  (define-constant gl::transform-feedback-buffer-size 35973)
  (define gl::transform-feedback-buffer-size
    gl::transform-feedback-buffer-size)
  (define-constant gl::primitives-generated 35975)
  (define gl::primitives-generated gl::primitives-generated)
  (define-constant gl::transform-feedback-primitives-written 35976)
  (define gl::transform-feedback-primitives-written
    gl::transform-feedback-primitives-written)
  (define-constant gl::rasterizer-discard 35977)
  (define gl::rasterizer-discard gl::rasterizer-discard)
  (define-constant gl::max-transform-feedback-interleaved-components 35978)
  (define gl::max-transform-feedback-interleaved-components
    gl::max-transform-feedback-interleaved-components)
  (define-constant gl::max-transform-feedback-separate-attribs 35979)
  (define gl::max-transform-feedback-separate-attribs
    gl::max-transform-feedback-separate-attribs)
  (define-constant gl::interleaved-attribs 35980)
  (define gl::interleaved-attribs gl::interleaved-attribs)
  (define-constant gl::separate-attribs 35981)
  (define gl::separate-attribs gl::separate-attribs)
  (define-constant gl::transform-feedback-buffer 35982)
  (define gl::transform-feedback-buffer gl::transform-feedback-buffer)
  (define-constant gl::transform-feedback-buffer-binding 35983)
  (define gl::transform-feedback-buffer-binding
    gl::transform-feedback-buffer-binding)
  (define-constant gl::rgba32ui 36208)
  (define gl::rgba32ui gl::rgba32ui)
  (define-constant gl::rgb32ui 36209)
  (define gl::rgb32ui gl::rgb32ui)
  (define-constant gl::rgba16ui 36214)
  (define gl::rgba16ui gl::rgba16ui)
  (define-constant gl::rgb16ui 36215)
  (define gl::rgb16ui gl::rgb16ui)
  (define-constant gl::rgba8ui 36220)
  (define gl::rgba8ui gl::rgba8ui)
  (define-constant gl::rgb8ui 36221)
  (define gl::rgb8ui gl::rgb8ui)
  (define-constant gl::rgba32i 36226)
  (define gl::rgba32i gl::rgba32i)
  (define-constant gl::rgb32i 36227)
  (define gl::rgb32i gl::rgb32i)
  (define-constant gl::rgba16i 36232)
  (define gl::rgba16i gl::rgba16i)
  (define-constant gl::rgb16i 36233)
  (define gl::rgb16i gl::rgb16i)
  (define-constant gl::rgba8i 36238)
  (define gl::rgba8i gl::rgba8i)
  (define-constant gl::rgb8i 36239)
  (define gl::rgb8i gl::rgb8i)
  (define-constant gl::red-integer 36244)
  (define gl::red-integer gl::red-integer)
  (define-constant gl::green-integer 36245)
  (define gl::green-integer gl::green-integer)
  (define-constant gl::blue-integer 36246)
  (define gl::blue-integer gl::blue-integer)
  (define-constant gl::alpha-integer 36247)
  (define gl::alpha-integer gl::alpha-integer)
  (define-constant gl::rgb-integer 36248)
  (define gl::rgb-integer gl::rgb-integer)
  (define-constant gl::rgba-integer 36249)
  (define gl::rgba-integer gl::rgba-integer)
  (define-constant gl::bgr-integer 36250)
  (define gl::bgr-integer gl::bgr-integer)
  (define-constant gl::bgra-integer 36251)
  (define gl::bgra-integer gl::bgra-integer)
  (define-constant gl::sampler-1d-array 36288)
  (define gl::sampler-1d-array gl::sampler-1d-array)
  (define-constant gl::sampler-2d-array 36289)
  (define gl::sampler-2d-array gl::sampler-2d-array)
  (define-constant gl::sampler-1d-array-shadow 36291)
  (define gl::sampler-1d-array-shadow gl::sampler-1d-array-shadow)
  (define-constant gl::sampler-2d-array-shadow 36292)
  (define gl::sampler-2d-array-shadow gl::sampler-2d-array-shadow)
  (define-constant gl::sampler-cube-shadow 36293)
  (define gl::sampler-cube-shadow gl::sampler-cube-shadow)
  (define-constant gl::unsigned-int-vec2 36294)
  (define gl::unsigned-int-vec2 gl::unsigned-int-vec2)
  (define-constant gl::unsigned-int-vec3 36295)
  (define gl::unsigned-int-vec3 gl::unsigned-int-vec3)
  (define-constant gl::unsigned-int-vec4 36296)
  (define gl::unsigned-int-vec4 gl::unsigned-int-vec4)
  (define-constant gl::int-sampler-1d 36297)
  (define gl::int-sampler-1d gl::int-sampler-1d)
  (define-constant gl::int-sampler-2d 36298)
  (define gl::int-sampler-2d gl::int-sampler-2d)
  (define-constant gl::int-sampler-3d 36299)
  (define gl::int-sampler-3d gl::int-sampler-3d)
  (define-constant gl::int-sampler-cube 36300)
  (define gl::int-sampler-cube gl::int-sampler-cube)
  (define-constant gl::int-sampler-1d-array 36302)
  (define gl::int-sampler-1d-array gl::int-sampler-1d-array)
  (define-constant gl::int-sampler-2d-array 36303)
  (define gl::int-sampler-2d-array gl::int-sampler-2d-array)
  (define-constant gl::unsigned-int-sampler-1d 36305)
  (define gl::unsigned-int-sampler-1d gl::unsigned-int-sampler-1d)
  (define-constant gl::unsigned-int-sampler-2d 36306)
  (define gl::unsigned-int-sampler-2d gl::unsigned-int-sampler-2d)
  (define-constant gl::unsigned-int-sampler-3d 36307)
  (define gl::unsigned-int-sampler-3d gl::unsigned-int-sampler-3d)
  (define-constant gl::unsigned-int-sampler-cube 36308)
  (define gl::unsigned-int-sampler-cube gl::unsigned-int-sampler-cube)
  (define-constant gl::unsigned-int-sampler-1d-array 36310)
  (define gl::unsigned-int-sampler-1d-array gl::unsigned-int-sampler-1d-array)
  (define-constant gl::unsigned-int-sampler-2d-array 36311)
  (define gl::unsigned-int-sampler-2d-array gl::unsigned-int-sampler-2d-array)
  (define-constant gl::query-wait 36371)
  (define gl::query-wait gl::query-wait)
  (define-constant gl::query-no-wait 36372)
  (define gl::query-no-wait gl::query-no-wait)
  (define-constant gl::query-by-region-wait 36373)
  (define gl::query-by-region-wait gl::query-by-region-wait)
  (define-constant gl::query-by-region-no-wait 36374)
  (define gl::query-by-region-no-wait gl::query-by-region-no-wait)
  (define-constant gl::clamp-vertex-color 35098)
  (define gl::clamp-vertex-color gl::clamp-vertex-color)
  (define-constant gl::clamp-fragment-color 35099)
  (define gl::clamp-fragment-color gl::clamp-fragment-color)
  (define-constant gl::alpha-integer 36247)
  (define gl::alpha-integer gl::alpha-integer)
  (define-constant gl::sampler-2d-rect 35683)
  (define gl::sampler-2d-rect gl::sampler-2d-rect)
  (define-constant gl::sampler-2d-rect-shadow 35684)
  (define gl::sampler-2d-rect-shadow gl::sampler-2d-rect-shadow)
  (define-constant gl::sampler-buffer 36290)
  (define gl::sampler-buffer gl::sampler-buffer)
  (define-constant gl::int-sampler-2d-rect 36301)
  (define gl::int-sampler-2d-rect gl::int-sampler-2d-rect)
  (define-constant gl::int-sampler-buffer 36304)
  (define gl::int-sampler-buffer gl::int-sampler-buffer)
  (define-constant gl::unsigned-int-sampler-2d-rect 36309)
  (define gl::unsigned-int-sampler-2d-rect gl::unsigned-int-sampler-2d-rect)
  (define-constant gl::unsigned-int-sampler-buffer 36312)
  (define gl::unsigned-int-sampler-buffer gl::unsigned-int-sampler-buffer)
  (define-constant gl::texture-buffer 35882)
  (define gl::texture-buffer gl::texture-buffer)
  (define-constant gl::max-texture-buffer-size 35883)
  (define gl::max-texture-buffer-size gl::max-texture-buffer-size)
  (define-constant gl::texture-binding-buffer 35884)
  (define gl::texture-binding-buffer gl::texture-binding-buffer)
  (define-constant gl::texture-buffer-data-store-binding 35885)
  (define gl::texture-buffer-data-store-binding
    gl::texture-buffer-data-store-binding)
  (define-constant gl::texture-buffer-format 35886)
  (define gl::texture-buffer-format gl::texture-buffer-format)
  (define-constant gl::texture-rectangle 34037)
  (define gl::texture-rectangle gl::texture-rectangle)
  (define-constant gl::texture-binding-rectangle 34038)
  (define gl::texture-binding-rectangle gl::texture-binding-rectangle)
  (define-constant gl::proxy-texture-rectangle 34039)
  (define gl::proxy-texture-rectangle gl::proxy-texture-rectangle)
  (define-constant gl::max-rectangle-texture-size 34040)
  (define gl::max-rectangle-texture-size gl::max-rectangle-texture-size)
  (define-constant gl::red-snorm 36752)
  (define gl::red-snorm gl::red-snorm)
  (define-constant gl::rg-snorm 36753)
  (define gl::rg-snorm gl::rg-snorm)
  (define-constant gl::rgb-snorm 36754)
  (define gl::rgb-snorm gl::rgb-snorm)
  (define-constant gl::rgba-snorm 36755)
  (define gl::rgba-snorm gl::rgba-snorm)
  (define-constant gl::r8-snorm 36756)
  (define gl::r8-snorm gl::r8-snorm)
  (define-constant gl::rg8-snorm 36757)
  (define gl::rg8-snorm gl::rg8-snorm)
  (define-constant gl::rgb8-snorm 36758)
  (define gl::rgb8-snorm gl::rgb8-snorm)
  (define-constant gl::rgba8-snorm 36759)
  (define gl::rgba8-snorm gl::rgba8-snorm)
  (define-constant gl::r16-snorm 36760)
  (define gl::r16-snorm gl::r16-snorm)
  (define-constant gl::rg16-snorm 36761)
  (define gl::rg16-snorm gl::rg16-snorm)
  (define-constant gl::rgb16-snorm 36762)
  (define gl::rgb16-snorm gl::rgb16-snorm)
  (define-constant gl::rgba16-snorm 36763)
  (define gl::rgba16-snorm gl::rgba16-snorm)
  (define-constant gl::signed-normalized 36764)
  (define gl::signed-normalized gl::signed-normalized)
  (define-constant gl::primitive-restart 36765)
  (define gl::primitive-restart gl::primitive-restart)
  (define-constant gl::primitive-restart-index 36766)
  (define gl::primitive-restart-index gl::primitive-restart-index)
  (define-constant gl::context-core-profile-bit 1)
  (define gl::context-core-profile-bit gl::context-core-profile-bit)
  (define-constant gl::context-compatibility-profile-bit 2)
  (define gl::context-compatibility-profile-bit
    gl::context-compatibility-profile-bit)
  (define-constant gl::lines-adjacency 10)
  (define gl::lines-adjacency gl::lines-adjacency)
  (define-constant gl::line-strip-adjacency 11)
  (define gl::line-strip-adjacency gl::line-strip-adjacency)
  (define-constant gl::triangles-adjacency 12)
  (define gl::triangles-adjacency gl::triangles-adjacency)
  (define-constant gl::triangle-strip-adjacency 13)
  (define gl::triangle-strip-adjacency gl::triangle-strip-adjacency)
  (define-constant gl::program-point-size 34370)
  (define gl::program-point-size gl::program-point-size)
  (define-constant gl::max-geometry-texture-image-units 35881)
  (define gl::max-geometry-texture-image-units
    gl::max-geometry-texture-image-units)
  (define-constant gl::framebuffer-attachment-layered 36263)
  (define gl::framebuffer-attachment-layered
    gl::framebuffer-attachment-layered)
  (define-constant gl::framebuffer-incomplete-layer-targets 36264)
  (define gl::framebuffer-incomplete-layer-targets
    gl::framebuffer-incomplete-layer-targets)
  (define-constant gl::geometry-shader 36313)
  (define gl::geometry-shader gl::geometry-shader)
  (define-constant gl::geometry-vertices-out 35094)
  (define gl::geometry-vertices-out gl::geometry-vertices-out)
  (define-constant gl::geometry-input-type 35095)
  (define gl::geometry-input-type gl::geometry-input-type)
  (define-constant gl::geometry-output-type 35096)
  (define gl::geometry-output-type gl::geometry-output-type)
  (define-constant gl::max-geometry-uniform-components 36319)
  (define gl::max-geometry-uniform-components
    gl::max-geometry-uniform-components)
  (define-constant gl::max-geometry-output-vertices 36320)
  (define gl::max-geometry-output-vertices gl::max-geometry-output-vertices)
  (define-constant gl::max-geometry-total-output-components 36321)
  (define gl::max-geometry-total-output-components
    gl::max-geometry-total-output-components)
  (define-constant gl::max-vertex-output-components 37154)
  (define gl::max-vertex-output-components gl::max-vertex-output-components)
  (define-constant gl::max-geometry-input-components 37155)
  (define gl::max-geometry-input-components gl::max-geometry-input-components)
  (define-constant gl::max-geometry-output-components 37156)
  (define gl::max-geometry-output-components
    gl::max-geometry-output-components)
  (define-constant gl::max-fragment-input-components 37157)
  (define gl::max-fragment-input-components gl::max-fragment-input-components)
  (define-constant gl::context-profile-mask 37158)
  (define gl::context-profile-mask gl::context-profile-mask)
  (define-constant gl::num-shading-language-versions 33513)
  (define gl::num-shading-language-versions gl::num-shading-language-versions)
  (define-constant gl::vertex-attrib-array-long 34638)
  (define gl::vertex-attrib-array-long gl::vertex-attrib-array-long)
  (define-constant gl::compressed-rgb8-etc2 37492)
  (define gl::compressed-rgb8-etc2 gl::compressed-rgb8-etc2)
  (define-constant gl::compressed-srgb8-etc2 37493)
  (define gl::compressed-srgb8-etc2 gl::compressed-srgb8-etc2)
  (define-constant gl::compressed-rgb8-punchthrough-alpha1-etc2 37494)
  (define gl::compressed-rgb8-punchthrough-alpha1-etc2
    gl::compressed-rgb8-punchthrough-alpha1-etc2)
  (define-constant gl::compressed-srgb8-punchthrough-alpha1-etc2 37495)
  (define gl::compressed-srgb8-punchthrough-alpha1-etc2
    gl::compressed-srgb8-punchthrough-alpha1-etc2)
  (define-constant gl::compressed-rgba8-etc2-eac 37496)
  (define gl::compressed-rgba8-etc2-eac gl::compressed-rgba8-etc2-eac)
  (define-constant gl::compressed-srgb8-alpha8-etc2-eac 37497)
  (define gl::compressed-srgb8-alpha8-etc2-eac
    gl::compressed-srgb8-alpha8-etc2-eac)
  (define-constant gl::compressed-r11-eac 37488)
  (define gl::compressed-r11-eac gl::compressed-r11-eac)
  (define-constant gl::compressed-signed-r11-eac 37489)
  (define gl::compressed-signed-r11-eac gl::compressed-signed-r11-eac)
  (define-constant gl::compressed-rg11-eac 37490)
  (define gl::compressed-rg11-eac gl::compressed-rg11-eac)
  (define-constant gl::compressed-signed-rg11-eac 37491)
  (define gl::compressed-signed-rg11-eac gl::compressed-signed-rg11-eac)
  (define-constant gl::primitive-restart-fixed-index 36201)
  (define gl::primitive-restart-fixed-index gl::primitive-restart-fixed-index)
  (define-constant gl::any-samples-passed-conservative 36202)
  (define gl::any-samples-passed-conservative
    gl::any-samples-passed-conservative)
  (define-constant gl::max-element-index 36203)
  (define gl::max-element-index gl::max-element-index)
  (define-constant gl::compute-shader 37305)
  (define gl::compute-shader gl::compute-shader)
  (define-constant gl::max-compute-uniform-blocks 37307)
  (define gl::max-compute-uniform-blocks gl::max-compute-uniform-blocks)
  (define-constant gl::max-compute-texture-image-units 37308)
  (define gl::max-compute-texture-image-units
    gl::max-compute-texture-image-units)
  (define-constant gl::max-compute-image-uniforms 37309)
  (define gl::max-compute-image-uniforms gl::max-compute-image-uniforms)
  (define-constant gl::max-compute-shared-memory-size 33378)
  (define gl::max-compute-shared-memory-size
    gl::max-compute-shared-memory-size)
  (define-constant gl::max-compute-uniform-components 33379)
  (define gl::max-compute-uniform-components
    gl::max-compute-uniform-components)
  (define-constant gl::max-compute-atomic-counter-buffers 33380)
  (define gl::max-compute-atomic-counter-buffers
    gl::max-compute-atomic-counter-buffers)
  (define-constant gl::max-compute-atomic-counters 33381)
  (define gl::max-compute-atomic-counters gl::max-compute-atomic-counters)
  (define-constant gl::max-combined-compute-uniform-components 33382)
  (define gl::max-combined-compute-uniform-components
    gl::max-combined-compute-uniform-components)
  (define-constant gl::max-compute-work-group-invocations 37099)
  (define gl::max-compute-work-group-invocations
    gl::max-compute-work-group-invocations)
  (define-constant gl::max-compute-work-group-count 37310)
  (define gl::max-compute-work-group-count gl::max-compute-work-group-count)
  (define-constant gl::max-compute-work-group-size 37311)
  (define gl::max-compute-work-group-size gl::max-compute-work-group-size)
  (define-constant gl::compute-work-group-size 33383)
  (define gl::compute-work-group-size gl::compute-work-group-size)
  (define-constant gl::uniform-block-referenced-by-compute-shader 37100)
  (define gl::uniform-block-referenced-by-compute-shader
    gl::uniform-block-referenced-by-compute-shader)
  (define-constant
    gl::atomic-counter-buffer-referenced-by-compute-shader
    37101)
  (define gl::atomic-counter-buffer-referenced-by-compute-shader
    gl::atomic-counter-buffer-referenced-by-compute-shader)
  (define-constant gl::dispatch-indirect-buffer 37102)
  (define gl::dispatch-indirect-buffer gl::dispatch-indirect-buffer)
  (define-constant gl::dispatch-indirect-buffer-binding 37103)
  (define gl::dispatch-indirect-buffer-binding
    gl::dispatch-indirect-buffer-binding)
  (define-constant gl::compute-shader-bit 32)
  (define gl::compute-shader-bit gl::compute-shader-bit)
  (define-constant gl::debug-output-synchronous 33346)
  (define gl::debug-output-synchronous gl::debug-output-synchronous)
  (define-constant gl::debug-next-logged-message-length 33347)
  (define gl::debug-next-logged-message-length
    gl::debug-next-logged-message-length)
  (define-constant gl::debug-callback-function 33348)
  (define gl::debug-callback-function gl::debug-callback-function)
  (define-constant gl::debug-callback-user-param 33349)
  (define gl::debug-callback-user-param gl::debug-callback-user-param)
  (define-constant gl::debug-source-api 33350)
  (define gl::debug-source-api gl::debug-source-api)
  (define-constant gl::debug-source-window-system 33351)
  (define gl::debug-source-window-system gl::debug-source-window-system)
  (define-constant gl::debug-source-shader-compiler 33352)
  (define gl::debug-source-shader-compiler gl::debug-source-shader-compiler)
  (define-constant gl::debug-source-third-party 33353)
  (define gl::debug-source-third-party gl::debug-source-third-party)
  (define-constant gl::debug-source-application 33354)
  (define gl::debug-source-application gl::debug-source-application)
  (define-constant gl::debug-source-other 33355)
  (define gl::debug-source-other gl::debug-source-other)
  (define-constant gl::debug-type-error 33356)
  (define gl::debug-type-error gl::debug-type-error)
  (define-constant gl::debug-type-deprecated-behavior 33357)
  (define gl::debug-type-deprecated-behavior
    gl::debug-type-deprecated-behavior)
  (define-constant gl::debug-type-undefined-behavior 33358)
  (define gl::debug-type-undefined-behavior gl::debug-type-undefined-behavior)
  (define-constant gl::debug-type-portability 33359)
  (define gl::debug-type-portability gl::debug-type-portability)
  (define-constant gl::debug-type-performance 33360)
  (define gl::debug-type-performance gl::debug-type-performance)
  (define-constant gl::debug-type-other 33361)
  (define gl::debug-type-other gl::debug-type-other)
  (define-constant gl::max-debug-message-length 37187)
  (define gl::max-debug-message-length gl::max-debug-message-length)
  (define-constant gl::max-debug-logged-messages 37188)
  (define gl::max-debug-logged-messages gl::max-debug-logged-messages)
  (define-constant gl::debug-logged-messages 37189)
  (define gl::debug-logged-messages gl::debug-logged-messages)
  (define-constant gl::debug-severity-high 37190)
  (define gl::debug-severity-high gl::debug-severity-high)
  (define-constant gl::debug-severity-medium 37191)
  (define gl::debug-severity-medium gl::debug-severity-medium)
  (define-constant gl::debug-severity-low 37192)
  (define gl::debug-severity-low gl::debug-severity-low)
  (define-constant gl::debug-type-marker 33384)
  (define gl::debug-type-marker gl::debug-type-marker)
  (define-constant gl::debug-type-push-group 33385)
  (define gl::debug-type-push-group gl::debug-type-push-group)
  (define-constant gl::debug-type-pop-group 33386)
  (define gl::debug-type-pop-group gl::debug-type-pop-group)
  (define-constant gl::debug-severity-notification 33387)
  (define gl::debug-severity-notification gl::debug-severity-notification)
  (define-constant gl::max-debug-group-stack-depth 33388)
  (define gl::max-debug-group-stack-depth gl::max-debug-group-stack-depth)
  (define-constant gl::debug-group-stack-depth 33389)
  (define gl::debug-group-stack-depth gl::debug-group-stack-depth)
  (define-constant gl::buffer 33504)
  (define gl::buffer gl::buffer)
  (define-constant gl::shader 33505)
  (define gl::shader gl::shader)
  (define-constant gl::program 33506)
  (define gl::program gl::program)
  (define-constant gl::query 33507)
  (define gl::query gl::query)
  (define-constant gl::program-pipeline 33508)
  (define gl::program-pipeline gl::program-pipeline)
  (define-constant gl::sampler 33510)
  (define gl::sampler gl::sampler)
  (define-constant gl::max-label-length 33512)
  (define gl::max-label-length gl::max-label-length)
  (define-constant gl::debug-output 37600)
  (define gl::debug-output gl::debug-output)
  (define-constant gl::context-flag-debug-bit 2)
  (define gl::context-flag-debug-bit gl::context-flag-debug-bit)
  (define-constant gl::max-uniform-locations 33390)
  (define gl::max-uniform-locations gl::max-uniform-locations)
  (define-constant gl::framebuffer-default-width 37648)
  (define gl::framebuffer-default-width gl::framebuffer-default-width)
  (define-constant gl::framebuffer-default-height 37649)
  (define gl::framebuffer-default-height gl::framebuffer-default-height)
  (define-constant gl::framebuffer-default-layers 37650)
  (define gl::framebuffer-default-layers gl::framebuffer-default-layers)
  (define-constant gl::framebuffer-default-samples 37651)
  (define gl::framebuffer-default-samples gl::framebuffer-default-samples)
  (define-constant gl::framebuffer-default-fixed-sample-locations 37652)
  (define gl::framebuffer-default-fixed-sample-locations
    gl::framebuffer-default-fixed-sample-locations)
  (define-constant gl::max-framebuffer-width 37653)
  (define gl::max-framebuffer-width gl::max-framebuffer-width)
  (define-constant gl::max-framebuffer-height 37654)
  (define gl::max-framebuffer-height gl::max-framebuffer-height)
  (define-constant gl::max-framebuffer-layers 37655)
  (define gl::max-framebuffer-layers gl::max-framebuffer-layers)
  (define-constant gl::max-framebuffer-samples 37656)
  (define gl::max-framebuffer-samples gl::max-framebuffer-samples)
  (define-constant gl::internalformat-supported 33391)
  (define gl::internalformat-supported gl::internalformat-supported)
  (define-constant gl::internalformat-preferred 33392)
  (define gl::internalformat-preferred gl::internalformat-preferred)
  (define-constant gl::internalformat-red-size 33393)
  (define gl::internalformat-red-size gl::internalformat-red-size)
  (define-constant gl::internalformat-green-size 33394)
  (define gl::internalformat-green-size gl::internalformat-green-size)
  (define-constant gl::internalformat-blue-size 33395)
  (define gl::internalformat-blue-size gl::internalformat-blue-size)
  (define-constant gl::internalformat-alpha-size 33396)
  (define gl::internalformat-alpha-size gl::internalformat-alpha-size)
  (define-constant gl::internalformat-depth-size 33397)
  (define gl::internalformat-depth-size gl::internalformat-depth-size)
  (define-constant gl::internalformat-stencil-size 33398)
  (define gl::internalformat-stencil-size gl::internalformat-stencil-size)
  (define-constant gl::internalformat-shared-size 33399)
  (define gl::internalformat-shared-size gl::internalformat-shared-size)
  (define-constant gl::internalformat-red-type 33400)
  (define gl::internalformat-red-type gl::internalformat-red-type)
  (define-constant gl::internalformat-green-type 33401)
  (define gl::internalformat-green-type gl::internalformat-green-type)
  (define-constant gl::internalformat-blue-type 33402)
  (define gl::internalformat-blue-type gl::internalformat-blue-type)
  (define-constant gl::internalformat-alpha-type 33403)
  (define gl::internalformat-alpha-type gl::internalformat-alpha-type)
  (define-constant gl::internalformat-depth-type 33404)
  (define gl::internalformat-depth-type gl::internalformat-depth-type)
  (define-constant gl::internalformat-stencil-type 33405)
  (define gl::internalformat-stencil-type gl::internalformat-stencil-type)
  (define-constant gl::max-width 33406)
  (define gl::max-width gl::max-width)
  (define-constant gl::max-height 33407)
  (define gl::max-height gl::max-height)
  (define-constant gl::max-depth 33408)
  (define gl::max-depth gl::max-depth)
  (define-constant gl::max-layers 33409)
  (define gl::max-layers gl::max-layers)
  (define-constant gl::max-combined-dimensions 33410)
  (define gl::max-combined-dimensions gl::max-combined-dimensions)
  (define-constant gl::color-components 33411)
  (define gl::color-components gl::color-components)
  (define-constant gl::depth-components 33412)
  (define gl::depth-components gl::depth-components)
  (define-constant gl::stencil-components 33413)
  (define gl::stencil-components gl::stencil-components)
  (define-constant gl::color-renderable 33414)
  (define gl::color-renderable gl::color-renderable)
  (define-constant gl::depth-renderable 33415)
  (define gl::depth-renderable gl::depth-renderable)
  (define-constant gl::stencil-renderable 33416)
  (define gl::stencil-renderable gl::stencil-renderable)
  (define-constant gl::framebuffer-renderable 33417)
  (define gl::framebuffer-renderable gl::framebuffer-renderable)
  (define-constant gl::framebuffer-renderable-layered 33418)
  (define gl::framebuffer-renderable-layered
    gl::framebuffer-renderable-layered)
  (define-constant gl::framebuffer-blend 33419)
  (define gl::framebuffer-blend gl::framebuffer-blend)
  (define-constant gl::read-pixels 33420)
  (define gl::read-pixels gl::read-pixels)
  (define-constant gl::read-pixels-format 33421)
  (define gl::read-pixels-format gl::read-pixels-format)
  (define-constant gl::read-pixels-type 33422)
  (define gl::read-pixels-type gl::read-pixels-type)
  (define-constant gl::texture-image-format 33423)
  (define gl::texture-image-format gl::texture-image-format)
  (define-constant gl::texture-image-type 33424)
  (define gl::texture-image-type gl::texture-image-type)
  (define-constant gl::get-texture-image-format 33425)
  (define gl::get-texture-image-format gl::get-texture-image-format)
  (define-constant gl::get-texture-image-type 33426)
  (define gl::get-texture-image-type gl::get-texture-image-type)
  (define-constant gl::mipmap 33427)
  (define gl::mipmap gl::mipmap)
  (define-constant gl::manual-generate-mipmap 33428)
  (define gl::manual-generate-mipmap gl::manual-generate-mipmap)
  (define-constant gl::auto-generate-mipmap 33429)
  (define gl::auto-generate-mipmap gl::auto-generate-mipmap)
  (define-constant gl::color-encoding 33430)
  (define gl::color-encoding gl::color-encoding)
  (define-constant gl::srgb-read 33431)
  (define gl::srgb-read gl::srgb-read)
  (define-constant gl::srgb-write 33432)
  (define gl::srgb-write gl::srgb-write)
  (define-constant gl::filter 33434)
  (define gl::filter gl::filter)
  (define-constant gl::vertex-texture 33435)
  (define gl::vertex-texture gl::vertex-texture)
  (define-constant gl::tess-control-texture 33436)
  (define gl::tess-control-texture gl::tess-control-texture)
  (define-constant gl::tess-evaluation-texture 33437)
  (define gl::tess-evaluation-texture gl::tess-evaluation-texture)
  (define-constant gl::geometry-texture 33438)
  (define gl::geometry-texture gl::geometry-texture)
  (define-constant gl::fragment-texture 33439)
  (define gl::fragment-texture gl::fragment-texture)
  (define-constant gl::compute-texture 33440)
  (define gl::compute-texture gl::compute-texture)
  (define-constant gl::texture-shadow 33441)
  (define gl::texture-shadow gl::texture-shadow)
  (define-constant gl::texture-gather 33442)
  (define gl::texture-gather gl::texture-gather)
  (define-constant gl::texture-gather-shadow 33443)
  (define gl::texture-gather-shadow gl::texture-gather-shadow)
  (define-constant gl::shader-image-load 33444)
  (define gl::shader-image-load gl::shader-image-load)
  (define-constant gl::shader-image-store 33445)
  (define gl::shader-image-store gl::shader-image-store)
  (define-constant gl::shader-image-atomic 33446)
  (define gl::shader-image-atomic gl::shader-image-atomic)
  (define-constant gl::image-texel-size 33447)
  (define gl::image-texel-size gl::image-texel-size)
  (define-constant gl::image-compatibility-class 33448)
  (define gl::image-compatibility-class gl::image-compatibility-class)
  (define-constant gl::image-pixel-format 33449)
  (define gl::image-pixel-format gl::image-pixel-format)
  (define-constant gl::image-pixel-type 33450)
  (define gl::image-pixel-type gl::image-pixel-type)
  (define-constant gl::simultaneous-texture-and-depth-test 33452)
  (define gl::simultaneous-texture-and-depth-test
    gl::simultaneous-texture-and-depth-test)
  (define-constant gl::simultaneous-texture-and-stencil-test 33453)
  (define gl::simultaneous-texture-and-stencil-test
    gl::simultaneous-texture-and-stencil-test)
  (define-constant gl::simultaneous-texture-and-depth-write 33454)
  (define gl::simultaneous-texture-and-depth-write
    gl::simultaneous-texture-and-depth-write)
  (define-constant gl::simultaneous-texture-and-stencil-write 33455)
  (define gl::simultaneous-texture-and-stencil-write
    gl::simultaneous-texture-and-stencil-write)
  (define-constant gl::texture-compressed-block-width 33457)
  (define gl::texture-compressed-block-width
    gl::texture-compressed-block-width)
  (define-constant gl::texture-compressed-block-height 33458)
  (define gl::texture-compressed-block-height
    gl::texture-compressed-block-height)
  (define-constant gl::texture-compressed-block-size 33459)
  (define gl::texture-compressed-block-size gl::texture-compressed-block-size)
  (define-constant gl::clear-buffer 33460)
  (define gl::clear-buffer gl::clear-buffer)
  (define-constant gl::texture-view 33461)
  (define gl::texture-view gl::texture-view)
  (define-constant gl::view-compatibility-class 33462)
  (define gl::view-compatibility-class gl::view-compatibility-class)
  (define-constant gl::full-support 33463)
  (define gl::full-support gl::full-support)
  (define-constant gl::caveat-support 33464)
  (define gl::caveat-support gl::caveat-support)
  (define-constant gl::image-class-4-x-32 33465)
  (define gl::image-class-4-x-32 gl::image-class-4-x-32)
  (define-constant gl::image-class-2-x-32 33466)
  (define gl::image-class-2-x-32 gl::image-class-2-x-32)
  (define-constant gl::image-class-1-x-32 33467)
  (define gl::image-class-1-x-32 gl::image-class-1-x-32)
  (define-constant gl::image-class-4-x-16 33468)
  (define gl::image-class-4-x-16 gl::image-class-4-x-16)
  (define-constant gl::image-class-2-x-16 33469)
  (define gl::image-class-2-x-16 gl::image-class-2-x-16)
  (define-constant gl::image-class-1-x-16 33470)
  (define gl::image-class-1-x-16 gl::image-class-1-x-16)
  (define-constant gl::image-class-4-x-8 33471)
  (define gl::image-class-4-x-8 gl::image-class-4-x-8)
  (define-constant gl::image-class-2-x-8 33472)
  (define gl::image-class-2-x-8 gl::image-class-2-x-8)
  (define-constant gl::image-class-1-x-8 33473)
  (define gl::image-class-1-x-8 gl::image-class-1-x-8)
  (define-constant gl::image-class-11-11-10 33474)
  (define gl::image-class-11-11-10 gl::image-class-11-11-10)
  (define-constant gl::image-class-10-10-10-2 33475)
  (define gl::image-class-10-10-10-2 gl::image-class-10-10-10-2)
  (define-constant gl::view-class-128-bits 33476)
  (define gl::view-class-128-bits gl::view-class-128-bits)
  (define-constant gl::view-class-96-bits 33477)
  (define gl::view-class-96-bits gl::view-class-96-bits)
  (define-constant gl::view-class-64-bits 33478)
  (define gl::view-class-64-bits gl::view-class-64-bits)
  (define-constant gl::view-class-48-bits 33479)
  (define gl::view-class-48-bits gl::view-class-48-bits)
  (define-constant gl::view-class-32-bits 33480)
  (define gl::view-class-32-bits gl::view-class-32-bits)
  (define-constant gl::view-class-24-bits 33481)
  (define gl::view-class-24-bits gl::view-class-24-bits)
  (define-constant gl::view-class-16-bits 33482)
  (define gl::view-class-16-bits gl::view-class-16-bits)
  (define-constant gl::view-class-8-bits 33483)
  (define gl::view-class-8-bits gl::view-class-8-bits)
  (define-constant gl::view-class-s3tc-dxt1-rgb 33484)
  (define gl::view-class-s3tc-dxt1-rgb gl::view-class-s3tc-dxt1-rgb)
  (define-constant gl::view-class-s3tc-dxt1-rgba 33485)
  (define gl::view-class-s3tc-dxt1-rgba gl::view-class-s3tc-dxt1-rgba)
  (define-constant gl::view-class-s3tc-dxt3-rgba 33486)
  (define gl::view-class-s3tc-dxt3-rgba gl::view-class-s3tc-dxt3-rgba)
  (define-constant gl::view-class-s3tc-dxt5-rgba 33487)
  (define gl::view-class-s3tc-dxt5-rgba gl::view-class-s3tc-dxt5-rgba)
  (define-constant gl::view-class-rgtc1-red 33488)
  (define gl::view-class-rgtc1-red gl::view-class-rgtc1-red)
  (define-constant gl::view-class-rgtc2-rg 33489)
  (define gl::view-class-rgtc2-rg gl::view-class-rgtc2-rg)
  (define-constant gl::view-class-bptc-unorm 33490)
  (define gl::view-class-bptc-unorm gl::view-class-bptc-unorm)
  (define-constant gl::view-class-bptc-float 33491)
  (define gl::view-class-bptc-float gl::view-class-bptc-float)
  (define-constant gl::uniform 37601)
  (define gl::uniform gl::uniform)
  (define-constant gl::uniform-block 37602)
  (define gl::uniform-block gl::uniform-block)
  (define-constant gl::program-input 37603)
  (define gl::program-input gl::program-input)
  (define-constant gl::program-output 37604)
  (define gl::program-output gl::program-output)
  (define-constant gl::buffer-variable 37605)
  (define gl::buffer-variable gl::buffer-variable)
  (define-constant gl::shader-storage-block 37606)
  (define gl::shader-storage-block gl::shader-storage-block)
  (define-constant gl::vertex-subroutine 37608)
  (define gl::vertex-subroutine gl::vertex-subroutine)
  (define-constant gl::tess-control-subroutine 37609)
  (define gl::tess-control-subroutine gl::tess-control-subroutine)
  (define-constant gl::tess-evaluation-subroutine 37610)
  (define gl::tess-evaluation-subroutine gl::tess-evaluation-subroutine)
  (define-constant gl::geometry-subroutine 37611)
  (define gl::geometry-subroutine gl::geometry-subroutine)
  (define-constant gl::fragment-subroutine 37612)
  (define gl::fragment-subroutine gl::fragment-subroutine)
  (define-constant gl::compute-subroutine 37613)
  (define gl::compute-subroutine gl::compute-subroutine)
  (define-constant gl::vertex-subroutine-uniform 37614)
  (define gl::vertex-subroutine-uniform gl::vertex-subroutine-uniform)
  (define-constant gl::tess-control-subroutine-uniform 37615)
  (define gl::tess-control-subroutine-uniform
    gl::tess-control-subroutine-uniform)
  (define-constant gl::tess-evaluation-subroutine-uniform 37616)
  (define gl::tess-evaluation-subroutine-uniform
    gl::tess-evaluation-subroutine-uniform)
  (define-constant gl::geometry-subroutine-uniform 37617)
  (define gl::geometry-subroutine-uniform gl::geometry-subroutine-uniform)
  (define-constant gl::fragment-subroutine-uniform 37618)
  (define gl::fragment-subroutine-uniform gl::fragment-subroutine-uniform)
  (define-constant gl::compute-subroutine-uniform 37619)
  (define gl::compute-subroutine-uniform gl::compute-subroutine-uniform)
  (define-constant gl::transform-feedback-varying 37620)
  (define gl::transform-feedback-varying gl::transform-feedback-varying)
  (define-constant gl::active-resources 37621)
  (define gl::active-resources gl::active-resources)
  (define-constant gl::max-name-length 37622)
  (define gl::max-name-length gl::max-name-length)
  (define-constant gl::max-num-active-variables 37623)
  (define gl::max-num-active-variables gl::max-num-active-variables)
  (define-constant gl::max-num-compatible-subroutines 37624)
  (define gl::max-num-compatible-subroutines
    gl::max-num-compatible-subroutines)
  (define-constant gl::name-length 37625)
  (define gl::name-length gl::name-length)
  (define-constant gl::type 37626)
  (define gl::type gl::type)
  (define-constant gl::array-size 37627)
  (define gl::array-size gl::array-size)
  (define-constant gl::offset 37628)
  (define gl::offset gl::offset)
  (define-constant gl::block-index 37629)
  (define gl::block-index gl::block-index)
  (define-constant gl::array-stride 37630)
  (define gl::array-stride gl::array-stride)
  (define-constant gl::matrix-stride 37631)
  (define gl::matrix-stride gl::matrix-stride)
  (define-constant gl::is-row-major 37632)
  (define gl::is-row-major gl::is-row-major)
  (define-constant gl::atomic-counter-buffer-index 37633)
  (define gl::atomic-counter-buffer-index gl::atomic-counter-buffer-index)
  (define-constant gl::buffer-binding 37634)
  (define gl::buffer-binding gl::buffer-binding)
  (define-constant gl::buffer-data-size 37635)
  (define gl::buffer-data-size gl::buffer-data-size)
  (define-constant gl::num-active-variables 37636)
  (define gl::num-active-variables gl::num-active-variables)
  (define-constant gl::active-variables 37637)
  (define gl::active-variables gl::active-variables)
  (define-constant gl::referenced-by-vertex-shader 37638)
  (define gl::referenced-by-vertex-shader gl::referenced-by-vertex-shader)
  (define-constant gl::referenced-by-tess-control-shader 37639)
  (define gl::referenced-by-tess-control-shader
    gl::referenced-by-tess-control-shader)
  (define-constant gl::referenced-by-tess-evaluation-shader 37640)
  (define gl::referenced-by-tess-evaluation-shader
    gl::referenced-by-tess-evaluation-shader)
  (define-constant gl::referenced-by-geometry-shader 37641)
  (define gl::referenced-by-geometry-shader gl::referenced-by-geometry-shader)
  (define-constant gl::referenced-by-fragment-shader 37642)
  (define gl::referenced-by-fragment-shader gl::referenced-by-fragment-shader)
  (define-constant gl::referenced-by-compute-shader 37643)
  (define gl::referenced-by-compute-shader gl::referenced-by-compute-shader)
  (define-constant gl::top-level-array-size 37644)
  (define gl::top-level-array-size gl::top-level-array-size)
  (define-constant gl::top-level-array-stride 37645)
  (define gl::top-level-array-stride gl::top-level-array-stride)
  (define-constant gl::location 37646)
  (define gl::location gl::location)
  (define-constant gl::location-index 37647)
  (define gl::location-index gl::location-index)
  (define-constant gl::is-per-patch 37607)
  (define gl::is-per-patch gl::is-per-patch)
  (define-constant gl::shader-storage-buffer 37074)
  (define gl::shader-storage-buffer gl::shader-storage-buffer)
  (define-constant gl::shader-storage-buffer-binding 37075)
  (define gl::shader-storage-buffer-binding gl::shader-storage-buffer-binding)
  (define-constant gl::shader-storage-buffer-start 37076)
  (define gl::shader-storage-buffer-start gl::shader-storage-buffer-start)
  (define-constant gl::shader-storage-buffer-size 37077)
  (define gl::shader-storage-buffer-size gl::shader-storage-buffer-size)
  (define-constant gl::max-vertex-shader-storage-blocks 37078)
  (define gl::max-vertex-shader-storage-blocks
    gl::max-vertex-shader-storage-blocks)
  (define-constant gl::max-geometry-shader-storage-blocks 37079)
  (define gl::max-geometry-shader-storage-blocks
    gl::max-geometry-shader-storage-blocks)
  (define-constant gl::max-tess-control-shader-storage-blocks 37080)
  (define gl::max-tess-control-shader-storage-blocks
    gl::max-tess-control-shader-storage-blocks)
  (define-constant gl::max-tess-evaluation-shader-storage-blocks 37081)
  (define gl::max-tess-evaluation-shader-storage-blocks
    gl::max-tess-evaluation-shader-storage-blocks)
  (define-constant gl::max-fragment-shader-storage-blocks 37082)
  (define gl::max-fragment-shader-storage-blocks
    gl::max-fragment-shader-storage-blocks)
  (define-constant gl::max-compute-shader-storage-blocks 37083)
  (define gl::max-compute-shader-storage-blocks
    gl::max-compute-shader-storage-blocks)
  (define-constant gl::max-combined-shader-storage-blocks 37084)
  (define gl::max-combined-shader-storage-blocks
    gl::max-combined-shader-storage-blocks)
  (define-constant gl::max-shader-storage-buffer-bindings 37085)
  (define gl::max-shader-storage-buffer-bindings
    gl::max-shader-storage-buffer-bindings)
  (define-constant gl::max-shader-storage-block-size 37086)
  (define gl::max-shader-storage-block-size gl::max-shader-storage-block-size)
  (define-constant gl::shader-storage-buffer-offset-alignment 37087)
  (define gl::shader-storage-buffer-offset-alignment
    gl::shader-storage-buffer-offset-alignment)
  (define-constant gl::shader-storage-barrier-bit 8192)
  (define gl::shader-storage-barrier-bit gl::shader-storage-barrier-bit)
  (define-constant gl::max-combined-shader-output-resources 36665)
  (define gl::max-combined-shader-output-resources
    gl::max-combined-shader-output-resources)
  (define-constant gl::depth-stencil-texture-mode 37098)
  (define gl::depth-stencil-texture-mode gl::depth-stencil-texture-mode)
  (define-constant gl::texture-buffer-offset 37277)
  (define gl::texture-buffer-offset gl::texture-buffer-offset)
  (define-constant gl::texture-buffer-size 37278)
  (define gl::texture-buffer-size gl::texture-buffer-size)
  (define-constant gl::texture-buffer-offset-alignment 37279)
  (define gl::texture-buffer-offset-alignment
    gl::texture-buffer-offset-alignment)
  (define-constant gl::texture-view-min-level 33499)
  (define gl::texture-view-min-level gl::texture-view-min-level)
  (define-constant gl::texture-view-num-levels 33500)
  (define gl::texture-view-num-levels gl::texture-view-num-levels)
  (define-constant gl::texture-view-min-layer 33501)
  (define gl::texture-view-min-layer gl::texture-view-min-layer)
  (define-constant gl::texture-view-num-layers 33502)
  (define gl::texture-view-num-layers gl::texture-view-num-layers)
  (define-constant gl::texture-immutable-levels 33503)
  (define gl::texture-immutable-levels gl::texture-immutable-levels)
  (define-constant gl::vertex-attrib-binding 33492)
  (define gl::vertex-attrib-binding gl::vertex-attrib-binding)
  (define-constant gl::vertex-attrib-relative-offset 33493)
  (define gl::vertex-attrib-relative-offset gl::vertex-attrib-relative-offset)
  (define-constant gl::vertex-binding-divisor 33494)
  (define gl::vertex-binding-divisor gl::vertex-binding-divisor)
  (define-constant gl::vertex-binding-offset 33495)
  (define gl::vertex-binding-offset gl::vertex-binding-offset)
  (define-constant gl::vertex-binding-stride 33496)
  (define gl::vertex-binding-stride gl::vertex-binding-stride)
  (define-constant gl::max-vertex-attrib-relative-offset 33497)
  (define gl::max-vertex-attrib-relative-offset
    gl::max-vertex-attrib-relative-offset)
  (define-constant gl::max-vertex-attrib-bindings 33498)
  (define gl::max-vertex-attrib-bindings gl::max-vertex-attrib-bindings)
  (define-constant gl::vertex-binding-buffer 36687)
  (define gl::vertex-binding-buffer gl::vertex-binding-buffer)
  (define-constant gl::display-list 33511)
  (define gl::display-list gl::display-list)
  (define-constant gl::texture0-arb 33984)
  (define gl::texture0-arb gl::texture0-arb)
  (define-constant gl::texture1-arb 33985)
  (define gl::texture1-arb gl::texture1-arb)
  (define-constant gl::texture2-arb 33986)
  (define gl::texture2-arb gl::texture2-arb)
  (define-constant gl::texture3-arb 33987)
  (define gl::texture3-arb gl::texture3-arb)
  (define-constant gl::texture4-arb 33988)
  (define gl::texture4-arb gl::texture4-arb)
  (define-constant gl::texture5-arb 33989)
  (define gl::texture5-arb gl::texture5-arb)
  (define-constant gl::texture6-arb 33990)
  (define gl::texture6-arb gl::texture6-arb)
  (define-constant gl::texture7-arb 33991)
  (define gl::texture7-arb gl::texture7-arb)
  (define-constant gl::texture8-arb 33992)
  (define gl::texture8-arb gl::texture8-arb)
  (define-constant gl::texture9-arb 33993)
  (define gl::texture9-arb gl::texture9-arb)
  (define-constant gl::texture10-arb 33994)
  (define gl::texture10-arb gl::texture10-arb)
  (define-constant gl::texture11-arb 33995)
  (define gl::texture11-arb gl::texture11-arb)
  (define-constant gl::texture12-arb 33996)
  (define gl::texture12-arb gl::texture12-arb)
  (define-constant gl::texture13-arb 33997)
  (define gl::texture13-arb gl::texture13-arb)
  (define-constant gl::texture14-arb 33998)
  (define gl::texture14-arb gl::texture14-arb)
  (define-constant gl::texture15-arb 33999)
  (define gl::texture15-arb gl::texture15-arb)
  (define-constant gl::texture16-arb 34000)
  (define gl::texture16-arb gl::texture16-arb)
  (define-constant gl::texture17-arb 34001)
  (define gl::texture17-arb gl::texture17-arb)
  (define-constant gl::texture18-arb 34002)
  (define gl::texture18-arb gl::texture18-arb)
  (define-constant gl::texture19-arb 34003)
  (define gl::texture19-arb gl::texture19-arb)
  (define-constant gl::texture20-arb 34004)
  (define gl::texture20-arb gl::texture20-arb)
  (define-constant gl::texture21-arb 34005)
  (define gl::texture21-arb gl::texture21-arb)
  (define-constant gl::texture22-arb 34006)
  (define gl::texture22-arb gl::texture22-arb)
  (define-constant gl::texture23-arb 34007)
  (define gl::texture23-arb gl::texture23-arb)
  (define-constant gl::texture24-arb 34008)
  (define gl::texture24-arb gl::texture24-arb)
  (define-constant gl::texture25-arb 34009)
  (define gl::texture25-arb gl::texture25-arb)
  (define-constant gl::texture26-arb 34010)
  (define gl::texture26-arb gl::texture26-arb)
  (define-constant gl::texture27-arb 34011)
  (define gl::texture27-arb gl::texture27-arb)
  (define-constant gl::texture28-arb 34012)
  (define gl::texture28-arb gl::texture28-arb)
  (define-constant gl::texture29-arb 34013)
  (define gl::texture29-arb gl::texture29-arb)
  (define-constant gl::texture30-arb 34014)
  (define gl::texture30-arb gl::texture30-arb)
  (define-constant gl::texture31-arb 34015)
  (define gl::texture31-arb gl::texture31-arb)
  (define-constant gl::active-texture-arb 34016)
  (define gl::active-texture-arb gl::active-texture-arb)
  (define-constant gl::client-active-texture-arb 34017)
  (define gl::client-active-texture-arb gl::client-active-texture-arb)
  (define-constant gl::max-texture-units-arb 34018)
  (define gl::max-texture-units-arb gl::max-texture-units-arb)
  (define-constant gl::transpose-modelview-matrix-arb 34019)
  (define gl::transpose-modelview-matrix-arb
    gl::transpose-modelview-matrix-arb)
  (define-constant gl::transpose-projection-matrix-arb 34020)
  (define gl::transpose-projection-matrix-arb
    gl::transpose-projection-matrix-arb)
  (define-constant gl::transpose-texture-matrix-arb 34021)
  (define gl::transpose-texture-matrix-arb gl::transpose-texture-matrix-arb)
  (define-constant gl::transpose-color-matrix-arb 34022)
  (define gl::transpose-color-matrix-arb gl::transpose-color-matrix-arb)
  (define-constant gl::multisample-arb 32925)
  (define gl::multisample-arb gl::multisample-arb)
  (define-constant gl::sample-alpha-to-coverage-arb 32926)
  (define gl::sample-alpha-to-coverage-arb gl::sample-alpha-to-coverage-arb)
  (define-constant gl::sample-alpha-to-one-arb 32927)
  (define gl::sample-alpha-to-one-arb gl::sample-alpha-to-one-arb)
  (define-constant gl::sample-coverage-arb 32928)
  (define gl::sample-coverage-arb gl::sample-coverage-arb)
  (define-constant gl::sample-buffers-arb 32936)
  (define gl::sample-buffers-arb gl::sample-buffers-arb)
  (define-constant gl::samples-arb 32937)
  (define gl::samples-arb gl::samples-arb)
  (define-constant gl::sample-coverage-value-arb 32938)
  (define gl::sample-coverage-value-arb gl::sample-coverage-value-arb)
  (define-constant gl::sample-coverage-invert-arb 32939)
  (define gl::sample-coverage-invert-arb gl::sample-coverage-invert-arb)
  (define-constant gl::multisample-bit-arb 536870912)
  (define gl::multisample-bit-arb gl::multisample-bit-arb)
  (define-constant gl::normal-map-arb 34065)
  (define gl::normal-map-arb gl::normal-map-arb)
  (define-constant gl::reflection-map-arb 34066)
  (define gl::reflection-map-arb gl::reflection-map-arb)
  (define-constant gl::texture-cube-map-arb 34067)
  (define gl::texture-cube-map-arb gl::texture-cube-map-arb)
  (define-constant gl::texture-binding-cube-map-arb 34068)
  (define gl::texture-binding-cube-map-arb gl::texture-binding-cube-map-arb)
  (define-constant gl::texture-cube-map-positive-x-arb 34069)
  (define gl::texture-cube-map-positive-x-arb
    gl::texture-cube-map-positive-x-arb)
  (define-constant gl::texture-cube-map-negative-x-arb 34070)
  (define gl::texture-cube-map-negative-x-arb
    gl::texture-cube-map-negative-x-arb)
  (define-constant gl::texture-cube-map-positive-y-arb 34071)
  (define gl::texture-cube-map-positive-y-arb
    gl::texture-cube-map-positive-y-arb)
  (define-constant gl::texture-cube-map-negative-y-arb 34072)
  (define gl::texture-cube-map-negative-y-arb
    gl::texture-cube-map-negative-y-arb)
  (define-constant gl::texture-cube-map-positive-z-arb 34073)
  (define gl::texture-cube-map-positive-z-arb
    gl::texture-cube-map-positive-z-arb)
  (define-constant gl::texture-cube-map-negative-z-arb 34074)
  (define gl::texture-cube-map-negative-z-arb
    gl::texture-cube-map-negative-z-arb)
  (define-constant gl::proxy-texture-cube-map-arb 34075)
  (define gl::proxy-texture-cube-map-arb gl::proxy-texture-cube-map-arb)
  (define-constant gl::max-cube-map-texture-size-arb 34076)
  (define gl::max-cube-map-texture-size-arb gl::max-cube-map-texture-size-arb)
  (define-constant gl::compressed-alpha-arb 34025)
  (define gl::compressed-alpha-arb gl::compressed-alpha-arb)
  (define-constant gl::compressed-luminance-arb 34026)
  (define gl::compressed-luminance-arb gl::compressed-luminance-arb)
  (define-constant gl::compressed-luminance-alpha-arb 34027)
  (define gl::compressed-luminance-alpha-arb
    gl::compressed-luminance-alpha-arb)
  (define-constant gl::compressed-intensity-arb 34028)
  (define gl::compressed-intensity-arb gl::compressed-intensity-arb)
  (define-constant gl::compressed-rgb-arb 34029)
  (define gl::compressed-rgb-arb gl::compressed-rgb-arb)
  (define-constant gl::compressed-rgba-arb 34030)
  (define gl::compressed-rgba-arb gl::compressed-rgba-arb)
  (define-constant gl::texture-compression-hint-arb 34031)
  (define gl::texture-compression-hint-arb gl::texture-compression-hint-arb)
  (define-constant gl::texture-compressed-image-size-arb 34464)
  (define gl::texture-compressed-image-size-arb
    gl::texture-compressed-image-size-arb)
  (define-constant gl::texture-compressed-arb 34465)
  (define gl::texture-compressed-arb gl::texture-compressed-arb)
  (define-constant gl::num-compressed-texture-formats-arb 34466)
  (define gl::num-compressed-texture-formats-arb
    gl::num-compressed-texture-formats-arb)
  (define-constant gl::compressed-texture-formats-arb 34467)
  (define gl::compressed-texture-formats-arb
    gl::compressed-texture-formats-arb)
  (define-constant gl::clamp-to-border-arb 33069)
  (define gl::clamp-to-border-arb gl::clamp-to-border-arb)
  (define-constant gl::point-size-min-arb 33062)
  (define gl::point-size-min-arb gl::point-size-min-arb)
  (define-constant gl::point-size-max-arb 33063)
  (define gl::point-size-max-arb gl::point-size-max-arb)
  (define-constant gl::point-fade-threshold-size-arb 33064)
  (define gl::point-fade-threshold-size-arb gl::point-fade-threshold-size-arb)
  (define-constant gl::point-distance-attenuation-arb 33065)
  (define gl::point-distance-attenuation-arb
    gl::point-distance-attenuation-arb)
  (define-constant gl::max-vertex-units-arb 34468)
  (define gl::max-vertex-units-arb gl::max-vertex-units-arb)
  (define-constant gl::active-vertex-units-arb 34469)
  (define gl::active-vertex-units-arb gl::active-vertex-units-arb)
  (define-constant gl::weight-sum-unity-arb 34470)
  (define gl::weight-sum-unity-arb gl::weight-sum-unity-arb)
  (define-constant gl::vertex-blend-arb 34471)
  (define gl::vertex-blend-arb gl::vertex-blend-arb)
  (define-constant gl::current-weight-arb 34472)
  (define gl::current-weight-arb gl::current-weight-arb)
  (define-constant gl::weight-array-type-arb 34473)
  (define gl::weight-array-type-arb gl::weight-array-type-arb)
  (define-constant gl::weight-array-stride-arb 34474)
  (define gl::weight-array-stride-arb gl::weight-array-stride-arb)
  (define-constant gl::weight-array-size-arb 34475)
  (define gl::weight-array-size-arb gl::weight-array-size-arb)
  (define-constant gl::weight-array-pointer-arb 34476)
  (define gl::weight-array-pointer-arb gl::weight-array-pointer-arb)
  (define-constant gl::weight-array-arb 34477)
  (define gl::weight-array-arb gl::weight-array-arb)
  (define-constant gl::modelview0-arb 5888)
  (define gl::modelview0-arb gl::modelview0-arb)
  (define-constant gl::modelview1-arb 34058)
  (define gl::modelview1-arb gl::modelview1-arb)
  (define-constant gl::modelview2-arb 34594)
  (define gl::modelview2-arb gl::modelview2-arb)
  (define-constant gl::modelview3-arb 34595)
  (define gl::modelview3-arb gl::modelview3-arb)
  (define-constant gl::modelview4-arb 34596)
  (define gl::modelview4-arb gl::modelview4-arb)
  (define-constant gl::modelview5-arb 34597)
  (define gl::modelview5-arb gl::modelview5-arb)
  (define-constant gl::modelview6-arb 34598)
  (define gl::modelview6-arb gl::modelview6-arb)
  (define-constant gl::modelview7-arb 34599)
  (define gl::modelview7-arb gl::modelview7-arb)
  (define-constant gl::modelview8-arb 34600)
  (define gl::modelview8-arb gl::modelview8-arb)
  (define-constant gl::modelview9-arb 34601)
  (define gl::modelview9-arb gl::modelview9-arb)
  (define-constant gl::modelview10-arb 34602)
  (define gl::modelview10-arb gl::modelview10-arb)
  (define-constant gl::modelview11-arb 34603)
  (define gl::modelview11-arb gl::modelview11-arb)
  (define-constant gl::modelview12-arb 34604)
  (define gl::modelview12-arb gl::modelview12-arb)
  (define-constant gl::modelview13-arb 34605)
  (define gl::modelview13-arb gl::modelview13-arb)
  (define-constant gl::modelview14-arb 34606)
  (define gl::modelview14-arb gl::modelview14-arb)
  (define-constant gl::modelview15-arb 34607)
  (define gl::modelview15-arb gl::modelview15-arb)
  (define-constant gl::modelview16-arb 34608)
  (define gl::modelview16-arb gl::modelview16-arb)
  (define-constant gl::modelview17-arb 34609)
  (define gl::modelview17-arb gl::modelview17-arb)
  (define-constant gl::modelview18-arb 34610)
  (define gl::modelview18-arb gl::modelview18-arb)
  (define-constant gl::modelview19-arb 34611)
  (define gl::modelview19-arb gl::modelview19-arb)
  (define-constant gl::modelview20-arb 34612)
  (define gl::modelview20-arb gl::modelview20-arb)
  (define-constant gl::modelview21-arb 34613)
  (define gl::modelview21-arb gl::modelview21-arb)
  (define-constant gl::modelview22-arb 34614)
  (define gl::modelview22-arb gl::modelview22-arb)
  (define-constant gl::modelview23-arb 34615)
  (define gl::modelview23-arb gl::modelview23-arb)
  (define-constant gl::modelview24-arb 34616)
  (define gl::modelview24-arb gl::modelview24-arb)
  (define-constant gl::modelview25-arb 34617)
  (define gl::modelview25-arb gl::modelview25-arb)
  (define-constant gl::modelview26-arb 34618)
  (define gl::modelview26-arb gl::modelview26-arb)
  (define-constant gl::modelview27-arb 34619)
  (define gl::modelview27-arb gl::modelview27-arb)
  (define-constant gl::modelview28-arb 34620)
  (define gl::modelview28-arb gl::modelview28-arb)
  (define-constant gl::modelview29-arb 34621)
  (define gl::modelview29-arb gl::modelview29-arb)
  (define-constant gl::modelview30-arb 34622)
  (define gl::modelview30-arb gl::modelview30-arb)
  (define-constant gl::modelview31-arb 34623)
  (define gl::modelview31-arb gl::modelview31-arb)
  (define-constant gl::matrix-palette-arb 34880)
  (define gl::matrix-palette-arb gl::matrix-palette-arb)
  (define-constant gl::max-matrix-palette-stack-depth-arb 34881)
  (define gl::max-matrix-palette-stack-depth-arb
    gl::max-matrix-palette-stack-depth-arb)
  (define-constant gl::max-palette-matrices-arb 34882)
  (define gl::max-palette-matrices-arb gl::max-palette-matrices-arb)
  (define-constant gl::current-palette-matrix-arb 34883)
  (define gl::current-palette-matrix-arb gl::current-palette-matrix-arb)
  (define-constant gl::matrix-index-array-arb 34884)
  (define gl::matrix-index-array-arb gl::matrix-index-array-arb)
  (define-constant gl::current-matrix-index-arb 34885)
  (define gl::current-matrix-index-arb gl::current-matrix-index-arb)
  (define-constant gl::matrix-index-array-size-arb 34886)
  (define gl::matrix-index-array-size-arb gl::matrix-index-array-size-arb)
  (define-constant gl::matrix-index-array-type-arb 34887)
  (define gl::matrix-index-array-type-arb gl::matrix-index-array-type-arb)
  (define-constant gl::matrix-index-array-stride-arb 34888)
  (define gl::matrix-index-array-stride-arb gl::matrix-index-array-stride-arb)
  (define-constant gl::matrix-index-array-pointer-arb 34889)
  (define gl::matrix-index-array-pointer-arb
    gl::matrix-index-array-pointer-arb)
  (define-constant gl::combine-arb 34160)
  (define gl::combine-arb gl::combine-arb)
  (define-constant gl::combine-rgb-arb 34161)
  (define gl::combine-rgb-arb gl::combine-rgb-arb)
  (define-constant gl::combine-alpha-arb 34162)
  (define gl::combine-alpha-arb gl::combine-alpha-arb)
  (define-constant gl::source0-rgb-arb 34176)
  (define gl::source0-rgb-arb gl::source0-rgb-arb)
  (define-constant gl::source1-rgb-arb 34177)
  (define gl::source1-rgb-arb gl::source1-rgb-arb)
  (define-constant gl::source2-rgb-arb 34178)
  (define gl::source2-rgb-arb gl::source2-rgb-arb)
  (define-constant gl::source0-alpha-arb 34184)
  (define gl::source0-alpha-arb gl::source0-alpha-arb)
  (define-constant gl::source1-alpha-arb 34185)
  (define gl::source1-alpha-arb gl::source1-alpha-arb)
  (define-constant gl::source2-alpha-arb 34186)
  (define gl::source2-alpha-arb gl::source2-alpha-arb)
  (define-constant gl::operand0-rgb-arb 34192)
  (define gl::operand0-rgb-arb gl::operand0-rgb-arb)
  (define-constant gl::operand1-rgb-arb 34193)
  (define gl::operand1-rgb-arb gl::operand1-rgb-arb)
  (define-constant gl::operand2-rgb-arb 34194)
  (define gl::operand2-rgb-arb gl::operand2-rgb-arb)
  (define-constant gl::operand0-alpha-arb 34200)
  (define gl::operand0-alpha-arb gl::operand0-alpha-arb)
  (define-constant gl::operand1-alpha-arb 34201)
  (define gl::operand1-alpha-arb gl::operand1-alpha-arb)
  (define-constant gl::operand2-alpha-arb 34202)
  (define gl::operand2-alpha-arb gl::operand2-alpha-arb)
  (define-constant gl::rgb-scale-arb 34163)
  (define gl::rgb-scale-arb gl::rgb-scale-arb)
  (define-constant gl::add-signed-arb 34164)
  (define gl::add-signed-arb gl::add-signed-arb)
  (define-constant gl::interpolate-arb 34165)
  (define gl::interpolate-arb gl::interpolate-arb)
  (define-constant gl::subtract-arb 34023)
  (define gl::subtract-arb gl::subtract-arb)
  (define-constant gl::constant-arb 34166)
  (define gl::constant-arb gl::constant-arb)
  (define-constant gl::primary-color-arb 34167)
  (define gl::primary-color-arb gl::primary-color-arb)
  (define-constant gl::previous-arb 34168)
  (define gl::previous-arb gl::previous-arb)
  (define-constant gl::dot3-rgb-arb 34478)
  (define gl::dot3-rgb-arb gl::dot3-rgb-arb)
  (define-constant gl::dot3-rgba-arb 34479)
  (define gl::dot3-rgba-arb gl::dot3-rgba-arb)
  (define-constant gl::mirrored-repeat-arb 33648)
  (define gl::mirrored-repeat-arb gl::mirrored-repeat-arb)
  (define-constant gl::depth-component16-arb 33189)
  (define gl::depth-component16-arb gl::depth-component16-arb)
  (define-constant gl::depth-component24-arb 33190)
  (define gl::depth-component24-arb gl::depth-component24-arb)
  (define-constant gl::depth-component32-arb 33191)
  (define gl::depth-component32-arb gl::depth-component32-arb)
  (define-constant gl::texture-depth-size-arb 34890)
  (define gl::texture-depth-size-arb gl::texture-depth-size-arb)
  (define-constant gl::depth-texture-mode-arb 34891)
  (define gl::depth-texture-mode-arb gl::depth-texture-mode-arb)
  (define-constant gl::texture-compare-mode-arb 34892)
  (define gl::texture-compare-mode-arb gl::texture-compare-mode-arb)
  (define-constant gl::texture-compare-func-arb 34893)
  (define gl::texture-compare-func-arb gl::texture-compare-func-arb)
  (define-constant gl::compare-r-to-texture-arb 34894)
  (define gl::compare-r-to-texture-arb gl::compare-r-to-texture-arb)
  (define-constant gl::texture-compare-fail-value-arb 32959)
  (define gl::texture-compare-fail-value-arb
    gl::texture-compare-fail-value-arb)
  (define-constant gl::color-sum-arb 33880)
  (define gl::color-sum-arb gl::color-sum-arb)
  (define-constant gl::vertex-program-arb 34336)
  (define gl::vertex-program-arb gl::vertex-program-arb)
  (define-constant gl::vertex-attrib-array-enabled-arb 34338)
  (define gl::vertex-attrib-array-enabled-arb
    gl::vertex-attrib-array-enabled-arb)
  (define-constant gl::vertex-attrib-array-size-arb 34339)
  (define gl::vertex-attrib-array-size-arb gl::vertex-attrib-array-size-arb)
  (define-constant gl::vertex-attrib-array-stride-arb 34340)
  (define gl::vertex-attrib-array-stride-arb
    gl::vertex-attrib-array-stride-arb)
  (define-constant gl::vertex-attrib-array-type-arb 34341)
  (define gl::vertex-attrib-array-type-arb gl::vertex-attrib-array-type-arb)
  (define-constant gl::current-vertex-attrib-arb 34342)
  (define gl::current-vertex-attrib-arb gl::current-vertex-attrib-arb)
  (define-constant gl::program-length-arb 34343)
  (define gl::program-length-arb gl::program-length-arb)
  (define-constant gl::program-string-arb 34344)
  (define gl::program-string-arb gl::program-string-arb)
  (define-constant gl::max-program-matrix-stack-depth-arb 34350)
  (define gl::max-program-matrix-stack-depth-arb
    gl::max-program-matrix-stack-depth-arb)
  (define-constant gl::max-program-matrices-arb 34351)
  (define gl::max-program-matrices-arb gl::max-program-matrices-arb)
  (define-constant gl::current-matrix-stack-depth-arb 34368)
  (define gl::current-matrix-stack-depth-arb
    gl::current-matrix-stack-depth-arb)
  (define-constant gl::current-matrix-arb 34369)
  (define gl::current-matrix-arb gl::current-matrix-arb)
  (define-constant gl::vertex-program-point-size-arb 34370)
  (define gl::vertex-program-point-size-arb gl::vertex-program-point-size-arb)
  (define-constant gl::vertex-program-two-side-arb 34371)
  (define gl::vertex-program-two-side-arb gl::vertex-program-two-side-arb)
  (define-constant gl::vertex-attrib-array-pointer-arb 34373)
  (define gl::vertex-attrib-array-pointer-arb
    gl::vertex-attrib-array-pointer-arb)
  (define-constant gl::program-error-position-arb 34379)
  (define gl::program-error-position-arb gl::program-error-position-arb)
  (define-constant gl::program-binding-arb 34423)
  (define gl::program-binding-arb gl::program-binding-arb)
  (define-constant gl::max-vertex-attribs-arb 34921)
  (define gl::max-vertex-attribs-arb gl::max-vertex-attribs-arb)
  (define-constant gl::vertex-attrib-array-normalized-arb 34922)
  (define gl::vertex-attrib-array-normalized-arb
    gl::vertex-attrib-array-normalized-arb)
  (define-constant gl::program-error-string-arb 34932)
  (define gl::program-error-string-arb gl::program-error-string-arb)
  (define-constant gl::program-format-ascii-arb 34933)
  (define gl::program-format-ascii-arb gl::program-format-ascii-arb)
  (define-constant gl::program-format-arb 34934)
  (define gl::program-format-arb gl::program-format-arb)
  (define-constant gl::program-instructions-arb 34976)
  (define gl::program-instructions-arb gl::program-instructions-arb)
  (define-constant gl::max-program-instructions-arb 34977)
  (define gl::max-program-instructions-arb gl::max-program-instructions-arb)
  (define-constant gl::program-native-instructions-arb 34978)
  (define gl::program-native-instructions-arb
    gl::program-native-instructions-arb)
  (define-constant gl::max-program-native-instructions-arb 34979)
  (define gl::max-program-native-instructions-arb
    gl::max-program-native-instructions-arb)
  (define-constant gl::program-temporaries-arb 34980)
  (define gl::program-temporaries-arb gl::program-temporaries-arb)
  (define-constant gl::max-program-temporaries-arb 34981)
  (define gl::max-program-temporaries-arb gl::max-program-temporaries-arb)
  (define-constant gl::program-native-temporaries-arb 34982)
  (define gl::program-native-temporaries-arb
    gl::program-native-temporaries-arb)
  (define-constant gl::max-program-native-temporaries-arb 34983)
  (define gl::max-program-native-temporaries-arb
    gl::max-program-native-temporaries-arb)
  (define-constant gl::program-parameters-arb 34984)
  (define gl::program-parameters-arb gl::program-parameters-arb)
  (define-constant gl::max-program-parameters-arb 34985)
  (define gl::max-program-parameters-arb gl::max-program-parameters-arb)
  (define-constant gl::program-native-parameters-arb 34986)
  (define gl::program-native-parameters-arb gl::program-native-parameters-arb)
  (define-constant gl::max-program-native-parameters-arb 34987)
  (define gl::max-program-native-parameters-arb
    gl::max-program-native-parameters-arb)
  (define-constant gl::program-attribs-arb 34988)
  (define gl::program-attribs-arb gl::program-attribs-arb)
  (define-constant gl::max-program-attribs-arb 34989)
  (define gl::max-program-attribs-arb gl::max-program-attribs-arb)
  (define-constant gl::program-native-attribs-arb 34990)
  (define gl::program-native-attribs-arb gl::program-native-attribs-arb)
  (define-constant gl::max-program-native-attribs-arb 34991)
  (define gl::max-program-native-attribs-arb
    gl::max-program-native-attribs-arb)
  (define-constant gl::program-address-registers-arb 34992)
  (define gl::program-address-registers-arb gl::program-address-registers-arb)
  (define-constant gl::max-program-address-registers-arb 34993)
  (define gl::max-program-address-registers-arb
    gl::max-program-address-registers-arb)
  (define-constant gl::program-native-address-registers-arb 34994)
  (define gl::program-native-address-registers-arb
    gl::program-native-address-registers-arb)
  (define-constant gl::max-program-native-address-registers-arb 34995)
  (define gl::max-program-native-address-registers-arb
    gl::max-program-native-address-registers-arb)
  (define-constant gl::max-program-local-parameters-arb 34996)
  (define gl::max-program-local-parameters-arb
    gl::max-program-local-parameters-arb)
  (define-constant gl::max-program-env-parameters-arb 34997)
  (define gl::max-program-env-parameters-arb
    gl::max-program-env-parameters-arb)
  (define-constant gl::program-under-native-limits-arb 34998)
  (define gl::program-under-native-limits-arb
    gl::program-under-native-limits-arb)
  (define-constant gl::transpose-current-matrix-arb 34999)
  (define gl::transpose-current-matrix-arb gl::transpose-current-matrix-arb)
  (define-constant gl::matrix0-arb 35008)
  (define gl::matrix0-arb gl::matrix0-arb)
  (define-constant gl::matrix1-arb 35009)
  (define gl::matrix1-arb gl::matrix1-arb)
  (define-constant gl::matrix2-arb 35010)
  (define gl::matrix2-arb gl::matrix2-arb)
  (define-constant gl::matrix3-arb 35011)
  (define gl::matrix3-arb gl::matrix3-arb)
  (define-constant gl::matrix4-arb 35012)
  (define gl::matrix4-arb gl::matrix4-arb)
  (define-constant gl::matrix5-arb 35013)
  (define gl::matrix5-arb gl::matrix5-arb)
  (define-constant gl::matrix6-arb 35014)
  (define gl::matrix6-arb gl::matrix6-arb)
  (define-constant gl::matrix7-arb 35015)
  (define gl::matrix7-arb gl::matrix7-arb)
  (define-constant gl::matrix8-arb 35016)
  (define gl::matrix8-arb gl::matrix8-arb)
  (define-constant gl::matrix9-arb 35017)
  (define gl::matrix9-arb gl::matrix9-arb)
  (define-constant gl::matrix10-arb 35018)
  (define gl::matrix10-arb gl::matrix10-arb)
  (define-constant gl::matrix11-arb 35019)
  (define gl::matrix11-arb gl::matrix11-arb)
  (define-constant gl::matrix12-arb 35020)
  (define gl::matrix12-arb gl::matrix12-arb)
  (define-constant gl::matrix13-arb 35021)
  (define gl::matrix13-arb gl::matrix13-arb)
  (define-constant gl::matrix14-arb 35022)
  (define gl::matrix14-arb gl::matrix14-arb)
  (define-constant gl::matrix15-arb 35023)
  (define gl::matrix15-arb gl::matrix15-arb)
  (define-constant gl::matrix16-arb 35024)
  (define gl::matrix16-arb gl::matrix16-arb)
  (define-constant gl::matrix17-arb 35025)
  (define gl::matrix17-arb gl::matrix17-arb)
  (define-constant gl::matrix18-arb 35026)
  (define gl::matrix18-arb gl::matrix18-arb)
  (define-constant gl::matrix19-arb 35027)
  (define gl::matrix19-arb gl::matrix19-arb)
  (define-constant gl::matrix20-arb 35028)
  (define gl::matrix20-arb gl::matrix20-arb)
  (define-constant gl::matrix21-arb 35029)
  (define gl::matrix21-arb gl::matrix21-arb)
  (define-constant gl::matrix22-arb 35030)
  (define gl::matrix22-arb gl::matrix22-arb)
  (define-constant gl::matrix23-arb 35031)
  (define gl::matrix23-arb gl::matrix23-arb)
  (define-constant gl::matrix24-arb 35032)
  (define gl::matrix24-arb gl::matrix24-arb)
  (define-constant gl::matrix25-arb 35033)
  (define gl::matrix25-arb gl::matrix25-arb)
  (define-constant gl::matrix26-arb 35034)
  (define gl::matrix26-arb gl::matrix26-arb)
  (define-constant gl::matrix27-arb 35035)
  (define gl::matrix27-arb gl::matrix27-arb)
  (define-constant gl::matrix28-arb 35036)
  (define gl::matrix28-arb gl::matrix28-arb)
  (define-constant gl::matrix29-arb 35037)
  (define gl::matrix29-arb gl::matrix29-arb)
  (define-constant gl::matrix30-arb 35038)
  (define gl::matrix30-arb gl::matrix30-arb)
  (define-constant gl::matrix31-arb 35039)
  (define gl::matrix31-arb gl::matrix31-arb)
  (define-constant gl::fragment-program-arb 34820)
  (define gl::fragment-program-arb gl::fragment-program-arb)
  (define-constant gl::program-alu-instructions-arb 34821)
  (define gl::program-alu-instructions-arb gl::program-alu-instructions-arb)
  (define-constant gl::program-tex-instructions-arb 34822)
  (define gl::program-tex-instructions-arb gl::program-tex-instructions-arb)
  (define-constant gl::program-tex-indirections-arb 34823)
  (define gl::program-tex-indirections-arb gl::program-tex-indirections-arb)
  (define-constant gl::program-native-alu-instructions-arb 34824)
  (define gl::program-native-alu-instructions-arb
    gl::program-native-alu-instructions-arb)
  (define-constant gl::program-native-tex-instructions-arb 34825)
  (define gl::program-native-tex-instructions-arb
    gl::program-native-tex-instructions-arb)
  (define-constant gl::program-native-tex-indirections-arb 34826)
  (define gl::program-native-tex-indirections-arb
    gl::program-native-tex-indirections-arb)
  (define-constant gl::max-program-alu-instructions-arb 34827)
  (define gl::max-program-alu-instructions-arb
    gl::max-program-alu-instructions-arb)
  (define-constant gl::max-program-tex-instructions-arb 34828)
  (define gl::max-program-tex-instructions-arb
    gl::max-program-tex-instructions-arb)
  (define-constant gl::max-program-tex-indirections-arb 34829)
  (define gl::max-program-tex-indirections-arb
    gl::max-program-tex-indirections-arb)
  (define-constant gl::max-program-native-alu-instructions-arb 34830)
  (define gl::max-program-native-alu-instructions-arb
    gl::max-program-native-alu-instructions-arb)
  (define-constant gl::max-program-native-tex-instructions-arb 34831)
  (define gl::max-program-native-tex-instructions-arb
    gl::max-program-native-tex-instructions-arb)
  (define-constant gl::max-program-native-tex-indirections-arb 34832)
  (define gl::max-program-native-tex-indirections-arb
    gl::max-program-native-tex-indirections-arb)
  (define-constant gl::max-texture-coords-arb 34929)
  (define gl::max-texture-coords-arb gl::max-texture-coords-arb)
  (define-constant gl::max-texture-image-units-arb 34930)
  (define gl::max-texture-image-units-arb gl::max-texture-image-units-arb)
  (define-constant gl::buffer-size-arb 34660)
  (define gl::buffer-size-arb gl::buffer-size-arb)
  (define-constant gl::buffer-usage-arb 34661)
  (define gl::buffer-usage-arb gl::buffer-usage-arb)
  (define-constant gl::array-buffer-arb 34962)
  (define gl::array-buffer-arb gl::array-buffer-arb)
  (define-constant gl::element-array-buffer-arb 34963)
  (define gl::element-array-buffer-arb gl::element-array-buffer-arb)
  (define-constant gl::array-buffer-binding-arb 34964)
  (define gl::array-buffer-binding-arb gl::array-buffer-binding-arb)
  (define-constant gl::element-array-buffer-binding-arb 34965)
  (define gl::element-array-buffer-binding-arb
    gl::element-array-buffer-binding-arb)
  (define-constant gl::vertex-array-buffer-binding-arb 34966)
  (define gl::vertex-array-buffer-binding-arb
    gl::vertex-array-buffer-binding-arb)
  (define-constant gl::normal-array-buffer-binding-arb 34967)
  (define gl::normal-array-buffer-binding-arb
    gl::normal-array-buffer-binding-arb)
  (define-constant gl::color-array-buffer-binding-arb 34968)
  (define gl::color-array-buffer-binding-arb
    gl::color-array-buffer-binding-arb)
  (define-constant gl::index-array-buffer-binding-arb 34969)
  (define gl::index-array-buffer-binding-arb
    gl::index-array-buffer-binding-arb)
  (define-constant gl::texture-coord-array-buffer-binding-arb 34970)
  (define gl::texture-coord-array-buffer-binding-arb
    gl::texture-coord-array-buffer-binding-arb)
  (define-constant gl::edge-flag-array-buffer-binding-arb 34971)
  (define gl::edge-flag-array-buffer-binding-arb
    gl::edge-flag-array-buffer-binding-arb)
  (define-constant gl::secondary-color-array-buffer-binding-arb 34972)
  (define gl::secondary-color-array-buffer-binding-arb
    gl::secondary-color-array-buffer-binding-arb)
  (define-constant gl::fog-coordinate-array-buffer-binding-arb 34973)
  (define gl::fog-coordinate-array-buffer-binding-arb
    gl::fog-coordinate-array-buffer-binding-arb)
  (define-constant gl::weight-array-buffer-binding-arb 34974)
  (define gl::weight-array-buffer-binding-arb
    gl::weight-array-buffer-binding-arb)
  (define-constant gl::vertex-attrib-array-buffer-binding-arb 34975)
  (define gl::vertex-attrib-array-buffer-binding-arb
    gl::vertex-attrib-array-buffer-binding-arb)
  (define-constant gl::read-only-arb 35000)
  (define gl::read-only-arb gl::read-only-arb)
  (define-constant gl::write-only-arb 35001)
  (define gl::write-only-arb gl::write-only-arb)
  (define-constant gl::read-write-arb 35002)
  (define gl::read-write-arb gl::read-write-arb)
  (define-constant gl::buffer-access-arb 35003)
  (define gl::buffer-access-arb gl::buffer-access-arb)
  (define-constant gl::buffer-mapped-arb 35004)
  (define gl::buffer-mapped-arb gl::buffer-mapped-arb)
  (define-constant gl::buffer-map-pointer-arb 35005)
  (define gl::buffer-map-pointer-arb gl::buffer-map-pointer-arb)
  (define-constant gl::stream-draw-arb 35040)
  (define gl::stream-draw-arb gl::stream-draw-arb)
  (define-constant gl::stream-read-arb 35041)
  (define gl::stream-read-arb gl::stream-read-arb)
  (define-constant gl::stream-copy-arb 35042)
  (define gl::stream-copy-arb gl::stream-copy-arb)
  (define-constant gl::static-draw-arb 35044)
  (define gl::static-draw-arb gl::static-draw-arb)
  (define-constant gl::static-read-arb 35045)
  (define gl::static-read-arb gl::static-read-arb)
  (define-constant gl::static-copy-arb 35046)
  (define gl::static-copy-arb gl::static-copy-arb)
  (define-constant gl::dynamic-draw-arb 35048)
  (define gl::dynamic-draw-arb gl::dynamic-draw-arb)
  (define-constant gl::dynamic-read-arb 35049)
  (define gl::dynamic-read-arb gl::dynamic-read-arb)
  (define-constant gl::dynamic-copy-arb 35050)
  (define gl::dynamic-copy-arb gl::dynamic-copy-arb)
  (define-constant gl::samples-passed-arb 35092)
  (define gl::samples-passed-arb gl::samples-passed-arb)
  (define-constant gl::query-counter-bits-arb 34916)
  (define gl::query-counter-bits-arb gl::query-counter-bits-arb)
  (define-constant gl::current-query-arb 34917)
  (define gl::current-query-arb gl::current-query-arb)
  (define-constant gl::query-result-arb 34918)
  (define gl::query-result-arb gl::query-result-arb)
  (define-constant gl::query-result-available-arb 34919)
  (define gl::query-result-available-arb gl::query-result-available-arb)
  (define-constant gl::program-object-arb 35648)
  (define gl::program-object-arb gl::program-object-arb)
  (define-constant gl::object-type-arb 35662)
  (define gl::object-type-arb gl::object-type-arb)
  (define-constant gl::object-subtype-arb 35663)
  (define gl::object-subtype-arb gl::object-subtype-arb)
  (define-constant gl::object-delete-status-arb 35712)
  (define gl::object-delete-status-arb gl::object-delete-status-arb)
  (define-constant gl::object-compile-status-arb 35713)
  (define gl::object-compile-status-arb gl::object-compile-status-arb)
  (define-constant gl::object-link-status-arb 35714)
  (define gl::object-link-status-arb gl::object-link-status-arb)
  (define-constant gl::object-validate-status-arb 35715)
  (define gl::object-validate-status-arb gl::object-validate-status-arb)
  (define-constant gl::object-info-log-length-arb 35716)
  (define gl::object-info-log-length-arb gl::object-info-log-length-arb)
  (define-constant gl::object-attached-objects-arb 35717)
  (define gl::object-attached-objects-arb gl::object-attached-objects-arb)
  (define-constant gl::object-active-uniforms-arb 35718)
  (define gl::object-active-uniforms-arb gl::object-active-uniforms-arb)
  (define-constant gl::object-active-uniform-max-length-arb 35719)
  (define gl::object-active-uniform-max-length-arb
    gl::object-active-uniform-max-length-arb)
  (define-constant gl::object-shader-source-length-arb 35720)
  (define gl::object-shader-source-length-arb
    gl::object-shader-source-length-arb)
  (define-constant gl::shader-object-arb 35656)
  (define gl::shader-object-arb gl::shader-object-arb)
  (define-constant gl::float-vec2-arb 35664)
  (define gl::float-vec2-arb gl::float-vec2-arb)
  (define-constant gl::float-vec3-arb 35665)
  (define gl::float-vec3-arb gl::float-vec3-arb)
  (define-constant gl::float-vec4-arb 35666)
  (define gl::float-vec4-arb gl::float-vec4-arb)
  (define-constant gl::int-vec2-arb 35667)
  (define gl::int-vec2-arb gl::int-vec2-arb)
  (define-constant gl::int-vec3-arb 35668)
  (define gl::int-vec3-arb gl::int-vec3-arb)
  (define-constant gl::int-vec4-arb 35669)
  (define gl::int-vec4-arb gl::int-vec4-arb)
  (define-constant gl::bool-arb 35670)
  (define gl::bool-arb gl::bool-arb)
  (define-constant gl::bool-vec2-arb 35671)
  (define gl::bool-vec2-arb gl::bool-vec2-arb)
  (define-constant gl::bool-vec3-arb 35672)
  (define gl::bool-vec3-arb gl::bool-vec3-arb)
  (define-constant gl::bool-vec4-arb 35673)
  (define gl::bool-vec4-arb gl::bool-vec4-arb)
  (define-constant gl::float-mat2-arb 35674)
  (define gl::float-mat2-arb gl::float-mat2-arb)
  (define-constant gl::float-mat3-arb 35675)
  (define gl::float-mat3-arb gl::float-mat3-arb)
  (define-constant gl::float-mat4-arb 35676)
  (define gl::float-mat4-arb gl::float-mat4-arb)
  (define-constant gl::sampler-1d-arb 35677)
  (define gl::sampler-1d-arb gl::sampler-1d-arb)
  (define-constant gl::sampler-2d-arb 35678)
  (define gl::sampler-2d-arb gl::sampler-2d-arb)
  (define-constant gl::sampler-3d-arb 35679)
  (define gl::sampler-3d-arb gl::sampler-3d-arb)
  (define-constant gl::sampler-cube-arb 35680)
  (define gl::sampler-cube-arb gl::sampler-cube-arb)
  (define-constant gl::sampler-1d-shadow-arb 35681)
  (define gl::sampler-1d-shadow-arb gl::sampler-1d-shadow-arb)
  (define-constant gl::sampler-2d-shadow-arb 35682)
  (define gl::sampler-2d-shadow-arb gl::sampler-2d-shadow-arb)
  (define-constant gl::sampler-2d-rect-arb 35683)
  (define gl::sampler-2d-rect-arb gl::sampler-2d-rect-arb)
  (define-constant gl::sampler-2d-rect-shadow-arb 35684)
  (define gl::sampler-2d-rect-shadow-arb gl::sampler-2d-rect-shadow-arb)
  (define-constant gl::vertex-shader-arb 35633)
  (define gl::vertex-shader-arb gl::vertex-shader-arb)
  (define-constant gl::max-vertex-uniform-components-arb 35658)
  (define gl::max-vertex-uniform-components-arb
    gl::max-vertex-uniform-components-arb)
  (define-constant gl::max-varying-floats-arb 35659)
  (define gl::max-varying-floats-arb gl::max-varying-floats-arb)
  (define-constant gl::max-vertex-attribs-arb 34921)
  (define gl::max-vertex-attribs-arb gl::max-vertex-attribs-arb)
  (define-constant gl::max-texture-image-units-arb 34930)
  (define gl::max-texture-image-units-arb gl::max-texture-image-units-arb)
  (define-constant gl::max-vertex-texture-image-units-arb 35660)
  (define gl::max-vertex-texture-image-units-arb
    gl::max-vertex-texture-image-units-arb)
  (define-constant gl::max-combined-texture-image-units-arb 35661)
  (define gl::max-combined-texture-image-units-arb
    gl::max-combined-texture-image-units-arb)
  (define-constant gl::max-texture-coords-arb 34929)
  (define gl::max-texture-coords-arb gl::max-texture-coords-arb)
  (define-constant gl::vertex-program-point-size-arb 34370)
  (define gl::vertex-program-point-size-arb gl::vertex-program-point-size-arb)
  (define-constant gl::vertex-program-two-side-arb 34371)
  (define gl::vertex-program-two-side-arb gl::vertex-program-two-side-arb)
  (define-constant gl::object-active-attributes-arb 35721)
  (define gl::object-active-attributes-arb gl::object-active-attributes-arb)
  (define-constant gl::object-active-attribute-max-length-arb 35722)
  (define gl::object-active-attribute-max-length-arb
    gl::object-active-attribute-max-length-arb)
  (define-constant gl::vertex-attrib-array-enabled-arb 34338)
  (define gl::vertex-attrib-array-enabled-arb
    gl::vertex-attrib-array-enabled-arb)
  (define-constant gl::vertex-attrib-array-size-arb 34339)
  (define gl::vertex-attrib-array-size-arb gl::vertex-attrib-array-size-arb)
  (define-constant gl::vertex-attrib-array-stride-arb 34340)
  (define gl::vertex-attrib-array-stride-arb
    gl::vertex-attrib-array-stride-arb)
  (define-constant gl::vertex-attrib-array-type-arb 34341)
  (define gl::vertex-attrib-array-type-arb gl::vertex-attrib-array-type-arb)
  (define-constant gl::vertex-attrib-array-normalized-arb 34922)
  (define gl::vertex-attrib-array-normalized-arb
    gl::vertex-attrib-array-normalized-arb)
  (define-constant gl::current-vertex-attrib-arb 34342)
  (define gl::current-vertex-attrib-arb gl::current-vertex-attrib-arb)
  (define-constant gl::vertex-attrib-array-pointer-arb 34373)
  (define gl::vertex-attrib-array-pointer-arb
    gl::vertex-attrib-array-pointer-arb)
  (define-constant gl::fragment-shader-arb 35632)
  (define gl::fragment-shader-arb gl::fragment-shader-arb)
  (define-constant gl::max-fragment-uniform-components-arb 35657)
  (define gl::max-fragment-uniform-components-arb
    gl::max-fragment-uniform-components-arb)
  (define-constant gl::max-texture-coords-arb 34929)
  (define gl::max-texture-coords-arb gl::max-texture-coords-arb)
  (define-constant gl::max-texture-image-units-arb 34930)
  (define gl::max-texture-image-units-arb gl::max-texture-image-units-arb)
  (define-constant gl::point-sprite-arb 34913)
  (define gl::point-sprite-arb gl::point-sprite-arb)
  (define-constant gl::coord-replace-arb 34914)
  (define gl::coord-replace-arb gl::coord-replace-arb)
  (define-constant gl::max-draw-buffers-arb 34852)
  (define gl::max-draw-buffers-arb gl::max-draw-buffers-arb)
  (define-constant gl::draw-buffer0-arb 34853)
  (define gl::draw-buffer0-arb gl::draw-buffer0-arb)
  (define-constant gl::draw-buffer1-arb 34854)
  (define gl::draw-buffer1-arb gl::draw-buffer1-arb)
  (define-constant gl::draw-buffer2-arb 34855)
  (define gl::draw-buffer2-arb gl::draw-buffer2-arb)
  (define-constant gl::draw-buffer3-arb 34856)
  (define gl::draw-buffer3-arb gl::draw-buffer3-arb)
  (define-constant gl::draw-buffer4-arb 34857)
  (define gl::draw-buffer4-arb gl::draw-buffer4-arb)
  (define-constant gl::draw-buffer5-arb 34858)
  (define gl::draw-buffer5-arb gl::draw-buffer5-arb)
  (define-constant gl::draw-buffer6-arb 34859)
  (define gl::draw-buffer6-arb gl::draw-buffer6-arb)
  (define-constant gl::draw-buffer7-arb 34860)
  (define gl::draw-buffer7-arb gl::draw-buffer7-arb)
  (define-constant gl::draw-buffer8-arb 34861)
  (define gl::draw-buffer8-arb gl::draw-buffer8-arb)
  (define-constant gl::draw-buffer9-arb 34862)
  (define gl::draw-buffer9-arb gl::draw-buffer9-arb)
  (define-constant gl::draw-buffer10-arb 34863)
  (define gl::draw-buffer10-arb gl::draw-buffer10-arb)
  (define-constant gl::draw-buffer11-arb 34864)
  (define gl::draw-buffer11-arb gl::draw-buffer11-arb)
  (define-constant gl::draw-buffer12-arb 34865)
  (define gl::draw-buffer12-arb gl::draw-buffer12-arb)
  (define-constant gl::draw-buffer13-arb 34866)
  (define gl::draw-buffer13-arb gl::draw-buffer13-arb)
  (define-constant gl::draw-buffer14-arb 34867)
  (define gl::draw-buffer14-arb gl::draw-buffer14-arb)
  (define-constant gl::draw-buffer15-arb 34868)
  (define gl::draw-buffer15-arb gl::draw-buffer15-arb)
  (define-constant gl::texture-rectangle-arb 34037)
  (define gl::texture-rectangle-arb gl::texture-rectangle-arb)
  (define-constant gl::texture-binding-rectangle-arb 34038)
  (define gl::texture-binding-rectangle-arb gl::texture-binding-rectangle-arb)
  (define-constant gl::proxy-texture-rectangle-arb 34039)
  (define gl::proxy-texture-rectangle-arb gl::proxy-texture-rectangle-arb)
  (define-constant gl::max-rectangle-texture-size-arb 34040)
  (define gl::max-rectangle-texture-size-arb
    gl::max-rectangle-texture-size-arb)
  (define-constant gl::rgba-float-mode-arb 34848)
  (define gl::rgba-float-mode-arb gl::rgba-float-mode-arb)
  (define-constant gl::clamp-vertex-color-arb 35098)
  (define gl::clamp-vertex-color-arb gl::clamp-vertex-color-arb)
  (define-constant gl::clamp-fragment-color-arb 35099)
  (define gl::clamp-fragment-color-arb gl::clamp-fragment-color-arb)
  (define-constant gl::clamp-read-color-arb 35100)
  (define gl::clamp-read-color-arb gl::clamp-read-color-arb)
  (define-constant gl::fixed-only-arb 35101)
  (define gl::fixed-only-arb gl::fixed-only-arb)
  (define-constant gl::half-float-arb 5131)
  (define gl::half-float-arb gl::half-float-arb)
  (define-constant gl::texture-red-type-arb 35856)
  (define gl::texture-red-type-arb gl::texture-red-type-arb)
  (define-constant gl::texture-green-type-arb 35857)
  (define gl::texture-green-type-arb gl::texture-green-type-arb)
  (define-constant gl::texture-blue-type-arb 35858)
  (define gl::texture-blue-type-arb gl::texture-blue-type-arb)
  (define-constant gl::texture-alpha-type-arb 35859)
  (define gl::texture-alpha-type-arb gl::texture-alpha-type-arb)
  (define-constant gl::texture-luminance-type-arb 35860)
  (define gl::texture-luminance-type-arb gl::texture-luminance-type-arb)
  (define-constant gl::texture-intensity-type-arb 35861)
  (define gl::texture-intensity-type-arb gl::texture-intensity-type-arb)
  (define-constant gl::texture-depth-type-arb 35862)
  (define gl::texture-depth-type-arb gl::texture-depth-type-arb)
  (define-constant gl::unsigned-normalized-arb 35863)
  (define gl::unsigned-normalized-arb gl::unsigned-normalized-arb)
  (define-constant gl::rgba32f-arb 34836)
  (define gl::rgba32f-arb gl::rgba32f-arb)
  (define-constant gl::rgb32f-arb 34837)
  (define gl::rgb32f-arb gl::rgb32f-arb)
  (define-constant gl::alpha32f-arb 34838)
  (define gl::alpha32f-arb gl::alpha32f-arb)
  (define-constant gl::intensity32f-arb 34839)
  (define gl::intensity32f-arb gl::intensity32f-arb)
  (define-constant gl::luminance32f-arb 34840)
  (define gl::luminance32f-arb gl::luminance32f-arb)
  (define-constant gl::luminance-alpha32f-arb 34841)
  (define gl::luminance-alpha32f-arb gl::luminance-alpha32f-arb)
  (define-constant gl::rgba16f-arb 34842)
  (define gl::rgba16f-arb gl::rgba16f-arb)
  (define-constant gl::rgb16f-arb 34843)
  (define gl::rgb16f-arb gl::rgb16f-arb)
  (define-constant gl::alpha16f-arb 34844)
  (define gl::alpha16f-arb gl::alpha16f-arb)
  (define-constant gl::intensity16f-arb 34845)
  (define gl::intensity16f-arb gl::intensity16f-arb)
  (define-constant gl::luminance16f-arb 34846)
  (define gl::luminance16f-arb gl::luminance16f-arb)
  (define-constant gl::luminance-alpha16f-arb 34847)
  (define gl::luminance-alpha16f-arb gl::luminance-alpha16f-arb)
  (define-constant gl::pixel-pack-buffer-arb 35051)
  (define gl::pixel-pack-buffer-arb gl::pixel-pack-buffer-arb)
  (define-constant gl::pixel-unpack-buffer-arb 35052)
  (define gl::pixel-unpack-buffer-arb gl::pixel-unpack-buffer-arb)
  (define-constant gl::pixel-pack-buffer-binding-arb 35053)
  (define gl::pixel-pack-buffer-binding-arb gl::pixel-pack-buffer-binding-arb)
  (define-constant gl::pixel-unpack-buffer-binding-arb 35055)
  (define gl::pixel-unpack-buffer-binding-arb
    gl::pixel-unpack-buffer-binding-arb)
  (define-constant gl::depth-component32f 36012)
  (define gl::depth-component32f gl::depth-component32f)
  (define-constant gl::depth32f-stencil8 36013)
  (define gl::depth32f-stencil8 gl::depth32f-stencil8)
  (define-constant gl::float-32-unsigned-int-24-8-rev 36269)
  (define gl::float-32-unsigned-int-24-8-rev
    gl::float-32-unsigned-int-24-8-rev)
  (define-constant gl::invalid-framebuffer-operation 1286)
  (define gl::invalid-framebuffer-operation gl::invalid-framebuffer-operation)
  (define-constant gl::framebuffer-attachment-color-encoding 33296)
  (define gl::framebuffer-attachment-color-encoding
    gl::framebuffer-attachment-color-encoding)
  (define-constant gl::framebuffer-attachment-component-type 33297)
  (define gl::framebuffer-attachment-component-type
    gl::framebuffer-attachment-component-type)
  (define-constant gl::framebuffer-attachment-red-size 33298)
  (define gl::framebuffer-attachment-red-size
    gl::framebuffer-attachment-red-size)
  (define-constant gl::framebuffer-attachment-green-size 33299)
  (define gl::framebuffer-attachment-green-size
    gl::framebuffer-attachment-green-size)
  (define-constant gl::framebuffer-attachment-blue-size 33300)
  (define gl::framebuffer-attachment-blue-size
    gl::framebuffer-attachment-blue-size)
  (define-constant gl::framebuffer-attachment-alpha-size 33301)
  (define gl::framebuffer-attachment-alpha-size
    gl::framebuffer-attachment-alpha-size)
  (define-constant gl::framebuffer-attachment-depth-size 33302)
  (define gl::framebuffer-attachment-depth-size
    gl::framebuffer-attachment-depth-size)
  (define-constant gl::framebuffer-attachment-stencil-size 33303)
  (define gl::framebuffer-attachment-stencil-size
    gl::framebuffer-attachment-stencil-size)
  (define-constant gl::framebuffer-default 33304)
  (define gl::framebuffer-default gl::framebuffer-default)
  (define-constant gl::framebuffer-undefined 33305)
  (define gl::framebuffer-undefined gl::framebuffer-undefined)
  (define-constant gl::depth-stencil-attachment 33306)
  (define gl::depth-stencil-attachment gl::depth-stencil-attachment)
  (define-constant gl::index 33314)
  (define gl::index gl::index)
  (define-constant gl::max-renderbuffer-size 34024)
  (define gl::max-renderbuffer-size gl::max-renderbuffer-size)
  (define-constant gl::depth-stencil 34041)
  (define gl::depth-stencil gl::depth-stencil)
  (define-constant gl::unsigned-int-24-8 34042)
  (define gl::unsigned-int-24-8 gl::unsigned-int-24-8)
  (define-constant gl::depth24-stencil8 35056)
  (define gl::depth24-stencil8 gl::depth24-stencil8)
  (define-constant gl::texture-stencil-size 35057)
  (define gl::texture-stencil-size gl::texture-stencil-size)
  (define-constant gl::framebuffer-binding 36006)
  (define gl::framebuffer-binding gl::framebuffer-binding)
  (define-foreign-variable
    gl::draw-framebuffer-binding
    integer
    "GL_DRAW_FRAMEBUFFER_BINDING")
  (define gl::draw-framebuffer-binding gl::draw-framebuffer-binding)
  (define-constant gl::renderbuffer-binding 36007)
  (define gl::renderbuffer-binding gl::renderbuffer-binding)
  (define-constant gl::read-framebuffer 36008)
  (define gl::read-framebuffer gl::read-framebuffer)
  (define-constant gl::draw-framebuffer 36009)
  (define gl::draw-framebuffer gl::draw-framebuffer)
  (define-constant gl::read-framebuffer-binding 36010)
  (define gl::read-framebuffer-binding gl::read-framebuffer-binding)
  (define-constant gl::renderbuffer-samples 36011)
  (define gl::renderbuffer-samples gl::renderbuffer-samples)
  (define-constant gl::framebuffer-attachment-object-type 36048)
  (define gl::framebuffer-attachment-object-type
    gl::framebuffer-attachment-object-type)
  (define-constant gl::framebuffer-attachment-object-name 36049)
  (define gl::framebuffer-attachment-object-name
    gl::framebuffer-attachment-object-name)
  (define-constant gl::framebuffer-attachment-texture-level 36050)
  (define gl::framebuffer-attachment-texture-level
    gl::framebuffer-attachment-texture-level)
  (define-constant gl::framebuffer-attachment-texture-cube-map-face 36051)
  (define gl::framebuffer-attachment-texture-cube-map-face
    gl::framebuffer-attachment-texture-cube-map-face)
  (define-constant gl::framebuffer-attachment-texture-layer 36052)
  (define gl::framebuffer-attachment-texture-layer
    gl::framebuffer-attachment-texture-layer)
  (define-constant gl::framebuffer-complete 36053)
  (define gl::framebuffer-complete gl::framebuffer-complete)
  (define-constant gl::framebuffer-incomplete-attachment 36054)
  (define gl::framebuffer-incomplete-attachment
    gl::framebuffer-incomplete-attachment)
  (define-constant gl::framebuffer-incomplete-missing-attachment 36055)
  (define gl::framebuffer-incomplete-missing-attachment
    gl::framebuffer-incomplete-missing-attachment)
  (define-constant gl::framebuffer-incomplete-draw-buffer 36059)
  (define gl::framebuffer-incomplete-draw-buffer
    gl::framebuffer-incomplete-draw-buffer)
  (define-constant gl::framebuffer-incomplete-read-buffer 36060)
  (define gl::framebuffer-incomplete-read-buffer
    gl::framebuffer-incomplete-read-buffer)
  (define-constant gl::framebuffer-unsupported 36061)
  (define gl::framebuffer-unsupported gl::framebuffer-unsupported)
  (define-constant gl::max-color-attachments 36063)
  (define gl::max-color-attachments gl::max-color-attachments)
  (define-constant gl::color-attachment0 36064)
  (define gl::color-attachment0 gl::color-attachment0)
  (define-constant gl::color-attachment1 36065)
  (define gl::color-attachment1 gl::color-attachment1)
  (define-constant gl::color-attachment2 36066)
  (define gl::color-attachment2 gl::color-attachment2)
  (define-constant gl::color-attachment3 36067)
  (define gl::color-attachment3 gl::color-attachment3)
  (define-constant gl::color-attachment4 36068)
  (define gl::color-attachment4 gl::color-attachment4)
  (define-constant gl::color-attachment5 36069)
  (define gl::color-attachment5 gl::color-attachment5)
  (define-constant gl::color-attachment6 36070)
  (define gl::color-attachment6 gl::color-attachment6)
  (define-constant gl::color-attachment7 36071)
  (define gl::color-attachment7 gl::color-attachment7)
  (define-constant gl::color-attachment8 36072)
  (define gl::color-attachment8 gl::color-attachment8)
  (define-constant gl::color-attachment9 36073)
  (define gl::color-attachment9 gl::color-attachment9)
  (define-constant gl::color-attachment10 36074)
  (define gl::color-attachment10 gl::color-attachment10)
  (define-constant gl::color-attachment11 36075)
  (define gl::color-attachment11 gl::color-attachment11)
  (define-constant gl::color-attachment12 36076)
  (define gl::color-attachment12 gl::color-attachment12)
  (define-constant gl::color-attachment13 36077)
  (define gl::color-attachment13 gl::color-attachment13)
  (define-constant gl::color-attachment14 36078)
  (define gl::color-attachment14 gl::color-attachment14)
  (define-constant gl::color-attachment15 36079)
  (define gl::color-attachment15 gl::color-attachment15)
  (define-constant gl::depth-attachment 36096)
  (define gl::depth-attachment gl::depth-attachment)
  (define-constant gl::stencil-attachment 36128)
  (define gl::stencil-attachment gl::stencil-attachment)
  (define-constant gl::framebuffer 36160)
  (define gl::framebuffer gl::framebuffer)
  (define-constant gl::renderbuffer 36161)
  (define gl::renderbuffer gl::renderbuffer)
  (define-constant gl::renderbuffer-width 36162)
  (define gl::renderbuffer-width gl::renderbuffer-width)
  (define-constant gl::renderbuffer-height 36163)
  (define gl::renderbuffer-height gl::renderbuffer-height)
  (define-constant gl::renderbuffer-internal-format 36164)
  (define gl::renderbuffer-internal-format gl::renderbuffer-internal-format)
  (define-constant gl::stencil-index1 36166)
  (define gl::stencil-index1 gl::stencil-index1)
  (define-constant gl::stencil-index4 36167)
  (define gl::stencil-index4 gl::stencil-index4)
  (define-constant gl::stencil-index8 36168)
  (define gl::stencil-index8 gl::stencil-index8)
  (define-constant gl::stencil-index16 36169)
  (define gl::stencil-index16 gl::stencil-index16)
  (define-constant gl::renderbuffer-red-size 36176)
  (define gl::renderbuffer-red-size gl::renderbuffer-red-size)
  (define-constant gl::renderbuffer-green-size 36177)
  (define gl::renderbuffer-green-size gl::renderbuffer-green-size)
  (define-constant gl::renderbuffer-blue-size 36178)
  (define gl::renderbuffer-blue-size gl::renderbuffer-blue-size)
  (define-constant gl::renderbuffer-alpha-size 36179)
  (define gl::renderbuffer-alpha-size gl::renderbuffer-alpha-size)
  (define-constant gl::renderbuffer-depth-size 36180)
  (define gl::renderbuffer-depth-size gl::renderbuffer-depth-size)
  (define-constant gl::renderbuffer-stencil-size 36181)
  (define gl::renderbuffer-stencil-size gl::renderbuffer-stencil-size)
  (define-constant gl::framebuffer-incomplete-multisample 36182)
  (define gl::framebuffer-incomplete-multisample
    gl::framebuffer-incomplete-multisample)
  (define-constant gl::max-samples 36183)
  (define gl::max-samples gl::max-samples)
  (define-constant gl::framebuffer-srgb 36281)
  (define gl::framebuffer-srgb gl::framebuffer-srgb)
  (define-constant gl::lines-adjacency-arb 10)
  (define gl::lines-adjacency-arb gl::lines-adjacency-arb)
  (define-constant gl::line-strip-adjacency-arb 11)
  (define gl::line-strip-adjacency-arb gl::line-strip-adjacency-arb)
  (define-constant gl::triangles-adjacency-arb 12)
  (define gl::triangles-adjacency-arb gl::triangles-adjacency-arb)
  (define-constant gl::triangle-strip-adjacency-arb 13)
  (define gl::triangle-strip-adjacency-arb gl::triangle-strip-adjacency-arb)
  (define-constant gl::program-point-size-arb 34370)
  (define gl::program-point-size-arb gl::program-point-size-arb)
  (define-constant gl::max-geometry-texture-image-units-arb 35881)
  (define gl::max-geometry-texture-image-units-arb
    gl::max-geometry-texture-image-units-arb)
  (define-constant gl::framebuffer-attachment-layered-arb 36263)
  (define gl::framebuffer-attachment-layered-arb
    gl::framebuffer-attachment-layered-arb)
  (define-constant gl::framebuffer-incomplete-layer-targets-arb 36264)
  (define gl::framebuffer-incomplete-layer-targets-arb
    gl::framebuffer-incomplete-layer-targets-arb)
  (define-constant gl::framebuffer-incomplete-layer-count-arb 36265)
  (define gl::framebuffer-incomplete-layer-count-arb
    gl::framebuffer-incomplete-layer-count-arb)
  (define-constant gl::geometry-shader-arb 36313)
  (define gl::geometry-shader-arb gl::geometry-shader-arb)
  (define-constant gl::geometry-vertices-out-arb 36314)
  (define gl::geometry-vertices-out-arb gl::geometry-vertices-out-arb)
  (define-constant gl::geometry-input-type-arb 36315)
  (define gl::geometry-input-type-arb gl::geometry-input-type-arb)
  (define-constant gl::geometry-output-type-arb 36316)
  (define gl::geometry-output-type-arb gl::geometry-output-type-arb)
  (define-constant gl::max-geometry-varying-components-arb 36317)
  (define gl::max-geometry-varying-components-arb
    gl::max-geometry-varying-components-arb)
  (define-constant gl::max-vertex-varying-components-arb 36318)
  (define gl::max-vertex-varying-components-arb
    gl::max-vertex-varying-components-arb)
  (define-constant gl::max-geometry-uniform-components-arb 36319)
  (define gl::max-geometry-uniform-components-arb
    gl::max-geometry-uniform-components-arb)
  (define-constant gl::max-geometry-output-vertices-arb 36320)
  (define gl::max-geometry-output-vertices-arb
    gl::max-geometry-output-vertices-arb)
  (define-constant gl::max-geometry-total-output-components-arb 36321)
  (define gl::max-geometry-total-output-components-arb
    gl::max-geometry-total-output-components-arb)
  (define-constant gl::half-float 5131)
  (define gl::half-float gl::half-float)
  (define-constant gl::map-read-bit 1)
  (define gl::map-read-bit gl::map-read-bit)
  (define-constant gl::map-write-bit 2)
  (define gl::map-write-bit gl::map-write-bit)
  (define-constant gl::map-invalidate-range-bit 4)
  (define gl::map-invalidate-range-bit gl::map-invalidate-range-bit)
  (define-constant gl::map-invalidate-buffer-bit 8)
  (define gl::map-invalidate-buffer-bit gl::map-invalidate-buffer-bit)
  (define-constant gl::map-flush-explicit-bit 16)
  (define gl::map-flush-explicit-bit gl::map-flush-explicit-bit)
  (define-constant gl::map-unsynchronized-bit 32)
  (define gl::map-unsynchronized-bit gl::map-unsynchronized-bit)
  (define-constant gl::texture-buffer-arb 35882)
  (define gl::texture-buffer-arb gl::texture-buffer-arb)
  (define-constant gl::max-texture-buffer-size-arb 35883)
  (define gl::max-texture-buffer-size-arb gl::max-texture-buffer-size-arb)
  (define-constant gl::texture-binding-buffer-arb 35884)
  (define gl::texture-binding-buffer-arb gl::texture-binding-buffer-arb)
  (define-constant gl::texture-buffer-data-store-binding-arb 35885)
  (define gl::texture-buffer-data-store-binding-arb
    gl::texture-buffer-data-store-binding-arb)
  (define-constant gl::texture-buffer-format-arb 35886)
  (define gl::texture-buffer-format-arb gl::texture-buffer-format-arb)
  (define-constant gl::compressed-red-rgtc1 36283)
  (define gl::compressed-red-rgtc1 gl::compressed-red-rgtc1)
  (define-constant gl::compressed-signed-red-rgtc1 36284)
  (define gl::compressed-signed-red-rgtc1 gl::compressed-signed-red-rgtc1)
  (define-constant gl::compressed-rg-rgtc2 36285)
  (define gl::compressed-rg-rgtc2 gl::compressed-rg-rgtc2)
  (define-constant gl::compressed-signed-rg-rgtc2 36286)
  (define gl::compressed-signed-rg-rgtc2 gl::compressed-signed-rg-rgtc2)
  (define-constant gl::rg 33319)
  (define gl::rg gl::rg)
  (define-constant gl::rg-integer 33320)
  (define gl::rg-integer gl::rg-integer)
  (define-constant gl::r8 33321)
  (define gl::r8 gl::r8)
  (define-constant gl::r16 33322)
  (define gl::r16 gl::r16)
  (define-constant gl::rg8 33323)
  (define gl::rg8 gl::rg8)
  (define-constant gl::rg16 33324)
  (define gl::rg16 gl::rg16)
  (define-constant gl::r16f 33325)
  (define gl::r16f gl::r16f)
  (define-constant gl::r32f 33326)
  (define gl::r32f gl::r32f)
  (define-constant gl::rg16f 33327)
  (define gl::rg16f gl::rg16f)
  (define-constant gl::rg32f 33328)
  (define gl::rg32f gl::rg32f)
  (define-constant gl::r8i 33329)
  (define gl::r8i gl::r8i)
  (define-constant gl::r8ui 33330)
  (define gl::r8ui gl::r8ui)
  (define-constant gl::r16i 33331)
  (define gl::r16i gl::r16i)
  (define-constant gl::r16ui 33332)
  (define gl::r16ui gl::r16ui)
  (define-constant gl::r32i 33333)
  (define gl::r32i gl::r32i)
  (define-constant gl::r32ui 33334)
  (define gl::r32ui gl::r32ui)
  (define-constant gl::rg8i 33335)
  (define gl::rg8i gl::rg8i)
  (define-constant gl::rg8ui 33336)
  (define gl::rg8ui gl::rg8ui)
  (define-constant gl::rg16i 33337)
  (define gl::rg16i gl::rg16i)
  (define-constant gl::rg16ui 33338)
  (define gl::rg16ui gl::rg16ui)
  (define-constant gl::rg32i 33339)
  (define gl::rg32i gl::rg32i)
  (define-constant gl::rg32ui 33340)
  (define gl::rg32ui gl::rg32ui)
  (define-constant gl::vertex-array-binding 34229)
  (define gl::vertex-array-binding gl::vertex-array-binding)
  (define-constant gl::uniform-buffer 35345)
  (define gl::uniform-buffer gl::uniform-buffer)
  (define-constant gl::uniform-buffer-binding 35368)
  (define gl::uniform-buffer-binding gl::uniform-buffer-binding)
  (define-constant gl::uniform-buffer-start 35369)
  (define gl::uniform-buffer-start gl::uniform-buffer-start)
  (define-constant gl::uniform-buffer-size 35370)
  (define gl::uniform-buffer-size gl::uniform-buffer-size)
  (define-constant gl::max-vertex-uniform-blocks 35371)
  (define gl::max-vertex-uniform-blocks gl::max-vertex-uniform-blocks)
  (define-constant gl::max-geometry-uniform-blocks 35372)
  (define gl::max-geometry-uniform-blocks gl::max-geometry-uniform-blocks)
  (define-constant gl::max-fragment-uniform-blocks 35373)
  (define gl::max-fragment-uniform-blocks gl::max-fragment-uniform-blocks)
  (define-constant gl::max-combined-uniform-blocks 35374)
  (define gl::max-combined-uniform-blocks gl::max-combined-uniform-blocks)
  (define-constant gl::max-uniform-buffer-bindings 35375)
  (define gl::max-uniform-buffer-bindings gl::max-uniform-buffer-bindings)
  (define-constant gl::max-uniform-block-size 35376)
  (define gl::max-uniform-block-size gl::max-uniform-block-size)
  (define-constant gl::max-combined-vertex-uniform-components 35377)
  (define gl::max-combined-vertex-uniform-components
    gl::max-combined-vertex-uniform-components)
  (define-constant gl::max-combined-geometry-uniform-components 35378)
  (define gl::max-combined-geometry-uniform-components
    gl::max-combined-geometry-uniform-components)
  (define-constant gl::max-combined-fragment-uniform-components 35379)
  (define gl::max-combined-fragment-uniform-components
    gl::max-combined-fragment-uniform-components)
  (define-constant gl::uniform-buffer-offset-alignment 35380)
  (define gl::uniform-buffer-offset-alignment
    gl::uniform-buffer-offset-alignment)
  (define-constant gl::active-uniform-block-max-name-length 35381)
  (define gl::active-uniform-block-max-name-length
    gl::active-uniform-block-max-name-length)
  (define-constant gl::active-uniform-blocks 35382)
  (define gl::active-uniform-blocks gl::active-uniform-blocks)
  (define-constant gl::uniform-type 35383)
  (define gl::uniform-type gl::uniform-type)
  (define-constant gl::uniform-size 35384)
  (define gl::uniform-size gl::uniform-size)
  (define-constant gl::uniform-name-length 35385)
  (define gl::uniform-name-length gl::uniform-name-length)
  (define-constant gl::uniform-block-index 35386)
  (define gl::uniform-block-index gl::uniform-block-index)
  (define-constant gl::uniform-offset 35387)
  (define gl::uniform-offset gl::uniform-offset)
  (define-constant gl::uniform-array-stride 35388)
  (define gl::uniform-array-stride gl::uniform-array-stride)
  (define-constant gl::uniform-matrix-stride 35389)
  (define gl::uniform-matrix-stride gl::uniform-matrix-stride)
  (define-constant gl::uniform-is-row-major 35390)
  (define gl::uniform-is-row-major gl::uniform-is-row-major)
  (define-constant gl::uniform-block-binding 35391)
  (define gl::uniform-block-binding gl::uniform-block-binding)
  (define-constant gl::uniform-block-data-size 35392)
  (define gl::uniform-block-data-size gl::uniform-block-data-size)
  (define-constant gl::uniform-block-name-length 35393)
  (define gl::uniform-block-name-length gl::uniform-block-name-length)
  (define-constant gl::uniform-block-active-uniforms 35394)
  (define gl::uniform-block-active-uniforms gl::uniform-block-active-uniforms)
  (define-constant gl::uniform-block-active-uniform-indices 35395)
  (define gl::uniform-block-active-uniform-indices
    gl::uniform-block-active-uniform-indices)
  (define-constant gl::uniform-block-referenced-by-vertex-shader 35396)
  (define gl::uniform-block-referenced-by-vertex-shader
    gl::uniform-block-referenced-by-vertex-shader)
  (define-constant gl::uniform-block-referenced-by-geometry-shader 35397)
  (define gl::uniform-block-referenced-by-geometry-shader
    gl::uniform-block-referenced-by-geometry-shader)
  (define-constant gl::uniform-block-referenced-by-fragment-shader 35398)
  (define gl::uniform-block-referenced-by-fragment-shader
    gl::uniform-block-referenced-by-fragment-shader)
  (define-constant gl::copy-read-buffer 36662)
  (define gl::copy-read-buffer gl::copy-read-buffer)
  (define-constant gl::copy-write-buffer 36663)
  (define gl::copy-write-buffer gl::copy-write-buffer)
  (define-constant gl::depth-clamp 34383)
  (define gl::depth-clamp gl::depth-clamp)
  (define-constant gl::quads-follow-provoking-vertex-convention 36428)
  (define gl::quads-follow-provoking-vertex-convention
    gl::quads-follow-provoking-vertex-convention)
  (define-constant gl::first-vertex-convention 36429)
  (define gl::first-vertex-convention gl::first-vertex-convention)
  (define-constant gl::last-vertex-convention 36430)
  (define gl::last-vertex-convention gl::last-vertex-convention)
  (define-constant gl::provoking-vertex 36431)
  (define gl::provoking-vertex gl::provoking-vertex)
  (define-constant gl::texture-cube-map-seamless 34895)
  (define gl::texture-cube-map-seamless gl::texture-cube-map-seamless)
  (define-constant gl::max-server-wait-timeout 37137)
  (define gl::max-server-wait-timeout gl::max-server-wait-timeout)
  (define-constant gl::object-type 37138)
  (define gl::object-type gl::object-type)
  (define-constant gl::sync-condition 37139)
  (define gl::sync-condition gl::sync-condition)
  (define-constant gl::sync-status 37140)
  (define gl::sync-status gl::sync-status)
  (define-constant gl::sync-flags 37141)
  (define gl::sync-flags gl::sync-flags)
  (define-constant gl::sync-fence 37142)
  (define gl::sync-fence gl::sync-fence)
  (define-constant gl::sync-gpu-commands-complete 37143)
  (define gl::sync-gpu-commands-complete gl::sync-gpu-commands-complete)
  (define-constant gl::unsignaled 37144)
  (define gl::unsignaled gl::unsignaled)
  (define-constant gl::signaled 37145)
  (define gl::signaled gl::signaled)
  (define-constant gl::already-signaled 37146)
  (define gl::already-signaled gl::already-signaled)
  (define-constant gl::timeout-expired 37147)
  (define gl::timeout-expired gl::timeout-expired)
  (define-constant gl::condition-satisfied 37148)
  (define gl::condition-satisfied gl::condition-satisfied)
  (define-constant gl::wait-failed 37149)
  (define gl::wait-failed gl::wait-failed)
  (define-constant gl::sync-flush-commands-bit 1)
  (define gl::sync-flush-commands-bit gl::sync-flush-commands-bit)
  (define-constant gl::sample-position 36432)
  (define gl::sample-position gl::sample-position)
  (define-constant gl::sample-mask 36433)
  (define gl::sample-mask gl::sample-mask)
  (define-constant gl::sample-mask-value 36434)
  (define gl::sample-mask-value gl::sample-mask-value)
  (define-constant gl::max-sample-mask-words 36441)
  (define gl::max-sample-mask-words gl::max-sample-mask-words)
  (define-constant gl::texture-2d-multisample 37120)
  (define gl::texture-2d-multisample gl::texture-2d-multisample)
  (define-constant gl::proxy-texture-2d-multisample 37121)
  (define gl::proxy-texture-2d-multisample gl::proxy-texture-2d-multisample)
  (define-constant gl::texture-2d-multisample-array 37122)
  (define gl::texture-2d-multisample-array gl::texture-2d-multisample-array)
  (define-constant gl::proxy-texture-2d-multisample-array 37123)
  (define gl::proxy-texture-2d-multisample-array
    gl::proxy-texture-2d-multisample-array)
  (define-constant gl::texture-binding-2d-multisample 37124)
  (define gl::texture-binding-2d-multisample
    gl::texture-binding-2d-multisample)
  (define-constant gl::texture-binding-2d-multisample-array 37125)
  (define gl::texture-binding-2d-multisample-array
    gl::texture-binding-2d-multisample-array)
  (define-constant gl::texture-samples 37126)
  (define gl::texture-samples gl::texture-samples)
  (define-constant gl::texture-fixed-sample-locations 37127)
  (define gl::texture-fixed-sample-locations
    gl::texture-fixed-sample-locations)
  (define-constant gl::sampler-2d-multisample 37128)
  (define gl::sampler-2d-multisample gl::sampler-2d-multisample)
  (define-constant gl::int-sampler-2d-multisample 37129)
  (define gl::int-sampler-2d-multisample gl::int-sampler-2d-multisample)
  (define-constant gl::unsigned-int-sampler-2d-multisample 37130)
  (define gl::unsigned-int-sampler-2d-multisample
    gl::unsigned-int-sampler-2d-multisample)
  (define-constant gl::sampler-2d-multisample-array 37131)
  (define gl::sampler-2d-multisample-array gl::sampler-2d-multisample-array)
  (define-constant gl::int-sampler-2d-multisample-array 37132)
  (define gl::int-sampler-2d-multisample-array
    gl::int-sampler-2d-multisample-array)
  (define-constant gl::unsigned-int-sampler-2d-multisample-array 37133)
  (define gl::unsigned-int-sampler-2d-multisample-array
    gl::unsigned-int-sampler-2d-multisample-array)
  (define-constant gl::max-color-texture-samples 37134)
  (define gl::max-color-texture-samples gl::max-color-texture-samples)
  (define-constant gl::max-depth-texture-samples 37135)
  (define gl::max-depth-texture-samples gl::max-depth-texture-samples)
  (define-constant gl::max-integer-samples 37136)
  (define gl::max-integer-samples gl::max-integer-samples)
  (define-constant gl::sample-shading 35894)
  (define gl::sample-shading gl::sample-shading)
  (define-constant gl::min-sample-shading-value 35895)
  (define gl::min-sample-shading-value gl::min-sample-shading-value)
  (define-constant gl::texture-cube-map-array 36873)
  (define gl::texture-cube-map-array gl::texture-cube-map-array)
  (define-constant gl::texture-binding-cube-map-array 36874)
  (define gl::texture-binding-cube-map-array
    gl::texture-binding-cube-map-array)
  (define-constant gl::proxy-texture-cube-map-array 36875)
  (define gl::proxy-texture-cube-map-array gl::proxy-texture-cube-map-array)
  (define-constant gl::sampler-cube-map-array 36876)
  (define gl::sampler-cube-map-array gl::sampler-cube-map-array)
  (define-constant gl::sampler-cube-map-array-shadow 36877)
  (define gl::sampler-cube-map-array-shadow gl::sampler-cube-map-array-shadow)
  (define-constant gl::int-sampler-cube-map-array 36878)
  (define gl::int-sampler-cube-map-array gl::int-sampler-cube-map-array)
  (define-constant gl::unsigned-int-sampler-cube-map-array 36879)
  (define gl::unsigned-int-sampler-cube-map-array
    gl::unsigned-int-sampler-cube-map-array)
  (define-constant gl::min-program-texture-gather-offset-arb 36446)
  (define gl::min-program-texture-gather-offset-arb
    gl::min-program-texture-gather-offset-arb)
  (define-constant gl::max-program-texture-gather-offset-arb 36447)
  (define gl::max-program-texture-gather-offset-arb
    gl::max-program-texture-gather-offset-arb)
  (define-constant gl::shader-include-arb 36270)
  (define gl::shader-include-arb gl::shader-include-arb)
  (define-constant gl::named-string-length-arb 36329)
  (define gl::named-string-length-arb gl::named-string-length-arb)
  (define-constant gl::named-string-type-arb 36330)
  (define gl::named-string-type-arb gl::named-string-type-arb)
  (define-constant gl::compressed-rgba-bptc-unorm-arb 36492)
  (define gl::compressed-rgba-bptc-unorm-arb
    gl::compressed-rgba-bptc-unorm-arb)
  (define-constant gl::compressed-srgb-alpha-bptc-unorm-arb 36493)
  (define gl::compressed-srgb-alpha-bptc-unorm-arb
    gl::compressed-srgb-alpha-bptc-unorm-arb)
  (define-constant gl::compressed-rgb-bptc-signed-float-arb 36494)
  (define gl::compressed-rgb-bptc-signed-float-arb
    gl::compressed-rgb-bptc-signed-float-arb)
  (define-constant gl::compressed-rgb-bptc-unsigned-float-arb 36495)
  (define gl::compressed-rgb-bptc-unsigned-float-arb
    gl::compressed-rgb-bptc-unsigned-float-arb)
  (define-constant gl::src1-color 35065)
  (define gl::src1-color gl::src1-color)
  (define-constant gl::one-minus-src1-color 35066)
  (define gl::one-minus-src1-color gl::one-minus-src1-color)
  (define-constant gl::one-minus-src1-alpha 35067)
  (define gl::one-minus-src1-alpha gl::one-minus-src1-alpha)
  (define-constant gl::max-dual-source-draw-buffers 35068)
  (define gl::max-dual-source-draw-buffers gl::max-dual-source-draw-buffers)
  (define-constant gl::any-samples-passed 35887)
  (define gl::any-samples-passed gl::any-samples-passed)
  (define-constant gl::sampler-binding 35097)
  (define gl::sampler-binding gl::sampler-binding)
  (define-constant gl::rgb10-a2ui 36975)
  (define gl::rgb10-a2ui gl::rgb10-a2ui)
  (define-constant gl::texture-swizzle-r 36418)
  (define gl::texture-swizzle-r gl::texture-swizzle-r)
  (define-constant gl::texture-swizzle-g 36419)
  (define gl::texture-swizzle-g gl::texture-swizzle-g)
  (define-constant gl::texture-swizzle-b 36420)
  (define gl::texture-swizzle-b gl::texture-swizzle-b)
  (define-constant gl::texture-swizzle-a 36421)
  (define gl::texture-swizzle-a gl::texture-swizzle-a)
  (define-constant gl::texture-swizzle-rgba 36422)
  (define gl::texture-swizzle-rgba gl::texture-swizzle-rgba)
  (define-constant gl::time-elapsed 35007)
  (define gl::time-elapsed gl::time-elapsed)
  (define-constant gl::timestamp 36392)
  (define gl::timestamp gl::timestamp)
  (define-constant gl::int-2-10-10-10-rev 36255)
  (define gl::int-2-10-10-10-rev gl::int-2-10-10-10-rev)
  (define-constant gl::draw-indirect-buffer 36671)
  (define gl::draw-indirect-buffer gl::draw-indirect-buffer)
  (define-constant gl::draw-indirect-buffer-binding 36675)
  (define gl::draw-indirect-buffer-binding gl::draw-indirect-buffer-binding)
  (define-constant gl::geometry-shader-invocations 34943)
  (define gl::geometry-shader-invocations gl::geometry-shader-invocations)
  (define-constant gl::max-geometry-shader-invocations 36442)
  (define gl::max-geometry-shader-invocations
    gl::max-geometry-shader-invocations)
  (define-constant gl::min-fragment-interpolation-offset 36443)
  (define gl::min-fragment-interpolation-offset
    gl::min-fragment-interpolation-offset)
  (define-constant gl::max-fragment-interpolation-offset 36444)
  (define gl::max-fragment-interpolation-offset
    gl::max-fragment-interpolation-offset)
  (define-constant gl::fragment-interpolation-offset-bits 36445)
  (define gl::fragment-interpolation-offset-bits
    gl::fragment-interpolation-offset-bits)
  (define-constant gl::max-vertex-streams 36465)
  (define gl::max-vertex-streams gl::max-vertex-streams)
  (define-constant gl::double-vec2 36860)
  (define gl::double-vec2 gl::double-vec2)
  (define-constant gl::double-vec3 36861)
  (define gl::double-vec3 gl::double-vec3)
  (define-constant gl::double-vec4 36862)
  (define gl::double-vec4 gl::double-vec4)
  (define-constant gl::double-mat2 36678)
  (define gl::double-mat2 gl::double-mat2)
  (define-constant gl::double-mat3 36679)
  (define gl::double-mat3 gl::double-mat3)
  (define-constant gl::double-mat4 36680)
  (define gl::double-mat4 gl::double-mat4)
  (define-constant gl::double-mat2x3 36681)
  (define gl::double-mat2x3 gl::double-mat2x3)
  (define-constant gl::double-mat2x4 36682)
  (define gl::double-mat2x4 gl::double-mat2x4)
  (define-constant gl::double-mat3x2 36683)
  (define gl::double-mat3x2 gl::double-mat3x2)
  (define-constant gl::double-mat3x4 36684)
  (define gl::double-mat3x4 gl::double-mat3x4)
  (define-constant gl::double-mat4x2 36685)
  (define gl::double-mat4x2 gl::double-mat4x2)
  (define-constant gl::double-mat4x3 36686)
  (define gl::double-mat4x3 gl::double-mat4x3)
  (define-constant gl::active-subroutines 36325)
  (define gl::active-subroutines gl::active-subroutines)
  (define-constant gl::active-subroutine-uniforms 36326)
  (define gl::active-subroutine-uniforms gl::active-subroutine-uniforms)
  (define-constant gl::active-subroutine-uniform-locations 36423)
  (define gl::active-subroutine-uniform-locations
    gl::active-subroutine-uniform-locations)
  (define-constant gl::active-subroutine-max-length 36424)
  (define gl::active-subroutine-max-length gl::active-subroutine-max-length)
  (define-constant gl::active-subroutine-uniform-max-length 36425)
  (define gl::active-subroutine-uniform-max-length
    gl::active-subroutine-uniform-max-length)
  (define-constant gl::max-subroutines 36327)
  (define gl::max-subroutines gl::max-subroutines)
  (define-constant gl::max-subroutine-uniform-locations 36328)
  (define gl::max-subroutine-uniform-locations
    gl::max-subroutine-uniform-locations)
  (define-constant gl::num-compatible-subroutines 36426)
  (define gl::num-compatible-subroutines gl::num-compatible-subroutines)
  (define-constant gl::compatible-subroutines 36427)
  (define gl::compatible-subroutines gl::compatible-subroutines)
  (define-constant gl::patches 14)
  (define gl::patches gl::patches)
  (define-constant gl::patch-vertices 36466)
  (define gl::patch-vertices gl::patch-vertices)
  (define-constant gl::patch-default-inner-level 36467)
  (define gl::patch-default-inner-level gl::patch-default-inner-level)
  (define-constant gl::patch-default-outer-level 36468)
  (define gl::patch-default-outer-level gl::patch-default-outer-level)
  (define-constant gl::tess-control-output-vertices 36469)
  (define gl::tess-control-output-vertices gl::tess-control-output-vertices)
  (define-constant gl::tess-gen-mode 36470)
  (define gl::tess-gen-mode gl::tess-gen-mode)
  (define-constant gl::tess-gen-spacing 36471)
  (define gl::tess-gen-spacing gl::tess-gen-spacing)
  (define-constant gl::tess-gen-vertex-order 36472)
  (define gl::tess-gen-vertex-order gl::tess-gen-vertex-order)
  (define-constant gl::tess-gen-point-mode 36473)
  (define gl::tess-gen-point-mode gl::tess-gen-point-mode)
  (define-constant gl::isolines 36474)
  (define gl::isolines gl::isolines)
  (define-constant gl::fractional-odd 36475)
  (define gl::fractional-odd gl::fractional-odd)
  (define-constant gl::fractional-even 36476)
  (define gl::fractional-even gl::fractional-even)
  (define-constant gl::max-patch-vertices 36477)
  (define gl::max-patch-vertices gl::max-patch-vertices)
  (define-constant gl::max-tess-gen-level 36478)
  (define gl::max-tess-gen-level gl::max-tess-gen-level)
  (define-constant gl::max-tess-control-uniform-components 36479)
  (define gl::max-tess-control-uniform-components
    gl::max-tess-control-uniform-components)
  (define-constant gl::max-tess-evaluation-uniform-components 36480)
  (define gl::max-tess-evaluation-uniform-components
    gl::max-tess-evaluation-uniform-components)
  (define-constant gl::max-tess-control-texture-image-units 36481)
  (define gl::max-tess-control-texture-image-units
    gl::max-tess-control-texture-image-units)
  (define-constant gl::max-tess-evaluation-texture-image-units 36482)
  (define gl::max-tess-evaluation-texture-image-units
    gl::max-tess-evaluation-texture-image-units)
  (define-constant gl::max-tess-control-output-components 36483)
  (define gl::max-tess-control-output-components
    gl::max-tess-control-output-components)
  (define-constant gl::max-tess-patch-components 36484)
  (define gl::max-tess-patch-components gl::max-tess-patch-components)
  (define-constant gl::max-tess-control-total-output-components 36485)
  (define gl::max-tess-control-total-output-components
    gl::max-tess-control-total-output-components)
  (define-constant gl::max-tess-evaluation-output-components 36486)
  (define gl::max-tess-evaluation-output-components
    gl::max-tess-evaluation-output-components)
  (define-constant gl::max-tess-control-uniform-blocks 36489)
  (define gl::max-tess-control-uniform-blocks
    gl::max-tess-control-uniform-blocks)
  (define-constant gl::max-tess-evaluation-uniform-blocks 36490)
  (define gl::max-tess-evaluation-uniform-blocks
    gl::max-tess-evaluation-uniform-blocks)
  (define-constant gl::max-tess-control-input-components 34924)
  (define gl::max-tess-control-input-components
    gl::max-tess-control-input-components)
  (define-constant gl::max-tess-evaluation-input-components 34925)
  (define gl::max-tess-evaluation-input-components
    gl::max-tess-evaluation-input-components)
  (define-constant gl::max-combined-tess-control-uniform-components 36382)
  (define gl::max-combined-tess-control-uniform-components
    gl::max-combined-tess-control-uniform-components)
  (define-constant gl::max-combined-tess-evaluation-uniform-components 36383)
  (define gl::max-combined-tess-evaluation-uniform-components
    gl::max-combined-tess-evaluation-uniform-components)
  (define-constant gl::uniform-block-referenced-by-tess-control-shader 34032)
  (define gl::uniform-block-referenced-by-tess-control-shader
    gl::uniform-block-referenced-by-tess-control-shader)
  (define-constant
    gl::uniform-block-referenced-by-tess-evaluation-shader
    34033)
  (define gl::uniform-block-referenced-by-tess-evaluation-shader
    gl::uniform-block-referenced-by-tess-evaluation-shader)
  (define-constant gl::tess-evaluation-shader 36487)
  (define gl::tess-evaluation-shader gl::tess-evaluation-shader)
  (define-constant gl::tess-control-shader 36488)
  (define gl::tess-control-shader gl::tess-control-shader)
  (define-constant gl::transform-feedback 36386)
  (define gl::transform-feedback gl::transform-feedback)
  (define-constant gl::transform-feedback-buffer-paused 36387)
  (define gl::transform-feedback-buffer-paused
    gl::transform-feedback-buffer-paused)
  (define-constant gl::transform-feedback-buffer-active 36388)
  (define gl::transform-feedback-buffer-active
    gl::transform-feedback-buffer-active)
  (define-constant gl::transform-feedback-binding 36389)
  (define gl::transform-feedback-binding gl::transform-feedback-binding)
  (define-constant gl::max-transform-feedback-buffers 36464)
  (define gl::max-transform-feedback-buffers
    gl::max-transform-feedback-buffers)
  (define-constant gl::abgr-ext 32768)
  (define gl::abgr-ext gl::abgr-ext)
  (define-constant gl::constant-color-ext 32769)
  (define gl::constant-color-ext gl::constant-color-ext)
  (define-constant gl::one-minus-constant-color-ext 32770)
  (define gl::one-minus-constant-color-ext gl::one-minus-constant-color-ext)
  (define-constant gl::constant-alpha-ext 32771)
  (define gl::constant-alpha-ext gl::constant-alpha-ext)
  (define-constant gl::one-minus-constant-alpha-ext 32772)
  (define gl::one-minus-constant-alpha-ext gl::one-minus-constant-alpha-ext)
  (define-constant gl::blend-color-ext 32773)
  (define gl::blend-color-ext gl::blend-color-ext)
  (define-constant gl::polygon-offset-ext 32823)
  (define gl::polygon-offset-ext gl::polygon-offset-ext)
  (define-constant gl::polygon-offset-factor-ext 32824)
  (define gl::polygon-offset-factor-ext gl::polygon-offset-factor-ext)
  (define-constant gl::polygon-offset-bias-ext 32825)
  (define gl::polygon-offset-bias-ext gl::polygon-offset-bias-ext)
  (define-constant gl::alpha4-ext 32827)
  (define gl::alpha4-ext gl::alpha4-ext)
  (define-constant gl::alpha8-ext 32828)
  (define gl::alpha8-ext gl::alpha8-ext)
  (define-constant gl::alpha12-ext 32829)
  (define gl::alpha12-ext gl::alpha12-ext)
  (define-constant gl::alpha16-ext 32830)
  (define gl::alpha16-ext gl::alpha16-ext)
  (define-constant gl::luminance4-ext 32831)
  (define gl::luminance4-ext gl::luminance4-ext)
  (define-constant gl::luminance8-ext 32832)
  (define gl::luminance8-ext gl::luminance8-ext)
  (define-constant gl::luminance12-ext 32833)
  (define gl::luminance12-ext gl::luminance12-ext)
  (define-constant gl::luminance16-ext 32834)
  (define gl::luminance16-ext gl::luminance16-ext)
  (define-constant gl::luminance4-alpha4-ext 32835)
  (define gl::luminance4-alpha4-ext gl::luminance4-alpha4-ext)
  (define-constant gl::luminance6-alpha2-ext 32836)
  (define gl::luminance6-alpha2-ext gl::luminance6-alpha2-ext)
  (define-constant gl::luminance8-alpha8-ext 32837)
  (define gl::luminance8-alpha8-ext gl::luminance8-alpha8-ext)
  (define-constant gl::luminance12-alpha4-ext 32838)
  (define gl::luminance12-alpha4-ext gl::luminance12-alpha4-ext)
  (define-constant gl::luminance12-alpha12-ext 32839)
  (define gl::luminance12-alpha12-ext gl::luminance12-alpha12-ext)
  (define-constant gl::luminance16-alpha16-ext 32840)
  (define gl::luminance16-alpha16-ext gl::luminance16-alpha16-ext)
  (define-constant gl::intensity-ext 32841)
  (define gl::intensity-ext gl::intensity-ext)
  (define-constant gl::intensity4-ext 32842)
  (define gl::intensity4-ext gl::intensity4-ext)
  (define-constant gl::intensity8-ext 32843)
  (define gl::intensity8-ext gl::intensity8-ext)
  (define-constant gl::intensity12-ext 32844)
  (define gl::intensity12-ext gl::intensity12-ext)
  (define-constant gl::intensity16-ext 32845)
  (define gl::intensity16-ext gl::intensity16-ext)
  (define-constant gl::rgb2-ext 32846)
  (define gl::rgb2-ext gl::rgb2-ext)
  (define-constant gl::rgb4-ext 32847)
  (define gl::rgb4-ext gl::rgb4-ext)
  (define-constant gl::rgb5-ext 32848)
  (define gl::rgb5-ext gl::rgb5-ext)
  (define-constant gl::rgb8-ext 32849)
  (define gl::rgb8-ext gl::rgb8-ext)
  (define-constant gl::rgb10-ext 32850)
  (define gl::rgb10-ext gl::rgb10-ext)
  (define-constant gl::rgb12-ext 32851)
  (define gl::rgb12-ext gl::rgb12-ext)
  (define-constant gl::rgb16-ext 32852)
  (define gl::rgb16-ext gl::rgb16-ext)
  (define-constant gl::rgba2-ext 32853)
  (define gl::rgba2-ext gl::rgba2-ext)
  (define-constant gl::rgba4-ext 32854)
  (define gl::rgba4-ext gl::rgba4-ext)
  (define-constant gl::rgb5-a1-ext 32855)
  (define gl::rgb5-a1-ext gl::rgb5-a1-ext)
  (define-constant gl::rgba8-ext 32856)
  (define gl::rgba8-ext gl::rgba8-ext)
  (define-constant gl::rgb10-a2-ext 32857)
  (define gl::rgb10-a2-ext gl::rgb10-a2-ext)
  (define-constant gl::rgba12-ext 32858)
  (define gl::rgba12-ext gl::rgba12-ext)
  (define-constant gl::rgba16-ext 32859)
  (define gl::rgba16-ext gl::rgba16-ext)
  (define-constant gl::texture-red-size-ext 32860)
  (define gl::texture-red-size-ext gl::texture-red-size-ext)
  (define-constant gl::texture-green-size-ext 32861)
  (define gl::texture-green-size-ext gl::texture-green-size-ext)
  (define-constant gl::texture-blue-size-ext 32862)
  (define gl::texture-blue-size-ext gl::texture-blue-size-ext)
  (define-constant gl::texture-alpha-size-ext 32863)
  (define gl::texture-alpha-size-ext gl::texture-alpha-size-ext)
  (define-constant gl::texture-luminance-size-ext 32864)
  (define gl::texture-luminance-size-ext gl::texture-luminance-size-ext)
  (define-constant gl::texture-intensity-size-ext 32865)
  (define gl::texture-intensity-size-ext gl::texture-intensity-size-ext)
  (define-constant gl::replace-ext 32866)
  (define gl::replace-ext gl::replace-ext)
  (define-constant gl::proxy-texture-1d-ext 32867)
  (define gl::proxy-texture-1d-ext gl::proxy-texture-1d-ext)
  (define-constant gl::proxy-texture-2d-ext 32868)
  (define gl::proxy-texture-2d-ext gl::proxy-texture-2d-ext)
  (define-constant gl::texture-too-large-ext 32869)
  (define gl::texture-too-large-ext gl::texture-too-large-ext)
  (define-constant gl::pack-skip-images-ext 32875)
  (define gl::pack-skip-images-ext gl::pack-skip-images-ext)
  (define-constant gl::pack-image-height-ext 32876)
  (define gl::pack-image-height-ext gl::pack-image-height-ext)
  (define-constant gl::unpack-skip-images-ext 32877)
  (define gl::unpack-skip-images-ext gl::unpack-skip-images-ext)
  (define-constant gl::unpack-image-height-ext 32878)
  (define gl::unpack-image-height-ext gl::unpack-image-height-ext)
  (define-constant gl::texture-3d-ext 32879)
  (define gl::texture-3d-ext gl::texture-3d-ext)
  (define-constant gl::proxy-texture-3d-ext 32880)
  (define gl::proxy-texture-3d-ext gl::proxy-texture-3d-ext)
  (define-constant gl::texture-depth-ext 32881)
  (define gl::texture-depth-ext gl::texture-depth-ext)
  (define-constant gl::texture-wrap-r-ext 32882)
  (define gl::texture-wrap-r-ext gl::texture-wrap-r-ext)
  (define-constant gl::max-3d-texture-size-ext 32883)
  (define gl::max-3d-texture-size-ext gl::max-3d-texture-size-ext)
  (define-constant gl::filter4-sgis 33094)
  (define gl::filter4-sgis gl::filter4-sgis)
  (define-constant gl::texture-filter4-size-sgis 33095)
  (define gl::texture-filter4-size-sgis gl::texture-filter4-size-sgis)
  (define-constant gl::histogram-ext 32804)
  (define gl::histogram-ext gl::histogram-ext)
  (define-constant gl::proxy-histogram-ext 32805)
  (define gl::proxy-histogram-ext gl::proxy-histogram-ext)
  (define-constant gl::histogram-width-ext 32806)
  (define gl::histogram-width-ext gl::histogram-width-ext)
  (define-constant gl::histogram-format-ext 32807)
  (define gl::histogram-format-ext gl::histogram-format-ext)
  (define-constant gl::histogram-red-size-ext 32808)
  (define gl::histogram-red-size-ext gl::histogram-red-size-ext)
  (define-constant gl::histogram-green-size-ext 32809)
  (define gl::histogram-green-size-ext gl::histogram-green-size-ext)
  (define-constant gl::histogram-blue-size-ext 32810)
  (define gl::histogram-blue-size-ext gl::histogram-blue-size-ext)
  (define-constant gl::histogram-alpha-size-ext 32811)
  (define gl::histogram-alpha-size-ext gl::histogram-alpha-size-ext)
  (define-constant gl::histogram-luminance-size-ext 32812)
  (define gl::histogram-luminance-size-ext gl::histogram-luminance-size-ext)
  (define-constant gl::histogram-sink-ext 32813)
  (define gl::histogram-sink-ext gl::histogram-sink-ext)
  (define-constant gl::minmax-ext 32814)
  (define gl::minmax-ext gl::minmax-ext)
  (define-constant gl::minmax-format-ext 32815)
  (define gl::minmax-format-ext gl::minmax-format-ext)
  (define-constant gl::minmax-sink-ext 32816)
  (define gl::minmax-sink-ext gl::minmax-sink-ext)
  (define-constant gl::table-too-large-ext 32817)
  (define gl::table-too-large-ext gl::table-too-large-ext)
  (define-constant gl::convolution-1d-ext 32784)
  (define gl::convolution-1d-ext gl::convolution-1d-ext)
  (define-constant gl::convolution-2d-ext 32785)
  (define gl::convolution-2d-ext gl::convolution-2d-ext)
  (define-constant gl::separable-2d-ext 32786)
  (define gl::separable-2d-ext gl::separable-2d-ext)
  (define-constant gl::convolution-border-mode-ext 32787)
  (define gl::convolution-border-mode-ext gl::convolution-border-mode-ext)
  (define-constant gl::convolution-filter-scale-ext 32788)
  (define gl::convolution-filter-scale-ext gl::convolution-filter-scale-ext)
  (define-constant gl::convolution-filter-bias-ext 32789)
  (define gl::convolution-filter-bias-ext gl::convolution-filter-bias-ext)
  (define-constant gl::reduce-ext 32790)
  (define gl::reduce-ext gl::reduce-ext)
  (define-constant gl::convolution-format-ext 32791)
  (define gl::convolution-format-ext gl::convolution-format-ext)
  (define-constant gl::convolution-width-ext 32792)
  (define gl::convolution-width-ext gl::convolution-width-ext)
  (define-constant gl::convolution-height-ext 32793)
  (define gl::convolution-height-ext gl::convolution-height-ext)
  (define-constant gl::max-convolution-width-ext 32794)
  (define gl::max-convolution-width-ext gl::max-convolution-width-ext)
  (define-constant gl::max-convolution-height-ext 32795)
  (define gl::max-convolution-height-ext gl::max-convolution-height-ext)
  (define-constant gl::post-convolution-red-scale-ext 32796)
  (define gl::post-convolution-red-scale-ext
    gl::post-convolution-red-scale-ext)
  (define-constant gl::post-convolution-green-scale-ext 32797)
  (define gl::post-convolution-green-scale-ext
    gl::post-convolution-green-scale-ext)
  (define-constant gl::post-convolution-blue-scale-ext 32798)
  (define gl::post-convolution-blue-scale-ext
    gl::post-convolution-blue-scale-ext)
  (define-constant gl::post-convolution-alpha-scale-ext 32799)
  (define gl::post-convolution-alpha-scale-ext
    gl::post-convolution-alpha-scale-ext)
  (define-constant gl::post-convolution-red-bias-ext 32800)
  (define gl::post-convolution-red-bias-ext gl::post-convolution-red-bias-ext)
  (define-constant gl::post-convolution-green-bias-ext 32801)
  (define gl::post-convolution-green-bias-ext
    gl::post-convolution-green-bias-ext)
  (define-constant gl::post-convolution-blue-bias-ext 32802)
  (define gl::post-convolution-blue-bias-ext
    gl::post-convolution-blue-bias-ext)
  (define-constant gl::post-convolution-alpha-bias-ext 32803)
  (define gl::post-convolution-alpha-bias-ext
    gl::post-convolution-alpha-bias-ext)
  (define-constant gl::color-matrix-sgi 32945)
  (define gl::color-matrix-sgi gl::color-matrix-sgi)
  (define-constant gl::color-matrix-stack-depth-sgi 32946)
  (define gl::color-matrix-stack-depth-sgi gl::color-matrix-stack-depth-sgi)
  (define-constant gl::max-color-matrix-stack-depth-sgi 32947)
  (define gl::max-color-matrix-stack-depth-sgi
    gl::max-color-matrix-stack-depth-sgi)
  (define-constant gl::post-color-matrix-red-scale-sgi 32948)
  (define gl::post-color-matrix-red-scale-sgi
    gl::post-color-matrix-red-scale-sgi)
  (define-constant gl::post-color-matrix-green-scale-sgi 32949)
  (define gl::post-color-matrix-green-scale-sgi
    gl::post-color-matrix-green-scale-sgi)
  (define-constant gl::post-color-matrix-blue-scale-sgi 32950)
  (define gl::post-color-matrix-blue-scale-sgi
    gl::post-color-matrix-blue-scale-sgi)
  (define-constant gl::post-color-matrix-alpha-scale-sgi 32951)
  (define gl::post-color-matrix-alpha-scale-sgi
    gl::post-color-matrix-alpha-scale-sgi)
  (define-constant gl::post-color-matrix-red-bias-sgi 32952)
  (define gl::post-color-matrix-red-bias-sgi
    gl::post-color-matrix-red-bias-sgi)
  (define-constant gl::post-color-matrix-green-bias-sgi 32953)
  (define gl::post-color-matrix-green-bias-sgi
    gl::post-color-matrix-green-bias-sgi)
  (define-constant gl::post-color-matrix-blue-bias-sgi 32954)
  (define gl::post-color-matrix-blue-bias-sgi
    gl::post-color-matrix-blue-bias-sgi)
  (define-constant gl::post-color-matrix-alpha-bias-sgi 32955)
  (define gl::post-color-matrix-alpha-bias-sgi
    gl::post-color-matrix-alpha-bias-sgi)
  (define-constant gl::color-table-sgi 32976)
  (define gl::color-table-sgi gl::color-table-sgi)
  (define-constant gl::post-convolution-color-table-sgi 32977)
  (define gl::post-convolution-color-table-sgi
    gl::post-convolution-color-table-sgi)
  (define-constant gl::post-color-matrix-color-table-sgi 32978)
  (define gl::post-color-matrix-color-table-sgi
    gl::post-color-matrix-color-table-sgi)
  (define-constant gl::proxy-color-table-sgi 32979)
  (define gl::proxy-color-table-sgi gl::proxy-color-table-sgi)
  (define-constant gl::proxy-post-convolution-color-table-sgi 32980)
  (define gl::proxy-post-convolution-color-table-sgi
    gl::proxy-post-convolution-color-table-sgi)
  (define-constant gl::proxy-post-color-matrix-color-table-sgi 32981)
  (define gl::proxy-post-color-matrix-color-table-sgi
    gl::proxy-post-color-matrix-color-table-sgi)
  (define-constant gl::color-table-scale-sgi 32982)
  (define gl::color-table-scale-sgi gl::color-table-scale-sgi)
  (define-constant gl::color-table-bias-sgi 32983)
  (define gl::color-table-bias-sgi gl::color-table-bias-sgi)
  (define-constant gl::color-table-format-sgi 32984)
  (define gl::color-table-format-sgi gl::color-table-format-sgi)
  (define-constant gl::color-table-width-sgi 32985)
  (define gl::color-table-width-sgi gl::color-table-width-sgi)
  (define-constant gl::color-table-red-size-sgi 32986)
  (define gl::color-table-red-size-sgi gl::color-table-red-size-sgi)
  (define-constant gl::color-table-green-size-sgi 32987)
  (define gl::color-table-green-size-sgi gl::color-table-green-size-sgi)
  (define-constant gl::color-table-blue-size-sgi 32988)
  (define gl::color-table-blue-size-sgi gl::color-table-blue-size-sgi)
  (define-constant gl::color-table-alpha-size-sgi 32989)
  (define gl::color-table-alpha-size-sgi gl::color-table-alpha-size-sgi)
  (define-constant gl::color-table-luminance-size-sgi 32990)
  (define gl::color-table-luminance-size-sgi
    gl::color-table-luminance-size-sgi)
  (define-constant gl::color-table-intensity-size-sgi 32991)
  (define gl::color-table-intensity-size-sgi
    gl::color-table-intensity-size-sgi)
  (define-constant gl::pixel-texture-sgis 33619)
  (define gl::pixel-texture-sgis gl::pixel-texture-sgis)
  (define-constant gl::pixel-fragment-rgb-source-sgis 33620)
  (define gl::pixel-fragment-rgb-source-sgis
    gl::pixel-fragment-rgb-source-sgis)
  (define-constant gl::pixel-fragment-alpha-source-sgis 33621)
  (define gl::pixel-fragment-alpha-source-sgis
    gl::pixel-fragment-alpha-source-sgis)
  (define-constant gl::pixel-group-color-sgis 33622)
  (define gl::pixel-group-color-sgis gl::pixel-group-color-sgis)
  (define-constant gl::pixel-tex-gen-sgix 33081)
  (define gl::pixel-tex-gen-sgix gl::pixel-tex-gen-sgix)
  (define-constant gl::pixel-tex-gen-mode-sgix 33579)
  (define gl::pixel-tex-gen-mode-sgix gl::pixel-tex-gen-mode-sgix)
  (define-constant gl::pack-skip-volumes-sgis 33072)
  (define gl::pack-skip-volumes-sgis gl::pack-skip-volumes-sgis)
  (define-constant gl::pack-image-depth-sgis 33073)
  (define gl::pack-image-depth-sgis gl::pack-image-depth-sgis)
  (define-constant gl::unpack-skip-volumes-sgis 33074)
  (define gl::unpack-skip-volumes-sgis gl::unpack-skip-volumes-sgis)
  (define-constant gl::unpack-image-depth-sgis 33075)
  (define gl::unpack-image-depth-sgis gl::unpack-image-depth-sgis)
  (define-constant gl::texture-4d-sgis 33076)
  (define gl::texture-4d-sgis gl::texture-4d-sgis)
  (define-constant gl::proxy-texture-4d-sgis 33077)
  (define gl::proxy-texture-4d-sgis gl::proxy-texture-4d-sgis)
  (define-constant gl::texture-4dsize-sgis 33078)
  (define gl::texture-4dsize-sgis gl::texture-4dsize-sgis)
  (define-constant gl::texture-wrap-q-sgis 33079)
  (define gl::texture-wrap-q-sgis gl::texture-wrap-q-sgis)
  (define-constant gl::max-4d-texture-size-sgis 33080)
  (define gl::max-4d-texture-size-sgis gl::max-4d-texture-size-sgis)
  (define-constant gl::texture-4d-binding-sgis 33103)
  (define gl::texture-4d-binding-sgis gl::texture-4d-binding-sgis)
  (define-constant gl::texture-color-table-sgi 32956)
  (define gl::texture-color-table-sgi gl::texture-color-table-sgi)
  (define-constant gl::proxy-texture-color-table-sgi 32957)
  (define gl::proxy-texture-color-table-sgi gl::proxy-texture-color-table-sgi)
  (define-constant gl::cmyk-ext 32780)
  (define gl::cmyk-ext gl::cmyk-ext)
  (define-constant gl::cmyka-ext 32781)
  (define gl::cmyka-ext gl::cmyka-ext)
  (define-constant gl::pack-cmyk-hint-ext 32782)
  (define gl::pack-cmyk-hint-ext gl::pack-cmyk-hint-ext)
  (define-constant gl::unpack-cmyk-hint-ext 32783)
  (define gl::unpack-cmyk-hint-ext gl::unpack-cmyk-hint-ext)
  (define-constant gl::texture-priority-ext 32870)
  (define gl::texture-priority-ext gl::texture-priority-ext)
  (define-constant gl::texture-resident-ext 32871)
  (define gl::texture-resident-ext gl::texture-resident-ext)
  (define-constant gl::texture-1d-binding-ext 32872)
  (define gl::texture-1d-binding-ext gl::texture-1d-binding-ext)
  (define-constant gl::texture-2d-binding-ext 32873)
  (define gl::texture-2d-binding-ext gl::texture-2d-binding-ext)
  (define-constant gl::texture-3d-binding-ext 32874)
  (define gl::texture-3d-binding-ext gl::texture-3d-binding-ext)
  (define-constant gl::detail-texture-2d-sgis 32917)
  (define gl::detail-texture-2d-sgis gl::detail-texture-2d-sgis)
  (define-constant gl::detail-texture-2d-binding-sgis 32918)
  (define gl::detail-texture-2d-binding-sgis
    gl::detail-texture-2d-binding-sgis)
  (define-constant gl::linear-detail-sgis 32919)
  (define gl::linear-detail-sgis gl::linear-detail-sgis)
  (define-constant gl::linear-detail-alpha-sgis 32920)
  (define gl::linear-detail-alpha-sgis gl::linear-detail-alpha-sgis)
  (define-constant gl::linear-detail-color-sgis 32921)
  (define gl::linear-detail-color-sgis gl::linear-detail-color-sgis)
  (define-constant gl::detail-texture-level-sgis 32922)
  (define gl::detail-texture-level-sgis gl::detail-texture-level-sgis)
  (define-constant gl::detail-texture-mode-sgis 32923)
  (define gl::detail-texture-mode-sgis gl::detail-texture-mode-sgis)
  (define-constant gl::detail-texture-func-points-sgis 32924)
  (define gl::detail-texture-func-points-sgis
    gl::detail-texture-func-points-sgis)
  (define-constant gl::linear-sharpen-sgis 32941)
  (define gl::linear-sharpen-sgis gl::linear-sharpen-sgis)
  (define-constant gl::linear-sharpen-alpha-sgis 32942)
  (define gl::linear-sharpen-alpha-sgis gl::linear-sharpen-alpha-sgis)
  (define-constant gl::linear-sharpen-color-sgis 32943)
  (define gl::linear-sharpen-color-sgis gl::linear-sharpen-color-sgis)
  (define-constant gl::sharpen-texture-func-points-sgis 32944)
  (define gl::sharpen-texture-func-points-sgis
    gl::sharpen-texture-func-points-sgis)
  (define-constant gl::unsigned-byte-3-3-2-ext 32818)
  (define gl::unsigned-byte-3-3-2-ext gl::unsigned-byte-3-3-2-ext)
  (define-constant gl::unsigned-short-4-4-4-4-ext 32819)
  (define gl::unsigned-short-4-4-4-4-ext gl::unsigned-short-4-4-4-4-ext)
  (define-constant gl::unsigned-short-5-5-5-1-ext 32820)
  (define gl::unsigned-short-5-5-5-1-ext gl::unsigned-short-5-5-5-1-ext)
  (define-constant gl::unsigned-int-8-8-8-8-ext 32821)
  (define gl::unsigned-int-8-8-8-8-ext gl::unsigned-int-8-8-8-8-ext)
  (define-constant gl::unsigned-int-10-10-10-2-ext 32822)
  (define gl::unsigned-int-10-10-10-2-ext gl::unsigned-int-10-10-10-2-ext)
  (define-constant gl::texture-min-lod-sgis 33082)
  (define gl::texture-min-lod-sgis gl::texture-min-lod-sgis)
  (define-constant gl::texture-max-lod-sgis 33083)
  (define gl::texture-max-lod-sgis gl::texture-max-lod-sgis)
  (define-constant gl::texture-base-level-sgis 33084)
  (define gl::texture-base-level-sgis gl::texture-base-level-sgis)
  (define-constant gl::texture-max-level-sgis 33085)
  (define gl::texture-max-level-sgis gl::texture-max-level-sgis)
  (define-constant gl::multisample-sgis 32925)
  (define gl::multisample-sgis gl::multisample-sgis)
  (define-constant gl::sample-alpha-to-mask-sgis 32926)
  (define gl::sample-alpha-to-mask-sgis gl::sample-alpha-to-mask-sgis)
  (define-constant gl::sample-alpha-to-one-sgis 32927)
  (define gl::sample-alpha-to-one-sgis gl::sample-alpha-to-one-sgis)
  (define-constant gl::sample-mask-sgis 32928)
  (define gl::sample-mask-sgis gl::sample-mask-sgis)
  (define-constant gl::1pass-sgis 32929)
  (define gl::1pass-sgis gl::1pass-sgis)
  (define-constant gl::2pass-0-sgis 32930)
  (define gl::2pass-0-sgis gl::2pass-0-sgis)
  (define-constant gl::2pass-1-sgis 32931)
  (define gl::2pass-1-sgis gl::2pass-1-sgis)
  (define-constant gl::4pass-0-sgis 32932)
  (define gl::4pass-0-sgis gl::4pass-0-sgis)
  (define-constant gl::4pass-1-sgis 32933)
  (define gl::4pass-1-sgis gl::4pass-1-sgis)
  (define-constant gl::4pass-2-sgis 32934)
  (define gl::4pass-2-sgis gl::4pass-2-sgis)
  (define-constant gl::4pass-3-sgis 32935)
  (define gl::4pass-3-sgis gl::4pass-3-sgis)
  (define-constant gl::sample-buffers-sgis 32936)
  (define gl::sample-buffers-sgis gl::sample-buffers-sgis)
  (define-constant gl::samples-sgis 32937)
  (define gl::samples-sgis gl::samples-sgis)
  (define-constant gl::sample-mask-value-sgis 32938)
  (define gl::sample-mask-value-sgis gl::sample-mask-value-sgis)
  (define-constant gl::sample-mask-invert-sgis 32939)
  (define gl::sample-mask-invert-sgis gl::sample-mask-invert-sgis)
  (define-constant gl::sample-pattern-sgis 32940)
  (define gl::sample-pattern-sgis gl::sample-pattern-sgis)
  (define-constant gl::rescale-normal-ext 32826)
  (define gl::rescale-normal-ext gl::rescale-normal-ext)
  (define-constant gl::generate-mipmap-sgis 33169)
  (define gl::generate-mipmap-sgis gl::generate-mipmap-sgis)
  (define-constant gl::generate-mipmap-hint-sgis 33170)
  (define gl::generate-mipmap-hint-sgis gl::generate-mipmap-hint-sgis)
  (define-constant gl::linear-clipmap-linear-sgix 33136)
  (define gl::linear-clipmap-linear-sgix gl::linear-clipmap-linear-sgix)
  (define-constant gl::texture-clipmap-center-sgix 33137)
  (define gl::texture-clipmap-center-sgix gl::texture-clipmap-center-sgix)
  (define-constant gl::texture-clipmap-frame-sgix 33138)
  (define gl::texture-clipmap-frame-sgix gl::texture-clipmap-frame-sgix)
  (define-constant gl::texture-clipmap-offset-sgix 33139)
  (define gl::texture-clipmap-offset-sgix gl::texture-clipmap-offset-sgix)
  (define-constant gl::texture-clipmap-virtual-depth-sgix 33140)
  (define gl::texture-clipmap-virtual-depth-sgix
    gl::texture-clipmap-virtual-depth-sgix)
  (define-constant gl::texture-clipmap-lod-offset-sgix 33141)
  (define gl::texture-clipmap-lod-offset-sgix
    gl::texture-clipmap-lod-offset-sgix)
  (define-constant gl::texture-clipmap-depth-sgix 33142)
  (define gl::texture-clipmap-depth-sgix gl::texture-clipmap-depth-sgix)
  (define-constant gl::max-clipmap-depth-sgix 33143)
  (define gl::max-clipmap-depth-sgix gl::max-clipmap-depth-sgix)
  (define-constant gl::max-clipmap-virtual-depth-sgix 33144)
  (define gl::max-clipmap-virtual-depth-sgix
    gl::max-clipmap-virtual-depth-sgix)
  (define-constant gl::nearest-clipmap-nearest-sgix 33869)
  (define gl::nearest-clipmap-nearest-sgix gl::nearest-clipmap-nearest-sgix)
  (define-constant gl::nearest-clipmap-linear-sgix 33870)
  (define gl::nearest-clipmap-linear-sgix gl::nearest-clipmap-linear-sgix)
  (define-constant gl::linear-clipmap-nearest-sgix 33871)
  (define gl::linear-clipmap-nearest-sgix gl::linear-clipmap-nearest-sgix)
  (define-constant gl::texture-compare-sgix 33178)
  (define gl::texture-compare-sgix gl::texture-compare-sgix)
  (define-constant gl::texture-compare-operator-sgix 33179)
  (define gl::texture-compare-operator-sgix gl::texture-compare-operator-sgix)
  (define-constant gl::texture-lequal-r-sgix 33180)
  (define gl::texture-lequal-r-sgix gl::texture-lequal-r-sgix)
  (define-constant gl::texture-gequal-r-sgix 33181)
  (define gl::texture-gequal-r-sgix gl::texture-gequal-r-sgix)
  (define-constant gl::clamp-to-edge-sgis 33071)
  (define gl::clamp-to-edge-sgis gl::clamp-to-edge-sgis)
  (define-constant gl::func-add-ext 32774)
  (define gl::func-add-ext gl::func-add-ext)
  (define-constant gl::min-ext 32775)
  (define gl::min-ext gl::min-ext)
  (define-constant gl::max-ext 32776)
  (define gl::max-ext gl::max-ext)
  (define-constant gl::blend-equation-ext 32777)
  (define gl::blend-equation-ext gl::blend-equation-ext)
  (define-constant gl::func-subtract-ext 32778)
  (define gl::func-subtract-ext gl::func-subtract-ext)
  (define-constant gl::func-reverse-subtract-ext 32779)
  (define gl::func-reverse-subtract-ext gl::func-reverse-subtract-ext)
  (define-constant gl::interlace-sgix 32916)
  (define gl::interlace-sgix gl::interlace-sgix)
  (define-constant gl::pixel-tile-best-alignment-sgix 33086)
  (define gl::pixel-tile-best-alignment-sgix
    gl::pixel-tile-best-alignment-sgix)
  (define-constant gl::pixel-tile-cache-increment-sgix 33087)
  (define gl::pixel-tile-cache-increment-sgix
    gl::pixel-tile-cache-increment-sgix)
  (define-constant gl::pixel-tile-width-sgix 33088)
  (define gl::pixel-tile-width-sgix gl::pixel-tile-width-sgix)
  (define-constant gl::pixel-tile-height-sgix 33089)
  (define gl::pixel-tile-height-sgix gl::pixel-tile-height-sgix)
  (define-constant gl::pixel-tile-grid-width-sgix 33090)
  (define gl::pixel-tile-grid-width-sgix gl::pixel-tile-grid-width-sgix)
  (define-constant gl::pixel-tile-grid-height-sgix 33091)
  (define gl::pixel-tile-grid-height-sgix gl::pixel-tile-grid-height-sgix)
  (define-constant gl::pixel-tile-grid-depth-sgix 33092)
  (define gl::pixel-tile-grid-depth-sgix gl::pixel-tile-grid-depth-sgix)
  (define-constant gl::pixel-tile-cache-size-sgix 33093)
  (define gl::pixel-tile-cache-size-sgix gl::pixel-tile-cache-size-sgix)
  (define-constant gl::dual-alpha4-sgis 33040)
  (define gl::dual-alpha4-sgis gl::dual-alpha4-sgis)
  (define-constant gl::dual-alpha8-sgis 33041)
  (define gl::dual-alpha8-sgis gl::dual-alpha8-sgis)
  (define-constant gl::dual-alpha12-sgis 33042)
  (define gl::dual-alpha12-sgis gl::dual-alpha12-sgis)
  (define-constant gl::dual-alpha16-sgis 33043)
  (define gl::dual-alpha16-sgis gl::dual-alpha16-sgis)
  (define-constant gl::dual-luminance4-sgis 33044)
  (define gl::dual-luminance4-sgis gl::dual-luminance4-sgis)
  (define-constant gl::dual-luminance8-sgis 33045)
  (define gl::dual-luminance8-sgis gl::dual-luminance8-sgis)
  (define-constant gl::dual-luminance12-sgis 33046)
  (define gl::dual-luminance12-sgis gl::dual-luminance12-sgis)
  (define-constant gl::dual-luminance16-sgis 33047)
  (define gl::dual-luminance16-sgis gl::dual-luminance16-sgis)
  (define-constant gl::dual-intensity4-sgis 33048)
  (define gl::dual-intensity4-sgis gl::dual-intensity4-sgis)
  (define-constant gl::dual-intensity8-sgis 33049)
  (define gl::dual-intensity8-sgis gl::dual-intensity8-sgis)
  (define-constant gl::dual-intensity12-sgis 33050)
  (define gl::dual-intensity12-sgis gl::dual-intensity12-sgis)
  (define-constant gl::dual-intensity16-sgis 33051)
  (define gl::dual-intensity16-sgis gl::dual-intensity16-sgis)
  (define-constant gl::dual-luminance-alpha4-sgis 33052)
  (define gl::dual-luminance-alpha4-sgis gl::dual-luminance-alpha4-sgis)
  (define-constant gl::dual-luminance-alpha8-sgis 33053)
  (define gl::dual-luminance-alpha8-sgis gl::dual-luminance-alpha8-sgis)
  (define-constant gl::quad-alpha4-sgis 33054)
  (define gl::quad-alpha4-sgis gl::quad-alpha4-sgis)
  (define-constant gl::quad-alpha8-sgis 33055)
  (define gl::quad-alpha8-sgis gl::quad-alpha8-sgis)
  (define-constant gl::quad-luminance4-sgis 33056)
  (define gl::quad-luminance4-sgis gl::quad-luminance4-sgis)
  (define-constant gl::quad-luminance8-sgis 33057)
  (define gl::quad-luminance8-sgis gl::quad-luminance8-sgis)
  (define-constant gl::quad-intensity4-sgis 33058)
  (define gl::quad-intensity4-sgis gl::quad-intensity4-sgis)
  (define-constant gl::quad-intensity8-sgis 33059)
  (define gl::quad-intensity8-sgis gl::quad-intensity8-sgis)
  (define-constant gl::dual-texture-select-sgis 33060)
  (define gl::dual-texture-select-sgis gl::dual-texture-select-sgis)
  (define-constant gl::quad-texture-select-sgis 33061)
  (define gl::quad-texture-select-sgis gl::quad-texture-select-sgis)
  (define-constant gl::sprite-sgix 33096)
  (define gl::sprite-sgix gl::sprite-sgix)
  (define-constant gl::sprite-mode-sgix 33097)
  (define gl::sprite-mode-sgix gl::sprite-mode-sgix)
  (define-constant gl::sprite-axis-sgix 33098)
  (define gl::sprite-axis-sgix gl::sprite-axis-sgix)
  (define-constant gl::sprite-translation-sgix 33099)
  (define gl::sprite-translation-sgix gl::sprite-translation-sgix)
  (define-constant gl::sprite-axial-sgix 33100)
  (define gl::sprite-axial-sgix gl::sprite-axial-sgix)
  (define-constant gl::sprite-object-aligned-sgix 33101)
  (define gl::sprite-object-aligned-sgix gl::sprite-object-aligned-sgix)
  (define-constant gl::sprite-eye-aligned-sgix 33102)
  (define gl::sprite-eye-aligned-sgix gl::sprite-eye-aligned-sgix)
  (define-constant gl::texture-multi-buffer-hint-sgix 33070)
  (define gl::texture-multi-buffer-hint-sgix
    gl::texture-multi-buffer-hint-sgix)
  (define-constant gl::point-size-min-ext 33062)
  (define gl::point-size-min-ext gl::point-size-min-ext)
  (define-constant gl::point-size-max-ext 33063)
  (define gl::point-size-max-ext gl::point-size-max-ext)
  (define-constant gl::point-fade-threshold-size-ext 33064)
  (define gl::point-fade-threshold-size-ext gl::point-fade-threshold-size-ext)
  (define-constant gl::distance-attenuation-ext 33065)
  (define gl::distance-attenuation-ext gl::distance-attenuation-ext)
  (define-constant gl::point-size-min-sgis 33062)
  (define gl::point-size-min-sgis gl::point-size-min-sgis)
  (define-constant gl::point-size-max-sgis 33063)
  (define gl::point-size-max-sgis gl::point-size-max-sgis)
  (define-constant gl::point-fade-threshold-size-sgis 33064)
  (define gl::point-fade-threshold-size-sgis
    gl::point-fade-threshold-size-sgis)
  (define-constant gl::distance-attenuation-sgis 33065)
  (define gl::distance-attenuation-sgis gl::distance-attenuation-sgis)
  (define-constant gl::instrument-buffer-pointer-sgix 33152)
  (define gl::instrument-buffer-pointer-sgix
    gl::instrument-buffer-pointer-sgix)
  (define-constant gl::instrument-measurements-sgix 33153)
  (define gl::instrument-measurements-sgix gl::instrument-measurements-sgix)
  (define-constant gl::post-texture-filter-bias-sgix 33145)
  (define gl::post-texture-filter-bias-sgix gl::post-texture-filter-bias-sgix)
  (define-constant gl::post-texture-filter-scale-sgix 33146)
  (define gl::post-texture-filter-scale-sgix
    gl::post-texture-filter-scale-sgix)
  (define-constant gl::post-texture-filter-bias-range-sgix 33147)
  (define gl::post-texture-filter-bias-range-sgix
    gl::post-texture-filter-bias-range-sgix)
  (define-constant gl::post-texture-filter-scale-range-sgix 33148)
  (define gl::post-texture-filter-scale-range-sgix
    gl::post-texture-filter-scale-range-sgix)
  (define-constant gl::framezoom-sgix 33163)
  (define gl::framezoom-sgix gl::framezoom-sgix)
  (define-constant gl::framezoom-factor-sgix 33164)
  (define gl::framezoom-factor-sgix gl::framezoom-factor-sgix)
  (define-constant gl::max-framezoom-factor-sgix 33165)
  (define gl::max-framezoom-factor-sgix gl::max-framezoom-factor-sgix)
  (define-constant gl::texture-deformation-bit-sgix 1)
  (define gl::texture-deformation-bit-sgix gl::texture-deformation-bit-sgix)
  (define-constant gl::geometry-deformation-bit-sgix 2)
  (define gl::geometry-deformation-bit-sgix gl::geometry-deformation-bit-sgix)
  (define-constant gl::geometry-deformation-sgix 33172)
  (define gl::geometry-deformation-sgix gl::geometry-deformation-sgix)
  (define-constant gl::texture-deformation-sgix 33173)
  (define gl::texture-deformation-sgix gl::texture-deformation-sgix)
  (define-constant gl::deformations-mask-sgix 33174)
  (define gl::deformations-mask-sgix gl::deformations-mask-sgix)
  (define-constant gl::max-deformation-order-sgix 33175)
  (define gl::max-deformation-order-sgix gl::max-deformation-order-sgix)
  (define-constant gl::reference-plane-sgix 33149)
  (define gl::reference-plane-sgix gl::reference-plane-sgix)
  (define-constant gl::reference-plane-equation-sgix 33150)
  (define gl::reference-plane-equation-sgix gl::reference-plane-equation-sgix)
  (define-constant gl::depth-component16-sgix 33189)
  (define gl::depth-component16-sgix gl::depth-component16-sgix)
  (define-constant gl::depth-component24-sgix 33190)
  (define gl::depth-component24-sgix gl::depth-component24-sgix)
  (define-constant gl::depth-component32-sgix 33191)
  (define gl::depth-component32-sgix gl::depth-component32-sgix)
  (define-constant gl::fog-func-sgis 33066)
  (define gl::fog-func-sgis gl::fog-func-sgis)
  (define-constant gl::fog-func-points-sgis 33067)
  (define gl::fog-func-points-sgis gl::fog-func-points-sgis)
  (define-constant gl::max-fog-func-points-sgis 33068)
  (define gl::max-fog-func-points-sgis gl::max-fog-func-points-sgis)
  (define-constant gl::fog-offset-sgix 33176)
  (define gl::fog-offset-sgix gl::fog-offset-sgix)
  (define-constant gl::fog-offset-value-sgix 33177)
  (define gl::fog-offset-value-sgix gl::fog-offset-value-sgix)
  (define-constant gl::image-scale-x-hp 33109)
  (define gl::image-scale-x-hp gl::image-scale-x-hp)
  (define-constant gl::image-scale-y-hp 33110)
  (define gl::image-scale-y-hp gl::image-scale-y-hp)
  (define-constant gl::image-translate-x-hp 33111)
  (define gl::image-translate-x-hp gl::image-translate-x-hp)
  (define-constant gl::image-translate-y-hp 33112)
  (define gl::image-translate-y-hp gl::image-translate-y-hp)
  (define-constant gl::image-rotate-angle-hp 33113)
  (define gl::image-rotate-angle-hp gl::image-rotate-angle-hp)
  (define-constant gl::image-rotate-origin-x-hp 33114)
  (define gl::image-rotate-origin-x-hp gl::image-rotate-origin-x-hp)
  (define-constant gl::image-rotate-origin-y-hp 33115)
  (define gl::image-rotate-origin-y-hp gl::image-rotate-origin-y-hp)
  (define-constant gl::image-mag-filter-hp 33116)
  (define gl::image-mag-filter-hp gl::image-mag-filter-hp)
  (define-constant gl::image-min-filter-hp 33117)
  (define gl::image-min-filter-hp gl::image-min-filter-hp)
  (define-constant gl::image-cubic-weight-hp 33118)
  (define gl::image-cubic-weight-hp gl::image-cubic-weight-hp)
  (define-constant gl::cubic-hp 33119)
  (define gl::cubic-hp gl::cubic-hp)
  (define-constant gl::average-hp 33120)
  (define gl::average-hp gl::average-hp)
  (define-constant gl::image-transform-2d-hp 33121)
  (define gl::image-transform-2d-hp gl::image-transform-2d-hp)
  (define-constant gl::post-image-transform-color-table-hp 33122)
  (define gl::post-image-transform-color-table-hp
    gl::post-image-transform-color-table-hp)
  (define-constant gl::proxy-post-image-transform-color-table-hp 33123)
  (define gl::proxy-post-image-transform-color-table-hp
    gl::proxy-post-image-transform-color-table-hp)
  (define-constant gl::ignore-border-hp 33104)
  (define gl::ignore-border-hp gl::ignore-border-hp)
  (define-constant gl::constant-border-hp 33105)
  (define gl::constant-border-hp gl::constant-border-hp)
  (define-constant gl::replicate-border-hp 33107)
  (define gl::replicate-border-hp gl::replicate-border-hp)
  (define-constant gl::convolution-border-color-hp 33108)
  (define gl::convolution-border-color-hp gl::convolution-border-color-hp)
  (define-constant gl::texture-env-bias-sgix 32958)
  (define gl::texture-env-bias-sgix gl::texture-env-bias-sgix)
  (define-constant gl::vertex-data-hint-pgi 107050)
  (define gl::vertex-data-hint-pgi gl::vertex-data-hint-pgi)
  (define-constant gl::vertex-consistent-hint-pgi 107051)
  (define gl::vertex-consistent-hint-pgi gl::vertex-consistent-hint-pgi)
  (define-constant gl::material-side-hint-pgi 107052)
  (define gl::material-side-hint-pgi gl::material-side-hint-pgi)
  (define-constant gl::max-vertex-hint-pgi 107053)
  (define gl::max-vertex-hint-pgi gl::max-vertex-hint-pgi)
  (define-constant gl::color3-bit-pgi 65536)
  (define gl::color3-bit-pgi gl::color3-bit-pgi)
  (define-constant gl::color4-bit-pgi 131072)
  (define gl::color4-bit-pgi gl::color4-bit-pgi)
  (define-constant gl::edgeflag-bit-pgi 262144)
  (define gl::edgeflag-bit-pgi gl::edgeflag-bit-pgi)
  (define-constant gl::index-bit-pgi 524288)
  (define gl::index-bit-pgi gl::index-bit-pgi)
  (define-constant gl::mat-ambient-bit-pgi 1048576)
  (define gl::mat-ambient-bit-pgi gl::mat-ambient-bit-pgi)
  (define-constant gl::mat-ambient-and-diffuse-bit-pgi 2097152)
  (define gl::mat-ambient-and-diffuse-bit-pgi
    gl::mat-ambient-and-diffuse-bit-pgi)
  (define-constant gl::mat-diffuse-bit-pgi 4194304)
  (define gl::mat-diffuse-bit-pgi gl::mat-diffuse-bit-pgi)
  (define-constant gl::mat-emission-bit-pgi 8388608)
  (define gl::mat-emission-bit-pgi gl::mat-emission-bit-pgi)
  (define-constant gl::mat-color-indexes-bit-pgi 16777216)
  (define gl::mat-color-indexes-bit-pgi gl::mat-color-indexes-bit-pgi)
  (define-constant gl::mat-shininess-bit-pgi 33554432)
  (define gl::mat-shininess-bit-pgi gl::mat-shininess-bit-pgi)
  (define-constant gl::mat-specular-bit-pgi 67108864)
  (define gl::mat-specular-bit-pgi gl::mat-specular-bit-pgi)
  (define-constant gl::normal-bit-pgi 134217728)
  (define gl::normal-bit-pgi gl::normal-bit-pgi)
  (define-constant gl::texcoord1-bit-pgi 268435456)
  (define gl::texcoord1-bit-pgi gl::texcoord1-bit-pgi)
  (define-constant gl::texcoord2-bit-pgi 536870912)
  (define gl::texcoord2-bit-pgi gl::texcoord2-bit-pgi)
  (define-constant gl::texcoord3-bit-pgi 1073741824)
  (define gl::texcoord3-bit-pgi gl::texcoord3-bit-pgi)
  (define-constant gl::texcoord4-bit-pgi 2147483648)
  (define gl::texcoord4-bit-pgi gl::texcoord4-bit-pgi)
  (define-constant gl::vertex23-bit-pgi 4)
  (define gl::vertex23-bit-pgi gl::vertex23-bit-pgi)
  (define-constant gl::vertex4-bit-pgi 8)
  (define gl::vertex4-bit-pgi gl::vertex4-bit-pgi)
  (define-constant gl::prefer-doublebuffer-hint-pgi 107000)
  (define gl::prefer-doublebuffer-hint-pgi gl::prefer-doublebuffer-hint-pgi)
  (define-constant gl::conserve-memory-hint-pgi 107005)
  (define gl::conserve-memory-hint-pgi gl::conserve-memory-hint-pgi)
  (define-constant gl::reclaim-memory-hint-pgi 107006)
  (define gl::reclaim-memory-hint-pgi gl::reclaim-memory-hint-pgi)
  (define-constant gl::native-graphics-handle-pgi 107010)
  (define gl::native-graphics-handle-pgi gl::native-graphics-handle-pgi)
  (define-constant gl::native-graphics-begin-hint-pgi 107011)
  (define gl::native-graphics-begin-hint-pgi
    gl::native-graphics-begin-hint-pgi)
  (define-constant gl::native-graphics-end-hint-pgi 107012)
  (define gl::native-graphics-end-hint-pgi gl::native-graphics-end-hint-pgi)
  (define-constant gl::always-fast-hint-pgi 107020)
  (define gl::always-fast-hint-pgi gl::always-fast-hint-pgi)
  (define-constant gl::always-soft-hint-pgi 107021)
  (define gl::always-soft-hint-pgi gl::always-soft-hint-pgi)
  (define-constant gl::allow-draw-obj-hint-pgi 107022)
  (define gl::allow-draw-obj-hint-pgi gl::allow-draw-obj-hint-pgi)
  (define-constant gl::allow-draw-win-hint-pgi 107023)
  (define gl::allow-draw-win-hint-pgi gl::allow-draw-win-hint-pgi)
  (define-constant gl::allow-draw-frg-hint-pgi 107024)
  (define gl::allow-draw-frg-hint-pgi gl::allow-draw-frg-hint-pgi)
  (define-constant gl::allow-draw-mem-hint-pgi 107025)
  (define gl::allow-draw-mem-hint-pgi gl::allow-draw-mem-hint-pgi)
  (define-constant gl::strict-depthfunc-hint-pgi 107030)
  (define gl::strict-depthfunc-hint-pgi gl::strict-depthfunc-hint-pgi)
  (define-constant gl::strict-lighting-hint-pgi 107031)
  (define gl::strict-lighting-hint-pgi gl::strict-lighting-hint-pgi)
  (define-constant gl::strict-scissor-hint-pgi 107032)
  (define gl::strict-scissor-hint-pgi gl::strict-scissor-hint-pgi)
  (define-constant gl::full-stipple-hint-pgi 107033)
  (define gl::full-stipple-hint-pgi gl::full-stipple-hint-pgi)
  (define-constant gl::clip-near-hint-pgi 107040)
  (define gl::clip-near-hint-pgi gl::clip-near-hint-pgi)
  (define-constant gl::clip-far-hint-pgi 107041)
  (define gl::clip-far-hint-pgi gl::clip-far-hint-pgi)
  (define-constant gl::wide-line-hint-pgi 107042)
  (define gl::wide-line-hint-pgi gl::wide-line-hint-pgi)
  (define-constant gl::back-normals-hint-pgi 107043)
  (define gl::back-normals-hint-pgi gl::back-normals-hint-pgi)
  (define-constant gl::clip-volume-clipping-hint-ext 33008)
  (define gl::clip-volume-clipping-hint-ext gl::clip-volume-clipping-hint-ext)
  (define-constant gl::list-priority-sgix 33154)
  (define gl::list-priority-sgix gl::list-priority-sgix)
  (define-constant gl::ir-instrument1-sgix 33151)
  (define gl::ir-instrument1-sgix gl::ir-instrument1-sgix)
  (define-constant gl::calligraphic-fragment-sgix 33155)
  (define gl::calligraphic-fragment-sgix gl::calligraphic-fragment-sgix)
  (define-constant gl::texture-lod-bias-s-sgix 33166)
  (define gl::texture-lod-bias-s-sgix gl::texture-lod-bias-s-sgix)
  (define-constant gl::texture-lod-bias-t-sgix 33167)
  (define gl::texture-lod-bias-t-sgix gl::texture-lod-bias-t-sgix)
  (define-constant gl::texture-lod-bias-r-sgix 33168)
  (define gl::texture-lod-bias-r-sgix gl::texture-lod-bias-r-sgix)
  (define-constant gl::shadow-ambient-sgix 32959)
  (define gl::shadow-ambient-sgix gl::shadow-ambient-sgix)
  (define-constant gl::index-material-ext 33208)
  (define gl::index-material-ext gl::index-material-ext)
  (define-constant gl::index-material-parameter-ext 33209)
  (define gl::index-material-parameter-ext gl::index-material-parameter-ext)
  (define-constant gl::index-material-face-ext 33210)
  (define gl::index-material-face-ext gl::index-material-face-ext)
  (define-constant gl::index-test-ext 33205)
  (define gl::index-test-ext gl::index-test-ext)
  (define-constant gl::index-test-func-ext 33206)
  (define gl::index-test-func-ext gl::index-test-func-ext)
  (define-constant gl::index-test-ref-ext 33207)
  (define gl::index-test-ref-ext gl::index-test-ref-ext)
  (define-constant gl::iui-v2f-ext 33197)
  (define gl::iui-v2f-ext gl::iui-v2f-ext)
  (define-constant gl::iui-v3f-ext 33198)
  (define gl::iui-v3f-ext gl::iui-v3f-ext)
  (define-constant gl::iui-n3f-v2f-ext 33199)
  (define gl::iui-n3f-v2f-ext gl::iui-n3f-v2f-ext)
  (define-constant gl::iui-n3f-v3f-ext 33200)
  (define gl::iui-n3f-v3f-ext gl::iui-n3f-v3f-ext)
  (define-constant gl::t2f-iui-v2f-ext 33201)
  (define gl::t2f-iui-v2f-ext gl::t2f-iui-v2f-ext)
  (define-constant gl::t2f-iui-v3f-ext 33202)
  (define gl::t2f-iui-v3f-ext gl::t2f-iui-v3f-ext)
  (define-constant gl::t2f-iui-n3f-v2f-ext 33203)
  (define gl::t2f-iui-n3f-v2f-ext gl::t2f-iui-n3f-v2f-ext)
  (define-constant gl::t2f-iui-n3f-v3f-ext 33204)
  (define gl::t2f-iui-n3f-v3f-ext gl::t2f-iui-n3f-v3f-ext)
  (define-constant gl::array-element-lock-first-ext 33192)
  (define gl::array-element-lock-first-ext gl::array-element-lock-first-ext)
  (define-constant gl::array-element-lock-count-ext 33193)
  (define gl::array-element-lock-count-ext gl::array-element-lock-count-ext)
  (define-constant gl::cull-vertex-ext 33194)
  (define gl::cull-vertex-ext gl::cull-vertex-ext)
  (define-constant gl::cull-vertex-eye-position-ext 33195)
  (define gl::cull-vertex-eye-position-ext gl::cull-vertex-eye-position-ext)
  (define-constant gl::cull-vertex-object-position-ext 33196)
  (define gl::cull-vertex-object-position-ext
    gl::cull-vertex-object-position-ext)
  (define-constant gl::ycrcb-422-sgix 33211)
  (define gl::ycrcb-422-sgix gl::ycrcb-422-sgix)
  (define-constant gl::ycrcb-444-sgix 33212)
  (define gl::ycrcb-444-sgix gl::ycrcb-444-sgix)
  (define-constant gl::fragment-lighting-sgix 33792)
  (define gl::fragment-lighting-sgix gl::fragment-lighting-sgix)
  (define-constant gl::fragment-color-material-sgix 33793)
  (define gl::fragment-color-material-sgix gl::fragment-color-material-sgix)
  (define-constant gl::fragment-color-material-face-sgix 33794)
  (define gl::fragment-color-material-face-sgix
    gl::fragment-color-material-face-sgix)
  (define-constant gl::fragment-color-material-parameter-sgix 33795)
  (define gl::fragment-color-material-parameter-sgix
    gl::fragment-color-material-parameter-sgix)
  (define-constant gl::max-fragment-lights-sgix 33796)
  (define gl::max-fragment-lights-sgix gl::max-fragment-lights-sgix)
  (define-constant gl::max-active-lights-sgix 33797)
  (define gl::max-active-lights-sgix gl::max-active-lights-sgix)
  (define-constant gl::current-raster-normal-sgix 33798)
  (define gl::current-raster-normal-sgix gl::current-raster-normal-sgix)
  (define-constant gl::light-env-mode-sgix 33799)
  (define gl::light-env-mode-sgix gl::light-env-mode-sgix)
  (define-constant gl::fragment-light-model-local-viewer-sgix 33800)
  (define gl::fragment-light-model-local-viewer-sgix
    gl::fragment-light-model-local-viewer-sgix)
  (define-constant gl::fragment-light-model-two-side-sgix 33801)
  (define gl::fragment-light-model-two-side-sgix
    gl::fragment-light-model-two-side-sgix)
  (define-constant gl::fragment-light-model-ambient-sgix 33802)
  (define gl::fragment-light-model-ambient-sgix
    gl::fragment-light-model-ambient-sgix)
  (define-constant gl::fragment-light-model-normal-interpolation-sgix 33803)
  (define gl::fragment-light-model-normal-interpolation-sgix
    gl::fragment-light-model-normal-interpolation-sgix)
  (define-constant gl::fragment-light0-sgix 33804)
  (define gl::fragment-light0-sgix gl::fragment-light0-sgix)
  (define-constant gl::fragment-light1-sgix 33805)
  (define gl::fragment-light1-sgix gl::fragment-light1-sgix)
  (define-constant gl::fragment-light2-sgix 33806)
  (define gl::fragment-light2-sgix gl::fragment-light2-sgix)
  (define-constant gl::fragment-light3-sgix 33807)
  (define gl::fragment-light3-sgix gl::fragment-light3-sgix)
  (define-constant gl::fragment-light4-sgix 33808)
  (define gl::fragment-light4-sgix gl::fragment-light4-sgix)
  (define-constant gl::fragment-light5-sgix 33809)
  (define gl::fragment-light5-sgix gl::fragment-light5-sgix)
  (define-constant gl::fragment-light6-sgix 33810)
  (define gl::fragment-light6-sgix gl::fragment-light6-sgix)
  (define-constant gl::fragment-light7-sgix 33811)
  (define gl::fragment-light7-sgix gl::fragment-light7-sgix)
  (define-constant gl::raster-position-unclipped-ibm 103010)
  (define gl::raster-position-unclipped-ibm gl::raster-position-unclipped-ibm)
  (define-constant gl::texture-lighting-mode-hp 33127)
  (define gl::texture-lighting-mode-hp gl::texture-lighting-mode-hp)
  (define-constant gl::texture-post-specular-hp 33128)
  (define gl::texture-post-specular-hp gl::texture-post-specular-hp)
  (define-constant gl::texture-pre-specular-hp 33129)
  (define gl::texture-pre-specular-hp gl::texture-pre-specular-hp)
  (define-constant gl::max-elements-vertices-ext 33000)
  (define gl::max-elements-vertices-ext gl::max-elements-vertices-ext)
  (define-constant gl::max-elements-indices-ext 33001)
  (define gl::max-elements-indices-ext gl::max-elements-indices-ext)
  (define-constant gl::phong-win 33002)
  (define gl::phong-win gl::phong-win)
  (define-constant gl::phong-hint-win 33003)
  (define gl::phong-hint-win gl::phong-hint-win)
  (define-constant gl::fog-specular-texture-win 33004)
  (define gl::fog-specular-texture-win gl::fog-specular-texture-win)
  (define-constant gl::fragment-material-ext 33609)
  (define gl::fragment-material-ext gl::fragment-material-ext)
  (define-constant gl::fragment-normal-ext 33610)
  (define gl::fragment-normal-ext gl::fragment-normal-ext)
  (define-constant gl::fragment-color-ext 33612)
  (define gl::fragment-color-ext gl::fragment-color-ext)
  (define-constant gl::attenuation-ext 33613)
  (define gl::attenuation-ext gl::attenuation-ext)
  (define-constant gl::shadow-attenuation-ext 33614)
  (define gl::shadow-attenuation-ext gl::shadow-attenuation-ext)
  (define-constant gl::texture-application-mode-ext 33615)
  (define gl::texture-application-mode-ext gl::texture-application-mode-ext)
  (define-constant gl::texture-light-ext 33616)
  (define gl::texture-light-ext gl::texture-light-ext)
  (define-constant gl::texture-material-face-ext 33617)
  (define gl::texture-material-face-ext gl::texture-material-face-ext)
  (define-constant gl::texture-material-parameter-ext 33618)
  (define gl::texture-material-parameter-ext
    gl::texture-material-parameter-ext)
  (define-constant gl::fragment-depth-ext 33874)
  (define gl::fragment-depth-ext gl::fragment-depth-ext)
  (define-constant gl::alpha-min-sgix 33568)
  (define gl::alpha-min-sgix gl::alpha-min-sgix)
  (define-constant gl::alpha-max-sgix 33569)
  (define gl::alpha-max-sgix gl::alpha-max-sgix)
  (define-constant gl::pixel-tex-gen-q-ceiling-sgix 33156)
  (define gl::pixel-tex-gen-q-ceiling-sgix gl::pixel-tex-gen-q-ceiling-sgix)
  (define-constant gl::pixel-tex-gen-q-round-sgix 33157)
  (define gl::pixel-tex-gen-q-round-sgix gl::pixel-tex-gen-q-round-sgix)
  (define-constant gl::pixel-tex-gen-q-floor-sgix 33158)
  (define gl::pixel-tex-gen-q-floor-sgix gl::pixel-tex-gen-q-floor-sgix)
  (define-constant gl::pixel-tex-gen-alpha-replace-sgix 33159)
  (define gl::pixel-tex-gen-alpha-replace-sgix
    gl::pixel-tex-gen-alpha-replace-sgix)
  (define-constant gl::pixel-tex-gen-alpha-no-replace-sgix 33160)
  (define gl::pixel-tex-gen-alpha-no-replace-sgix
    gl::pixel-tex-gen-alpha-no-replace-sgix)
  (define-constant gl::pixel-tex-gen-alpha-ls-sgix 33161)
  (define gl::pixel-tex-gen-alpha-ls-sgix gl::pixel-tex-gen-alpha-ls-sgix)
  (define-constant gl::pixel-tex-gen-alpha-ms-sgix 33162)
  (define gl::pixel-tex-gen-alpha-ms-sgix gl::pixel-tex-gen-alpha-ms-sgix)
  (define-constant gl::async-marker-sgix 33577)
  (define gl::async-marker-sgix gl::async-marker-sgix)
  (define-constant gl::async-tex-image-sgix 33628)
  (define gl::async-tex-image-sgix gl::async-tex-image-sgix)
  (define-constant gl::async-draw-pixels-sgix 33629)
  (define gl::async-draw-pixels-sgix gl::async-draw-pixels-sgix)
  (define-constant gl::async-read-pixels-sgix 33630)
  (define gl::async-read-pixels-sgix gl::async-read-pixels-sgix)
  (define-constant gl::max-async-tex-image-sgix 33631)
  (define gl::max-async-tex-image-sgix gl::max-async-tex-image-sgix)
  (define-constant gl::max-async-draw-pixels-sgix 33632)
  (define gl::max-async-draw-pixels-sgix gl::max-async-draw-pixels-sgix)
  (define-constant gl::max-async-read-pixels-sgix 33633)
  (define gl::max-async-read-pixels-sgix gl::max-async-read-pixels-sgix)
  (define-constant gl::async-histogram-sgix 33580)
  (define gl::async-histogram-sgix gl::async-histogram-sgix)
  (define-constant gl::max-async-histogram-sgix 33581)
  (define gl::max-async-histogram-sgix gl::max-async-histogram-sgix)
  (define-constant gl::parallel-arrays-intel 33780)
  (define gl::parallel-arrays-intel gl::parallel-arrays-intel)
  (define-constant gl::vertex-array-parallel-pointers-intel 33781)
  (define gl::vertex-array-parallel-pointers-intel
    gl::vertex-array-parallel-pointers-intel)
  (define-constant gl::normal-array-parallel-pointers-intel 33782)
  (define gl::normal-array-parallel-pointers-intel
    gl::normal-array-parallel-pointers-intel)
  (define-constant gl::color-array-parallel-pointers-intel 33783)
  (define gl::color-array-parallel-pointers-intel
    gl::color-array-parallel-pointers-intel)
  (define-constant gl::texture-coord-array-parallel-pointers-intel 33784)
  (define gl::texture-coord-array-parallel-pointers-intel
    gl::texture-coord-array-parallel-pointers-intel)
  (define-constant gl::occlusion-test-hp 33125)
  (define gl::occlusion-test-hp gl::occlusion-test-hp)
  (define-constant gl::occlusion-test-result-hp 33126)
  (define gl::occlusion-test-result-hp gl::occlusion-test-result-hp)
  (define-constant gl::pixel-transform-2d-ext 33584)
  (define gl::pixel-transform-2d-ext gl::pixel-transform-2d-ext)
  (define-constant gl::pixel-mag-filter-ext 33585)
  (define gl::pixel-mag-filter-ext gl::pixel-mag-filter-ext)
  (define-constant gl::pixel-min-filter-ext 33586)
  (define gl::pixel-min-filter-ext gl::pixel-min-filter-ext)
  (define-constant gl::pixel-cubic-weight-ext 33587)
  (define gl::pixel-cubic-weight-ext gl::pixel-cubic-weight-ext)
  (define-constant gl::cubic-ext 33588)
  (define gl::cubic-ext gl::cubic-ext)
  (define-constant gl::average-ext 33589)
  (define gl::average-ext gl::average-ext)
  (define-constant gl::pixel-transform-2d-stack-depth-ext 33590)
  (define gl::pixel-transform-2d-stack-depth-ext
    gl::pixel-transform-2d-stack-depth-ext)
  (define-constant gl::max-pixel-transform-2d-stack-depth-ext 33591)
  (define gl::max-pixel-transform-2d-stack-depth-ext
    gl::max-pixel-transform-2d-stack-depth-ext)
  (define-constant gl::pixel-transform-2d-matrix-ext 33592)
  (define gl::pixel-transform-2d-matrix-ext gl::pixel-transform-2d-matrix-ext)
  (define-constant gl::shared-texture-palette-ext 33275)
  (define gl::shared-texture-palette-ext gl::shared-texture-palette-ext)
  (define-constant gl::light-model-color-control-ext 33272)
  (define gl::light-model-color-control-ext gl::light-model-color-control-ext)
  (define-constant gl::single-color-ext 33273)
  (define gl::single-color-ext gl::single-color-ext)
  (define-constant gl::separate-specular-color-ext 33274)
  (define gl::separate-specular-color-ext gl::separate-specular-color-ext)
  (define-constant gl::color-sum-ext 33880)
  (define gl::color-sum-ext gl::color-sum-ext)
  (define-constant gl::current-secondary-color-ext 33881)
  (define gl::current-secondary-color-ext gl::current-secondary-color-ext)
  (define-constant gl::secondary-color-array-size-ext 33882)
  (define gl::secondary-color-array-size-ext
    gl::secondary-color-array-size-ext)
  (define-constant gl::secondary-color-array-type-ext 33883)
  (define gl::secondary-color-array-type-ext
    gl::secondary-color-array-type-ext)
  (define-constant gl::secondary-color-array-stride-ext 33884)
  (define gl::secondary-color-array-stride-ext
    gl::secondary-color-array-stride-ext)
  (define-constant gl::secondary-color-array-pointer-ext 33885)
  (define gl::secondary-color-array-pointer-ext
    gl::secondary-color-array-pointer-ext)
  (define-constant gl::secondary-color-array-ext 33886)
  (define gl::secondary-color-array-ext gl::secondary-color-array-ext)
  (define-constant gl::perturb-ext 34222)
  (define gl::perturb-ext gl::perturb-ext)
  (define-constant gl::texture-normal-ext 34223)
  (define gl::texture-normal-ext gl::texture-normal-ext)
  (define-constant gl::fog-coordinate-source-ext 33872)
  (define gl::fog-coordinate-source-ext gl::fog-coordinate-source-ext)
  (define-constant gl::fog-coordinate-ext 33873)
  (define gl::fog-coordinate-ext gl::fog-coordinate-ext)
  (define-constant gl::fragment-depth-ext 33874)
  (define gl::fragment-depth-ext gl::fragment-depth-ext)
  (define-constant gl::current-fog-coordinate-ext 33875)
  (define gl::current-fog-coordinate-ext gl::current-fog-coordinate-ext)
  (define-constant gl::fog-coordinate-array-type-ext 33876)
  (define gl::fog-coordinate-array-type-ext gl::fog-coordinate-array-type-ext)
  (define-constant gl::fog-coordinate-array-stride-ext 33877)
  (define gl::fog-coordinate-array-stride-ext
    gl::fog-coordinate-array-stride-ext)
  (define-constant gl::fog-coordinate-array-pointer-ext 33878)
  (define gl::fog-coordinate-array-pointer-ext
    gl::fog-coordinate-array-pointer-ext)
  (define-constant gl::fog-coordinate-array-ext 33879)
  (define gl::fog-coordinate-array-ext gl::fog-coordinate-array-ext)
  (define-constant gl::screen-coordinates-rend 33936)
  (define gl::screen-coordinates-rend gl::screen-coordinates-rend)
  (define-constant gl::inverted-screen-w-rend 33937)
  (define gl::inverted-screen-w-rend gl::inverted-screen-w-rend)
  (define-constant gl::tangent-array-ext 33849)
  (define gl::tangent-array-ext gl::tangent-array-ext)
  (define-constant gl::binormal-array-ext 33850)
  (define gl::binormal-array-ext gl::binormal-array-ext)
  (define-constant gl::current-tangent-ext 33851)
  (define gl::current-tangent-ext gl::current-tangent-ext)
  (define-constant gl::current-binormal-ext 33852)
  (define gl::current-binormal-ext gl::current-binormal-ext)
  (define-constant gl::tangent-array-type-ext 33854)
  (define gl::tangent-array-type-ext gl::tangent-array-type-ext)
  (define-constant gl::tangent-array-stride-ext 33855)
  (define gl::tangent-array-stride-ext gl::tangent-array-stride-ext)
  (define-constant gl::binormal-array-type-ext 33856)
  (define gl::binormal-array-type-ext gl::binormal-array-type-ext)
  (define-constant gl::binormal-array-stride-ext 33857)
  (define gl::binormal-array-stride-ext gl::binormal-array-stride-ext)
  (define-constant gl::tangent-array-pointer-ext 33858)
  (define gl::tangent-array-pointer-ext gl::tangent-array-pointer-ext)
  (define-constant gl::binormal-array-pointer-ext 33859)
  (define gl::binormal-array-pointer-ext gl::binormal-array-pointer-ext)
  (define-constant gl::map1-tangent-ext 33860)
  (define gl::map1-tangent-ext gl::map1-tangent-ext)
  (define-constant gl::map2-tangent-ext 33861)
  (define gl::map2-tangent-ext gl::map2-tangent-ext)
  (define-constant gl::map1-binormal-ext 33862)
  (define gl::map1-binormal-ext gl::map1-binormal-ext)
  (define-constant gl::map2-binormal-ext 33863)
  (define gl::map2-binormal-ext gl::map2-binormal-ext)
  (define-constant gl::combine-ext 34160)
  (define gl::combine-ext gl::combine-ext)
  (define-constant gl::combine-rgb-ext 34161)
  (define gl::combine-rgb-ext gl::combine-rgb-ext)
  (define-constant gl::combine-alpha-ext 34162)
  (define gl::combine-alpha-ext gl::combine-alpha-ext)
  (define-constant gl::rgb-scale-ext 34163)
  (define gl::rgb-scale-ext gl::rgb-scale-ext)
  (define-constant gl::add-signed-ext 34164)
  (define gl::add-signed-ext gl::add-signed-ext)
  (define-constant gl::interpolate-ext 34165)
  (define gl::interpolate-ext gl::interpolate-ext)
  (define-constant gl::constant-ext 34166)
  (define gl::constant-ext gl::constant-ext)
  (define-constant gl::primary-color-ext 34167)
  (define gl::primary-color-ext gl::primary-color-ext)
  (define-constant gl::previous-ext 34168)
  (define gl::previous-ext gl::previous-ext)
  (define-constant gl::source0-rgb-ext 34176)
  (define gl::source0-rgb-ext gl::source0-rgb-ext)
  (define-constant gl::source1-rgb-ext 34177)
  (define gl::source1-rgb-ext gl::source1-rgb-ext)
  (define-constant gl::source2-rgb-ext 34178)
  (define gl::source2-rgb-ext gl::source2-rgb-ext)
  (define-constant gl::source0-alpha-ext 34184)
  (define gl::source0-alpha-ext gl::source0-alpha-ext)
  (define-constant gl::source1-alpha-ext 34185)
  (define gl::source1-alpha-ext gl::source1-alpha-ext)
  (define-constant gl::source2-alpha-ext 34186)
  (define gl::source2-alpha-ext gl::source2-alpha-ext)
  (define-constant gl::operand0-rgb-ext 34192)
  (define gl::operand0-rgb-ext gl::operand0-rgb-ext)
  (define-constant gl::operand1-rgb-ext 34193)
  (define gl::operand1-rgb-ext gl::operand1-rgb-ext)
  (define-constant gl::operand2-rgb-ext 34194)
  (define gl::operand2-rgb-ext gl::operand2-rgb-ext)
  (define-constant gl::operand0-alpha-ext 34200)
  (define gl::operand0-alpha-ext gl::operand0-alpha-ext)
  (define-constant gl::operand1-alpha-ext 34201)
  (define gl::operand1-alpha-ext gl::operand1-alpha-ext)
  (define-constant gl::operand2-alpha-ext 34202)
  (define gl::operand2-alpha-ext gl::operand2-alpha-ext)
  (define-constant gl::light-model-specular-vector-apple 34224)
  (define gl::light-model-specular-vector-apple
    gl::light-model-specular-vector-apple)
  (define-constant gl::transform-hint-apple 34225)
  (define gl::transform-hint-apple gl::transform-hint-apple)
  (define-constant gl::fog-scale-sgix 33276)
  (define gl::fog-scale-sgix gl::fog-scale-sgix)
  (define-constant gl::fog-scale-value-sgix 33277)
  (define gl::fog-scale-value-sgix gl::fog-scale-value-sgix)
  (define-constant gl::unpack-constant-data-sunx 33237)
  (define gl::unpack-constant-data-sunx gl::unpack-constant-data-sunx)
  (define-constant gl::texture-constant-data-sunx 33238)
  (define gl::texture-constant-data-sunx gl::texture-constant-data-sunx)
  (define-constant gl::global-alpha-sun 33241)
  (define gl::global-alpha-sun gl::global-alpha-sun)
  (define-constant gl::global-alpha-factor-sun 33242)
  (define gl::global-alpha-factor-sun gl::global-alpha-factor-sun)
  (define-constant gl::restart-sun 1)
  (define gl::restart-sun gl::restart-sun)
  (define-constant gl::replace-middle-sun 2)
  (define gl::replace-middle-sun gl::replace-middle-sun)
  (define-constant gl::replace-oldest-sun 3)
  (define gl::replace-oldest-sun gl::replace-oldest-sun)
  (define-constant gl::triangle-list-sun 33239)
  (define gl::triangle-list-sun gl::triangle-list-sun)
  (define-constant gl::replacement-code-sun 33240)
  (define gl::replacement-code-sun gl::replacement-code-sun)
  (define-constant gl::replacement-code-array-sun 34240)
  (define gl::replacement-code-array-sun gl::replacement-code-array-sun)
  (define-constant gl::replacement-code-array-type-sun 34241)
  (define gl::replacement-code-array-type-sun
    gl::replacement-code-array-type-sun)
  (define-constant gl::replacement-code-array-stride-sun 34242)
  (define gl::replacement-code-array-stride-sun
    gl::replacement-code-array-stride-sun)
  (define-constant gl::replacement-code-array-pointer-sun 34243)
  (define gl::replacement-code-array-pointer-sun
    gl::replacement-code-array-pointer-sun)
  (define-constant gl::r1ui-v3f-sun 34244)
  (define gl::r1ui-v3f-sun gl::r1ui-v3f-sun)
  (define-constant gl::r1ui-c4ub-v3f-sun 34245)
  (define gl::r1ui-c4ub-v3f-sun gl::r1ui-c4ub-v3f-sun)
  (define-constant gl::r1ui-c3f-v3f-sun 34246)
  (define gl::r1ui-c3f-v3f-sun gl::r1ui-c3f-v3f-sun)
  (define-constant gl::r1ui-n3f-v3f-sun 34247)
  (define gl::r1ui-n3f-v3f-sun gl::r1ui-n3f-v3f-sun)
  (define-constant gl::r1ui-c4f-n3f-v3f-sun 34248)
  (define gl::r1ui-c4f-n3f-v3f-sun gl::r1ui-c4f-n3f-v3f-sun)
  (define-constant gl::r1ui-t2f-v3f-sun 34249)
  (define gl::r1ui-t2f-v3f-sun gl::r1ui-t2f-v3f-sun)
  (define-constant gl::r1ui-t2f-n3f-v3f-sun 34250)
  (define gl::r1ui-t2f-n3f-v3f-sun gl::r1ui-t2f-n3f-v3f-sun)
  (define-constant gl::r1ui-t2f-c4f-n3f-v3f-sun 34251)
  (define gl::r1ui-t2f-c4f-n3f-v3f-sun gl::r1ui-t2f-c4f-n3f-v3f-sun)
  (define-constant gl::blend-dst-rgb-ext 32968)
  (define gl::blend-dst-rgb-ext gl::blend-dst-rgb-ext)
  (define-constant gl::blend-src-rgb-ext 32969)
  (define gl::blend-src-rgb-ext gl::blend-src-rgb-ext)
  (define-constant gl::blend-dst-alpha-ext 32970)
  (define gl::blend-dst-alpha-ext gl::blend-dst-alpha-ext)
  (define-constant gl::blend-src-alpha-ext 32971)
  (define gl::blend-src-alpha-ext gl::blend-src-alpha-ext)
  (define-constant gl::red-min-clamp-ingr 34144)
  (define gl::red-min-clamp-ingr gl::red-min-clamp-ingr)
  (define-constant gl::green-min-clamp-ingr 34145)
  (define gl::green-min-clamp-ingr gl::green-min-clamp-ingr)
  (define-constant gl::blue-min-clamp-ingr 34146)
  (define gl::blue-min-clamp-ingr gl::blue-min-clamp-ingr)
  (define-constant gl::alpha-min-clamp-ingr 34147)
  (define gl::alpha-min-clamp-ingr gl::alpha-min-clamp-ingr)
  (define-constant gl::red-max-clamp-ingr 34148)
  (define gl::red-max-clamp-ingr gl::red-max-clamp-ingr)
  (define-constant gl::green-max-clamp-ingr 34149)
  (define gl::green-max-clamp-ingr gl::green-max-clamp-ingr)
  (define-constant gl::blue-max-clamp-ingr 34150)
  (define gl::blue-max-clamp-ingr gl::blue-max-clamp-ingr)
  (define-constant gl::alpha-max-clamp-ingr 34151)
  (define gl::alpha-max-clamp-ingr gl::alpha-max-clamp-ingr)
  (define-constant gl::interlace-read-ingr 34152)
  (define gl::interlace-read-ingr gl::interlace-read-ingr)
  (define-constant gl::incr-wrap-ext 34055)
  (define gl::incr-wrap-ext gl::incr-wrap-ext)
  (define-constant gl::decr-wrap-ext 34056)
  (define gl::decr-wrap-ext gl::decr-wrap-ext)
  (define-constant gl::422-ext 32972)
  (define gl::422-ext gl::422-ext)
  (define-constant gl::422-rev-ext 32973)
  (define gl::422-rev-ext gl::422-rev-ext)
  (define-constant gl::422-average-ext 32974)
  (define gl::422-average-ext gl::422-average-ext)
  (define-constant gl::422-rev-average-ext 32975)
  (define gl::422-rev-average-ext gl::422-rev-average-ext)
  (define-constant gl::normal-map-nv 34065)
  (define gl::normal-map-nv gl::normal-map-nv)
  (define-constant gl::reflection-map-nv 34066)
  (define gl::reflection-map-nv gl::reflection-map-nv)
  (define-constant gl::normal-map-ext 34065)
  (define gl::normal-map-ext gl::normal-map-ext)
  (define-constant gl::reflection-map-ext 34066)
  (define gl::reflection-map-ext gl::reflection-map-ext)
  (define-constant gl::texture-cube-map-ext 34067)
  (define gl::texture-cube-map-ext gl::texture-cube-map-ext)
  (define-constant gl::texture-binding-cube-map-ext 34068)
  (define gl::texture-binding-cube-map-ext gl::texture-binding-cube-map-ext)
  (define-constant gl::texture-cube-map-positive-x-ext 34069)
  (define gl::texture-cube-map-positive-x-ext
    gl::texture-cube-map-positive-x-ext)
  (define-constant gl::texture-cube-map-negative-x-ext 34070)
  (define gl::texture-cube-map-negative-x-ext
    gl::texture-cube-map-negative-x-ext)
  (define-constant gl::texture-cube-map-positive-y-ext 34071)
  (define gl::texture-cube-map-positive-y-ext
    gl::texture-cube-map-positive-y-ext)
  (define-constant gl::texture-cube-map-negative-y-ext 34072)
  (define gl::texture-cube-map-negative-y-ext
    gl::texture-cube-map-negative-y-ext)
  (define-constant gl::texture-cube-map-positive-z-ext 34073)
  (define gl::texture-cube-map-positive-z-ext
    gl::texture-cube-map-positive-z-ext)
  (define-constant gl::texture-cube-map-negative-z-ext 34074)
  (define gl::texture-cube-map-negative-z-ext
    gl::texture-cube-map-negative-z-ext)
  (define-constant gl::proxy-texture-cube-map-ext 34075)
  (define gl::proxy-texture-cube-map-ext gl::proxy-texture-cube-map-ext)
  (define-constant gl::max-cube-map-texture-size-ext 34076)
  (define gl::max-cube-map-texture-size-ext gl::max-cube-map-texture-size-ext)
  (define-constant gl::wrap-border-sun 33236)
  (define gl::wrap-border-sun gl::wrap-border-sun)
  (define-constant gl::max-texture-lod-bias-ext 34045)
  (define gl::max-texture-lod-bias-ext gl::max-texture-lod-bias-ext)
  (define-constant gl::texture-filter-control-ext 34048)
  (define gl::texture-filter-control-ext gl::texture-filter-control-ext)
  (define-constant gl::texture-lod-bias-ext 34049)
  (define gl::texture-lod-bias-ext gl::texture-lod-bias-ext)
  (define-constant gl::texture-max-anisotropy-ext 34046)
  (define gl::texture-max-anisotropy-ext gl::texture-max-anisotropy-ext)
  (define-constant gl::max-texture-max-anisotropy-ext 34047)
  (define gl::max-texture-max-anisotropy-ext
    gl::max-texture-max-anisotropy-ext)
  (define-foreign-variable
    gl::modelview0-stack-depth-ext
    integer
    "GL_MODELVIEW0_STACK_DEPTH_EXT")
  (define gl::modelview0-stack-depth-ext gl::modelview0-stack-depth-ext)
  (define-constant gl::modelview1-stack-depth-ext 34050)
  (define gl::modelview1-stack-depth-ext gl::modelview1-stack-depth-ext)
  (define-foreign-variable
    gl::modelview0-matrix-ext
    integer
    "GL_MODELVIEW0_MATRIX_EXT")
  (define gl::modelview0-matrix-ext gl::modelview0-matrix-ext)
  (define-constant gl::modelview1-matrix-ext 34054)
  (define gl::modelview1-matrix-ext gl::modelview1-matrix-ext)
  (define-constant gl::vertex-weighting-ext 34057)
  (define gl::vertex-weighting-ext gl::vertex-weighting-ext)
  (define-foreign-variable gl::modelview0-ext integer "GL_MODELVIEW0_EXT")
  (define gl::modelview0-ext gl::modelview0-ext)
  (define-constant gl::modelview1-ext 34058)
  (define gl::modelview1-ext gl::modelview1-ext)
  (define-constant gl::current-vertex-weight-ext 34059)
  (define gl::current-vertex-weight-ext gl::current-vertex-weight-ext)
  (define-constant gl::vertex-weight-array-ext 34060)
  (define gl::vertex-weight-array-ext gl::vertex-weight-array-ext)
  (define-constant gl::vertex-weight-array-size-ext 34061)
  (define gl::vertex-weight-array-size-ext gl::vertex-weight-array-size-ext)
  (define-constant gl::vertex-weight-array-type-ext 34062)
  (define gl::vertex-weight-array-type-ext gl::vertex-weight-array-type-ext)
  (define-constant gl::vertex-weight-array-stride-ext 34063)
  (define gl::vertex-weight-array-stride-ext
    gl::vertex-weight-array-stride-ext)
  (define-constant gl::vertex-weight-array-pointer-ext 34064)
  (define gl::vertex-weight-array-pointer-ext
    gl::vertex-weight-array-pointer-ext)
  (define-constant gl::max-shininess-nv 34052)
  (define gl::max-shininess-nv gl::max-shininess-nv)
  (define-constant gl::max-spot-exponent-nv 34053)
  (define gl::max-spot-exponent-nv gl::max-spot-exponent-nv)
  (define-constant gl::vertex-array-range-nv 34077)
  (define gl::vertex-array-range-nv gl::vertex-array-range-nv)
  (define-constant gl::vertex-array-range-length-nv 34078)
  (define gl::vertex-array-range-length-nv gl::vertex-array-range-length-nv)
  (define-constant gl::vertex-array-range-valid-nv 34079)
  (define gl::vertex-array-range-valid-nv gl::vertex-array-range-valid-nv)
  (define-constant gl::max-vertex-array-range-element-nv 34080)
  (define gl::max-vertex-array-range-element-nv
    gl::max-vertex-array-range-element-nv)
  (define-constant gl::vertex-array-range-pointer-nv 34081)
  (define gl::vertex-array-range-pointer-nv gl::vertex-array-range-pointer-nv)
  (define-constant gl::register-combiners-nv 34082)
  (define gl::register-combiners-nv gl::register-combiners-nv)
  (define-constant gl::variable-a-nv 34083)
  (define gl::variable-a-nv gl::variable-a-nv)
  (define-constant gl::variable-b-nv 34084)
  (define gl::variable-b-nv gl::variable-b-nv)
  (define-constant gl::variable-c-nv 34085)
  (define gl::variable-c-nv gl::variable-c-nv)
  (define-constant gl::variable-d-nv 34086)
  (define gl::variable-d-nv gl::variable-d-nv)
  (define-constant gl::variable-e-nv 34087)
  (define gl::variable-e-nv gl::variable-e-nv)
  (define-constant gl::variable-f-nv 34088)
  (define gl::variable-f-nv gl::variable-f-nv)
  (define-constant gl::variable-g-nv 34089)
  (define gl::variable-g-nv gl::variable-g-nv)
  (define-constant gl::constant-color0-nv 34090)
  (define gl::constant-color0-nv gl::constant-color0-nv)
  (define-constant gl::constant-color1-nv 34091)
  (define gl::constant-color1-nv gl::constant-color1-nv)
  (define-constant gl::primary-color-nv 34092)
  (define gl::primary-color-nv gl::primary-color-nv)
  (define-constant gl::secondary-color-nv 34093)
  (define gl::secondary-color-nv gl::secondary-color-nv)
  (define-constant gl::spare0-nv 34094)
  (define gl::spare0-nv gl::spare0-nv)
  (define-constant gl::spare1-nv 34095)
  (define gl::spare1-nv gl::spare1-nv)
  (define-constant gl::discard-nv 34096)
  (define gl::discard-nv gl::discard-nv)
  (define-constant gl::e-times-f-nv 34097)
  (define gl::e-times-f-nv gl::e-times-f-nv)
  (define-constant gl::spare0-plus-secondary-color-nv 34098)
  (define gl::spare0-plus-secondary-color-nv
    gl::spare0-plus-secondary-color-nv)
  (define-constant gl::unsigned-identity-nv 34102)
  (define gl::unsigned-identity-nv gl::unsigned-identity-nv)
  (define-constant gl::unsigned-invert-nv 34103)
  (define gl::unsigned-invert-nv gl::unsigned-invert-nv)
  (define-constant gl::expand-normal-nv 34104)
  (define gl::expand-normal-nv gl::expand-normal-nv)
  (define-constant gl::expand-negate-nv 34105)
  (define gl::expand-negate-nv gl::expand-negate-nv)
  (define-constant gl::half-bias-normal-nv 34106)
  (define gl::half-bias-normal-nv gl::half-bias-normal-nv)
  (define-constant gl::half-bias-negate-nv 34107)
  (define gl::half-bias-negate-nv gl::half-bias-negate-nv)
  (define-constant gl::signed-identity-nv 34108)
  (define gl::signed-identity-nv gl::signed-identity-nv)
  (define-constant gl::signed-negate-nv 34109)
  (define gl::signed-negate-nv gl::signed-negate-nv)
  (define-constant gl::scale-by-two-nv 34110)
  (define gl::scale-by-two-nv gl::scale-by-two-nv)
  (define-constant gl::scale-by-four-nv 34111)
  (define gl::scale-by-four-nv gl::scale-by-four-nv)
  (define-constant gl::scale-by-one-half-nv 34112)
  (define gl::scale-by-one-half-nv gl::scale-by-one-half-nv)
  (define-constant gl::bias-by-negative-one-half-nv 34113)
  (define gl::bias-by-negative-one-half-nv gl::bias-by-negative-one-half-nv)
  (define-constant gl::combiner-input-nv 34114)
  (define gl::combiner-input-nv gl::combiner-input-nv)
  (define-constant gl::combiner-mapping-nv 34115)
  (define gl::combiner-mapping-nv gl::combiner-mapping-nv)
  (define-constant gl::combiner-component-usage-nv 34116)
  (define gl::combiner-component-usage-nv gl::combiner-component-usage-nv)
  (define-constant gl::combiner-ab-dot-product-nv 34117)
  (define gl::combiner-ab-dot-product-nv gl::combiner-ab-dot-product-nv)
  (define-constant gl::combiner-cd-dot-product-nv 34118)
  (define gl::combiner-cd-dot-product-nv gl::combiner-cd-dot-product-nv)
  (define-constant gl::combiner-mux-sum-nv 34119)
  (define gl::combiner-mux-sum-nv gl::combiner-mux-sum-nv)
  (define-constant gl::combiner-scale-nv 34120)
  (define gl::combiner-scale-nv gl::combiner-scale-nv)
  (define-constant gl::combiner-bias-nv 34121)
  (define gl::combiner-bias-nv gl::combiner-bias-nv)
  (define-constant gl::combiner-ab-output-nv 34122)
  (define gl::combiner-ab-output-nv gl::combiner-ab-output-nv)
  (define-constant gl::combiner-cd-output-nv 34123)
  (define gl::combiner-cd-output-nv gl::combiner-cd-output-nv)
  (define-constant gl::combiner-sum-output-nv 34124)
  (define gl::combiner-sum-output-nv gl::combiner-sum-output-nv)
  (define-constant gl::max-general-combiners-nv 34125)
  (define gl::max-general-combiners-nv gl::max-general-combiners-nv)
  (define-constant gl::num-general-combiners-nv 34126)
  (define gl::num-general-combiners-nv gl::num-general-combiners-nv)
  (define-constant gl::color-sum-clamp-nv 34127)
  (define gl::color-sum-clamp-nv gl::color-sum-clamp-nv)
  (define-constant gl::combiner0-nv 34128)
  (define gl::combiner0-nv gl::combiner0-nv)
  (define-constant gl::combiner1-nv 34129)
  (define gl::combiner1-nv gl::combiner1-nv)
  (define-constant gl::combiner2-nv 34130)
  (define gl::combiner2-nv gl::combiner2-nv)
  (define-constant gl::combiner3-nv 34131)
  (define gl::combiner3-nv gl::combiner3-nv)
  (define-constant gl::combiner4-nv 34132)
  (define gl::combiner4-nv gl::combiner4-nv)
  (define-constant gl::combiner5-nv 34133)
  (define gl::combiner5-nv gl::combiner5-nv)
  (define-constant gl::combiner6-nv 34134)
  (define gl::combiner6-nv gl::combiner6-nv)
  (define-constant gl::combiner7-nv 34135)
  (define gl::combiner7-nv gl::combiner7-nv)
  (define-constant gl::fog-distance-mode-nv 34138)
  (define gl::fog-distance-mode-nv gl::fog-distance-mode-nv)
  (define-constant gl::eye-radial-nv 34139)
  (define gl::eye-radial-nv gl::eye-radial-nv)
  (define-constant gl::eye-plane-absolute-nv 34140)
  (define gl::eye-plane-absolute-nv gl::eye-plane-absolute-nv)
  (define-constant gl::emboss-light-nv 34141)
  (define gl::emboss-light-nv gl::emboss-light-nv)
  (define-constant gl::emboss-constant-nv 34142)
  (define gl::emboss-constant-nv gl::emboss-constant-nv)
  (define-constant gl::emboss-map-nv 34143)
  (define gl::emboss-map-nv gl::emboss-map-nv)
  (define-constant gl::combine4-nv 34051)
  (define gl::combine4-nv gl::combine4-nv)
  (define-constant gl::source3-rgb-nv 34179)
  (define gl::source3-rgb-nv gl::source3-rgb-nv)
  (define-constant gl::source3-alpha-nv 34187)
  (define gl::source3-alpha-nv gl::source3-alpha-nv)
  (define-constant gl::operand3-rgb-nv 34195)
  (define gl::operand3-rgb-nv gl::operand3-rgb-nv)
  (define-constant gl::operand3-alpha-nv 34203)
  (define gl::operand3-alpha-nv gl::operand3-alpha-nv)
  (define-constant gl::compressed-rgb-s3tc-dxt1-ext 33776)
  (define gl::compressed-rgb-s3tc-dxt1-ext gl::compressed-rgb-s3tc-dxt1-ext)
  (define-constant gl::compressed-rgba-s3tc-dxt1-ext 33777)
  (define gl::compressed-rgba-s3tc-dxt1-ext gl::compressed-rgba-s3tc-dxt1-ext)
  (define-constant gl::compressed-rgba-s3tc-dxt3-ext 33778)
  (define gl::compressed-rgba-s3tc-dxt3-ext gl::compressed-rgba-s3tc-dxt3-ext)
  (define-constant gl::compressed-rgba-s3tc-dxt5-ext 33779)
  (define gl::compressed-rgba-s3tc-dxt5-ext gl::compressed-rgba-s3tc-dxt5-ext)
  (define-constant gl::cull-vertex-ibm 103050)
  (define gl::cull-vertex-ibm gl::cull-vertex-ibm)
  (define-constant gl::vertex-array-list-ibm 103070)
  (define gl::vertex-array-list-ibm gl::vertex-array-list-ibm)
  (define-constant gl::normal-array-list-ibm 103071)
  (define gl::normal-array-list-ibm gl::normal-array-list-ibm)
  (define-constant gl::color-array-list-ibm 103072)
  (define gl::color-array-list-ibm gl::color-array-list-ibm)
  (define-constant gl::index-array-list-ibm 103073)
  (define gl::index-array-list-ibm gl::index-array-list-ibm)
  (define-constant gl::texture-coord-array-list-ibm 103074)
  (define gl::texture-coord-array-list-ibm gl::texture-coord-array-list-ibm)
  (define-constant gl::edge-flag-array-list-ibm 103075)
  (define gl::edge-flag-array-list-ibm gl::edge-flag-array-list-ibm)
  (define-constant gl::fog-coordinate-array-list-ibm 103076)
  (define gl::fog-coordinate-array-list-ibm gl::fog-coordinate-array-list-ibm)
  (define-constant gl::secondary-color-array-list-ibm 103077)
  (define gl::secondary-color-array-list-ibm
    gl::secondary-color-array-list-ibm)
  (define-constant gl::vertex-array-list-stride-ibm 103080)
  (define gl::vertex-array-list-stride-ibm gl::vertex-array-list-stride-ibm)
  (define-constant gl::normal-array-list-stride-ibm 103081)
  (define gl::normal-array-list-stride-ibm gl::normal-array-list-stride-ibm)
  (define-constant gl::color-array-list-stride-ibm 103082)
  (define gl::color-array-list-stride-ibm gl::color-array-list-stride-ibm)
  (define-constant gl::index-array-list-stride-ibm 103083)
  (define gl::index-array-list-stride-ibm gl::index-array-list-stride-ibm)
  (define-constant gl::texture-coord-array-list-stride-ibm 103084)
  (define gl::texture-coord-array-list-stride-ibm
    gl::texture-coord-array-list-stride-ibm)
  (define-constant gl::edge-flag-array-list-stride-ibm 103085)
  (define gl::edge-flag-array-list-stride-ibm
    gl::edge-flag-array-list-stride-ibm)
  (define-constant gl::fog-coordinate-array-list-stride-ibm 103086)
  (define gl::fog-coordinate-array-list-stride-ibm
    gl::fog-coordinate-array-list-stride-ibm)
  (define-constant gl::secondary-color-array-list-stride-ibm 103087)
  (define gl::secondary-color-array-list-stride-ibm
    gl::secondary-color-array-list-stride-ibm)
  (define-constant gl::pack-subsample-rate-sgix 34208)
  (define gl::pack-subsample-rate-sgix gl::pack-subsample-rate-sgix)
  (define-constant gl::unpack-subsample-rate-sgix 34209)
  (define gl::unpack-subsample-rate-sgix gl::unpack-subsample-rate-sgix)
  (define-constant gl::pixel-subsample-4444-sgix 34210)
  (define gl::pixel-subsample-4444-sgix gl::pixel-subsample-4444-sgix)
  (define-constant gl::pixel-subsample-2424-sgix 34211)
  (define gl::pixel-subsample-2424-sgix gl::pixel-subsample-2424-sgix)
  (define-constant gl::pixel-subsample-4242-sgix 34212)
  (define gl::pixel-subsample-4242-sgix gl::pixel-subsample-4242-sgix)
  (define-constant gl::ycrcb-sgix 33560)
  (define gl::ycrcb-sgix gl::ycrcb-sgix)
  (define-constant gl::ycrcba-sgix 33561)
  (define gl::ycrcba-sgix gl::ycrcba-sgix)
  (define-constant gl::depth-pass-instrument-sgix 33552)
  (define gl::depth-pass-instrument-sgix gl::depth-pass-instrument-sgix)
  (define-constant gl::depth-pass-instrument-counters-sgix 33553)
  (define gl::depth-pass-instrument-counters-sgix
    gl::depth-pass-instrument-counters-sgix)
  (define-constant gl::depth-pass-instrument-max-sgix 33554)
  (define gl::depth-pass-instrument-max-sgix
    gl::depth-pass-instrument-max-sgix)
  (define-constant gl::compressed-rgb-fxt1-3dfx 34480)
  (define gl::compressed-rgb-fxt1-3dfx gl::compressed-rgb-fxt1-3dfx)
  (define-constant gl::compressed-rgba-fxt1-3dfx 34481)
  (define gl::compressed-rgba-fxt1-3dfx gl::compressed-rgba-fxt1-3dfx)
  (define-constant gl::multisample-3dfx 34482)
  (define gl::multisample-3dfx gl::multisample-3dfx)
  (define-constant gl::sample-buffers-3dfx 34483)
  (define gl::sample-buffers-3dfx gl::sample-buffers-3dfx)
  (define-constant gl::samples-3dfx 34484)
  (define gl::samples-3dfx gl::samples-3dfx)
  (define-constant gl::multisample-bit-3dfx 536870912)
  (define gl::multisample-bit-3dfx gl::multisample-bit-3dfx)
  (define-constant gl::multisample-ext 32925)
  (define gl::multisample-ext gl::multisample-ext)
  (define-constant gl::sample-alpha-to-mask-ext 32926)
  (define gl::sample-alpha-to-mask-ext gl::sample-alpha-to-mask-ext)
  (define-constant gl::sample-alpha-to-one-ext 32927)
  (define gl::sample-alpha-to-one-ext gl::sample-alpha-to-one-ext)
  (define-constant gl::sample-mask-ext 32928)
  (define gl::sample-mask-ext gl::sample-mask-ext)
  (define-constant gl::1pass-ext 32929)
  (define gl::1pass-ext gl::1pass-ext)
  (define-constant gl::2pass-0-ext 32930)
  (define gl::2pass-0-ext gl::2pass-0-ext)
  (define-constant gl::2pass-1-ext 32931)
  (define gl::2pass-1-ext gl::2pass-1-ext)
  (define-constant gl::4pass-0-ext 32932)
  (define gl::4pass-0-ext gl::4pass-0-ext)
  (define-constant gl::4pass-1-ext 32933)
  (define gl::4pass-1-ext gl::4pass-1-ext)
  (define-constant gl::4pass-2-ext 32934)
  (define gl::4pass-2-ext gl::4pass-2-ext)
  (define-constant gl::4pass-3-ext 32935)
  (define gl::4pass-3-ext gl::4pass-3-ext)
  (define-constant gl::sample-buffers-ext 32936)
  (define gl::sample-buffers-ext gl::sample-buffers-ext)
  (define-constant gl::samples-ext 32937)
  (define gl::samples-ext gl::samples-ext)
  (define-constant gl::sample-mask-value-ext 32938)
  (define gl::sample-mask-value-ext gl::sample-mask-value-ext)
  (define-constant gl::sample-mask-invert-ext 32939)
  (define gl::sample-mask-invert-ext gl::sample-mask-invert-ext)
  (define-constant gl::sample-pattern-ext 32940)
  (define gl::sample-pattern-ext gl::sample-pattern-ext)
  (define-constant gl::multisample-bit-ext 536870912)
  (define gl::multisample-bit-ext gl::multisample-bit-ext)
  (define-constant gl::vertex-preclip-sgix 33774)
  (define gl::vertex-preclip-sgix gl::vertex-preclip-sgix)
  (define-constant gl::vertex-preclip-hint-sgix 33775)
  (define gl::vertex-preclip-hint-sgix gl::vertex-preclip-hint-sgix)
  (define-constant gl::convolution-hint-sgix 33558)
  (define gl::convolution-hint-sgix gl::convolution-hint-sgix)
  (define-constant gl::pack-resample-sgix 33836)
  (define gl::pack-resample-sgix gl::pack-resample-sgix)
  (define-constant gl::unpack-resample-sgix 33837)
  (define gl::unpack-resample-sgix gl::unpack-resample-sgix)
  (define-constant gl::resample-replicate-sgix 33838)
  (define gl::resample-replicate-sgix gl::resample-replicate-sgix)
  (define-constant gl::resample-zero-fill-sgix 33839)
  (define gl::resample-zero-fill-sgix gl::resample-zero-fill-sgix)
  (define-constant gl::resample-decimate-sgix 33840)
  (define gl::resample-decimate-sgix gl::resample-decimate-sgix)
  (define-constant gl::eye-distance-to-point-sgis 33264)
  (define gl::eye-distance-to-point-sgis gl::eye-distance-to-point-sgis)
  (define-constant gl::object-distance-to-point-sgis 33265)
  (define gl::object-distance-to-point-sgis gl::object-distance-to-point-sgis)
  (define-constant gl::eye-distance-to-line-sgis 33266)
  (define gl::eye-distance-to-line-sgis gl::eye-distance-to-line-sgis)
  (define-constant gl::object-distance-to-line-sgis 33267)
  (define gl::object-distance-to-line-sgis gl::object-distance-to-line-sgis)
  (define-constant gl::eye-point-sgis 33268)
  (define gl::eye-point-sgis gl::eye-point-sgis)
  (define-constant gl::object-point-sgis 33269)
  (define gl::object-point-sgis gl::object-point-sgis)
  (define-constant gl::eye-line-sgis 33270)
  (define gl::eye-line-sgis gl::eye-line-sgis)
  (define-constant gl::object-line-sgis 33271)
  (define gl::object-line-sgis gl::object-line-sgis)
  (define-constant gl::texture-color-writemask-sgis 33263)
  (define gl::texture-color-writemask-sgis gl::texture-color-writemask-sgis)
  (define-constant gl::mirror-clamp-ati 34626)
  (define gl::mirror-clamp-ati gl::mirror-clamp-ati)
  (define-constant gl::mirror-clamp-to-edge-ati 34627)
  (define gl::mirror-clamp-to-edge-ati gl::mirror-clamp-to-edge-ati)
  (define-constant gl::all-completed-nv 34034)
  (define gl::all-completed-nv gl::all-completed-nv)
  (define-constant gl::fence-status-nv 34035)
  (define gl::fence-status-nv gl::fence-status-nv)
  (define-constant gl::fence-condition-nv 34036)
  (define gl::fence-condition-nv gl::fence-condition-nv)
  (define-constant gl::mirrored-repeat-ibm 33648)
  (define gl::mirrored-repeat-ibm gl::mirrored-repeat-ibm)
  (define-constant gl::eval-2d-nv 34496)
  (define gl::eval-2d-nv gl::eval-2d-nv)
  (define-constant gl::eval-triangular-2d-nv 34497)
  (define gl::eval-triangular-2d-nv gl::eval-triangular-2d-nv)
  (define-constant gl::map-tessellation-nv 34498)
  (define gl::map-tessellation-nv gl::map-tessellation-nv)
  (define-constant gl::map-attrib-u-order-nv 34499)
  (define gl::map-attrib-u-order-nv gl::map-attrib-u-order-nv)
  (define-constant gl::map-attrib-v-order-nv 34500)
  (define gl::map-attrib-v-order-nv gl::map-attrib-v-order-nv)
  (define-constant gl::eval-fractional-tessellation-nv 34501)
  (define gl::eval-fractional-tessellation-nv
    gl::eval-fractional-tessellation-nv)
  (define-constant gl::eval-vertex-attrib0-nv 34502)
  (define gl::eval-vertex-attrib0-nv gl::eval-vertex-attrib0-nv)
  (define-constant gl::eval-vertex-attrib1-nv 34503)
  (define gl::eval-vertex-attrib1-nv gl::eval-vertex-attrib1-nv)
  (define-constant gl::eval-vertex-attrib2-nv 34504)
  (define gl::eval-vertex-attrib2-nv gl::eval-vertex-attrib2-nv)
  (define-constant gl::eval-vertex-attrib3-nv 34505)
  (define gl::eval-vertex-attrib3-nv gl::eval-vertex-attrib3-nv)
  (define-constant gl::eval-vertex-attrib4-nv 34506)
  (define gl::eval-vertex-attrib4-nv gl::eval-vertex-attrib4-nv)
  (define-constant gl::eval-vertex-attrib5-nv 34507)
  (define gl::eval-vertex-attrib5-nv gl::eval-vertex-attrib5-nv)
  (define-constant gl::eval-vertex-attrib6-nv 34508)
  (define gl::eval-vertex-attrib6-nv gl::eval-vertex-attrib6-nv)
  (define-constant gl::eval-vertex-attrib7-nv 34509)
  (define gl::eval-vertex-attrib7-nv gl::eval-vertex-attrib7-nv)
  (define-constant gl::eval-vertex-attrib8-nv 34510)
  (define gl::eval-vertex-attrib8-nv gl::eval-vertex-attrib8-nv)
  (define-constant gl::eval-vertex-attrib9-nv 34511)
  (define gl::eval-vertex-attrib9-nv gl::eval-vertex-attrib9-nv)
  (define-constant gl::eval-vertex-attrib10-nv 34512)
  (define gl::eval-vertex-attrib10-nv gl::eval-vertex-attrib10-nv)
  (define-constant gl::eval-vertex-attrib11-nv 34513)
  (define gl::eval-vertex-attrib11-nv gl::eval-vertex-attrib11-nv)
  (define-constant gl::eval-vertex-attrib12-nv 34514)
  (define gl::eval-vertex-attrib12-nv gl::eval-vertex-attrib12-nv)
  (define-constant gl::eval-vertex-attrib13-nv 34515)
  (define gl::eval-vertex-attrib13-nv gl::eval-vertex-attrib13-nv)
  (define-constant gl::eval-vertex-attrib14-nv 34516)
  (define gl::eval-vertex-attrib14-nv gl::eval-vertex-attrib14-nv)
  (define-constant gl::eval-vertex-attrib15-nv 34517)
  (define gl::eval-vertex-attrib15-nv gl::eval-vertex-attrib15-nv)
  (define-constant gl::max-map-tessellation-nv 34518)
  (define gl::max-map-tessellation-nv gl::max-map-tessellation-nv)
  (define-constant gl::max-rational-eval-order-nv 34519)
  (define gl::max-rational-eval-order-nv gl::max-rational-eval-order-nv)
  (define-constant gl::depth-stencil-nv 34041)
  (define gl::depth-stencil-nv gl::depth-stencil-nv)
  (define-constant gl::unsigned-int-24-8-nv 34042)
  (define gl::unsigned-int-24-8-nv gl::unsigned-int-24-8-nv)
  (define-constant gl::per-stage-constants-nv 34101)
  (define gl::per-stage-constants-nv gl::per-stage-constants-nv)
  (define-constant gl::texture-rectangle-nv 34037)
  (define gl::texture-rectangle-nv gl::texture-rectangle-nv)
  (define-constant gl::texture-binding-rectangle-nv 34038)
  (define gl::texture-binding-rectangle-nv gl::texture-binding-rectangle-nv)
  (define-constant gl::proxy-texture-rectangle-nv 34039)
  (define gl::proxy-texture-rectangle-nv gl::proxy-texture-rectangle-nv)
  (define-constant gl::max-rectangle-texture-size-nv 34040)
  (define gl::max-rectangle-texture-size-nv gl::max-rectangle-texture-size-nv)
  (define-constant gl::offset-texture-rectangle-nv 34380)
  (define gl::offset-texture-rectangle-nv gl::offset-texture-rectangle-nv)
  (define-constant gl::offset-texture-rectangle-scale-nv 34381)
  (define gl::offset-texture-rectangle-scale-nv
    gl::offset-texture-rectangle-scale-nv)
  (define-constant gl::dot-product-texture-rectangle-nv 34382)
  (define gl::dot-product-texture-rectangle-nv
    gl::dot-product-texture-rectangle-nv)
  (define-constant gl::rgba-unsigned-dot-product-mapping-nv 34521)
  (define gl::rgba-unsigned-dot-product-mapping-nv
    gl::rgba-unsigned-dot-product-mapping-nv)
  (define-constant gl::unsigned-int-s8-s8-8-8-nv 34522)
  (define gl::unsigned-int-s8-s8-8-8-nv gl::unsigned-int-s8-s8-8-8-nv)
  (define-constant gl::unsigned-int-8-8-s8-s8-rev-nv 34523)
  (define gl::unsigned-int-8-8-s8-s8-rev-nv gl::unsigned-int-8-8-s8-s8-rev-nv)
  (define-constant gl::dsdt-mag-intensity-nv 34524)
  (define gl::dsdt-mag-intensity-nv gl::dsdt-mag-intensity-nv)
  (define-constant gl::shader-consistent-nv 34525)
  (define gl::shader-consistent-nv gl::shader-consistent-nv)
  (define-constant gl::texture-shader-nv 34526)
  (define gl::texture-shader-nv gl::texture-shader-nv)
  (define-constant gl::shader-operation-nv 34527)
  (define gl::shader-operation-nv gl::shader-operation-nv)
  (define-constant gl::cull-modes-nv 34528)
  (define gl::cull-modes-nv gl::cull-modes-nv)
  (define-constant gl::offset-texture-matrix-nv 34529)
  (define gl::offset-texture-matrix-nv gl::offset-texture-matrix-nv)
  (define-constant gl::offset-texture-scale-nv 34530)
  (define gl::offset-texture-scale-nv gl::offset-texture-scale-nv)
  (define-constant gl::offset-texture-bias-nv 34531)
  (define gl::offset-texture-bias-nv gl::offset-texture-bias-nv)
  (define-foreign-variable
    gl::offset-texture-2d-matrix-nv
    integer
    "GL_OFFSET_TEXTURE_2D_MATRIX_NV")
  (define gl::offset-texture-2d-matrix-nv gl::offset-texture-2d-matrix-nv)
  (define-foreign-variable
    gl::offset-texture-2d-scale-nv
    integer
    "GL_OFFSET_TEXTURE_2D_SCALE_NV")
  (define gl::offset-texture-2d-scale-nv gl::offset-texture-2d-scale-nv)
  (define-foreign-variable
    gl::offset-texture-2d-bias-nv
    integer
    "GL_OFFSET_TEXTURE_2D_BIAS_NV")
  (define gl::offset-texture-2d-bias-nv gl::offset-texture-2d-bias-nv)
  (define-constant gl::previous-texture-input-nv 34532)
  (define gl::previous-texture-input-nv gl::previous-texture-input-nv)
  (define-constant gl::const-eye-nv 34533)
  (define gl::const-eye-nv gl::const-eye-nv)
  (define-constant gl::pass-through-nv 34534)
  (define gl::pass-through-nv gl::pass-through-nv)
  (define-constant gl::cull-fragment-nv 34535)
  (define gl::cull-fragment-nv gl::cull-fragment-nv)
  (define-constant gl::offset-texture-2d-nv 34536)
  (define gl::offset-texture-2d-nv gl::offset-texture-2d-nv)
  (define-constant gl::dependent-ar-texture-2d-nv 34537)
  (define gl::dependent-ar-texture-2d-nv gl::dependent-ar-texture-2d-nv)
  (define-constant gl::dependent-gb-texture-2d-nv 34538)
  (define gl::dependent-gb-texture-2d-nv gl::dependent-gb-texture-2d-nv)
  (define-constant gl::dot-product-nv 34540)
  (define gl::dot-product-nv gl::dot-product-nv)
  (define-constant gl::dot-product-depth-replace-nv 34541)
  (define gl::dot-product-depth-replace-nv gl::dot-product-depth-replace-nv)
  (define-constant gl::dot-product-texture-2d-nv 34542)
  (define gl::dot-product-texture-2d-nv gl::dot-product-texture-2d-nv)
  (define-constant gl::dot-product-texture-cube-map-nv 34544)
  (define gl::dot-product-texture-cube-map-nv
    gl::dot-product-texture-cube-map-nv)
  (define-constant gl::dot-product-diffuse-cube-map-nv 34545)
  (define gl::dot-product-diffuse-cube-map-nv
    gl::dot-product-diffuse-cube-map-nv)
  (define-constant gl::dot-product-reflect-cube-map-nv 34546)
  (define gl::dot-product-reflect-cube-map-nv
    gl::dot-product-reflect-cube-map-nv)
  (define-constant gl::dot-product-const-eye-reflect-cube-map-nv 34547)
  (define gl::dot-product-const-eye-reflect-cube-map-nv
    gl::dot-product-const-eye-reflect-cube-map-nv)
  (define-constant gl::hilo-nv 34548)
  (define gl::hilo-nv gl::hilo-nv)
  (define-constant gl::dsdt-nv 34549)
  (define gl::dsdt-nv gl::dsdt-nv)
  (define-constant gl::dsdt-mag-nv 34550)
  (define gl::dsdt-mag-nv gl::dsdt-mag-nv)
  (define-constant gl::dsdt-mag-vib-nv 34551)
  (define gl::dsdt-mag-vib-nv gl::dsdt-mag-vib-nv)
  (define-constant gl::hilo16-nv 34552)
  (define gl::hilo16-nv gl::hilo16-nv)
  (define-constant gl::signed-hilo-nv 34553)
  (define gl::signed-hilo-nv gl::signed-hilo-nv)
  (define-constant gl::signed-hilo16-nv 34554)
  (define gl::signed-hilo16-nv gl::signed-hilo16-nv)
  (define-constant gl::signed-rgba-nv 34555)
  (define gl::signed-rgba-nv gl::signed-rgba-nv)
  (define-constant gl::signed-rgba8-nv 34556)
  (define gl::signed-rgba8-nv gl::signed-rgba8-nv)
  (define-constant gl::signed-rgb-nv 34558)
  (define gl::signed-rgb-nv gl::signed-rgb-nv)
  (define-constant gl::signed-rgb8-nv 34559)
  (define gl::signed-rgb8-nv gl::signed-rgb8-nv)
  (define-constant gl::signed-luminance-nv 34561)
  (define gl::signed-luminance-nv gl::signed-luminance-nv)
  (define-constant gl::signed-luminance8-nv 34562)
  (define gl::signed-luminance8-nv gl::signed-luminance8-nv)
  (define-constant gl::signed-luminance-alpha-nv 34563)
  (define gl::signed-luminance-alpha-nv gl::signed-luminance-alpha-nv)
  (define-constant gl::signed-luminance8-alpha8-nv 34564)
  (define gl::signed-luminance8-alpha8-nv gl::signed-luminance8-alpha8-nv)
  (define-constant gl::signed-alpha-nv 34565)
  (define gl::signed-alpha-nv gl::signed-alpha-nv)
  (define-constant gl::signed-alpha8-nv 34566)
  (define gl::signed-alpha8-nv gl::signed-alpha8-nv)
  (define-constant gl::signed-intensity-nv 34567)
  (define gl::signed-intensity-nv gl::signed-intensity-nv)
  (define-constant gl::signed-intensity8-nv 34568)
  (define gl::signed-intensity8-nv gl::signed-intensity8-nv)
  (define-constant gl::dsdt8-nv 34569)
  (define gl::dsdt8-nv gl::dsdt8-nv)
  (define-constant gl::dsdt8-mag8-nv 34570)
  (define gl::dsdt8-mag8-nv gl::dsdt8-mag8-nv)
  (define-constant gl::dsdt8-mag8-intensity8-nv 34571)
  (define gl::dsdt8-mag8-intensity8-nv gl::dsdt8-mag8-intensity8-nv)
  (define-constant gl::signed-rgb-unsigned-alpha-nv 34572)
  (define gl::signed-rgb-unsigned-alpha-nv gl::signed-rgb-unsigned-alpha-nv)
  (define-constant gl::signed-rgb8-unsigned-alpha8-nv 34573)
  (define gl::signed-rgb8-unsigned-alpha8-nv
    gl::signed-rgb8-unsigned-alpha8-nv)
  (define-constant gl::hi-scale-nv 34574)
  (define gl::hi-scale-nv gl::hi-scale-nv)
  (define-constant gl::lo-scale-nv 34575)
  (define gl::lo-scale-nv gl::lo-scale-nv)
  (define-constant gl::ds-scale-nv 34576)
  (define gl::ds-scale-nv gl::ds-scale-nv)
  (define-constant gl::dt-scale-nv 34577)
  (define gl::dt-scale-nv gl::dt-scale-nv)
  (define-constant gl::magnitude-scale-nv 34578)
  (define gl::magnitude-scale-nv gl::magnitude-scale-nv)
  (define-constant gl::vibrance-scale-nv 34579)
  (define gl::vibrance-scale-nv gl::vibrance-scale-nv)
  (define-constant gl::hi-bias-nv 34580)
  (define gl::hi-bias-nv gl::hi-bias-nv)
  (define-constant gl::lo-bias-nv 34581)
  (define gl::lo-bias-nv gl::lo-bias-nv)
  (define-constant gl::ds-bias-nv 34582)
  (define gl::ds-bias-nv gl::ds-bias-nv)
  (define-constant gl::dt-bias-nv 34583)
  (define gl::dt-bias-nv gl::dt-bias-nv)
  (define-constant gl::magnitude-bias-nv 34584)
  (define gl::magnitude-bias-nv gl::magnitude-bias-nv)
  (define-constant gl::vibrance-bias-nv 34585)
  (define gl::vibrance-bias-nv gl::vibrance-bias-nv)
  (define-constant gl::texture-border-values-nv 34586)
  (define gl::texture-border-values-nv gl::texture-border-values-nv)
  (define-constant gl::texture-hi-size-nv 34587)
  (define gl::texture-hi-size-nv gl::texture-hi-size-nv)
  (define-constant gl::texture-lo-size-nv 34588)
  (define gl::texture-lo-size-nv gl::texture-lo-size-nv)
  (define-constant gl::texture-ds-size-nv 34589)
  (define gl::texture-ds-size-nv gl::texture-ds-size-nv)
  (define-constant gl::texture-dt-size-nv 34590)
  (define gl::texture-dt-size-nv gl::texture-dt-size-nv)
  (define-constant gl::texture-mag-size-nv 34591)
  (define gl::texture-mag-size-nv gl::texture-mag-size-nv)
  (define-constant gl::dot-product-texture-3d-nv 34543)
  (define gl::dot-product-texture-3d-nv gl::dot-product-texture-3d-nv)
  (define-constant gl::vertex-array-range-without-flush-nv 34099)
  (define gl::vertex-array-range-without-flush-nv
    gl::vertex-array-range-without-flush-nv)
  (define-constant gl::vertex-program-nv 34336)
  (define gl::vertex-program-nv gl::vertex-program-nv)
  (define-constant gl::vertex-state-program-nv 34337)
  (define gl::vertex-state-program-nv gl::vertex-state-program-nv)
  (define-constant gl::attrib-array-size-nv 34339)
  (define gl::attrib-array-size-nv gl::attrib-array-size-nv)
  (define-constant gl::attrib-array-stride-nv 34340)
  (define gl::attrib-array-stride-nv gl::attrib-array-stride-nv)
  (define-constant gl::attrib-array-type-nv 34341)
  (define gl::attrib-array-type-nv gl::attrib-array-type-nv)
  (define-constant gl::current-attrib-nv 34342)
  (define gl::current-attrib-nv gl::current-attrib-nv)
  (define-constant gl::program-length-nv 34343)
  (define gl::program-length-nv gl::program-length-nv)
  (define-constant gl::program-string-nv 34344)
  (define gl::program-string-nv gl::program-string-nv)
  (define-constant gl::modelview-projection-nv 34345)
  (define gl::modelview-projection-nv gl::modelview-projection-nv)
  (define-constant gl::identity-nv 34346)
  (define gl::identity-nv gl::identity-nv)
  (define-constant gl::inverse-nv 34347)
  (define gl::inverse-nv gl::inverse-nv)
  (define-constant gl::transpose-nv 34348)
  (define gl::transpose-nv gl::transpose-nv)
  (define-constant gl::inverse-transpose-nv 34349)
  (define gl::inverse-transpose-nv gl::inverse-transpose-nv)
  (define-constant gl::max-track-matrix-stack-depth-nv 34350)
  (define gl::max-track-matrix-stack-depth-nv
    gl::max-track-matrix-stack-depth-nv)
  (define-constant gl::max-track-matrices-nv 34351)
  (define gl::max-track-matrices-nv gl::max-track-matrices-nv)
  (define-constant gl::matrix0-nv 34352)
  (define gl::matrix0-nv gl::matrix0-nv)
  (define-constant gl::matrix1-nv 34353)
  (define gl::matrix1-nv gl::matrix1-nv)
  (define-constant gl::matrix2-nv 34354)
  (define gl::matrix2-nv gl::matrix2-nv)
  (define-constant gl::matrix3-nv 34355)
  (define gl::matrix3-nv gl::matrix3-nv)
  (define-constant gl::matrix4-nv 34356)
  (define gl::matrix4-nv gl::matrix4-nv)
  (define-constant gl::matrix5-nv 34357)
  (define gl::matrix5-nv gl::matrix5-nv)
  (define-constant gl::matrix6-nv 34358)
  (define gl::matrix6-nv gl::matrix6-nv)
  (define-constant gl::matrix7-nv 34359)
  (define gl::matrix7-nv gl::matrix7-nv)
  (define-constant gl::current-matrix-stack-depth-nv 34368)
  (define gl::current-matrix-stack-depth-nv gl::current-matrix-stack-depth-nv)
  (define-constant gl::current-matrix-nv 34369)
  (define gl::current-matrix-nv gl::current-matrix-nv)
  (define-constant gl::vertex-program-point-size-nv 34370)
  (define gl::vertex-program-point-size-nv gl::vertex-program-point-size-nv)
  (define-constant gl::vertex-program-two-side-nv 34371)
  (define gl::vertex-program-two-side-nv gl::vertex-program-two-side-nv)
  (define-constant gl::program-parameter-nv 34372)
  (define gl::program-parameter-nv gl::program-parameter-nv)
  (define-constant gl::attrib-array-pointer-nv 34373)
  (define gl::attrib-array-pointer-nv gl::attrib-array-pointer-nv)
  (define-constant gl::program-target-nv 34374)
  (define gl::program-target-nv gl::program-target-nv)
  (define-constant gl::program-resident-nv 34375)
  (define gl::program-resident-nv gl::program-resident-nv)
  (define-constant gl::track-matrix-nv 34376)
  (define gl::track-matrix-nv gl::track-matrix-nv)
  (define-constant gl::track-matrix-transform-nv 34377)
  (define gl::track-matrix-transform-nv gl::track-matrix-transform-nv)
  (define-constant gl::vertex-program-binding-nv 34378)
  (define gl::vertex-program-binding-nv gl::vertex-program-binding-nv)
  (define-constant gl::program-error-position-nv 34379)
  (define gl::program-error-position-nv gl::program-error-position-nv)
  (define-constant gl::vertex-attrib-array0-nv 34384)
  (define gl::vertex-attrib-array0-nv gl::vertex-attrib-array0-nv)
  (define-constant gl::vertex-attrib-array1-nv 34385)
  (define gl::vertex-attrib-array1-nv gl::vertex-attrib-array1-nv)
  (define-constant gl::vertex-attrib-array2-nv 34386)
  (define gl::vertex-attrib-array2-nv gl::vertex-attrib-array2-nv)
  (define-constant gl::vertex-attrib-array3-nv 34387)
  (define gl::vertex-attrib-array3-nv gl::vertex-attrib-array3-nv)
  (define-constant gl::vertex-attrib-array4-nv 34388)
  (define gl::vertex-attrib-array4-nv gl::vertex-attrib-array4-nv)
  (define-constant gl::vertex-attrib-array5-nv 34389)
  (define gl::vertex-attrib-array5-nv gl::vertex-attrib-array5-nv)
  (define-constant gl::vertex-attrib-array6-nv 34390)
  (define gl::vertex-attrib-array6-nv gl::vertex-attrib-array6-nv)
  (define-constant gl::vertex-attrib-array7-nv 34391)
  (define gl::vertex-attrib-array7-nv gl::vertex-attrib-array7-nv)
  (define-constant gl::vertex-attrib-array8-nv 34392)
  (define gl::vertex-attrib-array8-nv gl::vertex-attrib-array8-nv)
  (define-constant gl::vertex-attrib-array9-nv 34393)
  (define gl::vertex-attrib-array9-nv gl::vertex-attrib-array9-nv)
  (define-constant gl::vertex-attrib-array10-nv 34394)
  (define gl::vertex-attrib-array10-nv gl::vertex-attrib-array10-nv)
  (define-constant gl::vertex-attrib-array11-nv 34395)
  (define gl::vertex-attrib-array11-nv gl::vertex-attrib-array11-nv)
  (define-constant gl::vertex-attrib-array12-nv 34396)
  (define gl::vertex-attrib-array12-nv gl::vertex-attrib-array12-nv)
  (define-constant gl::vertex-attrib-array13-nv 34397)
  (define gl::vertex-attrib-array13-nv gl::vertex-attrib-array13-nv)
  (define-constant gl::vertex-attrib-array14-nv 34398)
  (define gl::vertex-attrib-array14-nv gl::vertex-attrib-array14-nv)
  (define-constant gl::vertex-attrib-array15-nv 34399)
  (define gl::vertex-attrib-array15-nv gl::vertex-attrib-array15-nv)
  (define-constant gl::map1-vertex-attrib0-4-nv 34400)
  (define gl::map1-vertex-attrib0-4-nv gl::map1-vertex-attrib0-4-nv)
  (define-constant gl::map1-vertex-attrib1-4-nv 34401)
  (define gl::map1-vertex-attrib1-4-nv gl::map1-vertex-attrib1-4-nv)
  (define-constant gl::map1-vertex-attrib2-4-nv 34402)
  (define gl::map1-vertex-attrib2-4-nv gl::map1-vertex-attrib2-4-nv)
  (define-constant gl::map1-vertex-attrib3-4-nv 34403)
  (define gl::map1-vertex-attrib3-4-nv gl::map1-vertex-attrib3-4-nv)
  (define-constant gl::map1-vertex-attrib4-4-nv 34404)
  (define gl::map1-vertex-attrib4-4-nv gl::map1-vertex-attrib4-4-nv)
  (define-constant gl::map1-vertex-attrib5-4-nv 34405)
  (define gl::map1-vertex-attrib5-4-nv gl::map1-vertex-attrib5-4-nv)
  (define-constant gl::map1-vertex-attrib6-4-nv 34406)
  (define gl::map1-vertex-attrib6-4-nv gl::map1-vertex-attrib6-4-nv)
  (define-constant gl::map1-vertex-attrib7-4-nv 34407)
  (define gl::map1-vertex-attrib7-4-nv gl::map1-vertex-attrib7-4-nv)
  (define-constant gl::map1-vertex-attrib8-4-nv 34408)
  (define gl::map1-vertex-attrib8-4-nv gl::map1-vertex-attrib8-4-nv)
  (define-constant gl::map1-vertex-attrib9-4-nv 34409)
  (define gl::map1-vertex-attrib9-4-nv gl::map1-vertex-attrib9-4-nv)
  (define-constant gl::map1-vertex-attrib10-4-nv 34410)
  (define gl::map1-vertex-attrib10-4-nv gl::map1-vertex-attrib10-4-nv)
  (define-constant gl::map1-vertex-attrib11-4-nv 34411)
  (define gl::map1-vertex-attrib11-4-nv gl::map1-vertex-attrib11-4-nv)
  (define-constant gl::map1-vertex-attrib12-4-nv 34412)
  (define gl::map1-vertex-attrib12-4-nv gl::map1-vertex-attrib12-4-nv)
  (define-constant gl::map1-vertex-attrib13-4-nv 34413)
  (define gl::map1-vertex-attrib13-4-nv gl::map1-vertex-attrib13-4-nv)
  (define-constant gl::map1-vertex-attrib14-4-nv 34414)
  (define gl::map1-vertex-attrib14-4-nv gl::map1-vertex-attrib14-4-nv)
  (define-constant gl::map1-vertex-attrib15-4-nv 34415)
  (define gl::map1-vertex-attrib15-4-nv gl::map1-vertex-attrib15-4-nv)
  (define-constant gl::map2-vertex-attrib0-4-nv 34416)
  (define gl::map2-vertex-attrib0-4-nv gl::map2-vertex-attrib0-4-nv)
  (define-constant gl::map2-vertex-attrib1-4-nv 34417)
  (define gl::map2-vertex-attrib1-4-nv gl::map2-vertex-attrib1-4-nv)
  (define-constant gl::map2-vertex-attrib2-4-nv 34418)
  (define gl::map2-vertex-attrib2-4-nv gl::map2-vertex-attrib2-4-nv)
  (define-constant gl::map2-vertex-attrib3-4-nv 34419)
  (define gl::map2-vertex-attrib3-4-nv gl::map2-vertex-attrib3-4-nv)
  (define-constant gl::map2-vertex-attrib4-4-nv 34420)
  (define gl::map2-vertex-attrib4-4-nv gl::map2-vertex-attrib4-4-nv)
  (define-constant gl::map2-vertex-attrib5-4-nv 34421)
  (define gl::map2-vertex-attrib5-4-nv gl::map2-vertex-attrib5-4-nv)
  (define-constant gl::map2-vertex-attrib6-4-nv 34422)
  (define gl::map2-vertex-attrib6-4-nv gl::map2-vertex-attrib6-4-nv)
  (define-constant gl::map2-vertex-attrib7-4-nv 34423)
  (define gl::map2-vertex-attrib7-4-nv gl::map2-vertex-attrib7-4-nv)
  (define-constant gl::map2-vertex-attrib8-4-nv 34424)
  (define gl::map2-vertex-attrib8-4-nv gl::map2-vertex-attrib8-4-nv)
  (define-constant gl::map2-vertex-attrib9-4-nv 34425)
  (define gl::map2-vertex-attrib9-4-nv gl::map2-vertex-attrib9-4-nv)
  (define-constant gl::map2-vertex-attrib10-4-nv 34426)
  (define gl::map2-vertex-attrib10-4-nv gl::map2-vertex-attrib10-4-nv)
  (define-constant gl::map2-vertex-attrib11-4-nv 34427)
  (define gl::map2-vertex-attrib11-4-nv gl::map2-vertex-attrib11-4-nv)
  (define-constant gl::map2-vertex-attrib12-4-nv 34428)
  (define gl::map2-vertex-attrib12-4-nv gl::map2-vertex-attrib12-4-nv)
  (define-constant gl::map2-vertex-attrib13-4-nv 34429)
  (define gl::map2-vertex-attrib13-4-nv gl::map2-vertex-attrib13-4-nv)
  (define-constant gl::map2-vertex-attrib14-4-nv 34430)
  (define gl::map2-vertex-attrib14-4-nv gl::map2-vertex-attrib14-4-nv)
  (define-constant gl::map2-vertex-attrib15-4-nv 34431)
  (define gl::map2-vertex-attrib15-4-nv gl::map2-vertex-attrib15-4-nv)
  (define-constant gl::texture-max-clamp-s-sgix 33641)
  (define gl::texture-max-clamp-s-sgix gl::texture-max-clamp-s-sgix)
  (define-constant gl::texture-max-clamp-t-sgix 33642)
  (define gl::texture-max-clamp-t-sgix gl::texture-max-clamp-t-sgix)
  (define-constant gl::texture-max-clamp-r-sgix 33643)
  (define gl::texture-max-clamp-r-sgix gl::texture-max-clamp-r-sgix)
  (define-constant gl::scalebias-hint-sgix 33570)
  (define gl::scalebias-hint-sgix gl::scalebias-hint-sgix)
  (define-constant gl::interlace-oml 35200)
  (define gl::interlace-oml gl::interlace-oml)
  (define-constant gl::interlace-read-oml 35201)
  (define gl::interlace-read-oml gl::interlace-read-oml)
  (define-constant gl::format-subsample-24-24-oml 35202)
  (define gl::format-subsample-24-24-oml gl::format-subsample-24-24-oml)
  (define-constant gl::format-subsample-244-244-oml 35203)
  (define gl::format-subsample-244-244-oml gl::format-subsample-244-244-oml)
  (define-constant gl::pack-resample-oml 35204)
  (define gl::pack-resample-oml gl::pack-resample-oml)
  (define-constant gl::unpack-resample-oml 35205)
  (define gl::unpack-resample-oml gl::unpack-resample-oml)
  (define-constant gl::resample-replicate-oml 35206)
  (define gl::resample-replicate-oml gl::resample-replicate-oml)
  (define-constant gl::resample-zero-fill-oml 35207)
  (define gl::resample-zero-fill-oml gl::resample-zero-fill-oml)
  (define-constant gl::resample-average-oml 35208)
  (define gl::resample-average-oml gl::resample-average-oml)
  (define-constant gl::resample-decimate-oml 35209)
  (define gl::resample-decimate-oml gl::resample-decimate-oml)
  (define-constant gl::depth-stencil-to-rgba-nv 34926)
  (define gl::depth-stencil-to-rgba-nv gl::depth-stencil-to-rgba-nv)
  (define-constant gl::depth-stencil-to-bgra-nv 34927)
  (define gl::depth-stencil-to-bgra-nv gl::depth-stencil-to-bgra-nv)
  (define-constant gl::bump-rot-matrix-ati 34677)
  (define gl::bump-rot-matrix-ati gl::bump-rot-matrix-ati)
  (define-constant gl::bump-rot-matrix-size-ati 34678)
  (define gl::bump-rot-matrix-size-ati gl::bump-rot-matrix-size-ati)
  (define-constant gl::bump-num-tex-units-ati 34679)
  (define gl::bump-num-tex-units-ati gl::bump-num-tex-units-ati)
  (define-constant gl::bump-tex-units-ati 34680)
  (define gl::bump-tex-units-ati gl::bump-tex-units-ati)
  (define-constant gl::dudv-ati 34681)
  (define gl::dudv-ati gl::dudv-ati)
  (define-constant gl::du8dv8-ati 34682)
  (define gl::du8dv8-ati gl::du8dv8-ati)
  (define-constant gl::bump-envmap-ati 34683)
  (define gl::bump-envmap-ati gl::bump-envmap-ati)
  (define-constant gl::bump-target-ati 34684)
  (define gl::bump-target-ati gl::bump-target-ati)
  (define-constant gl::fragment-shader-ati 35104)
  (define gl::fragment-shader-ati gl::fragment-shader-ati)
  (define-constant gl::reg-0-ati 35105)
  (define gl::reg-0-ati gl::reg-0-ati)
  (define-constant gl::reg-1-ati 35106)
  (define gl::reg-1-ati gl::reg-1-ati)
  (define-constant gl::reg-2-ati 35107)
  (define gl::reg-2-ati gl::reg-2-ati)
  (define-constant gl::reg-3-ati 35108)
  (define gl::reg-3-ati gl::reg-3-ati)
  (define-constant gl::reg-4-ati 35109)
  (define gl::reg-4-ati gl::reg-4-ati)
  (define-constant gl::reg-5-ati 35110)
  (define gl::reg-5-ati gl::reg-5-ati)
  (define-constant gl::reg-6-ati 35111)
  (define gl::reg-6-ati gl::reg-6-ati)
  (define-constant gl::reg-7-ati 35112)
  (define gl::reg-7-ati gl::reg-7-ati)
  (define-constant gl::reg-8-ati 35113)
  (define gl::reg-8-ati gl::reg-8-ati)
  (define-constant gl::reg-9-ati 35114)
  (define gl::reg-9-ati gl::reg-9-ati)
  (define-constant gl::reg-10-ati 35115)
  (define gl::reg-10-ati gl::reg-10-ati)
  (define-constant gl::reg-11-ati 35116)
  (define gl::reg-11-ati gl::reg-11-ati)
  (define-constant gl::reg-12-ati 35117)
  (define gl::reg-12-ati gl::reg-12-ati)
  (define-constant gl::reg-13-ati 35118)
  (define gl::reg-13-ati gl::reg-13-ati)
  (define-constant gl::reg-14-ati 35119)
  (define gl::reg-14-ati gl::reg-14-ati)
  (define-constant gl::reg-15-ati 35120)
  (define gl::reg-15-ati gl::reg-15-ati)
  (define-constant gl::reg-16-ati 35121)
  (define gl::reg-16-ati gl::reg-16-ati)
  (define-constant gl::reg-17-ati 35122)
  (define gl::reg-17-ati gl::reg-17-ati)
  (define-constant gl::reg-18-ati 35123)
  (define gl::reg-18-ati gl::reg-18-ati)
  (define-constant gl::reg-19-ati 35124)
  (define gl::reg-19-ati gl::reg-19-ati)
  (define-constant gl::reg-20-ati 35125)
  (define gl::reg-20-ati gl::reg-20-ati)
  (define-constant gl::reg-21-ati 35126)
  (define gl::reg-21-ati gl::reg-21-ati)
  (define-constant gl::reg-22-ati 35127)
  (define gl::reg-22-ati gl::reg-22-ati)
  (define-constant gl::reg-23-ati 35128)
  (define gl::reg-23-ati gl::reg-23-ati)
  (define-constant gl::reg-24-ati 35129)
  (define gl::reg-24-ati gl::reg-24-ati)
  (define-constant gl::reg-25-ati 35130)
  (define gl::reg-25-ati gl::reg-25-ati)
  (define-constant gl::reg-26-ati 35131)
  (define gl::reg-26-ati gl::reg-26-ati)
  (define-constant gl::reg-27-ati 35132)
  (define gl::reg-27-ati gl::reg-27-ati)
  (define-constant gl::reg-28-ati 35133)
  (define gl::reg-28-ati gl::reg-28-ati)
  (define-constant gl::reg-29-ati 35134)
  (define gl::reg-29-ati gl::reg-29-ati)
  (define-constant gl::reg-30-ati 35135)
  (define gl::reg-30-ati gl::reg-30-ati)
  (define-constant gl::reg-31-ati 35136)
  (define gl::reg-31-ati gl::reg-31-ati)
  (define-constant gl::con-0-ati 35137)
  (define gl::con-0-ati gl::con-0-ati)
  (define-constant gl::con-1-ati 35138)
  (define gl::con-1-ati gl::con-1-ati)
  (define-constant gl::con-2-ati 35139)
  (define gl::con-2-ati gl::con-2-ati)
  (define-constant gl::con-3-ati 35140)
  (define gl::con-3-ati gl::con-3-ati)
  (define-constant gl::con-4-ati 35141)
  (define gl::con-4-ati gl::con-4-ati)
  (define-constant gl::con-5-ati 35142)
  (define gl::con-5-ati gl::con-5-ati)
  (define-constant gl::con-6-ati 35143)
  (define gl::con-6-ati gl::con-6-ati)
  (define-constant gl::con-7-ati 35144)
  (define gl::con-7-ati gl::con-7-ati)
  (define-constant gl::con-8-ati 35145)
  (define gl::con-8-ati gl::con-8-ati)
  (define-constant gl::con-9-ati 35146)
  (define gl::con-9-ati gl::con-9-ati)
  (define-constant gl::con-10-ati 35147)
  (define gl::con-10-ati gl::con-10-ati)
  (define-constant gl::con-11-ati 35148)
  (define gl::con-11-ati gl::con-11-ati)
  (define-constant gl::con-12-ati 35149)
  (define gl::con-12-ati gl::con-12-ati)
  (define-constant gl::con-13-ati 35150)
  (define gl::con-13-ati gl::con-13-ati)
  (define-constant gl::con-14-ati 35151)
  (define gl::con-14-ati gl::con-14-ati)
  (define-constant gl::con-15-ati 35152)
  (define gl::con-15-ati gl::con-15-ati)
  (define-constant gl::con-16-ati 35153)
  (define gl::con-16-ati gl::con-16-ati)
  (define-constant gl::con-17-ati 35154)
  (define gl::con-17-ati gl::con-17-ati)
  (define-constant gl::con-18-ati 35155)
  (define gl::con-18-ati gl::con-18-ati)
  (define-constant gl::con-19-ati 35156)
  (define gl::con-19-ati gl::con-19-ati)
  (define-constant gl::con-20-ati 35157)
  (define gl::con-20-ati gl::con-20-ati)
  (define-constant gl::con-21-ati 35158)
  (define gl::con-21-ati gl::con-21-ati)
  (define-constant gl::con-22-ati 35159)
  (define gl::con-22-ati gl::con-22-ati)
  (define-constant gl::con-23-ati 35160)
  (define gl::con-23-ati gl::con-23-ati)
  (define-constant gl::con-24-ati 35161)
  (define gl::con-24-ati gl::con-24-ati)
  (define-constant gl::con-25-ati 35162)
  (define gl::con-25-ati gl::con-25-ati)
  (define-constant gl::con-26-ati 35163)
  (define gl::con-26-ati gl::con-26-ati)
  (define-constant gl::con-27-ati 35164)
  (define gl::con-27-ati gl::con-27-ati)
  (define-constant gl::con-28-ati 35165)
  (define gl::con-28-ati gl::con-28-ati)
  (define-constant gl::con-29-ati 35166)
  (define gl::con-29-ati gl::con-29-ati)
  (define-constant gl::con-30-ati 35167)
  (define gl::con-30-ati gl::con-30-ati)
  (define-constant gl::con-31-ati 35168)
  (define gl::con-31-ati gl::con-31-ati)
  (define-constant gl::mov-ati 35169)
  (define gl::mov-ati gl::mov-ati)
  (define-constant gl::add-ati 35171)
  (define gl::add-ati gl::add-ati)
  (define-constant gl::mul-ati 35172)
  (define gl::mul-ati gl::mul-ati)
  (define-constant gl::sub-ati 35173)
  (define gl::sub-ati gl::sub-ati)
  (define-constant gl::dot3-ati 35174)
  (define gl::dot3-ati gl::dot3-ati)
  (define-constant gl::dot4-ati 35175)
  (define gl::dot4-ati gl::dot4-ati)
  (define-constant gl::mad-ati 35176)
  (define gl::mad-ati gl::mad-ati)
  (define-constant gl::lerp-ati 35177)
  (define gl::lerp-ati gl::lerp-ati)
  (define-constant gl::cnd-ati 35178)
  (define gl::cnd-ati gl::cnd-ati)
  (define-constant gl::cnd0-ati 35179)
  (define gl::cnd0-ati gl::cnd0-ati)
  (define-constant gl::dot2-add-ati 35180)
  (define gl::dot2-add-ati gl::dot2-add-ati)
  (define-constant gl::secondary-interpolator-ati 35181)
  (define gl::secondary-interpolator-ati gl::secondary-interpolator-ati)
  (define-constant gl::num-fragment-registers-ati 35182)
  (define gl::num-fragment-registers-ati gl::num-fragment-registers-ati)
  (define-constant gl::num-fragment-constants-ati 35183)
  (define gl::num-fragment-constants-ati gl::num-fragment-constants-ati)
  (define-constant gl::num-passes-ati 35184)
  (define gl::num-passes-ati gl::num-passes-ati)
  (define-constant gl::num-instructions-per-pass-ati 35185)
  (define gl::num-instructions-per-pass-ati gl::num-instructions-per-pass-ati)
  (define-constant gl::num-instructions-total-ati 35186)
  (define gl::num-instructions-total-ati gl::num-instructions-total-ati)
  (define-constant gl::num-input-interpolator-components-ati 35187)
  (define gl::num-input-interpolator-components-ati
    gl::num-input-interpolator-components-ati)
  (define-constant gl::num-loopback-components-ati 35188)
  (define gl::num-loopback-components-ati gl::num-loopback-components-ati)
  (define-constant gl::color-alpha-pairing-ati 35189)
  (define gl::color-alpha-pairing-ati gl::color-alpha-pairing-ati)
  (define-constant gl::swizzle-str-ati 35190)
  (define gl::swizzle-str-ati gl::swizzle-str-ati)
  (define-constant gl::swizzle-stq-ati 35191)
  (define gl::swizzle-stq-ati gl::swizzle-stq-ati)
  (define-constant gl::swizzle-str-dr-ati 35192)
  (define gl::swizzle-str-dr-ati gl::swizzle-str-dr-ati)
  (define-constant gl::swizzle-stq-dq-ati 35193)
  (define gl::swizzle-stq-dq-ati gl::swizzle-stq-dq-ati)
  (define-constant gl::swizzle-strq-ati 35194)
  (define gl::swizzle-strq-ati gl::swizzle-strq-ati)
  (define-constant gl::swizzle-strq-dq-ati 35195)
  (define gl::swizzle-strq-dq-ati gl::swizzle-strq-dq-ati)
  (define-constant gl::red-bit-ati 1)
  (define gl::red-bit-ati gl::red-bit-ati)
  (define-constant gl::green-bit-ati 2)
  (define gl::green-bit-ati gl::green-bit-ati)
  (define-constant gl::blue-bit-ati 4)
  (define gl::blue-bit-ati gl::blue-bit-ati)
  (define-constant gl::2x-bit-ati 1)
  (define gl::2x-bit-ati gl::2x-bit-ati)
  (define-constant gl::4x-bit-ati 2)
  (define gl::4x-bit-ati gl::4x-bit-ati)
  (define-constant gl::8x-bit-ati 4)
  (define gl::8x-bit-ati gl::8x-bit-ati)
  (define-constant gl::half-bit-ati 8)
  (define gl::half-bit-ati gl::half-bit-ati)
  (define-constant gl::quarter-bit-ati 16)
  (define gl::quarter-bit-ati gl::quarter-bit-ati)
  (define-constant gl::eighth-bit-ati 32)
  (define gl::eighth-bit-ati gl::eighth-bit-ati)
  (define-constant gl::saturate-bit-ati 64)
  (define gl::saturate-bit-ati gl::saturate-bit-ati)
  (define-constant gl::comp-bit-ati 2)
  (define gl::comp-bit-ati gl::comp-bit-ati)
  (define-constant gl::negate-bit-ati 4)
  (define gl::negate-bit-ati gl::negate-bit-ati)
  (define-constant gl::bias-bit-ati 8)
  (define gl::bias-bit-ati gl::bias-bit-ati)
  (define-constant gl::pn-triangles-ati 34800)
  (define gl::pn-triangles-ati gl::pn-triangles-ati)
  (define-constant gl::max-pn-triangles-tesselation-level-ati 34801)
  (define gl::max-pn-triangles-tesselation-level-ati
    gl::max-pn-triangles-tesselation-level-ati)
  (define-constant gl::pn-triangles-point-mode-ati 34802)
  (define gl::pn-triangles-point-mode-ati gl::pn-triangles-point-mode-ati)
  (define-constant gl::pn-triangles-normal-mode-ati 34803)
  (define gl::pn-triangles-normal-mode-ati gl::pn-triangles-normal-mode-ati)
  (define-constant gl::pn-triangles-tesselation-level-ati 34804)
  (define gl::pn-triangles-tesselation-level-ati
    gl::pn-triangles-tesselation-level-ati)
  (define-constant gl::pn-triangles-point-mode-linear-ati 34805)
  (define gl::pn-triangles-point-mode-linear-ati
    gl::pn-triangles-point-mode-linear-ati)
  (define-constant gl::pn-triangles-point-mode-cubic-ati 34806)
  (define gl::pn-triangles-point-mode-cubic-ati
    gl::pn-triangles-point-mode-cubic-ati)
  (define-constant gl::pn-triangles-normal-mode-linear-ati 34807)
  (define gl::pn-triangles-normal-mode-linear-ati
    gl::pn-triangles-normal-mode-linear-ati)
  (define-constant gl::pn-triangles-normal-mode-quadratic-ati 34808)
  (define gl::pn-triangles-normal-mode-quadratic-ati
    gl::pn-triangles-normal-mode-quadratic-ati)
  (define-constant gl::static-ati 34656)
  (define gl::static-ati gl::static-ati)
  (define-constant gl::dynamic-ati 34657)
  (define gl::dynamic-ati gl::dynamic-ati)
  (define-constant gl::preserve-ati 34658)
  (define gl::preserve-ati gl::preserve-ati)
  (define-constant gl::discard-ati 34659)
  (define gl::discard-ati gl::discard-ati)
  (define-constant gl::object-buffer-size-ati 34660)
  (define gl::object-buffer-size-ati gl::object-buffer-size-ati)
  (define-constant gl::object-buffer-usage-ati 34661)
  (define gl::object-buffer-usage-ati gl::object-buffer-usage-ati)
  (define-constant gl::array-object-buffer-ati 34662)
  (define gl::array-object-buffer-ati gl::array-object-buffer-ati)
  (define-constant gl::array-object-offset-ati 34663)
  (define gl::array-object-offset-ati gl::array-object-offset-ati)
  (define-constant gl::vertex-shader-ext 34688)
  (define gl::vertex-shader-ext gl::vertex-shader-ext)
  (define-constant gl::vertex-shader-binding-ext 34689)
  (define gl::vertex-shader-binding-ext gl::vertex-shader-binding-ext)
  (define-constant gl::op-index-ext 34690)
  (define gl::op-index-ext gl::op-index-ext)
  (define-constant gl::op-negate-ext 34691)
  (define gl::op-negate-ext gl::op-negate-ext)
  (define-constant gl::op-dot3-ext 34692)
  (define gl::op-dot3-ext gl::op-dot3-ext)
  (define-constant gl::op-dot4-ext 34693)
  (define gl::op-dot4-ext gl::op-dot4-ext)
  (define-constant gl::op-mul-ext 34694)
  (define gl::op-mul-ext gl::op-mul-ext)
  (define-constant gl::op-add-ext 34695)
  (define gl::op-add-ext gl::op-add-ext)
  (define-constant gl::op-madd-ext 34696)
  (define gl::op-madd-ext gl::op-madd-ext)
  (define-constant gl::op-frac-ext 34697)
  (define gl::op-frac-ext gl::op-frac-ext)
  (define-constant gl::op-max-ext 34698)
  (define gl::op-max-ext gl::op-max-ext)
  (define-constant gl::op-min-ext 34699)
  (define gl::op-min-ext gl::op-min-ext)
  (define-constant gl::op-set-ge-ext 34700)
  (define gl::op-set-ge-ext gl::op-set-ge-ext)
  (define-constant gl::op-set-lt-ext 34701)
  (define gl::op-set-lt-ext gl::op-set-lt-ext)
  (define-constant gl::op-clamp-ext 34702)
  (define gl::op-clamp-ext gl::op-clamp-ext)
  (define-constant gl::op-floor-ext 34703)
  (define gl::op-floor-ext gl::op-floor-ext)
  (define-constant gl::op-round-ext 34704)
  (define gl::op-round-ext gl::op-round-ext)
  (define-constant gl::op-exp-base-2-ext 34705)
  (define gl::op-exp-base-2-ext gl::op-exp-base-2-ext)
  (define-constant gl::op-log-base-2-ext 34706)
  (define gl::op-log-base-2-ext gl::op-log-base-2-ext)
  (define-constant gl::op-power-ext 34707)
  (define gl::op-power-ext gl::op-power-ext)
  (define-constant gl::op-recip-ext 34708)
  (define gl::op-recip-ext gl::op-recip-ext)
  (define-constant gl::op-recip-sqrt-ext 34709)
  (define gl::op-recip-sqrt-ext gl::op-recip-sqrt-ext)
  (define-constant gl::op-sub-ext 34710)
  (define gl::op-sub-ext gl::op-sub-ext)
  (define-constant gl::op-cross-product-ext 34711)
  (define gl::op-cross-product-ext gl::op-cross-product-ext)
  (define-constant gl::op-multiply-matrix-ext 34712)
  (define gl::op-multiply-matrix-ext gl::op-multiply-matrix-ext)
  (define-constant gl::op-mov-ext 34713)
  (define gl::op-mov-ext gl::op-mov-ext)
  (define-constant gl::output-vertex-ext 34714)
  (define gl::output-vertex-ext gl::output-vertex-ext)
  (define-constant gl::output-color0-ext 34715)
  (define gl::output-color0-ext gl::output-color0-ext)
  (define-constant gl::output-color1-ext 34716)
  (define gl::output-color1-ext gl::output-color1-ext)
  (define-constant gl::output-texture-coord0-ext 34717)
  (define gl::output-texture-coord0-ext gl::output-texture-coord0-ext)
  (define-constant gl::output-texture-coord1-ext 34718)
  (define gl::output-texture-coord1-ext gl::output-texture-coord1-ext)
  (define-constant gl::output-texture-coord2-ext 34719)
  (define gl::output-texture-coord2-ext gl::output-texture-coord2-ext)
  (define-constant gl::output-texture-coord3-ext 34720)
  (define gl::output-texture-coord3-ext gl::output-texture-coord3-ext)
  (define-constant gl::output-texture-coord4-ext 34721)
  (define gl::output-texture-coord4-ext gl::output-texture-coord4-ext)
  (define-constant gl::output-texture-coord5-ext 34722)
  (define gl::output-texture-coord5-ext gl::output-texture-coord5-ext)
  (define-constant gl::output-texture-coord6-ext 34723)
  (define gl::output-texture-coord6-ext gl::output-texture-coord6-ext)
  (define-constant gl::output-texture-coord7-ext 34724)
  (define gl::output-texture-coord7-ext gl::output-texture-coord7-ext)
  (define-constant gl::output-texture-coord8-ext 34725)
  (define gl::output-texture-coord8-ext gl::output-texture-coord8-ext)
  (define-constant gl::output-texture-coord9-ext 34726)
  (define gl::output-texture-coord9-ext gl::output-texture-coord9-ext)
  (define-constant gl::output-texture-coord10-ext 34727)
  (define gl::output-texture-coord10-ext gl::output-texture-coord10-ext)
  (define-constant gl::output-texture-coord11-ext 34728)
  (define gl::output-texture-coord11-ext gl::output-texture-coord11-ext)
  (define-constant gl::output-texture-coord12-ext 34729)
  (define gl::output-texture-coord12-ext gl::output-texture-coord12-ext)
  (define-constant gl::output-texture-coord13-ext 34730)
  (define gl::output-texture-coord13-ext gl::output-texture-coord13-ext)
  (define-constant gl::output-texture-coord14-ext 34731)
  (define gl::output-texture-coord14-ext gl::output-texture-coord14-ext)
  (define-constant gl::output-texture-coord15-ext 34732)
  (define gl::output-texture-coord15-ext gl::output-texture-coord15-ext)
  (define-constant gl::output-texture-coord16-ext 34733)
  (define gl::output-texture-coord16-ext gl::output-texture-coord16-ext)
  (define-constant gl::output-texture-coord17-ext 34734)
  (define gl::output-texture-coord17-ext gl::output-texture-coord17-ext)
  (define-constant gl::output-texture-coord18-ext 34735)
  (define gl::output-texture-coord18-ext gl::output-texture-coord18-ext)
  (define-constant gl::output-texture-coord19-ext 34736)
  (define gl::output-texture-coord19-ext gl::output-texture-coord19-ext)
  (define-constant gl::output-texture-coord20-ext 34737)
  (define gl::output-texture-coord20-ext gl::output-texture-coord20-ext)
  (define-constant gl::output-texture-coord21-ext 34738)
  (define gl::output-texture-coord21-ext gl::output-texture-coord21-ext)
  (define-constant gl::output-texture-coord22-ext 34739)
  (define gl::output-texture-coord22-ext gl::output-texture-coord22-ext)
  (define-constant gl::output-texture-coord23-ext 34740)
  (define gl::output-texture-coord23-ext gl::output-texture-coord23-ext)
  (define-constant gl::output-texture-coord24-ext 34741)
  (define gl::output-texture-coord24-ext gl::output-texture-coord24-ext)
  (define-constant gl::output-texture-coord25-ext 34742)
  (define gl::output-texture-coord25-ext gl::output-texture-coord25-ext)
  (define-constant gl::output-texture-coord26-ext 34743)
  (define gl::output-texture-coord26-ext gl::output-texture-coord26-ext)
  (define-constant gl::output-texture-coord27-ext 34744)
  (define gl::output-texture-coord27-ext gl::output-texture-coord27-ext)
  (define-constant gl::output-texture-coord28-ext 34745)
  (define gl::output-texture-coord28-ext gl::output-texture-coord28-ext)
  (define-constant gl::output-texture-coord29-ext 34746)
  (define gl::output-texture-coord29-ext gl::output-texture-coord29-ext)
  (define-constant gl::output-texture-coord30-ext 34747)
  (define gl::output-texture-coord30-ext gl::output-texture-coord30-ext)
  (define-constant gl::output-texture-coord31-ext 34748)
  (define gl::output-texture-coord31-ext gl::output-texture-coord31-ext)
  (define-constant gl::output-fog-ext 34749)
  (define gl::output-fog-ext gl::output-fog-ext)
  (define-constant gl::scalar-ext 34750)
  (define gl::scalar-ext gl::scalar-ext)
  (define-constant gl::vector-ext 34751)
  (define gl::vector-ext gl::vector-ext)
  (define-constant gl::matrix-ext 34752)
  (define gl::matrix-ext gl::matrix-ext)
  (define-constant gl::variant-ext 34753)
  (define gl::variant-ext gl::variant-ext)
  (define-constant gl::invariant-ext 34754)
  (define gl::invariant-ext gl::invariant-ext)
  (define-constant gl::local-constant-ext 34755)
  (define gl::local-constant-ext gl::local-constant-ext)
  (define-constant gl::local-ext 34756)
  (define gl::local-ext gl::local-ext)
  (define-constant gl::max-vertex-shader-instructions-ext 34757)
  (define gl::max-vertex-shader-instructions-ext
    gl::max-vertex-shader-instructions-ext)
  (define-constant gl::max-vertex-shader-variants-ext 34758)
  (define gl::max-vertex-shader-variants-ext
    gl::max-vertex-shader-variants-ext)
  (define-constant gl::max-vertex-shader-invariants-ext 34759)
  (define gl::max-vertex-shader-invariants-ext
    gl::max-vertex-shader-invariants-ext)
  (define-constant gl::max-vertex-shader-local-constants-ext 34760)
  (define gl::max-vertex-shader-local-constants-ext
    gl::max-vertex-shader-local-constants-ext)
  (define-constant gl::max-vertex-shader-locals-ext 34761)
  (define gl::max-vertex-shader-locals-ext gl::max-vertex-shader-locals-ext)
  (define-constant gl::max-optimized-vertex-shader-instructions-ext 34762)
  (define gl::max-optimized-vertex-shader-instructions-ext
    gl::max-optimized-vertex-shader-instructions-ext)
  (define-constant gl::max-optimized-vertex-shader-variants-ext 34763)
  (define gl::max-optimized-vertex-shader-variants-ext
    gl::max-optimized-vertex-shader-variants-ext)
  (define-constant gl::max-optimized-vertex-shader-local-constants-ext 34764)
  (define gl::max-optimized-vertex-shader-local-constants-ext
    gl::max-optimized-vertex-shader-local-constants-ext)
  (define-constant gl::max-optimized-vertex-shader-invariants-ext 34765)
  (define gl::max-optimized-vertex-shader-invariants-ext
    gl::max-optimized-vertex-shader-invariants-ext)
  (define-constant gl::max-optimized-vertex-shader-locals-ext 34766)
  (define gl::max-optimized-vertex-shader-locals-ext
    gl::max-optimized-vertex-shader-locals-ext)
  (define-constant gl::vertex-shader-instructions-ext 34767)
  (define gl::vertex-shader-instructions-ext
    gl::vertex-shader-instructions-ext)
  (define-constant gl::vertex-shader-variants-ext 34768)
  (define gl::vertex-shader-variants-ext gl::vertex-shader-variants-ext)
  (define-constant gl::vertex-shader-invariants-ext 34769)
  (define gl::vertex-shader-invariants-ext gl::vertex-shader-invariants-ext)
  (define-constant gl::vertex-shader-local-constants-ext 34770)
  (define gl::vertex-shader-local-constants-ext
    gl::vertex-shader-local-constants-ext)
  (define-constant gl::vertex-shader-locals-ext 34771)
  (define gl::vertex-shader-locals-ext gl::vertex-shader-locals-ext)
  (define-constant gl::vertex-shader-optimized-ext 34772)
  (define gl::vertex-shader-optimized-ext gl::vertex-shader-optimized-ext)
  (define-constant gl::x-ext 34773)
  (define gl::x-ext gl::x-ext)
  (define-constant gl::y-ext 34774)
  (define gl::y-ext gl::y-ext)
  (define-constant gl::z-ext 34775)
  (define gl::z-ext gl::z-ext)
  (define-constant gl::w-ext 34776)
  (define gl::w-ext gl::w-ext)
  (define-constant gl::negative-x-ext 34777)
  (define gl::negative-x-ext gl::negative-x-ext)
  (define-constant gl::negative-y-ext 34778)
  (define gl::negative-y-ext gl::negative-y-ext)
  (define-constant gl::negative-z-ext 34779)
  (define gl::negative-z-ext gl::negative-z-ext)
  (define-constant gl::negative-w-ext 34780)
  (define gl::negative-w-ext gl::negative-w-ext)
  (define-constant gl::zero-ext 34781)
  (define gl::zero-ext gl::zero-ext)
  (define-constant gl::one-ext 34782)
  (define gl::one-ext gl::one-ext)
  (define-constant gl::negative-one-ext 34783)
  (define gl::negative-one-ext gl::negative-one-ext)
  (define-constant gl::normalized-range-ext 34784)
  (define gl::normalized-range-ext gl::normalized-range-ext)
  (define-constant gl::full-range-ext 34785)
  (define gl::full-range-ext gl::full-range-ext)
  (define-constant gl::current-vertex-ext 34786)
  (define gl::current-vertex-ext gl::current-vertex-ext)
  (define-constant gl::mvp-matrix-ext 34787)
  (define gl::mvp-matrix-ext gl::mvp-matrix-ext)
  (define-constant gl::variant-value-ext 34788)
  (define gl::variant-value-ext gl::variant-value-ext)
  (define-constant gl::variant-datatype-ext 34789)
  (define gl::variant-datatype-ext gl::variant-datatype-ext)
  (define-constant gl::variant-array-stride-ext 34790)
  (define gl::variant-array-stride-ext gl::variant-array-stride-ext)
  (define-constant gl::variant-array-type-ext 34791)
  (define gl::variant-array-type-ext gl::variant-array-type-ext)
  (define-constant gl::variant-array-ext 34792)
  (define gl::variant-array-ext gl::variant-array-ext)
  (define-constant gl::variant-array-pointer-ext 34793)
  (define gl::variant-array-pointer-ext gl::variant-array-pointer-ext)
  (define-constant gl::invariant-value-ext 34794)
  (define gl::invariant-value-ext gl::invariant-value-ext)
  (define-constant gl::invariant-datatype-ext 34795)
  (define gl::invariant-datatype-ext gl::invariant-datatype-ext)
  (define-constant gl::local-constant-value-ext 34796)
  (define gl::local-constant-value-ext gl::local-constant-value-ext)
  (define-constant gl::local-constant-datatype-ext 34797)
  (define gl::local-constant-datatype-ext gl::local-constant-datatype-ext)
  (define-constant gl::max-vertex-streams-ati 34667)
  (define gl::max-vertex-streams-ati gl::max-vertex-streams-ati)
  (define-constant gl::vertex-stream0-ati 34668)
  (define gl::vertex-stream0-ati gl::vertex-stream0-ati)
  (define-constant gl::vertex-stream1-ati 34669)
  (define gl::vertex-stream1-ati gl::vertex-stream1-ati)
  (define-constant gl::vertex-stream2-ati 34670)
  (define gl::vertex-stream2-ati gl::vertex-stream2-ati)
  (define-constant gl::vertex-stream3-ati 34671)
  (define gl::vertex-stream3-ati gl::vertex-stream3-ati)
  (define-constant gl::vertex-stream4-ati 34672)
  (define gl::vertex-stream4-ati gl::vertex-stream4-ati)
  (define-constant gl::vertex-stream5-ati 34673)
  (define gl::vertex-stream5-ati gl::vertex-stream5-ati)
  (define-constant gl::vertex-stream6-ati 34674)
  (define gl::vertex-stream6-ati gl::vertex-stream6-ati)
  (define-constant gl::vertex-stream7-ati 34675)
  (define gl::vertex-stream7-ati gl::vertex-stream7-ati)
  (define-constant gl::vertex-source-ati 34676)
  (define gl::vertex-source-ati gl::vertex-source-ati)
  (define-constant gl::element-array-ati 34664)
  (define gl::element-array-ati gl::element-array-ati)
  (define-constant gl::element-array-type-ati 34665)
  (define gl::element-array-type-ati gl::element-array-type-ati)
  (define-constant gl::element-array-pointer-ati 34666)
  (define gl::element-array-pointer-ati gl::element-array-pointer-ati)
  (define-constant gl::quad-mesh-sun 34324)
  (define gl::quad-mesh-sun gl::quad-mesh-sun)
  (define-constant gl::triangle-mesh-sun 34325)
  (define gl::triangle-mesh-sun gl::triangle-mesh-sun)
  (define-constant gl::slice-accum-sun 34252)
  (define gl::slice-accum-sun gl::slice-accum-sun)
  (define-constant gl::multisample-filter-hint-nv 34100)
  (define gl::multisample-filter-hint-nv gl::multisample-filter-hint-nv)
  (define-constant gl::depth-clamp-nv 34383)
  (define gl::depth-clamp-nv gl::depth-clamp-nv)
  (define-constant gl::pixel-counter-bits-nv 34916)
  (define gl::pixel-counter-bits-nv gl::pixel-counter-bits-nv)
  (define-constant gl::current-occlusion-query-id-nv 34917)
  (define gl::current-occlusion-query-id-nv gl::current-occlusion-query-id-nv)
  (define-constant gl::pixel-count-nv 34918)
  (define gl::pixel-count-nv gl::pixel-count-nv)
  (define-constant gl::pixel-count-available-nv 34919)
  (define gl::pixel-count-available-nv gl::pixel-count-available-nv)
  (define-constant gl::point-sprite-nv 34913)
  (define gl::point-sprite-nv gl::point-sprite-nv)
  (define-constant gl::coord-replace-nv 34914)
  (define gl::coord-replace-nv gl::coord-replace-nv)
  (define-constant gl::point-sprite-r-mode-nv 34915)
  (define gl::point-sprite-r-mode-nv gl::point-sprite-r-mode-nv)
  (define-constant gl::offset-projective-texture-2d-nv 34896)
  (define gl::offset-projective-texture-2d-nv
    gl::offset-projective-texture-2d-nv)
  (define-constant gl::offset-projective-texture-2d-scale-nv 34897)
  (define gl::offset-projective-texture-2d-scale-nv
    gl::offset-projective-texture-2d-scale-nv)
  (define-constant gl::offset-projective-texture-rectangle-nv 34898)
  (define gl::offset-projective-texture-rectangle-nv
    gl::offset-projective-texture-rectangle-nv)
  (define-constant gl::offset-projective-texture-rectangle-scale-nv 34899)
  (define gl::offset-projective-texture-rectangle-scale-nv
    gl::offset-projective-texture-rectangle-scale-nv)
  (define-constant gl::offset-hilo-texture-2d-nv 34900)
  (define gl::offset-hilo-texture-2d-nv gl::offset-hilo-texture-2d-nv)
  (define-constant gl::offset-hilo-texture-rectangle-nv 34901)
  (define gl::offset-hilo-texture-rectangle-nv
    gl::offset-hilo-texture-rectangle-nv)
  (define-constant gl::offset-hilo-projective-texture-2d-nv 34902)
  (define gl::offset-hilo-projective-texture-2d-nv
    gl::offset-hilo-projective-texture-2d-nv)
  (define-constant gl::offset-hilo-projective-texture-rectangle-nv 34903)
  (define gl::offset-hilo-projective-texture-rectangle-nv
    gl::offset-hilo-projective-texture-rectangle-nv)
  (define-constant gl::dependent-hilo-texture-2d-nv 34904)
  (define gl::dependent-hilo-texture-2d-nv gl::dependent-hilo-texture-2d-nv)
  (define-constant gl::dependent-rgb-texture-3d-nv 34905)
  (define gl::dependent-rgb-texture-3d-nv gl::dependent-rgb-texture-3d-nv)
  (define-constant gl::dependent-rgb-texture-cube-map-nv 34906)
  (define gl::dependent-rgb-texture-cube-map-nv
    gl::dependent-rgb-texture-cube-map-nv)
  (define-constant gl::dot-product-pass-through-nv 34907)
  (define gl::dot-product-pass-through-nv gl::dot-product-pass-through-nv)
  (define-constant gl::dot-product-texture-1d-nv 34908)
  (define gl::dot-product-texture-1d-nv gl::dot-product-texture-1d-nv)
  (define-constant gl::dot-product-affine-depth-replace-nv 34909)
  (define gl::dot-product-affine-depth-replace-nv
    gl::dot-product-affine-depth-replace-nv)
  (define-constant gl::hilo8-nv 34910)
  (define gl::hilo8-nv gl::hilo8-nv)
  (define-constant gl::signed-hilo8-nv 34911)
  (define gl::signed-hilo8-nv gl::signed-hilo8-nv)
  (define-constant gl::force-blue-to-one-nv 34912)
  (define gl::force-blue-to-one-nv gl::force-blue-to-one-nv)
  (define-constant gl::stencil-test-two-side-ext 35088)
  (define gl::stencil-test-two-side-ext gl::stencil-test-two-side-ext)
  (define-constant gl::active-stencil-face-ext 35089)
  (define gl::active-stencil-face-ext gl::active-stencil-face-ext)
  (define-constant gl::text-fragment-shader-ati 33280)
  (define gl::text-fragment-shader-ati gl::text-fragment-shader-ati)
  (define-constant gl::unpack-client-storage-apple 34226)
  (define gl::unpack-client-storage-apple gl::unpack-client-storage-apple)
  (define-constant gl::element-array-apple 34664)
  (define gl::element-array-apple gl::element-array-apple)
  (define-constant gl::element-array-type-apple 34665)
  (define gl::element-array-type-apple gl::element-array-type-apple)
  (define-constant gl::element-array-pointer-apple 34666)
  (define gl::element-array-pointer-apple gl::element-array-pointer-apple)
  (define-constant gl::draw-pixels-apple 35338)
  (define gl::draw-pixels-apple gl::draw-pixels-apple)
  (define-constant gl::fence-apple 35339)
  (define gl::fence-apple gl::fence-apple)
  (define-constant gl::vertex-array-binding-apple 34229)
  (define gl::vertex-array-binding-apple gl::vertex-array-binding-apple)
  (define-constant gl::vertex-array-range-apple 34077)
  (define gl::vertex-array-range-apple gl::vertex-array-range-apple)
  (define-constant gl::vertex-array-range-length-apple 34078)
  (define gl::vertex-array-range-length-apple
    gl::vertex-array-range-length-apple)
  (define-constant gl::vertex-array-storage-hint-apple 34079)
  (define gl::vertex-array-storage-hint-apple
    gl::vertex-array-storage-hint-apple)
  (define-constant gl::vertex-array-range-pointer-apple 34081)
  (define gl::vertex-array-range-pointer-apple
    gl::vertex-array-range-pointer-apple)
  (define-constant gl::storage-cached-apple 34238)
  (define gl::storage-cached-apple gl::storage-cached-apple)
  (define-constant gl::storage-shared-apple 34239)
  (define gl::storage-shared-apple gl::storage-shared-apple)
  (define-constant gl::ycbcr-422-apple 34233)
  (define gl::ycbcr-422-apple gl::ycbcr-422-apple)
  (define-constant gl::unsigned-short-8-8-apple 34234)
  (define gl::unsigned-short-8-8-apple gl::unsigned-short-8-8-apple)
  (define-constant gl::unsigned-short-8-8-rev-apple 34235)
  (define gl::unsigned-short-8-8-rev-apple gl::unsigned-short-8-8-rev-apple)
  (define-constant gl::rgb-s3tc 33696)
  (define gl::rgb-s3tc gl::rgb-s3tc)
  (define-constant gl::rgb4-s3tc 33697)
  (define gl::rgb4-s3tc gl::rgb4-s3tc)
  (define-constant gl::rgba-s3tc 33698)
  (define gl::rgba-s3tc gl::rgba-s3tc)
  (define-constant gl::rgba4-s3tc 33699)
  (define gl::rgba4-s3tc gl::rgba4-s3tc)
  (define-constant gl::max-draw-buffers-ati 34852)
  (define gl::max-draw-buffers-ati gl::max-draw-buffers-ati)
  (define-constant gl::draw-buffer0-ati 34853)
  (define gl::draw-buffer0-ati gl::draw-buffer0-ati)
  (define-constant gl::draw-buffer1-ati 34854)
  (define gl::draw-buffer1-ati gl::draw-buffer1-ati)
  (define-constant gl::draw-buffer2-ati 34855)
  (define gl::draw-buffer2-ati gl::draw-buffer2-ati)
  (define-constant gl::draw-buffer3-ati 34856)
  (define gl::draw-buffer3-ati gl::draw-buffer3-ati)
  (define-constant gl::draw-buffer4-ati 34857)
  (define gl::draw-buffer4-ati gl::draw-buffer4-ati)
  (define-constant gl::draw-buffer5-ati 34858)
  (define gl::draw-buffer5-ati gl::draw-buffer5-ati)
  (define-constant gl::draw-buffer6-ati 34859)
  (define gl::draw-buffer6-ati gl::draw-buffer6-ati)
  (define-constant gl::draw-buffer7-ati 34860)
  (define gl::draw-buffer7-ati gl::draw-buffer7-ati)
  (define-constant gl::draw-buffer8-ati 34861)
  (define gl::draw-buffer8-ati gl::draw-buffer8-ati)
  (define-constant gl::draw-buffer9-ati 34862)
  (define gl::draw-buffer9-ati gl::draw-buffer9-ati)
  (define-constant gl::draw-buffer10-ati 34863)
  (define gl::draw-buffer10-ati gl::draw-buffer10-ati)
  (define-constant gl::draw-buffer11-ati 34864)
  (define gl::draw-buffer11-ati gl::draw-buffer11-ati)
  (define-constant gl::draw-buffer12-ati 34865)
  (define gl::draw-buffer12-ati gl::draw-buffer12-ati)
  (define-constant gl::draw-buffer13-ati 34866)
  (define gl::draw-buffer13-ati gl::draw-buffer13-ati)
  (define-constant gl::draw-buffer14-ati 34867)
  (define gl::draw-buffer14-ati gl::draw-buffer14-ati)
  (define-constant gl::draw-buffer15-ati 34868)
  (define gl::draw-buffer15-ati gl::draw-buffer15-ati)
  (define-constant gl::modulate-add-ati 34628)
  (define gl::modulate-add-ati gl::modulate-add-ati)
  (define-constant gl::modulate-signed-add-ati 34629)
  (define gl::modulate-signed-add-ati gl::modulate-signed-add-ati)
  (define-constant gl::modulate-subtract-ati 34630)
  (define gl::modulate-subtract-ati gl::modulate-subtract-ati)
  (define-constant gl::rgba-float32-ati 34836)
  (define gl::rgba-float32-ati gl::rgba-float32-ati)
  (define-constant gl::rgb-float32-ati 34837)
  (define gl::rgb-float32-ati gl::rgb-float32-ati)
  (define-constant gl::alpha-float32-ati 34838)
  (define gl::alpha-float32-ati gl::alpha-float32-ati)
  (define-constant gl::intensity-float32-ati 34839)
  (define gl::intensity-float32-ati gl::intensity-float32-ati)
  (define-constant gl::luminance-float32-ati 34840)
  (define gl::luminance-float32-ati gl::luminance-float32-ati)
  (define-constant gl::luminance-alpha-float32-ati 34841)
  (define gl::luminance-alpha-float32-ati gl::luminance-alpha-float32-ati)
  (define-constant gl::rgba-float16-ati 34842)
  (define gl::rgba-float16-ati gl::rgba-float16-ati)
  (define-constant gl::rgb-float16-ati 34843)
  (define gl::rgb-float16-ati gl::rgb-float16-ati)
  (define-constant gl::alpha-float16-ati 34844)
  (define gl::alpha-float16-ati gl::alpha-float16-ati)
  (define-constant gl::intensity-float16-ati 34845)
  (define gl::intensity-float16-ati gl::intensity-float16-ati)
  (define-constant gl::luminance-float16-ati 34846)
  (define gl::luminance-float16-ati gl::luminance-float16-ati)
  (define-constant gl::luminance-alpha-float16-ati 34847)
  (define gl::luminance-alpha-float16-ati gl::luminance-alpha-float16-ati)
  (define-constant gl::float-r-nv 34944)
  (define gl::float-r-nv gl::float-r-nv)
  (define-constant gl::float-rg-nv 34945)
  (define gl::float-rg-nv gl::float-rg-nv)
  (define-constant gl::float-rgb-nv 34946)
  (define gl::float-rgb-nv gl::float-rgb-nv)
  (define-constant gl::float-rgba-nv 34947)
  (define gl::float-rgba-nv gl::float-rgba-nv)
  (define-constant gl::float-r16-nv 34948)
  (define gl::float-r16-nv gl::float-r16-nv)
  (define-constant gl::float-r32-nv 34949)
  (define gl::float-r32-nv gl::float-r32-nv)
  (define-constant gl::float-rg16-nv 34950)
  (define gl::float-rg16-nv gl::float-rg16-nv)
  (define-constant gl::float-rg32-nv 34951)
  (define gl::float-rg32-nv gl::float-rg32-nv)
  (define-constant gl::float-rgb16-nv 34952)
  (define gl::float-rgb16-nv gl::float-rgb16-nv)
  (define-constant gl::float-rgb32-nv 34953)
  (define gl::float-rgb32-nv gl::float-rgb32-nv)
  (define-constant gl::float-rgba16-nv 34954)
  (define gl::float-rgba16-nv gl::float-rgba16-nv)
  (define-constant gl::float-rgba32-nv 34955)
  (define gl::float-rgba32-nv gl::float-rgba32-nv)
  (define-constant gl::texture-float-components-nv 34956)
  (define gl::texture-float-components-nv gl::texture-float-components-nv)
  (define-constant gl::float-clear-color-value-nv 34957)
  (define gl::float-clear-color-value-nv gl::float-clear-color-value-nv)
  (define-constant gl::float-rgba-mode-nv 34958)
  (define gl::float-rgba-mode-nv gl::float-rgba-mode-nv)
  (define-constant gl::max-fragment-program-local-parameters-nv 34920)
  (define gl::max-fragment-program-local-parameters-nv
    gl::max-fragment-program-local-parameters-nv)
  (define-constant gl::fragment-program-nv 34928)
  (define gl::fragment-program-nv gl::fragment-program-nv)
  (define-constant gl::max-texture-coords-nv 34929)
  (define gl::max-texture-coords-nv gl::max-texture-coords-nv)
  (define-constant gl::max-texture-image-units-nv 34930)
  (define gl::max-texture-image-units-nv gl::max-texture-image-units-nv)
  (define-constant gl::fragment-program-binding-nv 34931)
  (define gl::fragment-program-binding-nv gl::fragment-program-binding-nv)
  (define-constant gl::program-error-string-nv 34932)
  (define gl::program-error-string-nv gl::program-error-string-nv)
  (define-constant gl::half-float-nv 5131)
  (define gl::half-float-nv gl::half-float-nv)
  (define-constant gl::write-pixel-data-range-nv 34936)
  (define gl::write-pixel-data-range-nv gl::write-pixel-data-range-nv)
  (define-constant gl::read-pixel-data-range-nv 34937)
  (define gl::read-pixel-data-range-nv gl::read-pixel-data-range-nv)
  (define-constant gl::write-pixel-data-range-length-nv 34938)
  (define gl::write-pixel-data-range-length-nv
    gl::write-pixel-data-range-length-nv)
  (define-constant gl::read-pixel-data-range-length-nv 34939)
  (define gl::read-pixel-data-range-length-nv
    gl::read-pixel-data-range-length-nv)
  (define-constant gl::write-pixel-data-range-pointer-nv 34940)
  (define gl::write-pixel-data-range-pointer-nv
    gl::write-pixel-data-range-pointer-nv)
  (define-constant gl::read-pixel-data-range-pointer-nv 34941)
  (define gl::read-pixel-data-range-pointer-nv
    gl::read-pixel-data-range-pointer-nv)
  (define-constant gl::primitive-restart-nv 34136)
  (define gl::primitive-restart-nv gl::primitive-restart-nv)
  (define-constant gl::primitive-restart-index-nv 34137)
  (define gl::primitive-restart-index-nv gl::primitive-restart-index-nv)
  (define-constant gl::texture-unsigned-remap-mode-nv 34959)
  (define gl::texture-unsigned-remap-mode-nv
    gl::texture-unsigned-remap-mode-nv)
  (define-constant gl::stencil-back-func-ati 34816)
  (define gl::stencil-back-func-ati gl::stencil-back-func-ati)
  (define-constant gl::stencil-back-fail-ati 34817)
  (define gl::stencil-back-fail-ati gl::stencil-back-fail-ati)
  (define-constant gl::stencil-back-pass-depth-fail-ati 34818)
  (define gl::stencil-back-pass-depth-fail-ati
    gl::stencil-back-pass-depth-fail-ati)
  (define-constant gl::stencil-back-pass-depth-pass-ati 34819)
  (define gl::stencil-back-pass-depth-pass-ati
    gl::stencil-back-pass-depth-pass-ati)
  (define-constant gl::fixed-oes 5132)
  (define gl::fixed-oes gl::fixed-oes)
  (define-constant gl::palette4-rgb8-oes 35728)
  (define gl::palette4-rgb8-oes gl::palette4-rgb8-oes)
  (define-constant gl::palette4-rgba8-oes 35729)
  (define gl::palette4-rgba8-oes gl::palette4-rgba8-oes)
  (define-constant gl::palette4-r5-g6-b5-oes 35730)
  (define gl::palette4-r5-g6-b5-oes gl::palette4-r5-g6-b5-oes)
  (define-constant gl::palette4-rgba4-oes 35731)
  (define gl::palette4-rgba4-oes gl::palette4-rgba4-oes)
  (define-constant gl::palette4-rgb5-a1-oes 35732)
  (define gl::palette4-rgb5-a1-oes gl::palette4-rgb5-a1-oes)
  (define-constant gl::palette8-rgb8-oes 35733)
  (define gl::palette8-rgb8-oes gl::palette8-rgb8-oes)
  (define-constant gl::palette8-rgba8-oes 35734)
  (define gl::palette8-rgba8-oes gl::palette8-rgba8-oes)
  (define-constant gl::palette8-r5-g6-b5-oes 35735)
  (define gl::palette8-r5-g6-b5-oes gl::palette8-r5-g6-b5-oes)
  (define-constant gl::palette8-rgba4-oes 35736)
  (define gl::palette8-rgba4-oes gl::palette8-rgba4-oes)
  (define-constant gl::palette8-rgb5-a1-oes 35737)
  (define gl::palette8-rgb5-a1-oes gl::palette8-rgb5-a1-oes)
  (define-constant gl::implementation-color-read-type-oes 35738)
  (define gl::implementation-color-read-type-oes
    gl::implementation-color-read-type-oes)
  (define-constant gl::implementation-color-read-format-oes 35739)
  (define gl::implementation-color-read-format-oes
    gl::implementation-color-read-format-oes)
  (define-constant gl::framebuffer-oes 36160)
  (define gl::framebuffer-oes gl::framebuffer-oes)
  (define-constant gl::renderbuffer-oes 36161)
  (define gl::renderbuffer-oes gl::renderbuffer-oes)
  (define-constant gl::depth-component16-oes 33189)
  (define gl::depth-component16-oes gl::depth-component16-oes)
  (define-constant gl::rgba4-oes 32854)
  (define gl::rgba4-oes gl::rgba4-oes)
  (define-constant gl::rgb5-a1-oes 32855)
  (define gl::rgb5-a1-oes gl::rgb5-a1-oes)
  (define-constant gl::rgb565-oes 36194)
  (define gl::rgb565-oes gl::rgb565-oes)
  (define-constant gl::stencil-index1-oes 36166)
  (define gl::stencil-index1-oes gl::stencil-index1-oes)
  (define-constant gl::stencil-index4-oes 36167)
  (define gl::stencil-index4-oes gl::stencil-index4-oes)
  (define-constant gl::stencil-index8-oes 36168)
  (define gl::stencil-index8-oes gl::stencil-index8-oes)
  (define-constant gl::renderbuffer-width-oes 36162)
  (define gl::renderbuffer-width-oes gl::renderbuffer-width-oes)
  (define-constant gl::renderbuffer-height-oes 36163)
  (define gl::renderbuffer-height-oes gl::renderbuffer-height-oes)
  (define-constant gl::renderbuffer-internal-format-oes 36164)
  (define gl::renderbuffer-internal-format-oes
    gl::renderbuffer-internal-format-oes)
  (define-constant gl::renderbuffer-red-size-oes 36176)
  (define gl::renderbuffer-red-size-oes gl::renderbuffer-red-size-oes)
  (define-constant gl::renderbuffer-green-size-oes 36177)
  (define gl::renderbuffer-green-size-oes gl::renderbuffer-green-size-oes)
  (define-constant gl::renderbuffer-blue-size-oes 36178)
  (define gl::renderbuffer-blue-size-oes gl::renderbuffer-blue-size-oes)
  (define-constant gl::renderbuffer-alpha-size-oes 36179)
  (define gl::renderbuffer-alpha-size-oes gl::renderbuffer-alpha-size-oes)
  (define-constant gl::renderbuffer-depth-size-oes 36180)
  (define gl::renderbuffer-depth-size-oes gl::renderbuffer-depth-size-oes)
  (define-constant gl::renderbuffer-stencil-size-oes 36181)
  (define gl::renderbuffer-stencil-size-oes gl::renderbuffer-stencil-size-oes)
  (define-constant gl::framebuffer-attachment-object-type-oes 36048)
  (define gl::framebuffer-attachment-object-type-oes
    gl::framebuffer-attachment-object-type-oes)
  (define-constant gl::framebuffer-attachment-object-name-oes 36049)
  (define gl::framebuffer-attachment-object-name-oes
    gl::framebuffer-attachment-object-name-oes)
  (define-constant gl::framebuffer-attachment-texture-level-oes 36050)
  (define gl::framebuffer-attachment-texture-level-oes
    gl::framebuffer-attachment-texture-level-oes)
  (define-constant gl::framebuffer-attachment-texture-cube-map-face-oes 36051)
  (define gl::framebuffer-attachment-texture-cube-map-face-oes
    gl::framebuffer-attachment-texture-cube-map-face-oes)
  (define-constant gl::framebuffer-attachment-texture-3d-zoffset-oes 36052)
  (define gl::framebuffer-attachment-texture-3d-zoffset-oes
    gl::framebuffer-attachment-texture-3d-zoffset-oes)
  (define-constant gl::color-attachment0-oes 36064)
  (define gl::color-attachment0-oes gl::color-attachment0-oes)
  (define-constant gl::depth-attachment-oes 36096)
  (define gl::depth-attachment-oes gl::depth-attachment-oes)
  (define-constant gl::stencil-attachment-oes 36128)
  (define gl::stencil-attachment-oes gl::stencil-attachment-oes)
  (define-constant gl::gl-none-oes 0)
  (define gl::gl-none-oes gl::gl-none-oes)
  (define-constant gl::framebuffer-complete-oes 36053)
  (define gl::framebuffer-complete-oes gl::framebuffer-complete-oes)
  (define-constant gl::framebuffer-incomplete-attachment-oes 36054)
  (define gl::framebuffer-incomplete-attachment-oes
    gl::framebuffer-incomplete-attachment-oes)
  (define-constant gl::framebuffer-incomplete-missing-attachment-oes 36055)
  (define gl::framebuffer-incomplete-missing-attachment-oes
    gl::framebuffer-incomplete-missing-attachment-oes)
  (define-constant gl::framebuffer-incomplete-dimensions-oes 36057)
  (define gl::framebuffer-incomplete-dimensions-oes
    gl::framebuffer-incomplete-dimensions-oes)
  (define-constant gl::framebuffer-incomplete-formats-oes 36058)
  (define gl::framebuffer-incomplete-formats-oes
    gl::framebuffer-incomplete-formats-oes)
  (define-constant gl::framebuffer-incomplete-draw-buffer-oes 36059)
  (define gl::framebuffer-incomplete-draw-buffer-oes
    gl::framebuffer-incomplete-draw-buffer-oes)
  (define-constant gl::framebuffer-incomplete-read-buffer-oes 36060)
  (define gl::framebuffer-incomplete-read-buffer-oes
    gl::framebuffer-incomplete-read-buffer-oes)
  (define-constant gl::framebuffer-unsupported-oes 36061)
  (define gl::framebuffer-unsupported-oes gl::framebuffer-unsupported-oes)
  (define-constant gl::framebuffer-binding-oes 36006)
  (define gl::framebuffer-binding-oes gl::framebuffer-binding-oes)
  (define-constant gl::renderbuffer-binding-oes 36007)
  (define gl::renderbuffer-binding-oes gl::renderbuffer-binding-oes)
  (define-constant gl::max-renderbuffer-size-oes 34024)
  (define gl::max-renderbuffer-size-oes gl::max-renderbuffer-size-oes)
  (define-constant gl::invalid-framebuffer-operation-oes 1286)
  (define gl::invalid-framebuffer-operation-oes
    gl::invalid-framebuffer-operation-oes)
  (define-constant depth-component24-oes 33190)
  (define depth-component24-oes depth-component24-oes)
  (define-constant gl::depth-bounds-test-ext 34960)
  (define gl::depth-bounds-test-ext gl::depth-bounds-test-ext)
  (define-constant gl::depth-bounds-ext 34961)
  (define gl::depth-bounds-ext gl::depth-bounds-ext)
  (define-constant gl::mirror-clamp-ext 34626)
  (define gl::mirror-clamp-ext gl::mirror-clamp-ext)
  (define-constant gl::mirror-clamp-to-edge-ext 34627)
  (define gl::mirror-clamp-to-edge-ext gl::mirror-clamp-to-edge-ext)
  (define-constant gl::mirror-clamp-to-border-ext 35090)
  (define gl::mirror-clamp-to-border-ext gl::mirror-clamp-to-border-ext)
  (define-constant gl::blend-equation-rgb-ext 32777)
  (define gl::blend-equation-rgb-ext gl::blend-equation-rgb-ext)
  (define-constant gl::blend-equation-alpha-ext 34877)
  (define gl::blend-equation-alpha-ext gl::blend-equation-alpha-ext)
  (define-constant gl::pack-invert-mesa 34648)
  (define gl::pack-invert-mesa gl::pack-invert-mesa)
  (define-constant gl::ycbcr-mesa 34647)
  (define gl::ycbcr-mesa gl::ycbcr-mesa)
  (define-constant gl::unsigned-short-8-8-mesa 34234)
  (define gl::unsigned-short-8-8-mesa gl::unsigned-short-8-8-mesa)
  (define-constant gl::unsigned-short-8-8-rev-mesa 34235)
  (define gl::unsigned-short-8-8-rev-mesa gl::unsigned-short-8-8-rev-mesa)
  (define-constant gl::pixel-pack-buffer-ext 35051)
  (define gl::pixel-pack-buffer-ext gl::pixel-pack-buffer-ext)
  (define-constant gl::pixel-unpack-buffer-ext 35052)
  (define gl::pixel-unpack-buffer-ext gl::pixel-unpack-buffer-ext)
  (define-constant gl::pixel-pack-buffer-binding-ext 35053)
  (define gl::pixel-pack-buffer-binding-ext gl::pixel-pack-buffer-binding-ext)
  (define-constant gl::pixel-unpack-buffer-binding-ext 35055)
  (define gl::pixel-unpack-buffer-binding-ext
    gl::pixel-unpack-buffer-binding-ext)
  (define-constant gl::max-program-exec-instructions-nv 35060)
  (define gl::max-program-exec-instructions-nv
    gl::max-program-exec-instructions-nv)
  (define-constant gl::max-program-call-depth-nv 35061)
  (define gl::max-program-call-depth-nv gl::max-program-call-depth-nv)
  (define-constant gl::max-program-if-depth-nv 35062)
  (define gl::max-program-if-depth-nv gl::max-program-if-depth-nv)
  (define-constant gl::max-program-loop-depth-nv 35063)
  (define gl::max-program-loop-depth-nv gl::max-program-loop-depth-nv)
  (define-constant gl::max-program-loop-count-nv 35064)
  (define gl::max-program-loop-count-nv gl::max-program-loop-count-nv)
  (define-constant gl::max-program-exec-instructions-nv 35060)
  (define gl::max-program-exec-instructions-nv
    gl::max-program-exec-instructions-nv)
  (define-constant gl::max-program-call-depth-nv 35061)
  (define gl::max-program-call-depth-nv gl::max-program-call-depth-nv)
  (define-constant gl::max-vertex-texture-image-units-arb 35660)
  (define gl::max-vertex-texture-image-units-arb
    gl::max-vertex-texture-image-units-arb)
  (define-constant gl::compressed-rgb-s3tc-dxt1-ext 33776)
  (define gl::compressed-rgb-s3tc-dxt1-ext gl::compressed-rgb-s3tc-dxt1-ext)
  (define-constant gl::compressed-rgba-s3tc-dxt1-ext 33777)
  (define gl::compressed-rgba-s3tc-dxt1-ext gl::compressed-rgba-s3tc-dxt1-ext)
  (define-constant gl::framebuffer-ext 36160)
  (define gl::framebuffer-ext gl::framebuffer-ext)
  (define-constant gl::renderbuffer-ext 36161)
  (define gl::renderbuffer-ext gl::renderbuffer-ext)
  (define-constant gl::stencil-index-ext 36165)
  (define gl::stencil-index-ext gl::stencil-index-ext)
  (define-constant gl::stencil-index1-ext 36166)
  (define gl::stencil-index1-ext gl::stencil-index1-ext)
  (define-constant gl::stencil-index4-ext 36167)
  (define gl::stencil-index4-ext gl::stencil-index4-ext)
  (define-constant gl::stencil-index8-ext 36168)
  (define gl::stencil-index8-ext gl::stencil-index8-ext)
  (define-constant gl::stencil-index16-ext 36169)
  (define gl::stencil-index16-ext gl::stencil-index16-ext)
  (define-constant gl::renderbuffer-width-ext 36162)
  (define gl::renderbuffer-width-ext gl::renderbuffer-width-ext)
  (define-constant gl::renderbuffer-height-ext 36163)
  (define gl::renderbuffer-height-ext gl::renderbuffer-height-ext)
  (define-constant gl::renderbuffer-internal-format-ext 36164)
  (define gl::renderbuffer-internal-format-ext
    gl::renderbuffer-internal-format-ext)
  (define-constant gl::framebuffer-attachment-object-type-ext 36048)
  (define gl::framebuffer-attachment-object-type-ext
    gl::framebuffer-attachment-object-type-ext)
  (define-constant gl::framebuffer-attachment-object-name-ext 36049)
  (define gl::framebuffer-attachment-object-name-ext
    gl::framebuffer-attachment-object-name-ext)
  (define-constant gl::framebuffer-attachment-texture-level-ext 36050)
  (define gl::framebuffer-attachment-texture-level-ext
    gl::framebuffer-attachment-texture-level-ext)
  (define-constant gl::framebuffer-attachment-texture-cube-map-face-ext 36051)
  (define gl::framebuffer-attachment-texture-cube-map-face-ext
    gl::framebuffer-attachment-texture-cube-map-face-ext)
  (define-constant gl::framebuffer-attachment-texture-3d-zoffset-ext 36052)
  (define gl::framebuffer-attachment-texture-3d-zoffset-ext
    gl::framebuffer-attachment-texture-3d-zoffset-ext)
  (define-constant gl::color-attachment0-ext 36064)
  (define gl::color-attachment0-ext gl::color-attachment0-ext)
  (define-constant gl::color-attachment1-ext 36065)
  (define gl::color-attachment1-ext gl::color-attachment1-ext)
  (define-constant gl::color-attachment2-ext 36066)
  (define gl::color-attachment2-ext gl::color-attachment2-ext)
  (define-constant gl::color-attachment3-ext 36067)
  (define gl::color-attachment3-ext gl::color-attachment3-ext)
  (define-constant gl::color-attachment4-ext 36068)
  (define gl::color-attachment4-ext gl::color-attachment4-ext)
  (define-constant gl::color-attachment5-ext 36069)
  (define gl::color-attachment5-ext gl::color-attachment5-ext)
  (define-constant gl::color-attachment6-ext 36070)
  (define gl::color-attachment6-ext gl::color-attachment6-ext)
  (define-constant gl::color-attachment7-ext 36071)
  (define gl::color-attachment7-ext gl::color-attachment7-ext)
  (define-constant gl::color-attachment8-ext 36072)
  (define gl::color-attachment8-ext gl::color-attachment8-ext)
  (define-constant gl::color-attachment9-ext 36073)
  (define gl::color-attachment9-ext gl::color-attachment9-ext)
  (define-constant gl::color-attachment10-ext 36074)
  (define gl::color-attachment10-ext gl::color-attachment10-ext)
  (define-constant gl::color-attachment11-ext 36075)
  (define gl::color-attachment11-ext gl::color-attachment11-ext)
  (define-constant gl::color-attachment12-ext 36076)
  (define gl::color-attachment12-ext gl::color-attachment12-ext)
  (define-constant gl::color-attachment13-ext 36077)
  (define gl::color-attachment13-ext gl::color-attachment13-ext)
  (define-constant gl::color-attachment14-ext 36078)
  (define gl::color-attachment14-ext gl::color-attachment14-ext)
  (define-constant gl::color-attachment15-ext 36079)
  (define gl::color-attachment15-ext gl::color-attachment15-ext)
  (define-constant gl::depth-attachment-ext 36096)
  (define gl::depth-attachment-ext gl::depth-attachment-ext)
  (define-constant gl::stencil-attachment-ext 36128)
  (define gl::stencil-attachment-ext gl::stencil-attachment-ext)
  (define-constant gl::framebuffer-complete-ext 36053)
  (define gl::framebuffer-complete-ext gl::framebuffer-complete-ext)
  (define-constant gl::framebuffer-incomplete-attachment-ext 36054)
  (define gl::framebuffer-incomplete-attachment-ext
    gl::framebuffer-incomplete-attachment-ext)
  (define-constant gl::framebuffer-incomplete-missing-attachment-ext 36055)
  (define gl::framebuffer-incomplete-missing-attachment-ext
    gl::framebuffer-incomplete-missing-attachment-ext)
  (define-constant gl::framebuffer-incomplete-duplicate-attachment-ext 36056)
  (define gl::framebuffer-incomplete-duplicate-attachment-ext
    gl::framebuffer-incomplete-duplicate-attachment-ext)
  (define-constant gl::framebuffer-incomplete-dimensions-ext 36057)
  (define gl::framebuffer-incomplete-dimensions-ext
    gl::framebuffer-incomplete-dimensions-ext)
  (define-constant gl::framebuffer-incomplete-formats-ext 36058)
  (define gl::framebuffer-incomplete-formats-ext
    gl::framebuffer-incomplete-formats-ext)
  (define-constant gl::framebuffer-incomplete-draw-buffer-ext 36059)
  (define gl::framebuffer-incomplete-draw-buffer-ext
    gl::framebuffer-incomplete-draw-buffer-ext)
  (define-constant gl::framebuffer-incomplete-read-buffer-ext 36060)
  (define gl::framebuffer-incomplete-read-buffer-ext
    gl::framebuffer-incomplete-read-buffer-ext)
  (define-constant gl::framebuffer-unsupported-ext 36061)
  (define gl::framebuffer-unsupported-ext gl::framebuffer-unsupported-ext)
  (define-constant gl::framebuffer-status-error-ext 36062)
  (define gl::framebuffer-status-error-ext gl::framebuffer-status-error-ext)
  (define-constant gl::framebuffer-binding-ext 36006)
  (define gl::framebuffer-binding-ext gl::framebuffer-binding-ext)
  (define-constant gl::renderbuffer-binding-ext 36007)
  (define gl::renderbuffer-binding-ext gl::renderbuffer-binding-ext)
  (define-constant gl::max-color-attachments-ext 36063)
  (define gl::max-color-attachments-ext gl::max-color-attachments-ext)
  (define-constant gl::max-renderbuffer-size-ext 34024)
  (define gl::max-renderbuffer-size-ext gl::max-renderbuffer-size-ext)
  (define-constant gl::invalid-framebuffer-operation-ext 1286)
  (define gl::invalid-framebuffer-operation-ext
    gl::invalid-framebuffer-operation-ext)
  (define-constant gl::depth-stencil-ext 34041)
  (define gl::depth-stencil-ext gl::depth-stencil-ext)
  (define-constant gl::unsigned-int-24-8-ext 34042)
  (define gl::unsigned-int-24-8-ext gl::unsigned-int-24-8-ext)
  (define-constant gl::depth24-stencil8-ext 35056)
  (define gl::depth24-stencil8-ext gl::depth24-stencil8-ext)
  (define-constant gl::texture-stencil-size-ext 35057)
  (define gl::texture-stencil-size-ext gl::texture-stencil-size-ext)
  (define-constant gl::stencil-tag-bits-ext 35058)
  (define gl::stencil-tag-bits-ext gl::stencil-tag-bits-ext)
  (define-constant gl::stencil-clear-tag-value-ext 35059)
  (define gl::stencil-clear-tag-value-ext gl::stencil-clear-tag-value-ext)
  (define-constant gl::srgb-ext 35904)
  (define gl::srgb-ext gl::srgb-ext)
  (define-constant gl::srgb8-ext 35905)
  (define gl::srgb8-ext gl::srgb8-ext)
  (define-constant gl::srgb-alpha-ext 35906)
  (define gl::srgb-alpha-ext gl::srgb-alpha-ext)
  (define-constant gl::srgb8-alpha8-ext 35907)
  (define gl::srgb8-alpha8-ext gl::srgb8-alpha8-ext)
  (define-constant gl::sluminance-alpha-ext 35908)
  (define gl::sluminance-alpha-ext gl::sluminance-alpha-ext)
  (define-constant gl::sluminance8-alpha8-ext 35909)
  (define gl::sluminance8-alpha8-ext gl::sluminance8-alpha8-ext)
  (define-constant gl::sluminance-ext 35910)
  (define gl::sluminance-ext gl::sluminance-ext)
  (define-constant gl::sluminance8-ext 35911)
  (define gl::sluminance8-ext gl::sluminance8-ext)
  (define-constant gl::compressed-srgb-ext 35912)
  (define gl::compressed-srgb-ext gl::compressed-srgb-ext)
  (define-constant gl::compressed-srgb-alpha-ext 35913)
  (define gl::compressed-srgb-alpha-ext gl::compressed-srgb-alpha-ext)
  (define-constant gl::compressed-sluminance-ext 35914)
  (define gl::compressed-sluminance-ext gl::compressed-sluminance-ext)
  (define-constant gl::compressed-sluminance-alpha-ext 35915)
  (define gl::compressed-sluminance-alpha-ext
    gl::compressed-sluminance-alpha-ext)
  (define-constant gl::compressed-srgb-s3tc-dxt1-ext 35916)
  (define gl::compressed-srgb-s3tc-dxt1-ext gl::compressed-srgb-s3tc-dxt1-ext)
  (define-constant gl::compressed-srgb-alpha-s3tc-dxt1-ext 35917)
  (define gl::compressed-srgb-alpha-s3tc-dxt1-ext
    gl::compressed-srgb-alpha-s3tc-dxt1-ext)
  (define-constant gl::compressed-srgb-alpha-s3tc-dxt3-ext 35918)
  (define gl::compressed-srgb-alpha-s3tc-dxt3-ext
    gl::compressed-srgb-alpha-s3tc-dxt3-ext)
  (define-constant gl::compressed-srgb-alpha-s3tc-dxt5-ext 35919)
  (define gl::compressed-srgb-alpha-s3tc-dxt5-ext
    gl::compressed-srgb-alpha-s3tc-dxt5-ext)
  (define-constant gl::read-framebuffer-ext 36008)
  (define gl::read-framebuffer-ext gl::read-framebuffer-ext)
  (define-constant gl::draw-framebuffer-ext 36009)
  (define gl::draw-framebuffer-ext gl::draw-framebuffer-ext)
  (define-foreign-variable
    gl::read-framebuffer-binding-ext
    integer
    "GL_READ_FRAMEBUFFER_BINDING_EXT")
  (define gl::read-framebuffer-binding-ext gl::read-framebuffer-binding-ext)
  (define-constant gl::draw-framebuffer-binding-ext 36010)
  (define gl::draw-framebuffer-binding-ext gl::draw-framebuffer-binding-ext)
  (define-constant gl::renderbuffer-samples-ext 36011)
  (define gl::renderbuffer-samples-ext gl::renderbuffer-samples-ext)
  (define-constant gl::framebuffer-incomplete-multisample-ext 36182)
  (define gl::framebuffer-incomplete-multisample-ext
    gl::framebuffer-incomplete-multisample-ext)
  (define-constant gl::max-samples-ext 36183)
  (define gl::max-samples-ext gl::max-samples-ext)
  (define-constant gl::texture-1d-stack-mesax 34649)
  (define gl::texture-1d-stack-mesax gl::texture-1d-stack-mesax)
  (define-constant gl::texture-2d-stack-mesax 34650)
  (define gl::texture-2d-stack-mesax gl::texture-2d-stack-mesax)
  (define-constant gl::proxy-texture-1d-stack-mesax 34651)
  (define gl::proxy-texture-1d-stack-mesax gl::proxy-texture-1d-stack-mesax)
  (define-constant gl::proxy-texture-2d-stack-mesax 34652)
  (define gl::proxy-texture-2d-stack-mesax gl::proxy-texture-2d-stack-mesax)
  (define-constant gl::texture-1d-stack-binding-mesax 34653)
  (define gl::texture-1d-stack-binding-mesax
    gl::texture-1d-stack-binding-mesax)
  (define-constant gl::texture-2d-stack-binding-mesax 34654)
  (define gl::texture-2d-stack-binding-mesax
    gl::texture-2d-stack-binding-mesax)
  (define-constant gl::time-elapsed-ext 35007)
  (define gl::time-elapsed-ext gl::time-elapsed-ext)
  (define-constant gl::buffer-serialized-modify-apple 35346)
  (define gl::buffer-serialized-modify-apple
    gl::buffer-serialized-modify-apple)
  (define-constant gl::buffer-flushing-unmap-apple 35347)
  (define gl::buffer-flushing-unmap-apple gl::buffer-flushing-unmap-apple)
  (define-constant gl::max-vertex-bindable-uniforms-ext 36322)
  (define gl::max-vertex-bindable-uniforms-ext
    gl::max-vertex-bindable-uniforms-ext)
  (define-constant gl::max-fragment-bindable-uniforms-ext 36323)
  (define gl::max-fragment-bindable-uniforms-ext
    gl::max-fragment-bindable-uniforms-ext)
  (define-constant gl::max-geometry-bindable-uniforms-ext 36324)
  (define gl::max-geometry-bindable-uniforms-ext
    gl::max-geometry-bindable-uniforms-ext)
  (define-constant gl::max-bindable-uniform-size-ext 36333)
  (define gl::max-bindable-uniform-size-ext gl::max-bindable-uniform-size-ext)
  (define-constant gl::uniform-buffer-binding-ext 36335)
  (define gl::uniform-buffer-binding-ext gl::uniform-buffer-binding-ext)
  (define-constant gl::uniform-buffer-ext 36334)
  (define gl::uniform-buffer-ext gl::uniform-buffer-ext)
  (define-constant gl::framebuffer-srgb-ext 36281)
  (define gl::framebuffer-srgb-ext gl::framebuffer-srgb-ext)
  (define-constant gl::framebuffer-srgb-capable-ext 36282)
  (define gl::framebuffer-srgb-capable-ext gl::framebuffer-srgb-capable-ext)
  (define-constant gl::geometry-shader-ext 36313)
  (define gl::geometry-shader-ext gl::geometry-shader-ext)
  (define-constant gl::geometry-vertices-out-ext 36314)
  (define gl::geometry-vertices-out-ext gl::geometry-vertices-out-ext)
  (define-constant gl::geometry-input-type-ext 36315)
  (define gl::geometry-input-type-ext gl::geometry-input-type-ext)
  (define-constant gl::geometry-output-type-ext 36316)
  (define gl::geometry-output-type-ext gl::geometry-output-type-ext)
  (define-constant gl::max-geometry-texture-image-units-ext 35881)
  (define gl::max-geometry-texture-image-units-ext
    gl::max-geometry-texture-image-units-ext)
  (define-constant gl::max-geometry-varying-components-ext 36317)
  (define gl::max-geometry-varying-components-ext
    gl::max-geometry-varying-components-ext)
  (define-constant gl::max-vertex-varying-components-ext 36318)
  (define gl::max-vertex-varying-components-ext
    gl::max-vertex-varying-components-ext)
  (define-constant gl::max-varying-components-ext 35659)
  (define gl::max-varying-components-ext gl::max-varying-components-ext)
  (define-constant gl::max-geometry-uniform-components-ext 36319)
  (define gl::max-geometry-uniform-components-ext
    gl::max-geometry-uniform-components-ext)
  (define-constant gl::max-geometry-output-vertices-ext 36320)
  (define gl::max-geometry-output-vertices-ext
    gl::max-geometry-output-vertices-ext)
  (define-constant gl::max-geometry-total-output-components-ext 36321)
  (define gl::max-geometry-total-output-components-ext
    gl::max-geometry-total-output-components-ext)
  (define-constant gl::lines-adjacency-ext 10)
  (define gl::lines-adjacency-ext gl::lines-adjacency-ext)
  (define-constant gl::line-strip-adjacency-ext 11)
  (define gl::line-strip-adjacency-ext gl::line-strip-adjacency-ext)
  (define-constant gl::triangles-adjacency-ext 12)
  (define gl::triangles-adjacency-ext gl::triangles-adjacency-ext)
  (define-constant gl::triangle-strip-adjacency-ext 13)
  (define gl::triangle-strip-adjacency-ext gl::triangle-strip-adjacency-ext)
  (define-constant gl::framebuffer-incomplete-layer-targets-ext 36264)
  (define gl::framebuffer-incomplete-layer-targets-ext
    gl::framebuffer-incomplete-layer-targets-ext)
  (define-constant gl::framebuffer-incomplete-layer-count-ext 36265)
  (define gl::framebuffer-incomplete-layer-count-ext
    gl::framebuffer-incomplete-layer-count-ext)
  (define-constant gl::framebuffer-attachment-layered-ext 36263)
  (define gl::framebuffer-attachment-layered-ext
    gl::framebuffer-attachment-layered-ext)
  (define-constant gl::framebuffer-attachment-texture-layer-ext 36052)
  (define gl::framebuffer-attachment-texture-layer-ext
    gl::framebuffer-attachment-texture-layer-ext)
  (define-constant gl::program-point-size-ext 34370)
  (define gl::program-point-size-ext gl::program-point-size-ext)
  (define-constant gl::vertex-attrib-array-integer-ext 35069)
  (define gl::vertex-attrib-array-integer-ext
    gl::vertex-attrib-array-integer-ext)
  (define-constant gl::sampler-1d-array-ext 36288)
  (define gl::sampler-1d-array-ext gl::sampler-1d-array-ext)
  (define-constant gl::sampler-2d-array-ext 36289)
  (define gl::sampler-2d-array-ext gl::sampler-2d-array-ext)
  (define-constant gl::sampler-buffer-ext 36290)
  (define gl::sampler-buffer-ext gl::sampler-buffer-ext)
  (define-constant gl::sampler-1d-array-shadow-ext 36291)
  (define gl::sampler-1d-array-shadow-ext gl::sampler-1d-array-shadow-ext)
  (define-constant gl::sampler-2d-array-shadow-ext 36292)
  (define gl::sampler-2d-array-shadow-ext gl::sampler-2d-array-shadow-ext)
  (define-constant gl::sampler-cube-shadow-ext 36293)
  (define gl::sampler-cube-shadow-ext gl::sampler-cube-shadow-ext)
  (define-constant gl::unsigned-int 5125)
  (define gl::unsigned-int gl::unsigned-int)
  (define-constant gl::unsigned-int-vec2-ext 36294)
  (define gl::unsigned-int-vec2-ext gl::unsigned-int-vec2-ext)
  (define-constant gl::unsigned-int-vec3-ext 36295)
  (define gl::unsigned-int-vec3-ext gl::unsigned-int-vec3-ext)
  (define-constant gl::unsigned-int-vec4-ext 36296)
  (define gl::unsigned-int-vec4-ext gl::unsigned-int-vec4-ext)
  (define-constant gl::int-sampler-1d-ext 36297)
  (define gl::int-sampler-1d-ext gl::int-sampler-1d-ext)
  (define-constant gl::int-sampler-2d-ext 36298)
  (define gl::int-sampler-2d-ext gl::int-sampler-2d-ext)
  (define-constant gl::int-sampler-3d-ext 36299)
  (define gl::int-sampler-3d-ext gl::int-sampler-3d-ext)
  (define-constant gl::int-sampler-cube-ext 36300)
  (define gl::int-sampler-cube-ext gl::int-sampler-cube-ext)
  (define-constant gl::int-sampler-2d-rect-ext 36301)
  (define gl::int-sampler-2d-rect-ext gl::int-sampler-2d-rect-ext)
  (define-constant gl::int-sampler-1d-array-ext 36302)
  (define gl::int-sampler-1d-array-ext gl::int-sampler-1d-array-ext)
  (define-constant gl::int-sampler-2d-array-ext 36303)
  (define gl::int-sampler-2d-array-ext gl::int-sampler-2d-array-ext)
  (define-constant gl::int-sampler-buffer-ext 36304)
  (define gl::int-sampler-buffer-ext gl::int-sampler-buffer-ext)
  (define-constant gl::unsigned-int-sampler-1d-ext 36305)
  (define gl::unsigned-int-sampler-1d-ext gl::unsigned-int-sampler-1d-ext)
  (define-constant gl::unsigned-int-sampler-2d-ext 36306)
  (define gl::unsigned-int-sampler-2d-ext gl::unsigned-int-sampler-2d-ext)
  (define-constant gl::unsigned-int-sampler-3d-ext 36307)
  (define gl::unsigned-int-sampler-3d-ext gl::unsigned-int-sampler-3d-ext)
  (define-constant gl::unsigned-int-sampler-cube-ext 36308)
  (define gl::unsigned-int-sampler-cube-ext gl::unsigned-int-sampler-cube-ext)
  (define-constant gl::unsigned-int-sampler-2d-rect-ext 36309)
  (define gl::unsigned-int-sampler-2d-rect-ext
    gl::unsigned-int-sampler-2d-rect-ext)
  (define-constant gl::unsigned-int-sampler-1d-array-ext 36310)
  (define gl::unsigned-int-sampler-1d-array-ext
    gl::unsigned-int-sampler-1d-array-ext)
  (define-constant gl::unsigned-int-sampler-2d-array-ext 36311)
  (define gl::unsigned-int-sampler-2d-array-ext
    gl::unsigned-int-sampler-2d-array-ext)
  (define-constant gl::unsigned-int-sampler-buffer-ext 36312)
  (define gl::unsigned-int-sampler-buffer-ext
    gl::unsigned-int-sampler-buffer-ext)
  (define-constant gl::min-program-texel-offset-ext 35076)
  (define gl::min-program-texel-offset-ext gl::min-program-texel-offset-ext)
  (define-constant gl::max-program-texel-offset-ext 35077)
  (define gl::max-program-texel-offset-ext gl::max-program-texel-offset-ext)
  (define-constant gl::r11f-g11f-b10f-ext 35898)
  (define gl::r11f-g11f-b10f-ext gl::r11f-g11f-b10f-ext)
  (define-constant gl::unsigned-int-10f-11f-11f-rev-ext 35899)
  (define gl::unsigned-int-10f-11f-11f-rev-ext
    gl::unsigned-int-10f-11f-11f-rev-ext)
  (define-constant gl::rgba-signed-components-ext 35900)
  (define gl::rgba-signed-components-ext gl::rgba-signed-components-ext)
  (define-constant gl::texture-1d-array-ext 35864)
  (define gl::texture-1d-array-ext gl::texture-1d-array-ext)
  (define-constant gl::texture-2d-array-ext 35866)
  (define gl::texture-2d-array-ext gl::texture-2d-array-ext)
  (define-constant gl::proxy-texture-2d-array-ext 35867)
  (define gl::proxy-texture-2d-array-ext gl::proxy-texture-2d-array-ext)
  (define-constant gl::proxy-texture-1d-array-ext 35865)
  (define gl::proxy-texture-1d-array-ext gl::proxy-texture-1d-array-ext)
  (define-constant gl::texture-binding-1d-array-ext 35868)
  (define gl::texture-binding-1d-array-ext gl::texture-binding-1d-array-ext)
  (define-constant gl::texture-binding-2d-array-ext 35869)
  (define gl::texture-binding-2d-array-ext gl::texture-binding-2d-array-ext)
  (define-constant gl::max-array-texture-layers-ext 35071)
  (define gl::max-array-texture-layers-ext gl::max-array-texture-layers-ext)
  (define-constant gl::compare-ref-depth-to-texture-ext 34894)
  (define gl::compare-ref-depth-to-texture-ext
    gl::compare-ref-depth-to-texture-ext)
  (define-constant gl::framebuffer-attachment-texture-layer-ext 36052)
  (define gl::framebuffer-attachment-texture-layer-ext
    gl::framebuffer-attachment-texture-layer-ext)
  (define-constant gl::sampler-1d-array-ext 36288)
  (define gl::sampler-1d-array-ext gl::sampler-1d-array-ext)
  (define-constant gl::sampler-2d-array-ext 36289)
  (define gl::sampler-2d-array-ext gl::sampler-2d-array-ext)
  (define-constant gl::sampler-1d-array-shadow-ext 36291)
  (define gl::sampler-1d-array-shadow-ext gl::sampler-1d-array-shadow-ext)
  (define-constant gl::sampler-2d-array-shadow-ext 36292)
  (define gl::sampler-2d-array-shadow-ext gl::sampler-2d-array-shadow-ext)
  (define-constant gl::texture-buffer-ext 35882)
  (define gl::texture-buffer-ext gl::texture-buffer-ext)
  (define-constant gl::max-texture-buffer-size-ext 35883)
  (define gl::max-texture-buffer-size-ext gl::max-texture-buffer-size-ext)
  (define-constant gl::texture-binding-buffer-ext 35884)
  (define gl::texture-binding-buffer-ext gl::texture-binding-buffer-ext)
  (define-constant gl::texture-buffer-data-store-binding-ext 35885)
  (define gl::texture-buffer-data-store-binding-ext
    gl::texture-buffer-data-store-binding-ext)
  (define-constant gl::texture-buffer-format-ext 35886)
  (define gl::texture-buffer-format-ext gl::texture-buffer-format-ext)
  (define-constant gl::compressed-luminance-latc1-ext 35952)
  (define gl::compressed-luminance-latc1-ext
    gl::compressed-luminance-latc1-ext)
  (define-constant gl::compressed-signed-luminance-latc1-ext 35953)
  (define gl::compressed-signed-luminance-latc1-ext
    gl::compressed-signed-luminance-latc1-ext)
  (define-constant gl::compressed-luminance-alpha-latc2-ext 35954)
  (define gl::compressed-luminance-alpha-latc2-ext
    gl::compressed-luminance-alpha-latc2-ext)
  (define-constant gl::compressed-signed-luminance-alpha-latc2-ext 35955)
  (define gl::compressed-signed-luminance-alpha-latc2-ext
    gl::compressed-signed-luminance-alpha-latc2-ext)
  (define-constant gl::compressed-red-rgtc1-ext 36283)
  (define gl::compressed-red-rgtc1-ext gl::compressed-red-rgtc1-ext)
  (define-constant gl::compressed-signed-red-rgtc1-ext 36284)
  (define gl::compressed-signed-red-rgtc1-ext
    gl::compressed-signed-red-rgtc1-ext)
  (define-constant gl::compressed-red-green-rgtc2-ext 36285)
  (define gl::compressed-red-green-rgtc2-ext
    gl::compressed-red-green-rgtc2-ext)
  (define-constant gl::compressed-signed-red-green-rgtc2-ext 36286)
  (define gl::compressed-signed-red-green-rgtc2-ext
    gl::compressed-signed-red-green-rgtc2-ext)
  (define-constant gl::rgba-integer-mode-ext 36254)
  (define gl::rgba-integer-mode-ext gl::rgba-integer-mode-ext)
  (define-constant gl::rgba32ui-ext 36208)
  (define gl::rgba32ui-ext gl::rgba32ui-ext)
  (define-constant gl::rgb32ui-ext 36209)
  (define gl::rgb32ui-ext gl::rgb32ui-ext)
  (define-constant gl::alpha32ui-ext 36210)
  (define gl::alpha32ui-ext gl::alpha32ui-ext)
  (define-constant gl::intensity32ui-ext 36211)
  (define gl::intensity32ui-ext gl::intensity32ui-ext)
  (define-constant gl::luminance32ui-ext 36212)
  (define gl::luminance32ui-ext gl::luminance32ui-ext)
  (define-constant gl::luminance-alpha32ui-ext 36213)
  (define gl::luminance-alpha32ui-ext gl::luminance-alpha32ui-ext)
  (define-constant gl::rgba16ui-ext 36214)
  (define gl::rgba16ui-ext gl::rgba16ui-ext)
  (define-constant gl::rgb16ui-ext 36215)
  (define gl::rgb16ui-ext gl::rgb16ui-ext)
  (define-constant gl::alpha16ui-ext 36216)
  (define gl::alpha16ui-ext gl::alpha16ui-ext)
  (define-constant gl::intensity16ui-ext 36217)
  (define gl::intensity16ui-ext gl::intensity16ui-ext)
  (define-constant gl::luminance16ui-ext 36218)
  (define gl::luminance16ui-ext gl::luminance16ui-ext)
  (define-constant gl::luminance-alpha16ui-ext 36219)
  (define gl::luminance-alpha16ui-ext gl::luminance-alpha16ui-ext)
  (define-constant gl::rgba8ui-ext 36220)
  (define gl::rgba8ui-ext gl::rgba8ui-ext)
  (define-constant gl::rgb8ui-ext 36221)
  (define gl::rgb8ui-ext gl::rgb8ui-ext)
  (define-constant gl::alpha8ui-ext 36222)
  (define gl::alpha8ui-ext gl::alpha8ui-ext)
  (define-constant gl::intensity8ui-ext 36223)
  (define gl::intensity8ui-ext gl::intensity8ui-ext)
  (define-constant gl::luminance8ui-ext 36224)
  (define gl::luminance8ui-ext gl::luminance8ui-ext)
  (define-constant gl::luminance-alpha8ui-ext 36225)
  (define gl::luminance-alpha8ui-ext gl::luminance-alpha8ui-ext)
  (define-constant gl::rgba32i-ext 36226)
  (define gl::rgba32i-ext gl::rgba32i-ext)
  (define-constant gl::rgb32i-ext 36227)
  (define gl::rgb32i-ext gl::rgb32i-ext)
  (define-constant gl::alpha32i-ext 36228)
  (define gl::alpha32i-ext gl::alpha32i-ext)
  (define-constant gl::intensity32i-ext 36229)
  (define gl::intensity32i-ext gl::intensity32i-ext)
  (define-constant gl::luminance32i-ext 36230)
  (define gl::luminance32i-ext gl::luminance32i-ext)
  (define-constant gl::luminance-alpha32i-ext 36231)
  (define gl::luminance-alpha32i-ext gl::luminance-alpha32i-ext)
  (define-constant gl::rgba16i-ext 36232)
  (define gl::rgba16i-ext gl::rgba16i-ext)
  (define-constant gl::rgb16i-ext 36233)
  (define gl::rgb16i-ext gl::rgb16i-ext)
  (define-constant gl::alpha16i-ext 36234)
  (define gl::alpha16i-ext gl::alpha16i-ext)
  (define-constant gl::intensity16i-ext 36235)
  (define gl::intensity16i-ext gl::intensity16i-ext)
  (define-constant gl::luminance16i-ext 36236)
  (define gl::luminance16i-ext gl::luminance16i-ext)
  (define-constant gl::luminance-alpha16i-ext 36237)
  (define gl::luminance-alpha16i-ext gl::luminance-alpha16i-ext)
  (define-constant gl::rgba8i-ext 36238)
  (define gl::rgba8i-ext gl::rgba8i-ext)
  (define-constant gl::rgb8i-ext 36239)
  (define gl::rgb8i-ext gl::rgb8i-ext)
  (define-constant gl::alpha8i-ext 36240)
  (define gl::alpha8i-ext gl::alpha8i-ext)
  (define-constant gl::intensity8i-ext 36241)
  (define gl::intensity8i-ext gl::intensity8i-ext)
  (define-constant gl::luminance8i-ext 36242)
  (define gl::luminance8i-ext gl::luminance8i-ext)
  (define-constant gl::luminance-alpha8i-ext 36243)
  (define gl::luminance-alpha8i-ext gl::luminance-alpha8i-ext)
  (define-constant gl::red-integer-ext 36244)
  (define gl::red-integer-ext gl::red-integer-ext)
  (define-constant gl::green-integer-ext 36245)
  (define gl::green-integer-ext gl::green-integer-ext)
  (define-constant gl::blue-integer-ext 36246)
  (define gl::blue-integer-ext gl::blue-integer-ext)
  (define-constant gl::alpha-integer-ext 36247)
  (define gl::alpha-integer-ext gl::alpha-integer-ext)
  (define-constant gl::rgb-integer-ext 36248)
  (define gl::rgb-integer-ext gl::rgb-integer-ext)
  (define-constant gl::rgba-integer-ext 36249)
  (define gl::rgba-integer-ext gl::rgba-integer-ext)
  (define-constant gl::bgr-integer-ext 36250)
  (define gl::bgr-integer-ext gl::bgr-integer-ext)
  (define-constant gl::bgra-integer-ext 36251)
  (define gl::bgra-integer-ext gl::bgra-integer-ext)
  (define-constant gl::luminance-integer-ext 36252)
  (define gl::luminance-integer-ext gl::luminance-integer-ext)
  (define-constant gl::luminance-alpha-integer-ext 36253)
  (define gl::luminance-alpha-integer-ext gl::luminance-alpha-integer-ext)
  (define-constant gl::rgb9-e5-ext 35901)
  (define gl::rgb9-e5-ext gl::rgb9-e5-ext)
  (define-constant gl::unsigned-int-5-9-9-9-rev-ext 35902)
  (define gl::unsigned-int-5-9-9-9-rev-ext gl::unsigned-int-5-9-9-9-rev-ext)
  (define-constant gl::texture-shared-size-ext 35903)
  (define gl::texture-shared-size-ext gl::texture-shared-size-ext)
  (define-constant gl::depth-component32f-nv 36267)
  (define gl::depth-component32f-nv gl::depth-component32f-nv)
  (define-constant gl::depth32f-stencil8-nv 36268)
  (define gl::depth32f-stencil8-nv gl::depth32f-stencil8-nv)
  (define-constant gl::float-32-unsigned-int-24-8-rev-nv 36269)
  (define gl::float-32-unsigned-int-24-8-rev-nv
    gl::float-32-unsigned-int-24-8-rev-nv)
  (define-constant gl::depth-buffer-float-mode-nv 36271)
  (define gl::depth-buffer-float-mode-nv gl::depth-buffer-float-mode-nv)
  (define-constant gl::renderbuffer-coverage-samples-nv 36011)
  (define gl::renderbuffer-coverage-samples-nv
    gl::renderbuffer-coverage-samples-nv)
  (define-constant gl::renderbuffer-color-samples-nv 36368)
  (define gl::renderbuffer-color-samples-nv gl::renderbuffer-color-samples-nv)
  (define-constant gl::geometry-program-nv 35878)
  (define gl::geometry-program-nv gl::geometry-program-nv)
  (define-constant gl::max-program-output-vertices-nv 35879)
  (define gl::max-program-output-vertices-nv
    gl::max-program-output-vertices-nv)
  (define-constant gl::max-program-total-output-components-nv 35880)
  (define gl::max-program-total-output-components-nv
    gl::max-program-total-output-components-nv)
  (define-constant gl::min-program-texel-offset-ext 35076)
  (define gl::min-program-texel-offset-ext gl::min-program-texel-offset-ext)
  (define-constant gl::max-program-texel-offset-ext 35077)
  (define gl::max-program-texel-offset-ext gl::max-program-texel-offset-ext)
  (define-constant gl::program-attrib-components-nv 35078)
  (define gl::program-attrib-components-nv gl::program-attrib-components-nv)
  (define-constant gl::program-result-components-nv 35079)
  (define gl::program-result-components-nv gl::program-result-components-nv)
  (define-constant gl::max-program-attrib-components-nv 35080)
  (define gl::max-program-attrib-components-nv
    gl::max-program-attrib-components-nv)
  (define-constant gl::max-program-result-components-nv 35081)
  (define gl::max-program-result-components-nv
    gl::max-program-result-components-nv)
  (define-constant gl::max-program-generic-attribs-nv 36261)
  (define gl::max-program-generic-attribs-nv
    gl::max-program-generic-attribs-nv)
  (define-constant gl::max-program-generic-results-nv 36262)
  (define gl::max-program-generic-results-nv
    gl::max-program-generic-results-nv)
  (define-constant gl::max-program-parameter-buffer-bindings-nv 36256)
  (define gl::max-program-parameter-buffer-bindings-nv
    gl::max-program-parameter-buffer-bindings-nv)
  (define-constant gl::max-program-parameter-buffer-size-nv 36257)
  (define gl::max-program-parameter-buffer-size-nv
    gl::max-program-parameter-buffer-size-nv)
  (define-constant gl::vertex-program-parameter-buffer-nv 36258)
  (define gl::vertex-program-parameter-buffer-nv
    gl::vertex-program-parameter-buffer-nv)
  (define-constant gl::geometry-program-parameter-buffer-nv 36259)
  (define gl::geometry-program-parameter-buffer-nv
    gl::geometry-program-parameter-buffer-nv)
  (define-constant gl::fragment-program-parameter-buffer-nv 36260)
  (define gl::fragment-program-parameter-buffer-nv
    gl::fragment-program-parameter-buffer-nv)
  (define-constant gl::transform-feedback-buffer-nv 35982)
  (define gl::transform-feedback-buffer-nv gl::transform-feedback-buffer-nv)
  (define-constant gl::transform-feedback-buffer-start-nv 35972)
  (define gl::transform-feedback-buffer-start-nv
    gl::transform-feedback-buffer-start-nv)
  (define-constant gl::transform-feedback-buffer-size-nv 35973)
  (define gl::transform-feedback-buffer-size-nv
    gl::transform-feedback-buffer-size-nv)
  (define-constant gl::transform-feedback-record-nv 35974)
  (define gl::transform-feedback-record-nv gl::transform-feedback-record-nv)
  (define-constant gl::transform-feedback-buffer-binding-nv 35983)
  (define gl::transform-feedback-buffer-binding-nv
    gl::transform-feedback-buffer-binding-nv)
  (define-constant gl::interleaved-attribs-nv 35980)
  (define gl::interleaved-attribs-nv gl::interleaved-attribs-nv)
  (define-constant gl::separate-attribs-nv 35981)
  (define gl::separate-attribs-nv gl::separate-attribs-nv)
  (define-constant gl::primitives-generated-nv 35975)
  (define gl::primitives-generated-nv gl::primitives-generated-nv)
  (define-constant gl::transform-feedback-primitives-written-nv 35976)
  (define gl::transform-feedback-primitives-written-nv
    gl::transform-feedback-primitives-written-nv)
  (define-constant gl::rasterizer-discard-nv 35977)
  (define gl::rasterizer-discard-nv gl::rasterizer-discard-nv)
  (define-constant gl::max-transform-feedback-interleaved-components-nv 35978)
  (define gl::max-transform-feedback-interleaved-components-nv
    gl::max-transform-feedback-interleaved-components-nv)
  (define-constant gl::max-transform-feedback-separate-attribs-nv 35979)
  (define gl::max-transform-feedback-separate-attribs-nv
    gl::max-transform-feedback-separate-attribs-nv)
  (define-constant gl::max-transform-feedback-separate-components-nv 35968)
  (define gl::max-transform-feedback-separate-components-nv
    gl::max-transform-feedback-separate-components-nv)
  (define-constant gl::transform-feedback-attribs-nv 35966)
  (define gl::transform-feedback-attribs-nv gl::transform-feedback-attribs-nv)
  (define-constant gl::active-varyings-nv 35969)
  (define gl::active-varyings-nv gl::active-varyings-nv)
  (define-constant gl::active-varying-max-length-nv 35970)
  (define gl::active-varying-max-length-nv gl::active-varying-max-length-nv)
  (define-constant gl::transform-feedback-varyings-nv 35971)
  (define gl::transform-feedback-varyings-nv
    gl::transform-feedback-varyings-nv)
  (define-constant gl::transform-feedback-buffer-mode-nv 35967)
  (define gl::transform-feedback-buffer-mode-nv
    gl::transform-feedback-buffer-mode-nv)
  (define-constant gl::back-primary-color-nv 35959)
  (define gl::back-primary-color-nv gl::back-primary-color-nv)
  (define-constant gl::back-secondary-color-nv 35960)
  (define gl::back-secondary-color-nv gl::back-secondary-color-nv)
  (define-constant gl::texture-coord-nv 35961)
  (define gl::texture-coord-nv gl::texture-coord-nv)
  (define-constant gl::clip-distance-nv 35962)
  (define gl::clip-distance-nv gl::clip-distance-nv)
  (define-constant gl::vertex-id-nv 35963)
  (define gl::vertex-id-nv gl::vertex-id-nv)
  (define-constant gl::primitive-id-nv 35964)
  (define gl::primitive-id-nv gl::primitive-id-nv)
  (define-constant gl::generic-attrib-nv 35965)
  (define gl::generic-attrib-nv gl::generic-attrib-nv)
  (define-constant gl::query-wait-nv 36371)
  (define gl::query-wait-nv gl::query-wait-nv)
  (define-constant gl::query-no-wait-nv 36372)
  (define gl::query-no-wait-nv gl::query-no-wait-nv)
  (define-constant gl::query-by-region-wait-nv 36373)
  (define gl::query-by-region-wait-nv gl::query-by-region-wait-nv)
  (define-constant gl::query-by-region-no-wait-nv 36374)
  (define gl::query-by-region-no-wait-nv gl::query-by-region-no-wait-nv)
  (define-constant gl::frame-nv 36390)
  (define gl::frame-nv gl::frame-nv)
  (define-constant gl::fields-nv 36391)
  (define gl::fields-nv gl::fields-nv)
  (define-constant gl::current-time-nv 36392)
  (define gl::current-time-nv gl::current-time-nv)
  (define-constant gl::num-fill-streams-nv 36393)
  (define gl::num-fill-streams-nv gl::num-fill-streams-nv)
  (define-constant gl::present-time-nv 36394)
  (define gl::present-time-nv gl::present-time-nv)
  (define-constant gl::present-duration-nv 36395)
  (define gl::present-duration-nv gl::present-duration-nv)
  (define-constant gl::transform-feedback-buffer-ext 35982)
  (define gl::transform-feedback-buffer-ext gl::transform-feedback-buffer-ext)
  (define-constant gl::transform-feedback-buffer-start-ext 35972)
  (define gl::transform-feedback-buffer-start-ext
    gl::transform-feedback-buffer-start-ext)
  (define-constant gl::transform-feedback-buffer-size-ext 35973)
  (define gl::transform-feedback-buffer-size-ext
    gl::transform-feedback-buffer-size-ext)
  (define-constant gl::transform-feedback-buffer-binding-ext 35983)
  (define gl::transform-feedback-buffer-binding-ext
    gl::transform-feedback-buffer-binding-ext)
  (define-constant gl::interleaved-attribs-ext 35980)
  (define gl::interleaved-attribs-ext gl::interleaved-attribs-ext)
  (define-constant gl::separate-attribs-ext 35981)
  (define gl::separate-attribs-ext gl::separate-attribs-ext)
  (define-constant gl::primitives-generated-ext 35975)
  (define gl::primitives-generated-ext gl::primitives-generated-ext)
  (define-constant gl::transform-feedback-primitives-written-ext 35976)
  (define gl::transform-feedback-primitives-written-ext
    gl::transform-feedback-primitives-written-ext)
  (define-constant gl::rasterizer-discard-ext 35977)
  (define gl::rasterizer-discard-ext gl::rasterizer-discard-ext)
  (define-constant gl::max-transform-feedback-interleaved-components-ext 35978)
  (define gl::max-transform-feedback-interleaved-components-ext
    gl::max-transform-feedback-interleaved-components-ext)
  (define-constant gl::max-transform-feedback-separate-attribs-ext 35979)
  (define gl::max-transform-feedback-separate-attribs-ext
    gl::max-transform-feedback-separate-attribs-ext)
  (define-constant gl::max-transform-feedback-separate-components-ext 35968)
  (define gl::max-transform-feedback-separate-components-ext
    gl::max-transform-feedback-separate-components-ext)
  (define-constant gl::transform-feedback-varyings-ext 35971)
  (define gl::transform-feedback-varyings-ext
    gl::transform-feedback-varyings-ext)
  (define-constant gl::transform-feedback-buffer-mode-ext 35967)
  (define gl::transform-feedback-buffer-mode-ext
    gl::transform-feedback-buffer-mode-ext)
  (define-constant gl::transform-feedback-varying-max-length-ext 35958)
  (define gl::transform-feedback-varying-max-length-ext
    gl::transform-feedback-varying-max-length-ext)
  (define-constant gl::program-matrix-ext 36397)
  (define gl::program-matrix-ext gl::program-matrix-ext)
  (define-constant gl::transpose-program-matrix-ext 36398)
  (define gl::transpose-program-matrix-ext gl::transpose-program-matrix-ext)
  (define-constant gl::program-matrix-stack-depth-ext 36399)
  (define gl::program-matrix-stack-depth-ext
    gl::program-matrix-stack-depth-ext)
  (define-constant gl::texture-swizzle-r-ext 36418)
  (define gl::texture-swizzle-r-ext gl::texture-swizzle-r-ext)
  (define-constant gl::texture-swizzle-g-ext 36419)
  (define gl::texture-swizzle-g-ext gl::texture-swizzle-g-ext)
  (define-constant gl::texture-swizzle-b-ext 36420)
  (define gl::texture-swizzle-b-ext gl::texture-swizzle-b-ext)
  (define-constant gl::texture-swizzle-a-ext 36421)
  (define gl::texture-swizzle-a-ext gl::texture-swizzle-a-ext)
  (define-constant gl::texture-swizzle-rgba-ext 36422)
  (define gl::texture-swizzle-rgba-ext gl::texture-swizzle-rgba-ext)
  (define-constant gl::sample-position-nv 36432)
  (define gl::sample-position-nv gl::sample-position-nv)
  (define-constant gl::sample-mask-nv 36433)
  (define gl::sample-mask-nv gl::sample-mask-nv)
  (define-constant gl::sample-mask-value-nv 36434)
  (define gl::sample-mask-value-nv gl::sample-mask-value-nv)
  (define-constant gl::texture-binding-renderbuffer-nv 36435)
  (define gl::texture-binding-renderbuffer-nv
    gl::texture-binding-renderbuffer-nv)
  (define-constant gl::texture-renderbuffer-data-store-binding-nv 36436)
  (define gl::texture-renderbuffer-data-store-binding-nv
    gl::texture-renderbuffer-data-store-binding-nv)
  (define-constant gl::max-sample-mask-words-nv 36441)
  (define gl::max-sample-mask-words-nv gl::max-sample-mask-words-nv)
  (define-constant gl::texture-renderbuffer-nv 36437)
  (define gl::texture-renderbuffer-nv gl::texture-renderbuffer-nv)
  (define-constant gl::sampler-renderbuffer-nv 36438)
  (define gl::sampler-renderbuffer-nv gl::sampler-renderbuffer-nv)
  (define-constant gl::int-sampler-renderbuffer-nv 36439)
  (define gl::int-sampler-renderbuffer-nv gl::int-sampler-renderbuffer-nv)
  (define-constant gl::unsigned-int-sampler-renderbuffer-nv 36440)
  (define gl::unsigned-int-sampler-renderbuffer-nv
    gl::unsigned-int-sampler-renderbuffer-nv)
  (define-constant gl::transform-feedback-nv 36386)
  (define gl::transform-feedback-nv gl::transform-feedback-nv)
  (define-constant gl::transform-feedback-buffer-paused-nv 36387)
  (define gl::transform-feedback-buffer-paused-nv
    gl::transform-feedback-buffer-paused-nv)
  (define-constant gl::transform-feedback-buffer-active-nv 36388)
  (define gl::transform-feedback-buffer-active-nv
    gl::transform-feedback-buffer-active-nv)
  (define-constant gl::transform-feedback-binding-nv 36389)
  (define gl::transform-feedback-binding-nv gl::transform-feedback-binding-nv)
  (define-constant gl::vbo-free-memory-ati 34811)
  (define gl::vbo-free-memory-ati gl::vbo-free-memory-ati)
  (define-constant gl::texture-free-memory-ati 34812)
  (define gl::texture-free-memory-ati gl::texture-free-memory-ati)
  (define-constant gl::renderbuffer-free-memory-ati 34813)
  (define gl::renderbuffer-free-memory-ati gl::renderbuffer-free-memory-ati)
  (define-constant gl::counter-type-amd 35776)
  (define gl::counter-type-amd gl::counter-type-amd)
  (define-constant gl::counter-range-amd 35777)
  (define gl::counter-range-amd gl::counter-range-amd)
  (define-constant gl::unsigned-int64-amd 35778)
  (define gl::unsigned-int64-amd gl::unsigned-int64-amd)
  (define-constant gl::percentage-amd 35779)
  (define gl::percentage-amd gl::percentage-amd)
  (define-constant gl::perfmon-result-available-amd 35780)
  (define gl::perfmon-result-available-amd gl::perfmon-result-available-amd)
  (define-constant gl::perfmon-result-size-amd 35781)
  (define gl::perfmon-result-size-amd gl::perfmon-result-size-amd)
  (define-constant gl::perfmon-result-amd 35782)
  (define gl::perfmon-result-amd gl::perfmon-result-amd)
  (define-constant gl::sampler-buffer-amd 36865)
  (define gl::sampler-buffer-amd gl::sampler-buffer-amd)
  (define-constant gl::int-sampler-buffer-amd 36866)
  (define gl::int-sampler-buffer-amd gl::int-sampler-buffer-amd)
  (define-constant gl::unsigned-int-sampler-buffer-amd 36867)
  (define gl::unsigned-int-sampler-buffer-amd
    gl::unsigned-int-sampler-buffer-amd)
  (define-constant gl::tessellation-mode-amd 36868)
  (define gl::tessellation-mode-amd gl::tessellation-mode-amd)
  (define-constant gl::tessellation-factor-amd 36869)
  (define gl::tessellation-factor-amd gl::tessellation-factor-amd)
  (define-constant gl::discrete-amd 36870)
  (define gl::discrete-amd gl::discrete-amd)
  (define-constant gl::continuous-amd 36871)
  (define gl::continuous-amd gl::continuous-amd)
  (define-constant gl::quads-follow-provoking-vertex-convention-ext 36428)
  (define gl::quads-follow-provoking-vertex-convention-ext
    gl::quads-follow-provoking-vertex-convention-ext)
  (define-constant gl::first-vertex-convention-ext 36429)
  (define gl::first-vertex-convention-ext gl::first-vertex-convention-ext)
  (define-constant gl::last-vertex-convention-ext 36430)
  (define gl::last-vertex-convention-ext gl::last-vertex-convention-ext)
  (define-constant gl::provoking-vertex-ext 36431)
  (define gl::provoking-vertex-ext gl::provoking-vertex-ext)
  (define-constant gl::alpha-snorm 36880)
  (define gl::alpha-snorm gl::alpha-snorm)
  (define-constant gl::luminance-snorm 36881)
  (define gl::luminance-snorm gl::luminance-snorm)
  (define-constant gl::luminance-alpha-snorm 36882)
  (define gl::luminance-alpha-snorm gl::luminance-alpha-snorm)
  (define-constant gl::intensity-snorm 36883)
  (define gl::intensity-snorm gl::intensity-snorm)
  (define-constant gl::alpha8-snorm 36884)
  (define gl::alpha8-snorm gl::alpha8-snorm)
  (define-constant gl::luminance8-snorm 36885)
  (define gl::luminance8-snorm gl::luminance8-snorm)
  (define-constant gl::luminance8-alpha8-snorm 36886)
  (define gl::luminance8-alpha8-snorm gl::luminance8-alpha8-snorm)
  (define-constant gl::intensity8-snorm 36887)
  (define gl::intensity8-snorm gl::intensity8-snorm)
  (define-constant gl::alpha16-snorm 36888)
  (define gl::alpha16-snorm gl::alpha16-snorm)
  (define-constant gl::luminance16-snorm 36889)
  (define gl::luminance16-snorm gl::luminance16-snorm)
  (define-constant gl::luminance16-alpha16-snorm 36890)
  (define gl::luminance16-alpha16-snorm gl::luminance16-alpha16-snorm)
  (define-constant gl::intensity16-snorm 36891)
  (define gl::intensity16-snorm gl::intensity16-snorm)
  (define-constant gl::texture-range-length-apple 34231)
  (define gl::texture-range-length-apple gl::texture-range-length-apple)
  (define-constant gl::texture-range-pointer-apple 34232)
  (define gl::texture-range-pointer-apple gl::texture-range-pointer-apple)
  (define-constant gl::texture-storage-hint-apple 34236)
  (define gl::texture-storage-hint-apple gl::texture-storage-hint-apple)
  (define-constant gl::storage-private-apple 34237)
  (define gl::storage-private-apple gl::storage-private-apple)
  (define-constant gl::half-apple 5131)
  (define gl::half-apple gl::half-apple)
  (define-constant gl::rgba-float32-apple 34836)
  (define gl::rgba-float32-apple gl::rgba-float32-apple)
  (define-constant gl::rgb-float32-apple 34837)
  (define gl::rgb-float32-apple gl::rgb-float32-apple)
  (define-constant gl::alpha-float32-apple 34838)
  (define gl::alpha-float32-apple gl::alpha-float32-apple)
  (define-constant gl::intensity-float32-apple 34839)
  (define gl::intensity-float32-apple gl::intensity-float32-apple)
  (define-constant gl::luminance-float32-apple 34840)
  (define gl::luminance-float32-apple gl::luminance-float32-apple)
  (define-constant gl::luminance-alpha-float32-apple 34841)
  (define gl::luminance-alpha-float32-apple gl::luminance-alpha-float32-apple)
  (define-constant gl::rgba-float16-apple 34842)
  (define gl::rgba-float16-apple gl::rgba-float16-apple)
  (define-constant gl::rgb-float16-apple 34843)
  (define gl::rgb-float16-apple gl::rgb-float16-apple)
  (define-constant gl::alpha-float16-apple 34844)
  (define gl::alpha-float16-apple gl::alpha-float16-apple)
  (define-constant gl::intensity-float16-apple 34845)
  (define gl::intensity-float16-apple gl::intensity-float16-apple)
  (define-constant gl::luminance-float16-apple 34846)
  (define gl::luminance-float16-apple gl::luminance-float16-apple)
  (define-constant gl::luminance-alpha-float16-apple 34847)
  (define gl::luminance-alpha-float16-apple gl::luminance-alpha-float16-apple)
  (define-constant gl::color-float-apple 35343)
  (define gl::color-float-apple gl::color-float-apple)
  (define-constant gl::vertex-attrib-map1-apple 35328)
  (define gl::vertex-attrib-map1-apple gl::vertex-attrib-map1-apple)
  (define-constant gl::vertex-attrib-map2-apple 35329)
  (define gl::vertex-attrib-map2-apple gl::vertex-attrib-map2-apple)
  (define-constant gl::vertex-attrib-map1-size-apple 35330)
  (define gl::vertex-attrib-map1-size-apple gl::vertex-attrib-map1-size-apple)
  (define-constant gl::vertex-attrib-map1-coeff-apple 35331)
  (define gl::vertex-attrib-map1-coeff-apple
    gl::vertex-attrib-map1-coeff-apple)
  (define-constant gl::vertex-attrib-map1-order-apple 35332)
  (define gl::vertex-attrib-map1-order-apple
    gl::vertex-attrib-map1-order-apple)
  (define-constant gl::vertex-attrib-map1-domain-apple 35333)
  (define gl::vertex-attrib-map1-domain-apple
    gl::vertex-attrib-map1-domain-apple)
  (define-constant gl::vertex-attrib-map2-size-apple 35334)
  (define gl::vertex-attrib-map2-size-apple gl::vertex-attrib-map2-size-apple)
  (define-constant gl::vertex-attrib-map2-coeff-apple 35335)
  (define gl::vertex-attrib-map2-coeff-apple
    gl::vertex-attrib-map2-coeff-apple)
  (define-constant gl::vertex-attrib-map2-order-apple 35336)
  (define gl::vertex-attrib-map2-order-apple
    gl::vertex-attrib-map2-order-apple)
  (define-constant gl::vertex-attrib-map2-domain-apple 35337)
  (define gl::vertex-attrib-map2-domain-apple
    gl::vertex-attrib-map2-domain-apple)
  (define-constant gl::aux-depth-stencil-apple 35348)
  (define gl::aux-depth-stencil-apple gl::aux-depth-stencil-apple)
  (define-constant gl::buffer-object-apple 34227)
  (define gl::buffer-object-apple gl::buffer-object-apple)
  (define-constant gl::released-apple 35353)
  (define gl::released-apple gl::released-apple)
  (define-constant gl::volatile-apple 35354)
  (define gl::volatile-apple gl::volatile-apple)
  (define-constant gl::retained-apple 35355)
  (define gl::retained-apple gl::retained-apple)
  (define-constant gl::undefined-apple 35356)
  (define gl::undefined-apple gl::undefined-apple)
  (define-constant gl::purgeable-apple 35357)
  (define gl::purgeable-apple gl::purgeable-apple)
  (define-constant gl::pack-row-bytes-apple 35349)
  (define gl::pack-row-bytes-apple gl::pack-row-bytes-apple)
  (define-constant gl::unpack-row-bytes-apple 35350)
  (define gl::unpack-row-bytes-apple gl::unpack-row-bytes-apple)
  (define-constant gl::rgb-422-apple 35359)
  (define gl::rgb-422-apple gl::rgb-422-apple)
  (define-constant gl::video-buffer-nv 36896)
  (define gl::video-buffer-nv gl::video-buffer-nv)
  (define-constant gl::video-buffer-binding-nv 36897)
  (define gl::video-buffer-binding-nv gl::video-buffer-binding-nv)
  (define-constant gl::field-upper-nv 36898)
  (define gl::field-upper-nv gl::field-upper-nv)
  (define-constant gl::field-lower-nv 36899)
  (define gl::field-lower-nv gl::field-lower-nv)
  (define-constant gl::num-video-capture-streams-nv 36900)
  (define gl::num-video-capture-streams-nv gl::num-video-capture-streams-nv)
  (define-constant gl::next-video-capture-buffer-status-nv 36901)
  (define gl::next-video-capture-buffer-status-nv
    gl::next-video-capture-buffer-status-nv)
  (define-constant gl::video-capture-to-422-supported-nv 36902)
  (define gl::video-capture-to-422-supported-nv
    gl::video-capture-to-422-supported-nv)
  (define-constant gl::last-video-capture-status-nv 36903)
  (define gl::last-video-capture-status-nv gl::last-video-capture-status-nv)
  (define-constant gl::video-buffer-pitch-nv 36904)
  (define gl::video-buffer-pitch-nv gl::video-buffer-pitch-nv)
  (define-constant gl::video-color-conversion-matrix-nv 36905)
  (define gl::video-color-conversion-matrix-nv
    gl::video-color-conversion-matrix-nv)
  (define-constant gl::video-color-conversion-max-nv 36906)
  (define gl::video-color-conversion-max-nv gl::video-color-conversion-max-nv)
  (define-constant gl::video-color-conversion-min-nv 36907)
  (define gl::video-color-conversion-min-nv gl::video-color-conversion-min-nv)
  (define-constant gl::video-color-conversion-offset-nv 36908)
  (define gl::video-color-conversion-offset-nv
    gl::video-color-conversion-offset-nv)
  (define-constant gl::video-buffer-internal-format-nv 36909)
  (define gl::video-buffer-internal-format-nv
    gl::video-buffer-internal-format-nv)
  (define-constant gl::partial-success-nv 36910)
  (define gl::partial-success-nv gl::partial-success-nv)
  (define-constant gl::success-nv 36911)
  (define gl::success-nv gl::success-nv)
  (define-constant gl::failure-nv 36912)
  (define gl::failure-nv gl::failure-nv)
  (define-constant gl::ycbycr8-422-nv 36913)
  (define gl::ycbycr8-422-nv gl::ycbycr8-422-nv)
  (define-constant gl::ycbaycr8a-4224-nv 36914)
  (define gl::ycbaycr8a-4224-nv gl::ycbaycr8a-4224-nv)
  (define-constant gl::z6y10z6cb10z6y10z6cr10-422-nv 36915)
  (define gl::z6y10z6cb10z6y10z6cr10-422-nv gl::z6y10z6cb10z6y10z6cr10-422-nv)
  (define-constant gl::z6y10z6cb10z6a10z6y10z6cr10z6a10-4224-nv 36916)
  (define gl::z6y10z6cb10z6a10z6y10z6cr10z6a10-4224-nv
    gl::z6y10z6cb10z6a10z6y10z6cr10z6a10-4224-nv)
  (define-constant gl::z4y12z4cb12z4y12z4cr12-422-nv 36917)
  (define gl::z4y12z4cb12z4y12z4cr12-422-nv gl::z4y12z4cb12z4y12z4cr12-422-nv)
  (define-constant gl::z4y12z4cb12z4a12z4y12z4cr12z4a12-4224-nv 36918)
  (define gl::z4y12z4cb12z4a12z4y12z4cr12z4a12-4224-nv
    gl::z4y12z4cb12z4a12z4y12z4cr12z4a12-4224-nv)
  (define-constant gl::z4y12z4cb12z4cr12-444-nv 36919)
  (define gl::z4y12z4cb12z4cr12-444-nv gl::z4y12z4cb12z4cr12-444-nv)
  (define-constant gl::video-capture-frame-width-nv 36920)
  (define gl::video-capture-frame-width-nv gl::video-capture-frame-width-nv)
  (define-constant gl::video-capture-frame-height-nv 36921)
  (define gl::video-capture-frame-height-nv gl::video-capture-frame-height-nv)
  (define-constant gl::video-capture-field-upper-height-nv 36922)
  (define gl::video-capture-field-upper-height-nv
    gl::video-capture-field-upper-height-nv)
  (define-constant gl::video-capture-field-lower-height-nv 36923)
  (define gl::video-capture-field-lower-height-nv
    gl::video-capture-field-lower-height-nv)
  (define-constant gl::video-capture-surface-origin-nv 36924)
  (define gl::video-capture-surface-origin-nv
    gl::video-capture-surface-origin-nv)
  (define-constant gl::active-program-ext 35725)
  (define gl::active-program-ext gl::active-program-ext)
  (define-constant gl::buffer-gpu-address-nv 36637)
  (define gl::buffer-gpu-address-nv gl::buffer-gpu-address-nv)
  (define-constant gl::gpu-address-nv 36660)
  (define gl::gpu-address-nv gl::gpu-address-nv)
  (define-constant gl::max-shader-buffer-address-nv 36661)
  (define gl::max-shader-buffer-address-nv gl::max-shader-buffer-address-nv)
  (define-constant gl::vertex-attrib-array-unified-nv 36638)
  (define gl::vertex-attrib-array-unified-nv
    gl::vertex-attrib-array-unified-nv)
  (define-constant gl::element-array-unified-nv 36639)
  (define gl::element-array-unified-nv gl::element-array-unified-nv)
  (define-constant gl::vertex-attrib-array-address-nv 36640)
  (define gl::vertex-attrib-array-address-nv
    gl::vertex-attrib-array-address-nv)
  (define-constant gl::vertex-array-address-nv 36641)
  (define gl::vertex-array-address-nv gl::vertex-array-address-nv)
  (define-constant gl::normal-array-address-nv 36642)
  (define gl::normal-array-address-nv gl::normal-array-address-nv)
  (define-constant gl::color-array-address-nv 36643)
  (define gl::color-array-address-nv gl::color-array-address-nv)
  (define-constant gl::index-array-address-nv 36644)
  (define gl::index-array-address-nv gl::index-array-address-nv)
  (define-constant gl::texture-coord-array-address-nv 36645)
  (define gl::texture-coord-array-address-nv
    gl::texture-coord-array-address-nv)
  (define-constant gl::edge-flag-array-address-nv 36646)
  (define gl::edge-flag-array-address-nv gl::edge-flag-array-address-nv)
  (define-constant gl::secondary-color-array-address-nv 36647)
  (define gl::secondary-color-array-address-nv
    gl::secondary-color-array-address-nv)
  (define-constant gl::fog-coord-array-address-nv 36648)
  (define gl::fog-coord-array-address-nv gl::fog-coord-array-address-nv)
  (define-constant gl::element-array-address-nv 36649)
  (define gl::element-array-address-nv gl::element-array-address-nv)
  (define-constant gl::vertex-attrib-array-length-nv 36650)
  (define gl::vertex-attrib-array-length-nv gl::vertex-attrib-array-length-nv)
  (define-constant gl::vertex-array-length-nv 36651)
  (define gl::vertex-array-length-nv gl::vertex-array-length-nv)
  (define-constant gl::normal-array-length-nv 36652)
  (define gl::normal-array-length-nv gl::normal-array-length-nv)
  (define-constant gl::color-array-length-nv 36653)
  (define gl::color-array-length-nv gl::color-array-length-nv)
  (define-constant gl::index-array-length-nv 36654)
  (define gl::index-array-length-nv gl::index-array-length-nv)
  (define-constant gl::texture-coord-array-length-nv 36655)
  (define gl::texture-coord-array-length-nv gl::texture-coord-array-length-nv)
  (define-constant gl::edge-flag-array-length-nv 36656)
  (define gl::edge-flag-array-length-nv gl::edge-flag-array-length-nv)
  (define-constant gl::secondary-color-array-length-nv 36657)
  (define gl::secondary-color-array-length-nv
    gl::secondary-color-array-length-nv)
  (define-constant gl::fog-coord-array-length-nv 36658)
  (define gl::fog-coord-array-length-nv gl::fog-coord-array-length-nv)
  (define-constant gl::element-array-length-nv 36659)
  (define gl::element-array-length-nv gl::element-array-length-nv)
  (begin
    (define gl:accum
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glAccum(a0 , a1);")))
  (begin
    (define gl:alpha-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glAlphaFunc(a0 , a1);")))
  (begin
    (define gl:are-textures-resident
      (foreign-lambda*
        unsigned-char
        ((integer a0) (u32vector a1) (u8vector a2))
        "return(glAreTexturesResident(a0 , a1 , a2));")))
  (begin
    (define gl:array-element
      (foreign-lambda* void ((integer a0)) "glArrayElement(a0);")))
  (begin
    (define gl:begin
      (foreign-lambda* void ((unsigned-integer a0)) "glBegin(a0);")))
  (begin
    (define gl:bind-texture
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glBindTexture(a0 , a1);")))
  (begin
    (define gl:bitmap
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (u8vector a6))
        "glBitmap(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:blend-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glBlendFunc(a0 , a1);")))
  (begin
    (define gl:call-list
      (foreign-lambda* void ((unsigned-integer a0)) "glCallList(a0);")))
  (begin
    (define gl:call-lists
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "glCallLists(a0 , a1 , a2);")))
  (begin
    (define gl:clear
      (foreign-lambda* void ((unsigned-integer a0)) "glClear(a0);")))
  (begin
    (define gl:clear-accum
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glClearAccum(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:clear-color
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glClearColor(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:clear-depth
      (foreign-lambda* void ((double a0)) "glClearDepth(a0);")))
  (begin
    (define gl:clear-index
      (foreign-lambda* void ((float a0)) "glClearIndex(a0);")))
  (begin
    (define gl:clear-stencil
      (foreign-lambda* void ((integer a0)) "glClearStencil(a0);")))
  (begin
    (define gl:clip-plane
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glClipPlane(a0 , a1);")))
  (begin
    (define gl:color3b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "glColor3b(a0 , a1 , a2);")))
  (begin
    (define gl:color3bv
      (foreign-lambda* void ((c-string a0)) "glColor3bv(a0);")))
  (begin
    (define gl:color3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glColor3d(a0 , a1 , a2);")))
  (begin
    (define gl:color3dv
      (foreign-lambda* void ((f64vector a0)) "glColor3dv(a0);")))
  (begin
    (define gl:color3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glColor3f(a0 , a1 , a2);")))
  (begin
    (define gl:color3fv
      (foreign-lambda* void ((f32vector a0)) "glColor3fv(a0);")))
  (begin
    (define gl:color3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glColor3i(a0 , a1 , a2);")))
  (begin
    (define gl:color3iv
      (foreign-lambda* void ((s32vector a0)) "glColor3iv(a0);")))
  (begin
    (define gl:color3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glColor3s(a0 , a1 , a2);")))
  (begin
    (define gl:color3sv
      (foreign-lambda* void ((s16vector a0)) "glColor3sv(a0);")))
  (begin
    (define gl:color3ub
      (foreign-lambda*
        void
        ((unsigned-char a0) (unsigned-char a1) (unsigned-char a2))
        "glColor3ub(a0 , a1 , a2);")))
  (begin
    (define gl:color3ubv
      (foreign-lambda* void ((u8vector a0)) "glColor3ubv(a0);")))
  (begin
    (define gl:color3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "glColor3ui(a0 , a1 , a2);")))
  (begin
    (define gl:color3uiv
      (foreign-lambda* void ((u32vector a0)) "glColor3uiv(a0);")))
  (begin
    (define gl:color3us
      (foreign-lambda*
        void
        ((unsigned-short a0) (unsigned-short a1) (unsigned-short a2))
        "glColor3us(a0 , a1 , a2);")))
  (begin
    (define gl:color3usv
      (foreign-lambda* void ((u16vector a0)) "glColor3usv(a0);")))
  (begin
    (define gl:color4b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2) (char a3))
        "glColor4b(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4bv
      (foreign-lambda* void ((c-string a0)) "glColor4bv(a0);")))
  (begin
    (define gl:color4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glColor4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4dv
      (foreign-lambda* void ((f64vector a0)) "glColor4dv(a0);")))
  (begin
    (define gl:color4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glColor4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4fv
      (foreign-lambda* void ((f32vector a0)) "glColor4fv(a0);")))
  (begin
    (define gl:color4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glColor4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4iv
      (foreign-lambda* void ((s32vector a0)) "glColor4iv(a0);")))
  (begin
    (define gl:color4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glColor4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4sv
      (foreign-lambda* void ((s16vector a0)) "glColor4sv(a0);")))
  (begin
    (define gl:color4ub
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3))
        "glColor4ub(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4ubv
      (foreign-lambda* void ((u8vector a0)) "glColor4ubv(a0);")))
  (begin
    (define gl:color4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "glColor4ui(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4uiv
      (foreign-lambda* void ((u32vector a0)) "glColor4uiv(a0);")))
  (begin
    (define gl:color4us
      (foreign-lambda*
        void
        ((unsigned-short a0)
         (unsigned-short a1)
         (unsigned-short a2)
         (unsigned-short a3))
        "glColor4us(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4usv
      (foreign-lambda* void ((u16vector a0)) "glColor4usv(a0);")))
  (begin
    (define gl:color-mask
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3))
        "glColorMask(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color-material
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glColorMaterial(a0 , a1);")))
  (begin
    (define gl:color-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glColorPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:copy-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4))
        "glCopyPixels(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:copy-tex-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "glCopyTexImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:copy-tex-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "glCopyTexImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:copy-tex-sub-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "glCopyTexSubImage1D(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:copy-tex-sub-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "glCopyTexSubImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:cull-face
      (foreign-lambda* void ((unsigned-integer a0)) "glCullFace(a0);")))
  (begin
    (define gl:delete-lists
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glDeleteLists(a0 , a1);")))
  (begin
    (define gl:delete-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glDeleteTextures(a0 , a1);")))
  (begin
    (define gl:depth-func
      (foreign-lambda* void ((unsigned-integer a0)) "glDepthFunc(a0);")))
  (begin
    (define gl:depth-mask
      (foreign-lambda* void ((unsigned-char a0)) "glDepthMask(a0);")))
  (begin
    (define gl:depth-range
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glDepthRange(a0 , a1);")))
  (begin
    (define gl:disable
      (foreign-lambda* void ((unsigned-integer a0)) "glDisable(a0);")))
  (begin
    (define gl:disable-client-state
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glDisableClientState(a0);")))
  (begin
    (define gl:draw-arrays
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "glDrawArrays(a0 , a1 , a2);")))
  (begin
    (define gl:draw-buffer
      (foreign-lambda* void ((unsigned-integer a0)) "glDrawBuffer(a0);")))
  (begin
    (define gl:draw-elements
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "glDrawElements(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:draw-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "glDrawPixels(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:edge-flag
      (foreign-lambda* void ((unsigned-char a0)) "glEdgeFlag(a0);")))
  (begin
    (define gl:edge-flag-pointer
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "glEdgeFlagPointer(a0 , a1);")))
  (begin
    (define gl:edge-flagv
      (foreign-lambda* void ((u8vector a0)) "glEdgeFlagv(a0);")))
  (begin
    (define gl:enable
      (foreign-lambda* void ((unsigned-integer a0)) "glEnable(a0);")))
  (begin
    (define gl:enable-client-state
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glEnableClientState(a0);")))
  (begin (define gl:end (foreign-lambda* void () "glEnd();")))
  (begin (define gl:end-list (foreign-lambda* void () "glEndList();")))
  (begin
    (define gl:eval-coord1d
      (foreign-lambda* void ((double a0)) "glEvalCoord1d(a0);")))
  (begin
    (define gl:eval-coord1dv
      (foreign-lambda* void ((f64vector a0)) "glEvalCoord1dv(a0);")))
  (begin
    (define gl:eval-coord1f
      (foreign-lambda* void ((float a0)) "glEvalCoord1f(a0);")))
  (begin
    (define gl:eval-coord1fv
      (foreign-lambda* void ((f32vector a0)) "glEvalCoord1fv(a0);")))
  (begin
    (define gl:eval-coord2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glEvalCoord2d(a0 , a1);")))
  (begin
    (define gl:eval-coord2dv
      (foreign-lambda* void ((f64vector a0)) "glEvalCoord2dv(a0);")))
  (begin
    (define gl:eval-coord2f
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glEvalCoord2f(a0 , a1);")))
  (begin
    (define gl:eval-coord2fv
      (foreign-lambda* void ((f32vector a0)) "glEvalCoord2fv(a0);")))
  (begin
    (define gl:eval-mesh1
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "glEvalMesh1(a0 , a1 , a2);")))
  (begin
    (define gl:eval-mesh2
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "glEvalMesh2(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:eval-point1
      (foreign-lambda* void ((integer a0)) "glEvalPoint1(a0);")))
  (begin
    (define gl:eval-point2
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glEvalPoint2(a0 , a1);")))
  (begin
    (define gl:feedback-buffer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (f32vector a2))
        "glFeedbackBuffer(a0 , a1 , a2);")))
  (begin (define gl:finish (foreign-lambda* void () "glFinish();")))
  (begin (define gl:flush (foreign-lambda* void () "glFlush();")))
  (begin
    (define gl:fogf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glFogf(a0 , a1);")))
  (begin
    (define gl:fogfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glFogfv(a0 , a1);")))
  (begin
    (define gl:fogi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glFogi(a0 , a1);")))
  (begin
    (define gl:fogiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glFogiv(a0 , a1);")))
  (begin
    (define gl:front-face
      (foreign-lambda* void ((unsigned-integer a0)) "glFrontFace(a0);")))
  (begin
    (define gl:frustum
      (foreign-lambda*
        void
        ((double a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "glFrustum(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:gen-lists
      (foreign-lambda*
        unsigned-integer
        ((integer a0))
        "return(glGenLists(a0));")))
  (begin
    (define gl:gen-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glGenTextures(a0 , a1);")))
  (begin
    (define gl:get-booleanv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "glGetBooleanv(a0 , a1);")))
  (begin
    (define gl:get-clip-plane
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glGetClipPlane(a0 , a1);")))
  (begin
    (define gl:get-doublev
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glGetDoublev(a0 , a1);")))
  (begin
    (define gl:get-error
      (foreign-lambda* unsigned-integer () "return(glGetError());")))
  (begin
    (define gl:get-floatv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glGetFloatv(a0 , a1);")))
  (begin
    (define gl:get-integerv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glGetIntegerv(a0 , a1);")))
  (begin
    (define gl:get-lightfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetLightfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-lightiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetLightiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapdv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glGetMapdv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetMapfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetMapiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-materialfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetMaterialfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-materialiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetMaterialiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-pixel-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glGetPixelMapfv(a0 , a1);")))
  (begin
    (define gl:get-pixel-mapuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "glGetPixelMapuiv(a0 , a1);")))
  (begin
    (define gl:get-pixel-mapusv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "glGetPixelMapusv(a0 , a1);")))
  (begin
    (define gl:get-pointerv
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer (c-pointer void)) a1))
        "glGetPointerv(a0 , a1);")))
  (begin
    (define gl:get-polygon-stipple
      (foreign-lambda* void ((u8vector a0)) "glGetPolygonStipple(a0);")))
  (begin
    (define gl:get-string
      (foreign-lambda*
        (c-pointer (const unsigned-char))
        ((unsigned-integer a0))
        "return(glGetString(a0));")))
  (begin
    (define gl:get-tex-envfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexEnvfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-enviv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexEnviv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-gendv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glGetTexGendv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-genfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexGenfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-geniv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexGeniv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-image
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "glGetTexImage(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:get-tex-level-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "glGetTexLevelParameterfv(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:get-tex-level-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "glGetTexLevelParameteriv(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:get-tex-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexParameterfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexParameteriv(a0 , a1 , a2);")))
  (begin
    (define gl:hint
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glHint(a0 , a1);")))
  (begin
    (define gl:index-mask
      (foreign-lambda* void ((unsigned-integer a0)) "glIndexMask(a0);")))
  (begin
    (define gl:index-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glIndexPointer(a0 , a1 , a2);")))
  (begin
    (define gl:indexd (foreign-lambda* void ((double a0)) "glIndexd(a0);")))
  (begin
    (define gl:indexdv
      (foreign-lambda* void ((f64vector a0)) "glIndexdv(a0);")))
  (begin
    (define gl:indexf (foreign-lambda* void ((float a0)) "glIndexf(a0);")))
  (begin
    (define gl:indexfv
      (foreign-lambda* void ((f32vector a0)) "glIndexfv(a0);")))
  (begin
    (define gl:indexi (foreign-lambda* void ((integer a0)) "glIndexi(a0);")))
  (begin
    (define gl:indexiv
      (foreign-lambda* void ((s32vector a0)) "glIndexiv(a0);")))
  (begin
    (define gl:indexs (foreign-lambda* void ((short a0)) "glIndexs(a0);")))
  (begin
    (define gl:indexsv
      (foreign-lambda* void ((s16vector a0)) "glIndexsv(a0);")))
  (begin
    (define gl:indexub
      (foreign-lambda* void ((unsigned-char a0)) "glIndexub(a0);")))
  (begin
    (define gl:indexubv
      (foreign-lambda* void ((u8vector a0)) "glIndexubv(a0);")))
  (begin (define gl:init-names (foreign-lambda* void () "glInitNames();")))
  (begin
    (define gl:interleaved-arrays
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glInterleavedArrays(a0 , a1 , a2);")))
  (begin
    (define gl:is-enabled
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsEnabled(a0));")))
  (begin
    (define gl:is-list
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsList(a0));")))
  (begin
    (define gl:is-texture
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsTexture(a0));")))
  (begin
    (define gl:light-modelf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glLightModelf(a0 , a1);")))
  (begin
    (define gl:light-modelfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glLightModelfv(a0 , a1);")))
  (begin
    (define gl:light-modeli
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glLightModeli(a0 , a1);")))
  (begin
    (define gl:light-modeliv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glLightModeliv(a0 , a1);")))
  (begin
    (define gl:lightf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glLightf(a0 , a1 , a2);")))
  (begin
    (define gl:lightfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glLightfv(a0 , a1 , a2);")))
  (begin
    (define gl:lighti
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glLighti(a0 , a1 , a2);")))
  (begin
    (define gl:lightiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glLightiv(a0 , a1 , a2);")))
  (begin
    (define gl:line-stipple
      (foreign-lambda*
        void
        ((integer a0) (unsigned-short a1))
        "glLineStipple(a0 , a1);")))
  (begin
    (define gl:line-width
      (foreign-lambda* void ((float a0)) "glLineWidth(a0);")))
  (begin
    (define gl:list-base
      (foreign-lambda* void ((unsigned-integer a0)) "glListBase(a0);")))
  (begin
    (define gl:load-identity (foreign-lambda* void () "glLoadIdentity();")))
  (begin
    (define gl:load-matrixd
      (foreign-lambda* void ((f64vector a0)) "glLoadMatrixd(a0);")))
  (begin
    (define gl:load-matrixf
      (foreign-lambda* void ((f32vector a0)) "glLoadMatrixf(a0);")))
  (begin
    (define gl:load-name
      (foreign-lambda* void ((unsigned-integer a0)) "glLoadName(a0);")))
  (begin
    (define gl:logic-op
      (foreign-lambda* void ((unsigned-integer a0)) "glLogicOp(a0);")))
  (begin
    (define gl:map1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (f64vector a5))
        "glMap1d(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map1f
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (integer a3)
         (integer a4)
         (f32vector a5))
        "glMap1f(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (double a5)
         (double a6)
         (integer a7)
         (integer a8)
         (f64vector a9))
        "glMap2d(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl:map2f
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (integer a3)
         (integer a4)
         (float a5)
         (float a6)
         (integer a7)
         (integer a8)
         (f32vector a9))
        "glMap2f(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl:map-grid1d
      (foreign-lambda*
        void
        ((integer a0) (double a1) (double a2))
        "glMapGrid1d(a0 , a1 , a2);")))
  (begin
    (define gl:map-grid1f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2))
        "glMapGrid1f(a0 , a1 , a2);")))
  (begin
    (define gl:map-grid2d
      (foreign-lambda*
        void
        ((integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (double a4)
         (double a5))
        "glMapGrid2d(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map-grid2f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (integer a3) (float a4) (float a5))
        "glMapGrid2f(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:materialf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glMaterialf(a0 , a1 , a2);")))
  (begin
    (define gl:materialfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glMaterialfv(a0 , a1 , a2);")))
  (begin
    (define gl:materiali
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glMateriali(a0 , a1 , a2);")))
  (begin
    (define gl:materialiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glMaterialiv(a0 , a1 , a2);")))
  (begin
    (define gl:matrix-mode
      (foreign-lambda* void ((unsigned-integer a0)) "glMatrixMode(a0);")))
  (begin
    (define gl:mult-matrixd
      (foreign-lambda* void ((f64vector a0)) "glMultMatrixd(a0);")))
  (begin
    (define gl:mult-matrixf
      (foreign-lambda* void ((f32vector a0)) "glMultMatrixf(a0);")))
  (begin
    (define gl:new-list
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glNewList(a0 , a1);")))
  (begin
    (define gl:normal3b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "glNormal3b(a0 , a1 , a2);")))
  (begin
    (define gl:normal3bv
      (foreign-lambda* void ((c-string a0)) "glNormal3bv(a0);")))
  (begin
    (define gl:normal3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glNormal3d(a0 , a1 , a2);")))
  (begin
    (define gl:normal3dv
      (foreign-lambda* void ((f64vector a0)) "glNormal3dv(a0);")))
  (begin
    (define gl:normal3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glNormal3f(a0 , a1 , a2);")))
  (begin
    (define gl:normal3fv
      (foreign-lambda* void ((f32vector a0)) "glNormal3fv(a0);")))
  (begin
    (define gl:normal3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glNormal3i(a0 , a1 , a2);")))
  (begin
    (define gl:normal3iv
      (foreign-lambda* void ((s32vector a0)) "glNormal3iv(a0);")))
  (begin
    (define gl:normal3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glNormal3s(a0 , a1 , a2);")))
  (begin
    (define gl:normal3sv
      (foreign-lambda* void ((s16vector a0)) "glNormal3sv(a0);")))
  (begin
    (define gl:normal-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glNormalPointer(a0 , a1 , a2);")))
  (begin
    (define gl:ortho
      (foreign-lambda*
        void
        ((double a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "glOrtho(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:pass-through
      (foreign-lambda* void ((float a0)) "glPassThrough(a0);")))
  (begin
    (define gl:pixel-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "glPixelMapfv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-mapuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "glPixelMapuiv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-mapusv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u16vector a2))
        "glPixelMapusv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-storef
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glPixelStoref(a0 , a1);")))
  (begin
    (define gl:pixel-storei
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glPixelStorei(a0 , a1);")))
  (begin
    (define gl:pixel-transferf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glPixelTransferf(a0 , a1);")))
  (begin
    (define gl:pixel-transferi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glPixelTransferi(a0 , a1);")))
  (begin
    (define gl:pixel-zoom
      (foreign-lambda* void ((float a0) (float a1)) "glPixelZoom(a0 , a1);")))
  (begin
    (define gl:point-size
      (foreign-lambda* void ((float a0)) "glPointSize(a0);")))
  (begin
    (define gl:polygon-mode
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glPolygonMode(a0 , a1);")))
  (begin
    (define gl:polygon-offset
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glPolygonOffset(a0 , a1);")))
  (begin
    (define gl:polygon-stipple
      (foreign-lambda* void ((u8vector a0)) "glPolygonStipple(a0);")))
  (begin (define gl:pop-attrib (foreign-lambda* void () "glPopAttrib();")))
  (begin
    (define gl:pop-client-attrib
      (foreign-lambda* void () "glPopClientAttrib();")))
  (begin (define gl:pop-matrix (foreign-lambda* void () "glPopMatrix();")))
  (begin (define gl:pop-name (foreign-lambda* void () "glPopName();")))
  (begin
    (define gl:prioritize-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1) (f32vector a2))
        "glPrioritizeTextures(a0 , a1 , a2);")))
  (begin
    (define gl:push-attrib
      (foreign-lambda* void ((unsigned-integer a0)) "glPushAttrib(a0);")))
  (begin
    (define gl:push-client-attrib
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glPushClientAttrib(a0);")))
  (begin (define gl:push-matrix (foreign-lambda* void () "glPushMatrix();")))
  (begin
    (define gl:push-name
      (foreign-lambda* void ((unsigned-integer a0)) "glPushName(a0);")))
  (begin
    (define gl:raster-pos2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glRasterPos2d(a0 , a1);")))
  (begin
    (define gl:raster-pos2dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos2dv(a0);")))
  (begin
    (define gl:raster-pos2f
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glRasterPos2f(a0 , a1);")))
  (begin
    (define gl:raster-pos2fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos2fv(a0);")))
  (begin
    (define gl:raster-pos2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glRasterPos2i(a0 , a1);")))
  (begin
    (define gl:raster-pos2iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos2iv(a0);")))
  (begin
    (define gl:raster-pos2s
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "glRasterPos2s(a0 , a1);")))
  (begin
    (define gl:raster-pos2sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos2sv(a0);")))
  (begin
    (define gl:raster-pos3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glRasterPos3d(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos3dv(a0);")))
  (begin
    (define gl:raster-pos3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glRasterPos3f(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos3fv(a0);")))
  (begin
    (define gl:raster-pos3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glRasterPos3i(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos3iv(a0);")))
  (begin
    (define gl:raster-pos3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glRasterPos3s(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos3sv(a0);")))
  (begin
    (define gl:raster-pos4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRasterPos4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos4dv(a0);")))
  (begin
    (define gl:raster-pos4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRasterPos4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos4fv(a0);")))
  (begin
    (define gl:raster-pos4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glRasterPos4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos4iv(a0);")))
  (begin
    (define gl:raster-pos4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glRasterPos4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos4sv(a0);")))
  (begin
    (define gl:read-buffer
      (foreign-lambda* void ((unsigned-integer a0)) "glReadBuffer(a0);")))
  (begin
    (define gl:read-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "glReadPixels(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:rectd
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRectd(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectdv
      (foreign-lambda*
        void
        ((f64vector a0) (f64vector a1))
        "glRectdv(a0 , a1);")))
  (begin
    (define gl:rectf
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRectf(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectfv
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "glRectfv(a0 , a1);")))
  (begin
    (define gl:recti
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glRecti(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectiv
      (foreign-lambda*
        void
        ((s32vector a0) (s32vector a1))
        "glRectiv(a0 , a1);")))
  (begin
    (define gl:rects
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glRects(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectsv
      (foreign-lambda*
        void
        ((s16vector a0) (s16vector a1))
        "glRectsv(a0 , a1);")))
  (begin
    (define gl:render-mode
      (foreign-lambda*
        integer
        ((unsigned-integer a0))
        "return(glRenderMode(a0));")))
  (begin
    (define gl:rotated
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRotated(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rotatef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRotatef(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:scaled
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glScaled(a0 , a1 , a2);")))
  (begin
    (define gl:scalef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glScalef(a0 , a1 , a2);")))
  (begin
    (define gl:scissor
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glScissor(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:select-buffer
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glSelectBuffer(a0 , a1);")))
  (begin
    (define gl:shade-model
      (foreign-lambda* void ((unsigned-integer a0)) "glShadeModel(a0);")))
  (begin
    (define gl:stencil-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer a2))
        "glStencilFunc(a0 , a1 , a2);")))
  (begin
    (define gl:stencil-mask
      (foreign-lambda* void ((unsigned-integer a0)) "glStencilMask(a0);")))
  (begin
    (define gl:stencil-op
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "glStencilOp(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord1d
      (foreign-lambda* void ((double a0)) "glTexCoord1d(a0);")))
  (begin
    (define gl:tex-coord1dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord1dv(a0);")))
  (begin
    (define gl:tex-coord1f
      (foreign-lambda* void ((float a0)) "glTexCoord1f(a0);")))
  (begin
    (define gl:tex-coord1fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord1fv(a0);")))
  (begin
    (define gl:tex-coord1i
      (foreign-lambda* void ((integer a0)) "glTexCoord1i(a0);")))
  (begin
    (define gl:tex-coord1iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord1iv(a0);")))
  (begin
    (define gl:tex-coord1s
      (foreign-lambda* void ((short a0)) "glTexCoord1s(a0);")))
  (begin
    (define gl:tex-coord1sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord1sv(a0);")))
  (begin
    (define gl:tex-coord2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glTexCoord2d(a0 , a1);")))
  (begin
    (define gl:tex-coord2dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord2dv(a0);")))
  (begin
    (define gl:tex-coord2f
      (foreign-lambda* void ((float a0) (float a1)) "glTexCoord2f(a0 , a1);")))
  (begin
    (define gl:tex-coord2fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord2fv(a0);")))
  (begin
    (define gl:tex-coord2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glTexCoord2i(a0 , a1);")))
  (begin
    (define gl:tex-coord2iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord2iv(a0);")))
  (begin
    (define gl:tex-coord2s
      (foreign-lambda* void ((short a0) (short a1)) "glTexCoord2s(a0 , a1);")))
  (begin
    (define gl:tex-coord2sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord2sv(a0);")))
  (begin
    (define gl:tex-coord3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glTexCoord3d(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord3dv(a0);")))
  (begin
    (define gl:tex-coord3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glTexCoord3f(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord3fv(a0);")))
  (begin
    (define gl:tex-coord3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glTexCoord3i(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord3iv(a0);")))
  (begin
    (define gl:tex-coord3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glTexCoord3s(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord3sv(a0);")))
  (begin
    (define gl:tex-coord4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glTexCoord4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord4dv(a0);")))
  (begin
    (define gl:tex-coord4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glTexCoord4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord4fv(a0);")))
  (begin
    (define gl:tex-coord4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glTexCoord4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord4iv(a0);")))
  (begin
    (define gl:tex-coord4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glTexCoord4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord4sv(a0);")))
  (begin
    (define gl:tex-coord-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glTexCoordPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-envf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexEnvf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-envfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexEnvfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-envi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexEnvi(a0 , a1 , a2);")))
  (begin
    (define gl:tex-enviv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexEnviv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-gend
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (double a2))
        "glTexGend(a0 , a1 , a2);")))
  (begin
    (define gl:tex-gendv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glTexGendv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-genf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexGenf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-genfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexGenfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-geni
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexGeni(a0 , a1 , a2);")))
  (begin
    (define gl:tex-geniv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexGeniv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         ((c-pointer void) a7))
        "glTexImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:tex-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "glTexImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl:tex-parameterf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexParameterf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexParameterfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexParameteri(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexParameteriv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-sub-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "glTexSubImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:tex-sub-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "glTexSubImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl:translated
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glTranslated(a0 , a1 , a2);")))
  (begin
    (define gl:translatef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glTranslatef(a0 , a1 , a2);")))
  (begin
    (define gl:vertex2d
      (foreign-lambda* void ((double a0) (double a1)) "glVertex2d(a0 , a1);")))
  (begin
    (define gl:vertex2dv
      (foreign-lambda* void ((f64vector a0)) "glVertex2dv(a0);")))
  (begin
    (define gl:vertex2f
      (foreign-lambda* void ((float a0) (float a1)) "glVertex2f(a0 , a1);")))
  (begin
    (define gl:vertex2fv
      (foreign-lambda* void ((f32vector a0)) "glVertex2fv(a0);")))
  (begin
    (define gl:vertex2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glVertex2i(a0 , a1);")))
  (begin
    (define gl:vertex2iv
      (foreign-lambda* void ((s32vector a0)) "glVertex2iv(a0);")))
  (begin
    (define gl:vertex2s
      (foreign-lambda* void ((short a0) (short a1)) "glVertex2s(a0 , a1);")))
  (begin
    (define gl:vertex2sv
      (foreign-lambda* void ((s16vector a0)) "glVertex2sv(a0);")))
  (begin
    (define gl:vertex3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glVertex3d(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3dv
      (foreign-lambda* void ((f64vector a0)) "glVertex3dv(a0);")))
  (begin
    (define gl:vertex3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glVertex3f(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3fv
      (foreign-lambda* void ((f32vector a0)) "glVertex3fv(a0);")))
  (begin
    (define gl:vertex3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glVertex3i(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3iv
      (foreign-lambda* void ((s32vector a0)) "glVertex3iv(a0);")))
  (begin
    (define gl:vertex3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glVertex3s(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3sv
      (foreign-lambda* void ((s16vector a0)) "glVertex3sv(a0);")))
  (begin
    (define gl:vertex4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glVertex4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4dv
      (foreign-lambda* void ((f64vector a0)) "glVertex4dv(a0);")))
  (begin
    (define gl:vertex4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glVertex4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4fv
      (foreign-lambda* void ((f32vector a0)) "glVertex4fv(a0);")))
  (begin
    (define gl:vertex4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glVertex4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4iv
      (foreign-lambda* void ((s32vector a0)) "glVertex4iv(a0);")))
  (begin
    (define gl:vertex4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glVertex4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4sv
      (foreign-lambda* void ((s16vector a0)) "glVertex4sv(a0);")))
  (begin
    (define gl:vertex-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glVertexPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:viewport
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glViewport(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:accum
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glAccum(a0 , a1);")))
  (begin
    (define gl:alpha-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glAlphaFunc(a0 , a1);")))
  (begin
    (define gl:are-textures-resident
      (foreign-lambda*
        unsigned-char
        ((integer a0) (u32vector a1) (u8vector a2))
        "return(glAreTexturesResident(a0 , a1 , a2));")))
  (begin
    (define gl:array-element
      (foreign-lambda* void ((integer a0)) "glArrayElement(a0);")))
  (begin
    (define gl:begin
      (foreign-lambda* void ((unsigned-integer a0)) "glBegin(a0);")))
  (begin
    (define gl:bind-texture
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glBindTexture(a0 , a1);")))
  (begin
    (define gl:bitmap
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (u8vector a6))
        "glBitmap(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:blend-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glBlendFunc(a0 , a1);")))
  (begin
    (define gl:call-list
      (foreign-lambda* void ((unsigned-integer a0)) "glCallList(a0);")))
  (begin
    (define gl:call-lists
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "glCallLists(a0 , a1 , a2);")))
  (begin
    (define gl:clear
      (foreign-lambda* void ((unsigned-integer a0)) "glClear(a0);")))
  (begin
    (define gl:clear-accum
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glClearAccum(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:clear-color
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glClearColor(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:clear-depth
      (foreign-lambda* void ((double a0)) "glClearDepth(a0);")))
  (begin
    (define gl:clear-index
      (foreign-lambda* void ((float a0)) "glClearIndex(a0);")))
  (begin
    (define gl:clear-stencil
      (foreign-lambda* void ((integer a0)) "glClearStencil(a0);")))
  (begin
    (define gl:clip-plane
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glClipPlane(a0 , a1);")))
  (begin
    (define gl:color3b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "glColor3b(a0 , a1 , a2);")))
  (begin
    (define gl:color3bv
      (foreign-lambda* void ((c-string a0)) "glColor3bv(a0);")))
  (begin
    (define gl:color3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glColor3d(a0 , a1 , a2);")))
  (begin
    (define gl:color3dv
      (foreign-lambda* void ((f64vector a0)) "glColor3dv(a0);")))
  (begin
    (define gl:color3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glColor3f(a0 , a1 , a2);")))
  (begin
    (define gl:color3fv
      (foreign-lambda* void ((f32vector a0)) "glColor3fv(a0);")))
  (begin
    (define gl:color3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glColor3i(a0 , a1 , a2);")))
  (begin
    (define gl:color3iv
      (foreign-lambda* void ((s32vector a0)) "glColor3iv(a0);")))
  (begin
    (define gl:color3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glColor3s(a0 , a1 , a2);")))
  (begin
    (define gl:color3sv
      (foreign-lambda* void ((s16vector a0)) "glColor3sv(a0);")))
  (begin
    (define gl:color3ub
      (foreign-lambda*
        void
        ((unsigned-char a0) (unsigned-char a1) (unsigned-char a2))
        "glColor3ub(a0 , a1 , a2);")))
  (begin
    (define gl:color3ubv
      (foreign-lambda* void ((u8vector a0)) "glColor3ubv(a0);")))
  (begin
    (define gl:color3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "glColor3ui(a0 , a1 , a2);")))
  (begin
    (define gl:color3uiv
      (foreign-lambda* void ((u32vector a0)) "glColor3uiv(a0);")))
  (begin
    (define gl:color3us
      (foreign-lambda*
        void
        ((unsigned-short a0) (unsigned-short a1) (unsigned-short a2))
        "glColor3us(a0 , a1 , a2);")))
  (begin
    (define gl:color3usv
      (foreign-lambda* void ((u16vector a0)) "glColor3usv(a0);")))
  (begin
    (define gl:color4b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2) (char a3))
        "glColor4b(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4bv
      (foreign-lambda* void ((c-string a0)) "glColor4bv(a0);")))
  (begin
    (define gl:color4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glColor4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4dv
      (foreign-lambda* void ((f64vector a0)) "glColor4dv(a0);")))
  (begin
    (define gl:color4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glColor4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4fv
      (foreign-lambda* void ((f32vector a0)) "glColor4fv(a0);")))
  (begin
    (define gl:color4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glColor4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4iv
      (foreign-lambda* void ((s32vector a0)) "glColor4iv(a0);")))
  (begin
    (define gl:color4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glColor4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4sv
      (foreign-lambda* void ((s16vector a0)) "glColor4sv(a0);")))
  (begin
    (define gl:color4ub
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3))
        "glColor4ub(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4ubv
      (foreign-lambda* void ((u8vector a0)) "glColor4ubv(a0);")))
  (begin
    (define gl:color4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "glColor4ui(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4uiv
      (foreign-lambda* void ((u32vector a0)) "glColor4uiv(a0);")))
  (begin
    (define gl:color4us
      (foreign-lambda*
        void
        ((unsigned-short a0)
         (unsigned-short a1)
         (unsigned-short a2)
         (unsigned-short a3))
        "glColor4us(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color4usv
      (foreign-lambda* void ((u16vector a0)) "glColor4usv(a0);")))
  (begin
    (define gl:color-mask
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3))
        "glColorMask(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:color-material
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glColorMaterial(a0 , a1);")))
  (begin
    (define gl:color-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glColorPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:copy-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4))
        "glCopyPixels(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:copy-tex-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "glCopyTexImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:copy-tex-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "glCopyTexImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:copy-tex-sub-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "glCopyTexSubImage1D(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:copy-tex-sub-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "glCopyTexSubImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:cull-face
      (foreign-lambda* void ((unsigned-integer a0)) "glCullFace(a0);")))
  (begin
    (define gl:delete-lists
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glDeleteLists(a0 , a1);")))
  (begin
    (define gl:delete-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glDeleteTextures(a0 , a1);")))
  (begin
    (define gl:depth-func
      (foreign-lambda* void ((unsigned-integer a0)) "glDepthFunc(a0);")))
  (begin
    (define gl:depth-mask
      (foreign-lambda* void ((unsigned-char a0)) "glDepthMask(a0);")))
  (begin
    (define gl:depth-range
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glDepthRange(a0 , a1);")))
  (begin
    (define gl:disable
      (foreign-lambda* void ((unsigned-integer a0)) "glDisable(a0);")))
  (begin
    (define gl:disable-client-state
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glDisableClientState(a0);")))
  (begin
    (define gl:draw-arrays
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "glDrawArrays(a0 , a1 , a2);")))
  (begin
    (define gl:draw-buffer
      (foreign-lambda* void ((unsigned-integer a0)) "glDrawBuffer(a0);")))
  (begin
    (define gl:draw-elements
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "glDrawElements(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:draw-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "glDrawPixels(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:edge-flag
      (foreign-lambda* void ((unsigned-char a0)) "glEdgeFlag(a0);")))
  (begin
    (define gl:edge-flag-pointer
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "glEdgeFlagPointer(a0 , a1);")))
  (begin
    (define gl:edge-flagv
      (foreign-lambda* void ((u8vector a0)) "glEdgeFlagv(a0);")))
  (begin
    (define gl:enable
      (foreign-lambda* void ((unsigned-integer a0)) "glEnable(a0);")))
  (begin
    (define gl:enable-client-state
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glEnableClientState(a0);")))
  (begin (define gl:end (foreign-lambda* void () "glEnd();")))
  (begin (define gl:end-list (foreign-lambda* void () "glEndList();")))
  (begin
    (define gl:eval-coord1d
      (foreign-lambda* void ((double a0)) "glEvalCoord1d(a0);")))
  (begin
    (define gl:eval-coord1dv
      (foreign-lambda* void ((f64vector a0)) "glEvalCoord1dv(a0);")))
  (begin
    (define gl:eval-coord1f
      (foreign-lambda* void ((float a0)) "glEvalCoord1f(a0);")))
  (begin
    (define gl:eval-coord1fv
      (foreign-lambda* void ((f32vector a0)) "glEvalCoord1fv(a0);")))
  (begin
    (define gl:eval-coord2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glEvalCoord2d(a0 , a1);")))
  (begin
    (define gl:eval-coord2dv
      (foreign-lambda* void ((f64vector a0)) "glEvalCoord2dv(a0);")))
  (begin
    (define gl:eval-coord2f
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glEvalCoord2f(a0 , a1);")))
  (begin
    (define gl:eval-coord2fv
      (foreign-lambda* void ((f32vector a0)) "glEvalCoord2fv(a0);")))
  (begin
    (define gl:eval-mesh1
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "glEvalMesh1(a0 , a1 , a2);")))
  (begin
    (define gl:eval-mesh2
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "glEvalMesh2(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:eval-point1
      (foreign-lambda* void ((integer a0)) "glEvalPoint1(a0);")))
  (begin
    (define gl:eval-point2
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glEvalPoint2(a0 , a1);")))
  (begin
    (define gl:feedback-buffer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (f32vector a2))
        "glFeedbackBuffer(a0 , a1 , a2);")))
  (begin (define gl:finish (foreign-lambda* void () "glFinish();")))
  (begin (define gl:flush (foreign-lambda* void () "glFlush();")))
  (begin
    (define gl:fogf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glFogf(a0 , a1);")))
  (begin
    (define gl:fogfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glFogfv(a0 , a1);")))
  (begin
    (define gl:fogi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glFogi(a0 , a1);")))
  (begin
    (define gl:fogiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glFogiv(a0 , a1);")))
  (begin
    (define gl:front-face
      (foreign-lambda* void ((unsigned-integer a0)) "glFrontFace(a0);")))
  (begin
    (define gl:frustum
      (foreign-lambda*
        void
        ((double a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "glFrustum(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:gen-lists
      (foreign-lambda*
        unsigned-integer
        ((integer a0))
        "return(glGenLists(a0));")))
  (begin
    (define gl:gen-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glGenTextures(a0 , a1);")))
  (begin
    (define gl:get-booleanv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "glGetBooleanv(a0 , a1);")))
  (begin
    (define gl:get-clip-plane
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glGetClipPlane(a0 , a1);")))
  (begin
    (define gl:get-doublev
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "glGetDoublev(a0 , a1);")))
  (begin
    (define gl:get-error
      (foreign-lambda* unsigned-integer () "return(glGetError());")))
  (begin
    (define gl:get-floatv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glGetFloatv(a0 , a1);")))
  (begin
    (define gl:get-integerv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glGetIntegerv(a0 , a1);")))
  (begin
    (define gl:get-lightfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetLightfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-lightiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetLightiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapdv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glGetMapdv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetMapfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-mapiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetMapiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-materialfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetMaterialfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-materialiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetMaterialiv(a0 , a1 , a2);")))
  (begin
    (define gl:get-pixel-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glGetPixelMapfv(a0 , a1);")))
  (begin
    (define gl:get-pixel-mapuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "glGetPixelMapuiv(a0 , a1);")))
  (begin
    (define gl:get-pixel-mapusv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "glGetPixelMapusv(a0 , a1);")))
  (begin
    (define gl:get-pointerv
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer (c-pointer void)) a1))
        "glGetPointerv(a0 , a1);")))
  (begin
    (define gl:get-polygon-stipple
      (foreign-lambda* void ((u8vector a0)) "glGetPolygonStipple(a0);")))
  (begin
    (define gl:get-string
      (foreign-lambda*
        (c-pointer (const unsigned-char))
        ((unsigned-integer a0))
        "return(glGetString(a0));")))
  (begin
    (define gl:get-tex-envfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexEnvfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-enviv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexEnviv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-gendv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glGetTexGendv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-genfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexGenfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-geniv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexGeniv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-image
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "glGetTexImage(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:get-tex-level-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "glGetTexLevelParameterfv(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:get-tex-level-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "glGetTexLevelParameteriv(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:get-tex-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glGetTexParameterfv(a0 , a1 , a2);")))
  (begin
    (define gl:get-tex-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glGetTexParameteriv(a0 , a1 , a2);")))
  (begin
    (define gl:hint
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glHint(a0 , a1);")))
  (begin
    (define gl:index-mask
      (foreign-lambda* void ((unsigned-integer a0)) "glIndexMask(a0);")))
  (begin
    (define gl:index-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glIndexPointer(a0 , a1 , a2);")))
  (begin
    (define gl:indexd (foreign-lambda* void ((double a0)) "glIndexd(a0);")))
  (begin
    (define gl:indexdv
      (foreign-lambda* void ((f64vector a0)) "glIndexdv(a0);")))
  (begin
    (define gl:indexf (foreign-lambda* void ((float a0)) "glIndexf(a0);")))
  (begin
    (define gl:indexfv
      (foreign-lambda* void ((f32vector a0)) "glIndexfv(a0);")))
  (begin
    (define gl:indexi (foreign-lambda* void ((integer a0)) "glIndexi(a0);")))
  (begin
    (define gl:indexiv
      (foreign-lambda* void ((s32vector a0)) "glIndexiv(a0);")))
  (begin
    (define gl:indexs (foreign-lambda* void ((short a0)) "glIndexs(a0);")))
  (begin
    (define gl:indexsv
      (foreign-lambda* void ((s16vector a0)) "glIndexsv(a0);")))
  (begin
    (define gl:indexub
      (foreign-lambda* void ((unsigned-char a0)) "glIndexub(a0);")))
  (begin
    (define gl:indexubv
      (foreign-lambda* void ((u8vector a0)) "glIndexubv(a0);")))
  (begin (define gl:init-names (foreign-lambda* void () "glInitNames();")))
  (begin
    (define gl:interleaved-arrays
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glInterleavedArrays(a0 , a1 , a2);")))
  (begin
    (define gl:is-enabled
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsEnabled(a0));")))
  (begin
    (define gl:is-list
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsList(a0));")))
  (begin
    (define gl:is-texture
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(glIsTexture(a0));")))
  (begin
    (define gl:light-modelf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glLightModelf(a0 , a1);")))
  (begin
    (define gl:light-modelfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "glLightModelfv(a0 , a1);")))
  (begin
    (define gl:light-modeli
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glLightModeli(a0 , a1);")))
  (begin
    (define gl:light-modeliv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "glLightModeliv(a0 , a1);")))
  (begin
    (define gl:lightf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glLightf(a0 , a1 , a2);")))
  (begin
    (define gl:lightfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glLightfv(a0 , a1 , a2);")))
  (begin
    (define gl:lighti
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glLighti(a0 , a1 , a2);")))
  (begin
    (define gl:lightiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glLightiv(a0 , a1 , a2);")))
  (begin
    (define gl:line-stipple
      (foreign-lambda*
        void
        ((integer a0) (unsigned-short a1))
        "glLineStipple(a0 , a1);")))
  (begin
    (define gl:line-width
      (foreign-lambda* void ((float a0)) "glLineWidth(a0);")))
  (begin
    (define gl:list-base
      (foreign-lambda* void ((unsigned-integer a0)) "glListBase(a0);")))
  (begin
    (define gl:load-identity (foreign-lambda* void () "glLoadIdentity();")))
  (begin
    (define gl:load-matrixd
      (foreign-lambda* void ((f64vector a0)) "glLoadMatrixd(a0);")))
  (begin
    (define gl:load-matrixf
      (foreign-lambda* void ((f32vector a0)) "glLoadMatrixf(a0);")))
  (begin
    (define gl:load-name
      (foreign-lambda* void ((unsigned-integer a0)) "glLoadName(a0);")))
  (begin
    (define gl:logic-op
      (foreign-lambda* void ((unsigned-integer a0)) "glLogicOp(a0);")))
  (begin
    (define gl:map1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (f64vector a5))
        "glMap1d(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map1f
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (integer a3)
         (integer a4)
         (f32vector a5))
        "glMap1f(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (double a5)
         (double a6)
         (integer a7)
         (integer a8)
         (f64vector a9))
        "glMap2d(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl:map2f
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (integer a3)
         (integer a4)
         (float a5)
         (float a6)
         (integer a7)
         (integer a8)
         (f32vector a9))
        "glMap2f(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl:map-grid1d
      (foreign-lambda*
        void
        ((integer a0) (double a1) (double a2))
        "glMapGrid1d(a0 , a1 , a2);")))
  (begin
    (define gl:map-grid1f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2))
        "glMapGrid1f(a0 , a1 , a2);")))
  (begin
    (define gl:map-grid2d
      (foreign-lambda*
        void
        ((integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (double a4)
         (double a5))
        "glMapGrid2d(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:map-grid2f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (integer a3) (float a4) (float a5))
        "glMapGrid2f(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:materialf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glMaterialf(a0 , a1 , a2);")))
  (begin
    (define gl:materialfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glMaterialfv(a0 , a1 , a2);")))
  (begin
    (define gl:materiali
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glMateriali(a0 , a1 , a2);")))
  (begin
    (define gl:materialiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glMaterialiv(a0 , a1 , a2);")))
  (begin
    (define gl:matrix-mode
      (foreign-lambda* void ((unsigned-integer a0)) "glMatrixMode(a0);")))
  (begin
    (define gl:mult-matrixd
      (foreign-lambda* void ((f64vector a0)) "glMultMatrixd(a0);")))
  (begin
    (define gl:mult-matrixf
      (foreign-lambda* void ((f32vector a0)) "glMultMatrixf(a0);")))
  (begin
    (define gl:new-list
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glNewList(a0 , a1);")))
  (begin
    (define gl:normal3b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "glNormal3b(a0 , a1 , a2);")))
  (begin
    (define gl:normal3bv
      (foreign-lambda* void ((c-string a0)) "glNormal3bv(a0);")))
  (begin
    (define gl:normal3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glNormal3d(a0 , a1 , a2);")))
  (begin
    (define gl:normal3dv
      (foreign-lambda* void ((f64vector a0)) "glNormal3dv(a0);")))
  (begin
    (define gl:normal3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glNormal3f(a0 , a1 , a2);")))
  (begin
    (define gl:normal3fv
      (foreign-lambda* void ((f32vector a0)) "glNormal3fv(a0);")))
  (begin
    (define gl:normal3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glNormal3i(a0 , a1 , a2);")))
  (begin
    (define gl:normal3iv
      (foreign-lambda* void ((s32vector a0)) "glNormal3iv(a0);")))
  (begin
    (define gl:normal3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glNormal3s(a0 , a1 , a2);")))
  (begin
    (define gl:normal3sv
      (foreign-lambda* void ((s16vector a0)) "glNormal3sv(a0);")))
  (begin
    (define gl:normal-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "glNormalPointer(a0 , a1 , a2);")))
  (begin
    (define gl:ortho
      (foreign-lambda*
        void
        ((double a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "glOrtho(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:pass-through
      (foreign-lambda* void ((float a0)) "glPassThrough(a0);")))
  (begin
    (define gl:pixel-mapfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "glPixelMapfv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-mapuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "glPixelMapuiv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-mapusv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u16vector a2))
        "glPixelMapusv(a0 , a1 , a2);")))
  (begin
    (define gl:pixel-storef
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glPixelStoref(a0 , a1);")))
  (begin
    (define gl:pixel-storei
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glPixelStorei(a0 , a1);")))
  (begin
    (define gl:pixel-transferf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "glPixelTransferf(a0 , a1);")))
  (begin
    (define gl:pixel-transferi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "glPixelTransferi(a0 , a1);")))
  (begin
    (define gl:pixel-zoom
      (foreign-lambda* void ((float a0) (float a1)) "glPixelZoom(a0 , a1);")))
  (begin
    (define gl:point-size
      (foreign-lambda* void ((float a0)) "glPointSize(a0);")))
  (begin
    (define gl:polygon-mode
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "glPolygonMode(a0 , a1);")))
  (begin
    (define gl:polygon-offset
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glPolygonOffset(a0 , a1);")))
  (begin
    (define gl:polygon-stipple
      (foreign-lambda* void ((u8vector a0)) "glPolygonStipple(a0);")))
  (begin (define gl:pop-attrib (foreign-lambda* void () "glPopAttrib();")))
  (begin
    (define gl:pop-client-attrib
      (foreign-lambda* void () "glPopClientAttrib();")))
  (begin (define gl:pop-matrix (foreign-lambda* void () "glPopMatrix();")))
  (begin (define gl:pop-name (foreign-lambda* void () "glPopName();")))
  (begin
    (define gl:prioritize-textures
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1) (f32vector a2))
        "glPrioritizeTextures(a0 , a1 , a2);")))
  (begin
    (define gl:push-attrib
      (foreign-lambda* void ((unsigned-integer a0)) "glPushAttrib(a0);")))
  (begin
    (define gl:push-client-attrib
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "glPushClientAttrib(a0);")))
  (begin (define gl:push-matrix (foreign-lambda* void () "glPushMatrix();")))
  (begin
    (define gl:push-name
      (foreign-lambda* void ((unsigned-integer a0)) "glPushName(a0);")))
  (begin
    (define gl:raster-pos2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glRasterPos2d(a0 , a1);")))
  (begin
    (define gl:raster-pos2dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos2dv(a0);")))
  (begin
    (define gl:raster-pos2f
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "glRasterPos2f(a0 , a1);")))
  (begin
    (define gl:raster-pos2fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos2fv(a0);")))
  (begin
    (define gl:raster-pos2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glRasterPos2i(a0 , a1);")))
  (begin
    (define gl:raster-pos2iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos2iv(a0);")))
  (begin
    (define gl:raster-pos2s
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "glRasterPos2s(a0 , a1);")))
  (begin
    (define gl:raster-pos2sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos2sv(a0);")))
  (begin
    (define gl:raster-pos3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glRasterPos3d(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos3dv(a0);")))
  (begin
    (define gl:raster-pos3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glRasterPos3f(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos3fv(a0);")))
  (begin
    (define gl:raster-pos3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glRasterPos3i(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos3iv(a0);")))
  (begin
    (define gl:raster-pos3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glRasterPos3s(a0 , a1 , a2);")))
  (begin
    (define gl:raster-pos3sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos3sv(a0);")))
  (begin
    (define gl:raster-pos4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRasterPos4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4dv
      (foreign-lambda* void ((f64vector a0)) "glRasterPos4dv(a0);")))
  (begin
    (define gl:raster-pos4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRasterPos4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4fv
      (foreign-lambda* void ((f32vector a0)) "glRasterPos4fv(a0);")))
  (begin
    (define gl:raster-pos4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glRasterPos4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4iv
      (foreign-lambda* void ((s32vector a0)) "glRasterPos4iv(a0);")))
  (begin
    (define gl:raster-pos4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glRasterPos4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:raster-pos4sv
      (foreign-lambda* void ((s16vector a0)) "glRasterPos4sv(a0);")))
  (begin
    (define gl:read-buffer
      (foreign-lambda* void ((unsigned-integer a0)) "glReadBuffer(a0);")))
  (begin
    (define gl:read-pixels
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "glReadPixels(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:rectd
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRectd(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectdv
      (foreign-lambda*
        void
        ((f64vector a0) (f64vector a1))
        "glRectdv(a0 , a1);")))
  (begin
    (define gl:rectf
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRectf(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectfv
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "glRectfv(a0 , a1);")))
  (begin
    (define gl:recti
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glRecti(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectiv
      (foreign-lambda*
        void
        ((s32vector a0) (s32vector a1))
        "glRectiv(a0 , a1);")))
  (begin
    (define gl:rects
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glRects(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rectsv
      (foreign-lambda*
        void
        ((s16vector a0) (s16vector a1))
        "glRectsv(a0 , a1);")))
  (begin
    (define gl:render-mode
      (foreign-lambda*
        integer
        ((unsigned-integer a0))
        "return(glRenderMode(a0));")))
  (begin
    (define gl:rotated
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glRotated(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:rotatef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glRotatef(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:scaled
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glScaled(a0 , a1 , a2);")))
  (begin
    (define gl:scalef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glScalef(a0 , a1 , a2);")))
  (begin
    (define gl:scissor
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glScissor(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:select-buffer
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "glSelectBuffer(a0 , a1);")))
  (begin
    (define gl:shade-model
      (foreign-lambda* void ((unsigned-integer a0)) "glShadeModel(a0);")))
  (begin
    (define gl:stencil-func
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer a2))
        "glStencilFunc(a0 , a1 , a2);")))
  (begin
    (define gl:stencil-mask
      (foreign-lambda* void ((unsigned-integer a0)) "glStencilMask(a0);")))
  (begin
    (define gl:stencil-op
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "glStencilOp(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord1d
      (foreign-lambda* void ((double a0)) "glTexCoord1d(a0);")))
  (begin
    (define gl:tex-coord1dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord1dv(a0);")))
  (begin
    (define gl:tex-coord1f
      (foreign-lambda* void ((float a0)) "glTexCoord1f(a0);")))
  (begin
    (define gl:tex-coord1fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord1fv(a0);")))
  (begin
    (define gl:tex-coord1i
      (foreign-lambda* void ((integer a0)) "glTexCoord1i(a0);")))
  (begin
    (define gl:tex-coord1iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord1iv(a0);")))
  (begin
    (define gl:tex-coord1s
      (foreign-lambda* void ((short a0)) "glTexCoord1s(a0);")))
  (begin
    (define gl:tex-coord1sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord1sv(a0);")))
  (begin
    (define gl:tex-coord2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "glTexCoord2d(a0 , a1);")))
  (begin
    (define gl:tex-coord2dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord2dv(a0);")))
  (begin
    (define gl:tex-coord2f
      (foreign-lambda* void ((float a0) (float a1)) "glTexCoord2f(a0 , a1);")))
  (begin
    (define gl:tex-coord2fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord2fv(a0);")))
  (begin
    (define gl:tex-coord2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glTexCoord2i(a0 , a1);")))
  (begin
    (define gl:tex-coord2iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord2iv(a0);")))
  (begin
    (define gl:tex-coord2s
      (foreign-lambda* void ((short a0) (short a1)) "glTexCoord2s(a0 , a1);")))
  (begin
    (define gl:tex-coord2sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord2sv(a0);")))
  (begin
    (define gl:tex-coord3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glTexCoord3d(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord3dv(a0);")))
  (begin
    (define gl:tex-coord3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glTexCoord3f(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord3fv(a0);")))
  (begin
    (define gl:tex-coord3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glTexCoord3i(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord3iv(a0);")))
  (begin
    (define gl:tex-coord3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glTexCoord3s(a0 , a1 , a2);")))
  (begin
    (define gl:tex-coord3sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord3sv(a0);")))
  (begin
    (define gl:tex-coord4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glTexCoord4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4dv
      (foreign-lambda* void ((f64vector a0)) "glTexCoord4dv(a0);")))
  (begin
    (define gl:tex-coord4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glTexCoord4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4fv
      (foreign-lambda* void ((f32vector a0)) "glTexCoord4fv(a0);")))
  (begin
    (define gl:tex-coord4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glTexCoord4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4iv
      (foreign-lambda* void ((s32vector a0)) "glTexCoord4iv(a0);")))
  (begin
    (define gl:tex-coord4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glTexCoord4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-coord4sv
      (foreign-lambda* void ((s16vector a0)) "glTexCoord4sv(a0);")))
  (begin
    (define gl:tex-coord-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glTexCoordPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:tex-envf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexEnvf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-envfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexEnvfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-envi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexEnvi(a0 , a1 , a2);")))
  (begin
    (define gl:tex-enviv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexEnviv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-gend
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (double a2))
        "glTexGend(a0 , a1 , a2);")))
  (begin
    (define gl:tex-gendv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "glTexGendv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-genf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexGenf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-genfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexGenfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-geni
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexGeni(a0 , a1 , a2);")))
  (begin
    (define gl:tex-geniv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexGeniv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         ((c-pointer void) a7))
        "glTexImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl:tex-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "glTexImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl:tex-parameterf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "glTexParameterf(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "glTexParameterfv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "glTexParameteri(a0 , a1 , a2);")))
  (begin
    (define gl:tex-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "glTexParameteriv(a0 , a1 , a2);")))
  (begin
    (define gl:tex-sub-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "glTexSubImage1D(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:tex-sub-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "glTexSubImage2D(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl:translated
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glTranslated(a0 , a1 , a2);")))
  (begin
    (define gl:translatef
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glTranslatef(a0 , a1 , a2);")))
  (begin
    (define gl:vertex2d
      (foreign-lambda* void ((double a0) (double a1)) "glVertex2d(a0 , a1);")))
  (begin
    (define gl:vertex2dv
      (foreign-lambda* void ((f64vector a0)) "glVertex2dv(a0);")))
  (begin
    (define gl:vertex2f
      (foreign-lambda* void ((float a0) (float a1)) "glVertex2f(a0 , a1);")))
  (begin
    (define gl:vertex2fv
      (foreign-lambda* void ((f32vector a0)) "glVertex2fv(a0);")))
  (begin
    (define gl:vertex2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "glVertex2i(a0 , a1);")))
  (begin
    (define gl:vertex2iv
      (foreign-lambda* void ((s32vector a0)) "glVertex2iv(a0);")))
  (begin
    (define gl:vertex2s
      (foreign-lambda* void ((short a0) (short a1)) "glVertex2s(a0 , a1);")))
  (begin
    (define gl:vertex2sv
      (foreign-lambda* void ((s16vector a0)) "glVertex2sv(a0);")))
  (begin
    (define gl:vertex3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "glVertex3d(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3dv
      (foreign-lambda* void ((f64vector a0)) "glVertex3dv(a0);")))
  (begin
    (define gl:vertex3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "glVertex3f(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3fv
      (foreign-lambda* void ((f32vector a0)) "glVertex3fv(a0);")))
  (begin
    (define gl:vertex3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "glVertex3i(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3iv
      (foreign-lambda* void ((s32vector a0)) "glVertex3iv(a0);")))
  (begin
    (define gl:vertex3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "glVertex3s(a0 , a1 , a2);")))
  (begin
    (define gl:vertex3sv
      (foreign-lambda* void ((s16vector a0)) "glVertex3sv(a0);")))
  (begin
    (define gl:vertex4d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "glVertex4d(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4dv
      (foreign-lambda* void ((f64vector a0)) "glVertex4dv(a0);")))
  (begin
    (define gl:vertex4f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "glVertex4f(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4fv
      (foreign-lambda* void ((f32vector a0)) "glVertex4fv(a0);")))
  (begin
    (define gl:vertex4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glVertex4i(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4iv
      (foreign-lambda* void ((s32vector a0)) "glVertex4iv(a0);")))
  (begin
    (define gl:vertex4s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "glVertex4s(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:vertex4sv
      (foreign-lambda* void ((s16vector a0)) "glVertex4sv(a0);")))
  (begin
    (define gl:vertex-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "glVertexPointer(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:viewport
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "glViewport(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:u-error-string
      (foreign-lambda*
        (c-pointer (const unsigned-char))
        ((unsigned-integer a0))
        "return(gluErrorString(a0));")))
  (begin
    (define gl:u-error-unicode-string-ext
      (foreign-lambda*
        (c-pointer (const "wchar_t"))
        ((unsigned-integer a0))
        "return(gluErrorUnicodeStringEXT(a0));")))
  (begin
    (define gl:u-get-string
      (foreign-lambda*
        (c-pointer (const unsigned-char))
        ((unsigned-integer a0))
        "return(gluGetString(a0));")))
  (begin
    (define gl:u-ortho2d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "gluOrtho2D(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:u-perspective
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "gluPerspective(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:u-look-at
      (foreign-lambda*
        void
        ((double a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5)
         (double a6)
         (double a7)
         (double a8))
        "gluLookAt(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl:u-scale-image
      (foreign-lambda*
        integer
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "return(gluScaleImage(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8));")))
  (begin
    (define gl:u-build1dmipmaps
      (foreign-lambda*
        integer
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "return(gluBuild1DMipmaps(a0 , a1 , a2 , a3 , a4 , a5));")))
  (begin
    (define gl:u-build2dmipmaps
      (foreign-lambda*
        integer
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "return(gluBuild2DMipmaps(a0 , a1 , a2 , a3 , a4 , a5 , a6));")))
  (begin
    (define gl:u-new-quadric
      (foreign-lambda*
        (c-pointer (struct "GLUquadric"))
        ()
        "return(gluNewQuadric());")))
  (begin
    (define gl:u-delete-quadric
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0))
        "gluDeleteQuadric(a0);")))
  (begin
    (define gl:u-quadric-normals
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0) (unsigned-integer a1))
        "gluQuadricNormals(a0 , a1);")))
  (begin
    (define gl:u-quadric-texture
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0) (unsigned-char a1))
        "gluQuadricTexture(a0 , a1);")))
  (begin
    (define gl:u-quadric-orientation
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0) (unsigned-integer a1))
        "gluQuadricOrientation(a0 , a1);")))
  (begin
    (define gl:u-quadric-draw-style
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0) (unsigned-integer a1))
        "gluQuadricDrawStyle(a0 , a1);")))
  (begin
    (define gl:u-cylinder
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0)
         (double a1)
         (double a2)
         (double a3)
         (integer a4)
         (integer a5))
        "gluCylinder(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl:u-disk
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4))
        "gluDisk(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:u-partial-disk
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (double a5)
         (double a6))
        "gluPartialDisk(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:u-sphere
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0)
         (double a1)
         (integer a2)
         (integer a3))
        "gluSphere(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:u-quadric-callback
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUquadric")) a0)
         (unsigned-integer a1)
         ((function void ()) a2))
        "gluQuadricCallback(a0 , a1 , a2);")))
  (begin
    (define gl:u-new-tess
      (foreign-lambda*
        (c-pointer (struct "GLUtesselator"))
        ()
        "return(gluNewTess());")))
  (begin
    (define gl:u-delete-tess
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluDeleteTess(a0);")))
  (begin
    (define gl:u-tess-begin-polygon
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0) ((c-pointer void) a1))
        "gluTessBeginPolygon(a0 , a1);")))
  (begin
    (define gl:u-tess-begin-contour
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluTessBeginContour(a0);")))
  (begin
    (define gl:u-tess-end-contour
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluTessEndContour(a0);")))
  (begin
    (define gl:u-tess-end-polygon
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluTessEndPolygon(a0);")))
  (begin
    (define gl:u-tess-property
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0)
         (unsigned-integer a1)
         (double a2))
        "gluTessProperty(a0 , a1 , a2);")))
  (begin
    (define gl:u-tess-normal
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0)
         (double a1)
         (double a2)
         (double a3))
        "gluTessNormal(a0 , a1 , a2 , a3);")))
  (begin
    (define gl:u-tess-callback
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0)
         (unsigned-integer a1)
         ((function void ()) a2))
        "gluTessCallback(a0 , a1 , a2);")))
  (begin
    (define gl:u-get-tess-property
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0)
         (unsigned-integer a1)
         (f64vector a2))
        "gluGetTessProperty(a0 , a1 , a2);")))
  (begin
    (define gl:u-new-nurbs-renderer
      (foreign-lambda*
        (c-pointer (struct "GLUnurbs"))
        ()
        "return(gluNewNurbsRenderer());")))
  (begin
    (define gl:u-delete-nurbs-renderer
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluDeleteNurbsRenderer(a0);")))
  (begin
    (define gl:u-begin-surface
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluBeginSurface(a0);")))
  (begin
    (define gl:u-begin-curve
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluBeginCurve(a0);")))
  (begin
    (define gl:u-end-curve
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluEndCurve(a0);")))
  (begin
    (define gl:u-end-surface
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluEndSurface(a0);")))
  (begin
    (define gl:u-begin-trim
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluBeginTrim(a0);")))
  (begin
    (define gl:u-end-trim
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0))
        "gluEndTrim(a0);")))
  (begin
    (define gl:u-pwl-curve
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0)
         (integer a1)
         (f32vector a2)
         (integer a3)
         (unsigned-integer a4))
        "gluPwlCurve(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl:u-nurbs-curve
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0)
         (integer a1)
         (f32vector a2)
         (integer a3)
         (f32vector a4)
         (integer a5)
         (unsigned-integer a6))
        "gluNurbsCurve(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl:u-nurbs-surface
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0)
         (integer a1)
         (f32vector a2)
         (integer a3)
         (f32vector a4)
         (integer a5)
         (integer a6)
         (f32vector a7)
         (integer a8)
         (integer a9)
         (unsigned-integer a10))
        "gluNurbsSurface(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl:u-nurbs-property
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0) (unsigned-integer a1) (float a2))
        "gluNurbsProperty(a0 , a1 , a2);")))
  (begin
    (define gl:u-get-nurbs-property
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0)
         (unsigned-integer a1)
         (f32vector a2))
        "gluGetNurbsProperty(a0 , a1 , a2);")))
  (begin
    (define gl:u-nurbs-callback
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUnurbs")) a0)
         (unsigned-integer a1)
         ((function void ()) a2))
        "gluNurbsCallback(a0 , a1 , a2);")))
  (begin
    (define gl:u-begin-polygon
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluBeginPolygon(a0);")))
  (begin
    (define gl:u-next-contour
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0) (unsigned-integer a1))
        "gluNextContour(a0 , a1);")))
  (begin
    (define gl:u-end-polygon
      (foreign-lambda*
        void
        (((c-pointer (struct "GLUtesselator")) a0))
        "gluEndPolygon(a0);")))
  (begin
    (define gl::debugproc
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4)
         (c-string a5)
         ((c-pointer void) a6))
        "GLDEBUGPROC(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::blend-color
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glBlendColor_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::blend-equation
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBlendEquation_t(a0);")))
  (begin
    (define gl::draw-range-elements
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glDrawRangeElements_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::color-table
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glColorTable_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::color-table-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glColorTableParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::color-table-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glColorTableParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-color-table
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyColorTable_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-color-table
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetColorTable_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-color-table-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetColorTableParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-color-table-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetColorTableParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::color-sub-table
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glColorSubTable_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::copy-color-sub-table
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyColorSubTable_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-image3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glTexImage3D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::tex-sub-image3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glTexSubImage3D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::copy-tex-sub-image3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyTexSubImage3D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::convolution-filter1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glConvolutionFilter1D_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::convolution-filter2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glConvolutionFilter2D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::convolution-parameterf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glConvolutionParameterf_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glConvolutionParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glConvolutionParameteri_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glConvolutionParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-convolution-filter1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyConvolutionFilter1D_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::copy-convolution-filter2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glCopyConvolutionFilter2D_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-convolution-filter
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetConvolutionFilter_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-convolution-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetConvolutionParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-convolution-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetConvolutionParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-separable-filter
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         ((c-pointer void) a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glGetSeparableFilter_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::separable-filter2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glSeparableFilter2D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::get-histogram
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glGetHistogram_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-histogram-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetHistogramParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-histogram-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetHistogramParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-minmax
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glGetMinmax_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-minmax-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetMinmaxParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-minmax-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetMinmaxParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::histogram
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3))
        "_ALLEGRO_glHistogram_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::minmax
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-char a2))
        "_ALLEGRO_glMinmax_t(a0 , a1 , a2);")))
  (begin
    (define gl::reset-histogram
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glResetHistogram_t(a0);")))
  (begin
    (define gl::reset-minmax
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glResetMinmax_t(a0);")))
  (begin
    (define gl::active-texture
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glActiveTexture_t(a0);")))
  (begin
    (define gl::client-active-texture
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glClientActiveTexture_t(a0);")))
  (begin
    (define gl::multi-tex-coord1d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glMultiTexCoord1d_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord1dv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glMultiTexCoord1f_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord1fv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glMultiTexCoord1i_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord1iv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glMultiTexCoord1s_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord1sv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glMultiTexCoord2d_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord2dv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glMultiTexCoord2f_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord2fv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glMultiTexCoord2i_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord2iv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glMultiTexCoord2s_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord2sv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glMultiTexCoord3d_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord3dv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glMultiTexCoord3f_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord3fv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glMultiTexCoord3i_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord3iv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glMultiTexCoord3s_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord3sv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glMultiTexCoord4d_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord4dv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glMultiTexCoord4f_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord4fv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4i
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glMultiTexCoord4i_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord4iv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glMultiTexCoord4s_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord4sv_t(a0 , a1);")))
  (begin
    (define gl::load-transpose-matrixf
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glLoadTransposeMatrixf_t(a0);")))
  (begin
    (define gl::load-transpose-matrixd
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glLoadTransposeMatrixd_t(a0);")))
  (begin
    (define gl::mult-transpose-matrixf
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glMultTransposeMatrixf_t(a0);")))
  (begin
    (define gl::mult-transpose-matrixd
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glMultTransposeMatrixd_t(a0);")))
  (begin
    (define gl::sample-coverage
      (foreign-lambda*
        void
        ((float a0) (unsigned-char a1))
        "_ALLEGRO_glSampleCoverage_t(a0 , a1);")))
  (begin
    (define gl::compressed-tex-image3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedTexImage3D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-tex-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedTexImage2D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::compressed-tex-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glCompressedTexImage1D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::compressed-tex-sub-image3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glCompressedTexSubImage3D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::compressed-tex-sub-image2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedTexSubImage2D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-tex-sub-image1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glCompressedTexSubImage1D_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-compressed-tex-image
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glGetCompressedTexImage_t(a0 , a1 , a2);")))
  (begin
    (define gl::blend-func-separate
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glBlendFuncSeparate_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::fog-coordf
      (foreign-lambda* void ((float a0)) "_ALLEGRO_glFogCoordf_t(a0);")))
  (begin
    (define gl::fog-coordfv
      (foreign-lambda* void ((f32vector a0)) "_ALLEGRO_glFogCoordfv_t(a0);")))
  (begin
    (define gl::fog-coordd
      (foreign-lambda* void ((double a0)) "_ALLEGRO_glFogCoordd_t(a0);")))
  (begin
    (define gl::fog-coorddv
      (foreign-lambda* void ((f64vector a0)) "_ALLEGRO_glFogCoorddv_t(a0);")))
  (begin
    (define gl::fog-coord-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glFogCoordPointer_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-draw-arrays
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1) (s32vector a2) (integer a3))
        "_ALLEGRO_glMultiDrawArrays_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-draw-elements
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (s32vector a1)
         (unsigned-integer a2)
         ((c-pointer (c-pointer (const void))) a3)
         (integer a4))
        "_ALLEGRO_glMultiDrawElements_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::point-parameterf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPointParameterf_t(a0 , a1);")))
  (begin
    (define gl::point-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPointParameterfv_t(a0 , a1);")))
  (begin
    (define gl::point-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPointParameteri_t(a0 , a1);")))
  (begin
    (define gl::point-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glPointParameteriv_t(a0 , a1);")))
  (begin
    (define gl::secondary-color3b
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glSecondaryColor3b_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3bv
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glSecondaryColor3bv_t(a0);")))
  (begin
    (define gl::secondary-color3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glSecondaryColor3d_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3dv
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glSecondaryColor3dv_t(a0);")))
  (begin
    (define gl::secondary-color3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glSecondaryColor3f_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3fv
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glSecondaryColor3fv_t(a0);")))
  (begin
    (define gl::secondary-color3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glSecondaryColor3i_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3iv
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glSecondaryColor3iv_t(a0);")))
  (begin
    (define gl::secondary-color3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glSecondaryColor3s_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3sv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glSecondaryColor3sv_t(a0);")))
  (begin
    (define gl::secondary-color3ub
      (foreign-lambda*
        void
        ((unsigned-char a0) (unsigned-char a1) (unsigned-char a2))
        "_ALLEGRO_glSecondaryColor3ub_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3ubv
      (foreign-lambda*
        void
        ((u8vector a0))
        "_ALLEGRO_glSecondaryColor3ubv_t(a0);")))
  (begin
    (define gl::secondary-color3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glSecondaryColor3ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3uiv
      (foreign-lambda*
        void
        ((u32vector a0))
        "_ALLEGRO_glSecondaryColor3uiv_t(a0);")))
  (begin
    (define gl::secondary-color3us
      (foreign-lambda*
        void
        ((unsigned-short a0) (unsigned-short a1) (unsigned-short a2))
        "_ALLEGRO_glSecondaryColor3us_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3usv
      (foreign-lambda*
        void
        ((u16vector a0))
        "_ALLEGRO_glSecondaryColor3usv_t(a0);")))
  (begin
    (define gl::secondary-color-pointer
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glSecondaryColorPointer_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos2d
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glWindowPos2d_t(a0 , a1);")))
  (begin
    (define gl::window-pos2dv
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos2dv_t(a0);")))
  (begin
    (define gl::window-pos2f
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "_ALLEGRO_glWindowPos2f_t(a0 , a1);")))
  (begin
    (define gl::window-pos2fv
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos2fv_t(a0);")))
  (begin
    (define gl::window-pos2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glWindowPos2i_t(a0 , a1);")))
  (begin
    (define gl::window-pos2iv
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos2iv_t(a0);")))
  (begin
    (define gl::window-pos2s
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "_ALLEGRO_glWindowPos2s_t(a0 , a1);")))
  (begin
    (define gl::window-pos2sv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos2sv_t(a0);")))
  (begin
    (define gl::window-pos3d
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glWindowPos3d_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3dv
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos3dv_t(a0);")))
  (begin
    (define gl::window-pos3f
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glWindowPos3f_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3fv
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos3fv_t(a0);")))
  (begin
    (define gl::window-pos3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glWindowPos3i_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3iv
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos3iv_t(a0);")))
  (begin
    (define gl::window-pos3s
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glWindowPos3s_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3sv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos3sv_t(a0);")))
  (begin
    (define gl::bind-buffer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindBuffer_t(a0 , a1);")))
  (begin
    (define gl::delete-buffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteBuffers_t(a0 , a1);")))
  (begin
    (define gl::gen-buffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenBuffers_t(a0 , a1);")))
  (begin
    (define gl::is-buffer
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsBuffer_t(a0));")))
  (begin
    (define gl::buffer-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ((c-pointer void) a2)
         (unsigned-integer a3))
        "_ALLEGRO_glBufferData_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::buffer-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glBufferSubData_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-buffer-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetBufferSubData_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::map-buffer
      (foreign-lambda*
        (c-pointer void)
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glMapBuffer_t(a0 , a1));")))
  (begin
    (define gl::unmap-buffer
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glUnmapBuffer_t(a0));")))
  (begin
    (define gl::get-buffer-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetBufferParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-buffer-pointerv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetBufferPointerv_t(a0 , a1 , a2);")))
  (begin
    (define gl::gen-queries
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenQueries_t(a0 , a1);")))
  (begin
    (define gl::delete-queries
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteQueries_t(a0 , a1);")))
  (begin
    (define gl::is-query
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsQuery_t(a0));")))
  (begin
    (define gl::begin-query
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBeginQuery_t(a0 , a1);")))
  (begin
    (define gl::end-query
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEndQuery_t(a0);")))
  (begin
    (define gl::get-queryiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetQueryiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetQueryObjectiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetQueryObjectuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::blend-equation-separate
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBlendEquationSeparate_t(a0 , a1);")))
  (begin
    (define gl::create-program
      (foreign-lambda*
        unsigned-integer
        ()
        "return(_ALLEGRO_glCreateProgram_t());")))
  (begin
    (define gl::create-shader
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glCreateShader_t(a0));")))
  (begin
    (define gl::delete-program
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDeleteProgram_t(a0);")))
  (begin
    (define gl::delete-shader
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDeleteShader_t(a0);")))
  (begin
    (define gl::attach-shader
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glAttachShader_t(a0 , a1);")))
  (begin
    (define gl::detach-shader
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDetachShader_t(a0 , a1);")))
  (begin
    (define gl::shader-source
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         ((c-pointer (c-pointer (const char))) a2)
         (s32vector a3))
        "_ALLEGRO_glShaderSource_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::compile-shader
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glCompileShader_t(a0);")))
  (begin
    (define gl::is-program
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsProgram_t(a0));")))
  (begin
    (define gl::is-shader
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsShader_t(a0));")))
  (begin
    (define gl::link-program
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glLinkProgram_t(a0);")))
  (begin
    (define gl::use-program
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glUseProgram_t(a0);")))
  (begin
    (define gl::validate-program
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glValidateProgram_t(a0);")))
  (begin
    (define gl::uniform1f
      (foreign-lambda*
        void
        ((integer a0) (float a1))
        "_ALLEGRO_glUniform1f_t(a0 , a1);")))
  (begin
    (define gl::uniform2f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2))
        "_ALLEGRO_glUniform2f_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glUniform3f_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4f
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glUniform4f_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1i
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glUniform1i_t(a0 , a1);")))
  (begin
    (define gl::uniform2i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glUniform2i_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glUniform3i_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4i
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3) (integer a4))
        "_ALLEGRO_glUniform4i_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform1fv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform2fv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform3fv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform4fv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform1iv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform1iv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2iv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform2iv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3iv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform3iv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4iv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform4iv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform-matrix2fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix2fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix3fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix4fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-shaderfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetShaderfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-shaderiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetShaderiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-programfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetProgramfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-programiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetProgramiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-shader-info-log
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetShaderInfoLog_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-info-log
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetProgramInfoLog_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-attached-shaders
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2) (u32vector a3))
        "_ALLEGRO_glGetAttachedShaders_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-uniform-location
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetUniformLocation_t(a0 , a1));")))
  (begin
    (define gl::get-active-uniform
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4)
         (u32vector a5)
         (c-string a6))
        "_ALLEGRO_glGetActiveUniform_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-uniformfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glGetUniformfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniformiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glGetUniformiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-shader-source
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetShaderSource_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib1f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glVertexAttrib1f_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glVertexAttrib1s_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glVertexAttrib1d_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glVertexAttrib2f_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glVertexAttrib2s_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glVertexAttrib2d_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib3f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glVertexAttrib3f_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertexAttrib3s_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glVertexAttrib3d_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib4f
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glVertexAttrib4f_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4s
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glVertexAttrib4s_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4d
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glVertexAttrib4d_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4nub
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4))
        "_ALLEGRO_glVertexAttrib4Nub_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib1fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib1fv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib1sv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib1dv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib2fv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib2sv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib2dv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib3fv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib3sv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib3dv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4fv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib4fv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4sv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4dv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib4dv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttrib4iv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4bv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttrib4bv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4ubv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttrib4ubv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4usv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttrib4usv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttrib4uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nbv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttrib4Nbv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nsv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4Nsv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4niv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttrib4Niv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nubv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttrib4Nubv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nusv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttrib4Nusv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttrib4Nuiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-pointer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3)
         (integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glVertexAttribPointer_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::enable-vertex-attrib-array
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEnableVertexAttribArray_t(a0);")))
  (begin
    (define gl::disable-vertex-attrib-array
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDisableVertexAttribArray_t(a0);")))
  (begin
    (define gl::bind-attrib-location
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "_ALLEGRO_glBindAttribLocation_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-active-attrib
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4)
         (u32vector a5)
         (c-string a6))
        "_ALLEGRO_glGetActiveAttrib_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-attrib-location
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetAttribLocation_t(a0 , a1));")))
  (begin
    (define gl::get-vertex-attribdv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetVertexAttribdv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVertexAttribfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-pointerv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetVertexAttribPointerv_t(a0 , a1 , a2);")))
  (begin
    (define gl::draw-buffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDrawBuffers_t(a0 , a1);")))
  (begin
    (define gl::stencil-op-separate
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glStencilOpSeparate_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::stencil-func-separate
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glStencilFuncSeparate_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::stencil-mask-separate
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glStencilMaskSeparate_t(a0 , a1);")))
  (begin
    (define gl::uniform-matrix2x3fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix2x3fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3x2fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix3x2fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix2x4fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix2x4fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4x2fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix4x2fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3x4fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix3x4fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4x3fv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix4x3fv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::color-maski
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4))
        "_ALLEGRO_glColorMaski_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-booleani-v
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetBooleani_v_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-integeri-v
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetIntegeri_v_t(a0 , a1 , a2);")))
  (begin
    (define gl::enablei
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEnablei_t(a0 , a1);")))
  (begin
    (define gl::disablei
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDisablei_t(a0 , a1);")))
  (begin
    (define gl::is-enabledi
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glIsEnabledi_t(a0 , a1));")))
  (begin
    (define gl::begin-transform-feedback
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginTransformFeedback_t(a0);")))
  (begin
    (define gl::end-transform-feedback
      (foreign-lambda* void () "_ALLEGRO_glEndTransformFeedback_t();")))
  (begin
    (define gl::bind-buffer-range
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3)
         ("intptr_t" a4))
        "_ALLEGRO_glBindBufferRange_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::bind-buffer-base
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBindBufferBase_t(a0 , a1 , a2);")))
  (begin
    (define gl::transform-feedback-varyings
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (s32vector a2)
         (unsigned-integer a3))
        "_ALLEGRO_glTransformFeedbackVaryings_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-transform-feedback-varying
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTransformFeedbackVarying_t(a0 , a1 , a2);")))
  (begin
    (define gl::clamp-color
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glClampColor_t(a0 , a1);")))
  (begin
    (define gl::begin-conditional-render
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBeginConditionalRender_t(a0 , a1);")))
  (begin
    (define gl::end-conditional-render
      (foreign-lambda* void () "_ALLEGRO_glEndConditionalRender_t();")))
  (begin
    (define gl::vertex-attrib-i1i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glVertexAttribI1i_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glVertexAttribI2i_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib-i3i
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glVertexAttribI3i_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-i4i
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glVertexAttribI4i_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-i1ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexAttribI1ui_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glVertexAttribI2ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib-i3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribI3ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-i4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glVertexAttribI4ui_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-i1iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI1iv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI2iv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i3iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI3iv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4iv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI4iv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i1uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI1uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI2uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI3uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI4uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4bv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttribI4bv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4sv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttribI4sv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4ubv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttribI4ubv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4usv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttribI4usv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-ipointer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glVertexAttribIPointer_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-vertex-attrib-iiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribIiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-iuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetVertexAttribIuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniformuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glGetUniformuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::bind-frag-data-location
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "_ALLEGRO_glBindFragDataLocation_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-frag-data-location
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetFragDataLocation_t(a0 , a1));")))
  (begin
    (define gl::uniform1ui
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1))
        "_ALLEGRO_glUniform1ui_t(a0 , a1);")))
  (begin
    (define gl::uniform2ui
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glUniform2ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3ui
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glUniform3ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4ui
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glUniform4ui_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1uiv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform1uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2uiv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform2uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3uiv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform3uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4uiv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform4uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-parameter-iiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glTexParameterIiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-parameter-iuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glTexParameterIuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-parameter-iiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTexParameterIiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-parameter-iuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetTexParameterIuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::clear-bufferiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glClearBufferiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::clear-bufferuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glClearBufferuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::clear-bufferfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glClearBufferfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::clear-bufferfi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (float a2) (integer a3))
        "_ALLEGRO_glClearBufferfi_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-stringi
      (foreign-lambda*
        (c-pointer (const unsigned-char))
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glGetStringi_t(a0 , a1));")))
  (begin
    (define gl::draw-arrays-instanced
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glDrawArraysInstanced_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::draw-elements-instanced
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         (integer a4))
        "_ALLEGRO_glDrawElementsInstanced_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-buffer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glTexBuffer_t(a0 , a1 , a2);")))
  (begin
    (define gl::primitive-restart-index
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glPrimitiveRestartIndex_t(a0);")))
  (begin
    (define gl::get-integer64i-v
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer integer64) a2))
        "_ALLEGRO_glGetInteger64i_v_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-buffer-parameteri64v
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer integer64) a2))
        "_ALLEGRO_glGetBufferParameteri64v_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glProgramParameteri_t(a0 , a1 , a2);")))
  (begin
    (define gl::framebuffer-texture
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glFramebufferTexture_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::clear-buffer-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glClearBufferData_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::clear-buffer-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ("intptr_t" a2)
         ("intptr_t" a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glClearBufferSubData_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::dispatch-compute
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glDispatchCompute_t(a0 , a1 , a2);")))
  (begin
    (define gl::dispatch-compute-indirect
      (foreign-lambda*
        void
        (("intptr_t" a0))
        "_ALLEGRO_glDispatchComputeIndirect_t(a0);")))
  (begin
    (define gl::copy-image-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         (integer a8)
         (integer a9)
         (integer a10)
         (integer a11)
         (integer a12)
         (integer a13)
         (integer a14))
        "_ALLEGRO_glCopyImageSubData_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14);")))
  (begin
    (define gl::framebuffer-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glFramebufferParameteri_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-framebuffer-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFramebufferParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-internalformati64v
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer integer64) a4))
        "_ALLEGRO_glGetInternalformati64v_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::invalidate-tex-sub-image
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "_ALLEGRO_glInvalidateTexSubImage_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::invalidate-tex-image
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glInvalidateTexImage_t(a0 , a1);")))
  (begin
    (define gl::invalidate-buffer-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0) ("intptr_t" a1) ("intptr_t" a2))
        "_ALLEGRO_glInvalidateBufferSubData_t(a0 , a1 , a2);")))
  (begin
    (define gl::invalidate-buffer-data
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glInvalidateBufferData_t(a0);")))
  (begin
    (define gl::invalidate-framebuffer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glInvalidateFramebuffer_t(a0 , a1 , a2);")))
  (begin
    (define gl::invalidate-sub-framebuffer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (u32vector a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "_ALLEGRO_glInvalidateSubFramebuffer_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::multi-draw-arrays-indirect
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer void) a1) (integer a2) (integer a3))
        "_ALLEGRO_glMultiDrawArraysIndirect_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-draw-elements-indirect
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer void) a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glMultiDrawElementsIndirect_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-program-interfaceiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetProgramInterfaceiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-resource-index
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "return(_ALLEGRO_glGetProgramResourceIndex_t(a0 , a1 , a2));")))
  (begin
    (define gl::get-program-resource-name
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (s32vector a4)
         (c-string a5))
        "_ALLEGRO_glGetProgramResourceName_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-program-resourceiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (u32vector a4)
         (integer a5)
         (s32vector a6)
         (s32vector a7))
        "_ALLEGRO_glGetProgramResourceiv_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::get-program-resource-location
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "return(_ALLEGRO_glGetProgramResourceLocation_t(a0 , a1 , a2));")))
  (begin
    (define gl::get-program-resource-location-index
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "return(_ALLEGRO_glGetProgramResourceLocationIndex_t(a0 , a1 , a2));")))
  (begin
    (define gl::shader-storage-block-binding
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glShaderStorageBlockBinding_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-buffer-range
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3)
         ("intptr_t" a4))
        "_ALLEGRO_glTexBufferRange_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-storage2dmultisample
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (unsigned-char a5))
        "_ALLEGRO_glTexStorage2DMultisample_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::tex-storage3dmultisample
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-char a6))
        "_ALLEGRO_glTexStorage3DMultisample_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::texture-view
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7))
        "_ALLEGRO_glTextureView_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::bind-vertex-buffer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ("intptr_t" a2)
         (integer a3))
        "_ALLEGRO_glBindVertexBuffer_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-format
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3)
         (unsigned-integer a4))
        "_ALLEGRO_glVertexAttribFormat_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-iformat
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribIFormat_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-lformat
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribLFormat_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-binding
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexAttribBinding_t(a0 , a1);")))
  (begin
    (define gl::vertex-binding-divisor
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexBindingDivisor_t(a0 , a1);")))
  (begin
    (define gl::debug-message-control
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (u32vector a4)
         (unsigned-char a5))
        "_ALLEGRO_glDebugMessageControl_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::debug-message-insert
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4)
         (c-string a5))
        "_ALLEGRO_glDebugMessageInsert_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::debug-message-callback
      (foreign-lambda*
        void
        (("GLDEBUGPROC" a0) ((c-pointer void) a1))
        "_ALLEGRO_glDebugMessageCallback_t(a0 , a1);")))
  (begin
    (define gl::get-debug-message-log
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0)
         (integer a1)
         (u32vector a2)
         (u32vector a3)
         (u32vector a4)
         (u32vector a5)
         (s32vector a6)
         (c-string a7))
        "return(_ALLEGRO_glGetDebugMessageLog_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7));")))
  (begin
    (define gl::push-debug-group
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (c-string a3))
        "_ALLEGRO_glPushDebugGroup_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::pop-debug-group
      (foreign-lambda* void () "_ALLEGRO_glPopDebugGroup_t();")))
  (begin
    (define gl::object-label
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (c-string a3))
        "_ALLEGRO_glObjectLabel_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-object-label
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (c-string a4))
        "_ALLEGRO_glGetObjectLabel_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::object-ptr-label
      (foreign-lambda*
        void
        (((c-pointer void) a0) (integer a1) (c-string a2))
        "_ALLEGRO_glObjectPtrLabel_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-object-ptr-label
      (foreign-lambda*
        void
        (((c-pointer void) a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetObjectPtrLabel_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::active-texture-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glActiveTextureARB_t(a0);")))
  (begin
    (define gl::client-active-texture-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glClientActiveTextureARB_t(a0);")))
  (begin
    (define gl::multi-tex-coord1d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glMultiTexCoord1dARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord1dvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glMultiTexCoord1fARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord1fvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1i-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glMultiTexCoord1iARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1iv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord1ivARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glMultiTexCoord1sARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord1svARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glMultiTexCoord2dARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord2dvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glMultiTexCoord2fARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord2fvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2i-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glMultiTexCoord2iARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2iv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord2ivARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glMultiTexCoord2sARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord2svARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glMultiTexCoord3dARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord3dvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glMultiTexCoord3fARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord3fvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3i-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glMultiTexCoord3iARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3iv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord3ivARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glMultiTexCoord3sARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord3svARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glMultiTexCoord4dARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMultiTexCoord4dvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glMultiTexCoord4fARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMultiTexCoord4fvARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4i-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glMultiTexCoord4iARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4iv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord4ivARB_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glMultiTexCoord4sARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord4svARB_t(a0 , a1);")))
  (begin
    (define gl::load-transpose-matrixf-arb
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glLoadTransposeMatrixfARB_t(a0);")))
  (begin
    (define gl::load-transpose-matrixd-arb
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glLoadTransposeMatrixdARB_t(a0);")))
  (begin
    (define gl::mult-transpose-matrixf-arb
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glMultTransposeMatrixfARB_t(a0);")))
  (begin
    (define gl::mult-transpose-matrixd-arb
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glMultTransposeMatrixdARB_t(a0);")))
  (begin
    (define gl::sample-coverage-arb
      (foreign-lambda*
        void
        ((float a0) (unsigned-char a1))
        "_ALLEGRO_glSampleCoverageARB_t(a0 , a1);")))
  (begin
    (define gl::compressed-tex-image3darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedTexImage3DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-tex-image2darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedTexImage2DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::compressed-tex-image1darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glCompressedTexImage1DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::compressed-tex-sub-image3darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glCompressedTexSubImage3DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::compressed-tex-sub-image2darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedTexSubImage2DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-tex-sub-image1darb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glCompressedTexSubImage1DARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-compressed-tex-image-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glGetCompressedTexImageARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::point-parameterf-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPointParameterfARB_t(a0 , a1);")))
  (begin
    (define gl::point-parameterfv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPointParameterfvARB_t(a0 , a1);")))
  (begin
    (define gl::weightbv-arb
      (foreign-lambda*
        void
        ((integer a0) (c-string a1))
        "_ALLEGRO_glWeightbvARB_t(a0 , a1);")))
  (begin
    (define gl::weightsv-arb
      (foreign-lambda*
        void
        ((integer a0) (s16vector a1))
        "_ALLEGRO_glWeightsvARB_t(a0 , a1);")))
  (begin
    (define gl::weightiv-arb
      (foreign-lambda*
        void
        ((integer a0) (s32vector a1))
        "_ALLEGRO_glWeightivARB_t(a0 , a1);")))
  (begin
    (define gl::weightfv-arb
      (foreign-lambda*
        void
        ((integer a0) (f32vector a1))
        "_ALLEGRO_glWeightfvARB_t(a0 , a1);")))
  (begin
    (define gl::weightdv-arb
      (foreign-lambda*
        void
        ((integer a0) (f64vector a1))
        "_ALLEGRO_glWeightdvARB_t(a0 , a1);")))
  (begin
    (define gl::weightubv-arb
      (foreign-lambda*
        void
        ((integer a0) (u8vector a1))
        "_ALLEGRO_glWeightubvARB_t(a0 , a1);")))
  (begin
    (define gl::weightusv-arb
      (foreign-lambda*
        void
        ((integer a0) (u16vector a1))
        "_ALLEGRO_glWeightusvARB_t(a0 , a1);")))
  (begin
    (define gl::weightuiv-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glWeightuivARB_t(a0 , a1);")))
  (begin
    (define gl::weight-pointer-arb
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glWeightPointerARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-blend-arb
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glVertexBlendARB_t(a0);")))
  (begin
    (define gl::current-palette-matrix-arb
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glCurrentPaletteMatrixARB_t(a0);")))
  (begin
    (define gl::matrix-indexubv-arb
      (foreign-lambda*
        void
        ((integer a0) (u8vector a1))
        "_ALLEGRO_glMatrixIndexubvARB_t(a0 , a1);")))
  (begin
    (define gl::matrix-indexusv-arb
      (foreign-lambda*
        void
        ((integer a0) (u16vector a1))
        "_ALLEGRO_glMatrixIndexusvARB_t(a0 , a1);")))
  (begin
    (define gl::matrix-indexuiv-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glMatrixIndexuivARB_t(a0 , a1);")))
  (begin
    (define gl::matrix-index-pointer-arb
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glMatrixIndexPointerARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos2d-arb
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glWindowPos2dARB_t(a0 , a1);")))
  (begin
    (define gl::window-pos2dv-arb
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos2dvARB_t(a0);")))
  (begin
    (define gl::window-pos2f-arb
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "_ALLEGRO_glWindowPos2fARB_t(a0 , a1);")))
  (begin
    (define gl::window-pos2fv-arb
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos2fvARB_t(a0);")))
  (begin
    (define gl::window-pos2i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glWindowPos2iARB_t(a0 , a1);")))
  (begin
    (define gl::window-pos2iv-arb
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos2ivARB_t(a0);")))
  (begin
    (define gl::window-pos2s-arb
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "_ALLEGRO_glWindowPos2sARB_t(a0 , a1);")))
  (begin
    (define gl::window-pos2sv-arb
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos2svARB_t(a0);")))
  (begin
    (define gl::window-pos3d-arb
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glWindowPos3dARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3dv-arb
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos3dvARB_t(a0);")))
  (begin
    (define gl::window-pos3f-arb
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glWindowPos3fARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3fv-arb
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos3fvARB_t(a0);")))
  (begin
    (define gl::window-pos3i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glWindowPos3iARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3iv-arb
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos3ivARB_t(a0);")))
  (begin
    (define gl::window-pos3s-arb
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glWindowPos3sARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3sv-arb
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos3svARB_t(a0);")))
  (begin
    (define gl::vertex-attrib1d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glVertexAttrib1dARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib1dvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glVertexAttrib1fARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib1fvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glVertexAttrib1sARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib1svARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glVertexAttrib2dARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib2dvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glVertexAttrib2fARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib2fvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glVertexAttrib2sARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib2svARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glVertexAttrib3dARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib3dvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glVertexAttrib3fARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib3fvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertexAttrib3sARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib3svARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nbv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttrib4NbvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4niv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttrib4NivARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nsv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4NsvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nub-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4))
        "_ALLEGRO_glVertexAttrib4NubARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4nubv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttrib4NubvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nuiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttrib4NuivARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4nusv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttrib4NusvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4bv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttrib4bvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glVertexAttrib4dARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib4dvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glVertexAttrib4fARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib4fvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4iv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttrib4ivARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4s-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glVertexAttrib4sARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4sv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4svARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4ubv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttrib4ubvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4uiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttrib4uivARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4usv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttrib4usvARB_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-pointer-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3)
         (integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glVertexAttribPointerARB_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::enable-vertex-attrib-array-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEnableVertexAttribArrayARB_t(a0);")))
  (begin
    (define gl::disable-vertex-attrib-array-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDisableVertexAttribArrayARB_t(a0);")))
  (begin
    (define gl::program-string-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glProgramStringARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-program-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindProgramARB_t(a0 , a1);")))
  (begin
    (define gl::delete-programs-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteProgramsARB_t(a0 , a1);")))
  (begin
    (define gl::gen-programs-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenProgramsARB_t(a0 , a1);")))
  (begin
    (define gl::program-env-parameter4d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "_ALLEGRO_glProgramEnvParameter4dARB_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-env-parameter4dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glProgramEnvParameter4dvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-env-parameter4f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glProgramEnvParameter4fARB_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-env-parameter4fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glProgramEnvParameter4fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-local-parameter4d-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "_ALLEGRO_glProgramLocalParameter4dARB_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-local-parameter4dv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glProgramLocalParameter4dvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-local-parameter4f-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glProgramLocalParameter4fARB_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-local-parameter4fv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glProgramLocalParameter4fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-env-parameterdv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetProgramEnvParameterdvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-env-parameterfv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetProgramEnvParameterfvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-local-parameterdv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetProgramLocalParameterdvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-local-parameterfv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetProgramLocalParameterfvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-programiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetProgramivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-string-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glGetProgramStringARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribdv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetVertexAttribdvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribfv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVertexAttribfvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-pointerv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetVertexAttribPointervARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::is-program-arb
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsProgramARB_t(a0));")))
  (begin
    (define gl::bind-buffer-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindBufferARB_t(a0 , a1);")))
  (begin
    (define gl::delete-buffers-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteBuffersARB_t(a0 , a1);")))
  (begin
    (define gl::gen-buffers-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenBuffersARB_t(a0 , a1);")))
  (begin
    (define gl::is-buffer-arb
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsBufferARB_t(a0));")))
  (begin
    (define gl::buffer-data-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ((c-pointer void) a2)
         (unsigned-integer a3))
        "_ALLEGRO_glBufferDataARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::buffer-sub-data-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glBufferSubDataARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-buffer-sub-data-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetBufferSubDataARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::map-buffer-arb
      (foreign-lambda*
        (c-pointer void)
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glMapBufferARB_t(a0 , a1));")))
  (begin
    (define gl::unmap-buffer-arb
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glUnmapBufferARB_t(a0));")))
  (begin
    (define gl::get-buffer-parameteriv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetBufferParameterivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-buffer-pointerv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetBufferPointervARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::gen-queries-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenQueriesARB_t(a0 , a1);")))
  (begin
    (define gl::delete-queries-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteQueriesARB_t(a0 , a1);")))
  (begin
    (define gl::is-query-arb
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsQueryARB_t(a0));")))
  (begin
    (define gl::begin-query-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBeginQueryARB_t(a0 , a1);")))
  (begin
    (define gl::end-query-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEndQueryARB_t(a0);")))
  (begin
    (define gl::get-queryiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetQueryivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetQueryObjectivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectuiv-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetQueryObjectuivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::delete-object-arb
      (foreign-lambda*
        void
        ((unsigned-long a0))
        "_ALLEGRO_glDeleteObjectARB_t(a0);")))
  (begin
    (define gl::get-handle-arb
      (foreign-lambda*
        unsigned-long
        ((unsigned-integer a0))
        "return(_ALLEGRO_glGetHandleARB_t(a0));")))
  (begin
    (define gl::detach-object-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (unsigned-long a1))
        "_ALLEGRO_glDetachObjectARB_t(a0 , a1);")))
  (begin
    (define gl::create-shader-object-arb
      (foreign-lambda*
        unsigned-long
        ((unsigned-integer a0))
        "return(_ALLEGRO_glCreateShaderObjectARB_t(a0));")))
  (begin
    (define gl::shader-source-arb
      (foreign-lambda*
        void
        ((unsigned-long a0)
         (integer a1)
         ((c-pointer (c-pointer (const char))) a2)
         (s32vector a3))
        "_ALLEGRO_glShaderSourceARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::compile-shader-arb
      (foreign-lambda*
        void
        ((unsigned-long a0))
        "_ALLEGRO_glCompileShaderARB_t(a0);")))
  (begin
    (define gl::create-program-object-arb
      (foreign-lambda*
        unsigned-long
        ()
        "return(_ALLEGRO_glCreateProgramObjectARB_t());")))
  (begin
    (define gl::attach-object-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (unsigned-long a1))
        "_ALLEGRO_glAttachObjectARB_t(a0 , a1);")))
  (begin
    (define gl::link-program-arb
      (foreign-lambda*
        void
        ((unsigned-long a0))
        "_ALLEGRO_glLinkProgramARB_t(a0);")))
  (begin
    (define gl::use-program-object-arb
      (foreign-lambda*
        void
        ((unsigned-long a0))
        "_ALLEGRO_glUseProgramObjectARB_t(a0);")))
  (begin
    (define gl::validate-program-arb
      (foreign-lambda*
        void
        ((unsigned-long a0))
        "_ALLEGRO_glValidateProgramARB_t(a0);")))
  (begin
    (define gl::uniform1f-arb
      (foreign-lambda*
        void
        ((integer a0) (float a1))
        "_ALLEGRO_glUniform1fARB_t(a0 , a1);")))
  (begin
    (define gl::uniform2f-arb
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2))
        "_ALLEGRO_glUniform2fARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3f-arb
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glUniform3fARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4f-arb
      (foreign-lambda*
        void
        ((integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glUniform4fARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glUniform1iARB_t(a0 , a1);")))
  (begin
    (define gl::uniform2i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glUniform2iARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glUniform3iARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4i-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3) (integer a4))
        "_ALLEGRO_glUniform4iARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform1fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform2fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform3fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glUniform4fvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform1iv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform1ivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2iv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform2ivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3iv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform3ivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4iv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glUniform4ivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform-matrix2fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix2fvARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix3fvARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4fv-arb
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f32vector a3))
        "_ALLEGRO_glUniformMatrix4fvARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-object-parameterfv-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetObjectParameterfvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-object-parameteriv-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetObjectParameterivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-info-log-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetInfoLogARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-attached-objects-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (integer a1) (s32vector a2) (u32vector a3))
        "_ALLEGRO_glGetAttachedObjectsARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-uniform-location-arb
      (foreign-lambda*
        integer
        ((unsigned-long a0) (c-string a1))
        "return(_ALLEGRO_glGetUniformLocationARB_t(a0 , a1));")))
  (begin
    (define gl::get-active-uniform-arb
      (foreign-lambda*
        void
        ((unsigned-long a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4)
         (u32vector a5)
         (c-string a6))
        "_ALLEGRO_glGetActiveUniformARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-uniformfv-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glGetUniformfvARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniformiv-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glGetUniformivARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-shader-source-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetShaderSourceARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-attrib-location-arb
      (foreign-lambda*
        void
        ((unsigned-long a0) (unsigned-integer a1) (c-string a2))
        "_ALLEGRO_glBindAttribLocationARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-active-attrib-arb
      (foreign-lambda*
        void
        ((unsigned-long a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4)
         (u32vector a5)
         (c-string a6))
        "_ALLEGRO_glGetActiveAttribARB_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-attrib-location-arb
      (foreign-lambda*
        integer
        ((unsigned-long a0) (c-string a1))
        "return(_ALLEGRO_glGetAttribLocationARB_t(a0 , a1));")))
  (begin
    (define gl::draw-buffers-arb
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDrawBuffersARB_t(a0 , a1);")))
  (begin
    (define gl::clamp-color-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glClampColorARB_t(a0 , a1);")))
  (begin
    (define gl::draw-arrays-instanced-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glDrawArraysInstancedARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::draw-elements-instanced-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         (integer a4))
        "_ALLEGRO_glDrawElementsInstancedARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::is-renderbuffer
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsRenderbuffer_t(a0));")))
  (begin
    (define gl::bind-renderbuffer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindRenderbuffer_t(a0 , a1);")))
  (begin
    (define gl::delete-renderbuffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteRenderbuffers_t(a0 , a1);")))
  (begin
    (define gl::gen-renderbuffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenRenderbuffers_t(a0 , a1);")))
  (begin
    (define gl::renderbuffer-storage
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glRenderbufferStorage_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-renderbuffer-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetRenderbufferParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::is-framebuffer
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsFramebuffer_t(a0));")))
  (begin
    (define gl::bind-framebuffer
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindFramebuffer_t(a0 , a1);")))
  (begin
    (define gl::delete-framebuffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteFramebuffers_t(a0 , a1);")))
  (begin
    (define gl::gen-framebuffers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenFramebuffers_t(a0 , a1);")))
  (begin
    (define gl::check-framebuffer-status
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glCheckFramebufferStatus_t(a0));")))
  (begin
    (define gl::framebuffer-texture1d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTexture1D_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture2d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTexture2D_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture3d
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glFramebufferTexture3D_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::framebuffer-renderbuffer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glFramebufferRenderbuffer_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-framebuffer-attachment-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetFramebufferAttachmentParameteriv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::generate-mipmap
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glGenerateMipmap_t(a0);")))
  (begin
    (define gl::blit-framebuffer
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9))
        "_ALLEGRO_glBlitFramebuffer_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::renderbuffer-storage-multisample
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glRenderbufferStorageMultisample_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture-layer
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTextureLayer_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-parameteri-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glProgramParameteriARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::framebuffer-texture-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glFramebufferTextureARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::framebuffer-texture-layer-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTextureLayerARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture-face-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glFramebufferTextureFaceARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-divisor
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexAttribDivisor_t(a0 , a1);")))
  (begin
    (define gl::map-buffer-range
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         (unsigned-integer a3))
        "_ALLEGRO_glMapBufferRange_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::flush-mapped-buffer-range
      (foreign-lambda*
        void
        ((unsigned-integer a0) ("intptr_t" a1) ("intptr_t" a2))
        "_ALLEGRO_glFlushMappedBufferRange_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-buffer-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glTexBufferARB_t(a0 , a1 , a2);")))
  (begin
    (define gl::bind-vertex-array
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBindVertexArray_t(a0);")))
  (begin
    (define gl::delete-vertex-arrays
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteVertexArrays_t(a0 , a1);")))
  (begin
    (define gl::gen-vertex-arrays
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenVertexArrays_t(a0 , a1);")))
  (begin
    (define gl::is-vertex-array
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsVertexArray_t(a0));")))
  (begin
    (define gl::get-uniform-indices
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         ((c-pointer (c-pointer (const char))) a2)
         (u32vector a3))
        "_ALLEGRO_glGetUniformIndices_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-active-uniformsiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (u32vector a2)
         (unsigned-integer a3)
         (s32vector a4))
        "_ALLEGRO_glGetActiveUniformsiv_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-active-uniform-name
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (c-string a4))
        "_ALLEGRO_glGetActiveUniformName_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-uniform-block-index
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetUniformBlockIndex_t(a0 , a1));")))
  (begin
    (define gl::get-active-uniform-blockiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetActiveUniformBlockiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-active-uniform-block-name
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (c-string a4))
        "_ALLEGRO_glGetActiveUniformBlockName_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform-block-binding
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glUniformBlockBinding_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-buffer-sub-data
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ("intptr_t" a2)
         ("intptr_t" a3)
         ("intptr_t" a4))
        "_ALLEGRO_glCopyBufferSubData_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::draw-elements-base-vertex
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         (integer a4))
        "_ALLEGRO_glDrawElementsBaseVertex_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::draw-range-elements-base-vertex
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5)
         (integer a6))
        "_ALLEGRO_glDrawRangeElementsBaseVertex_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::draw-elements-instanced-base-vertex
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glDrawElementsInstancedBaseVertex_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::multi-draw-elements-base-vertex
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (s32vector a1)
         (unsigned-integer a2)
         ((c-pointer (c-pointer (const void))) a3)
         (integer a4)
         (s32vector a5))
        "_ALLEGRO_glMultiDrawElementsBaseVertex_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::provoking-vertex
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glProvokingVertex_t(a0);")))
  (begin
    (define gl::fence-sync
      (foreign-lambda*
        (c-pointer (struct "__GLsync"))
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glFenceSync_t(a0 , a1));")))
  (begin
    (define gl::is-sync
      (foreign-lambda*
        unsigned-char
        (((c-pointer (struct "__GLsync")) a0))
        "return(_ALLEGRO_glIsSync_t(a0));")))
  (begin
    (define gl::delete-sync
      (foreign-lambda*
        void
        (((c-pointer (struct "__GLsync")) a0))
        "_ALLEGRO_glDeleteSync_t(a0);")))
  (begin
    (define gl::client-wait-sync
      (foreign-lambda*
        unsigned-integer
        (((c-pointer (struct "__GLsync")) a0)
         (unsigned-integer a1)
         (unsigned-integer64 a2))
        "return(_ALLEGRO_glClientWaitSync_t(a0 , a1 , a2));")))
  (begin
    (define gl::wait-sync
      (foreign-lambda*
        void
        (((c-pointer (struct "__GLsync")) a0)
         (unsigned-integer a1)
         (unsigned-integer64 a2))
        "_ALLEGRO_glWaitSync_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-integer64v
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer integer64) a1))
        "_ALLEGRO_glGetInteger64v_t(a0 , a1);")))
  (begin
    (define gl::get-synciv
      (foreign-lambda*
        void
        (((c-pointer (struct "__GLsync")) a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4))
        "_ALLEGRO_glGetSynciv_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-image2dmultisample
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-char a5))
        "_ALLEGRO_glTexImage2DMultisample_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::tex-image3dmultisample
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-char a6))
        "_ALLEGRO_glTexImage3DMultisample_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-multisamplefv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetMultisamplefv_t(a0 , a1 , a2);")))
  (begin
    (define gl::sample-maski
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glSampleMaski_t(a0 , a1);")))
  (begin
    (define gl::blend-equationi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBlendEquationi_t(a0 , a1);")))
  (begin
    (define gl::blend-equation-separatei
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBlendEquationSeparatei_t(a0 , a1 , a2);")))
  (begin
    (define gl::blend-funci
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBlendFunci_t(a0 , a1 , a2);")))
  (begin
    (define gl::blend-func-separatei
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glBlendFuncSeparatei_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::min-sample-shading
      (foreign-lambda*
        void
        ((float a0))
        "_ALLEGRO_glMinSampleShading_t(a0);")))
  (begin
    (define gl::named-string-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (c-string a2)
         (integer a3)
         (c-string a4))
        "_ALLEGRO_glNamedStringARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::delete-named-string-arb
      (foreign-lambda*
        void
        ((integer a0) (c-string a1))
        "_ALLEGRO_glDeleteNamedStringARB_t(a0 , a1);")))
  (begin
    (define gl::compile-shader-include-arb
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         ((c-pointer (c-pointer (const char))) a2)
         (s32vector a3))
        "_ALLEGRO_glCompileShaderIncludeARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::is-named-string-arb
      (foreign-lambda*
        unsigned-char
        ((integer a0) (c-string a1))
        "return(_ALLEGRO_glIsNamedStringARB_t(a0 , a1));")))
  (begin
    (define gl::get-named-string-arb
      (foreign-lambda*
        void
        ((integer a0) (c-string a1) (integer a2) (s32vector a3) (c-string a4))
        "_ALLEGRO_glGetNamedStringARB_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-named-stringiv-arb
      (foreign-lambda*
        void
        ((integer a0) (c-string a1) (unsigned-integer a2) (s32vector a3))
        "_ALLEGRO_glGetNamedStringivARB_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-frag-data-location-indexed
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (c-string a3))
        "_ALLEGRO_glBindFragDataLocationIndexed_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-frag-data-index
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetFragDataIndex_t(a0 , a1));")))
  (begin
    (define gl::gen-samplers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenSamplers_t(a0 , a1);")))
  (begin
    (define gl::delete-samplers
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteSamplers_t(a0 , a1);")))
  (begin
    (define gl::is-sampler
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsSampler_t(a0));")))
  (begin
    (define gl::bind-sampler
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindSampler_t(a0 , a1);")))
  (begin
    (define gl::sampler-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glSamplerParameteri_t(a0 , a1 , a2);")))
  (begin
    (define gl::sampler-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glSamplerParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::sampler-parameterf
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glSamplerParameterf_t(a0 , a1 , a2);")))
  (begin
    (define gl::sampler-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glSamplerParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::sampler-parameter-iiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glSamplerParameterIiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::sampler-parameter-iuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glSamplerParameterIuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-sampler-parameteriv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetSamplerParameteriv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-sampler-parameter-iiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetSamplerParameterIiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-sampler-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetSamplerParameterfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-sampler-parameter-ifv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetSamplerParameterIfv_t(a0 , a1 , a2);")))
  (begin
    (define gl::query-counter
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glQueryCounter_t(a0 , a1);")))
  (begin
    (define gl::get-query-objecti64v
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer integer64) a2))
        "_ALLEGRO_glGetQueryObjecti64v_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectui64v
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetQueryObjectui64v_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-p2ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexP2ui_t(a0 , a1);")))
  (begin
    (define gl::vertex-p2uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexP2uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexP3ui_t(a0 , a1);")))
  (begin
    (define gl::vertex-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexP3uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-p4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexP4ui_t(a0 , a1);")))
  (begin
    (define gl::vertex-p4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexP4uiv_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p1ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTexCoordP1ui_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p1uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glTexCoordP1uiv_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p2ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTexCoordP2ui_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p2uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glTexCoordP2uiv_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTexCoordP3ui_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glTexCoordP3uiv_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTexCoordP4ui_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-p4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glTexCoordP4uiv_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord-p1ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glMultiTexCoordP1ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p1uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glMultiTexCoordP1uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p2ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glMultiTexCoordP2ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p2uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glMultiTexCoordP2uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glMultiTexCoordP3ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glMultiTexCoordP3uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glMultiTexCoordP4ui_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord-p4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glMultiTexCoordP4uiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::normal-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glNormalP3ui_t(a0 , a1);")))
  (begin
    (define gl::normal-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glNormalP3uiv_t(a0 , a1);")))
  (begin
    (define gl::color-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glColorP3ui_t(a0 , a1);")))
  (begin
    (define gl::color-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glColorP3uiv_t(a0 , a1);")))
  (begin
    (define gl::color-p4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glColorP4ui_t(a0 , a1);")))
  (begin
    (define gl::color-p4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glColorP4uiv_t(a0 , a1);")))
  (begin
    (define gl::secondary-color-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glSecondaryColorP3ui_t(a0 , a1);")))
  (begin
    (define gl::secondary-color-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glSecondaryColorP3uiv_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-p1ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribP1ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p1uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (u32vector a3))
        "_ALLEGRO_glVertexAttribP1uiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p2ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribP2ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p2uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (u32vector a3))
        "_ALLEGRO_glVertexAttribP2uiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p3ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribP3ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p3uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (u32vector a3))
        "_ALLEGRO_glVertexAttribP3uiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p4ui
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribP4ui_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-p4uiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-char a2)
         (u32vector a3))
        "_ALLEGRO_glVertexAttribP4uiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::draw-arrays-indirect
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glDrawArraysIndirect_t(a0 , a1);")))
  (begin
    (define gl::draw-elements-indirect
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glDrawElementsIndirect_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform1d
      (foreign-lambda*
        void
        ((integer a0) (double a1))
        "_ALLEGRO_glUniform1d_t(a0 , a1);")))
  (begin
    (define gl::uniform2d
      (foreign-lambda*
        void
        ((integer a0) (double a1) (double a2))
        "_ALLEGRO_glUniform2d_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3d
      (foreign-lambda*
        void
        ((integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glUniform3d_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4d
      (foreign-lambda*
        void
        ((integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glUniform4d_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glUniform1dv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glUniform2dv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glUniform3dv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glUniform4dv_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform-matrix2dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix2dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix3dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix4dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix2x3dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix2x3dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix2x4dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix2x4dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3x2dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix3x2dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix3x4dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix3x4dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4x2dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix4x2dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform-matrix4x3dv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (unsigned-char a2) (f64vector a3))
        "_ALLEGRO_glUniformMatrix4x3dv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-uniformdv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glGetUniformdv_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniform1d-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (double a2))
        "_ALLEGRO_glProgramUniform1dEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniform2d-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (double a2) (double a3))
        "_ALLEGRO_glProgramUniform2dEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3d-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (double a2)
         (double a3)
         (double a4))
        "_ALLEGRO_glProgramUniform3dEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform4d-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "_ALLEGRO_glProgramUniform4dEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-uniform1dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f64vector a3))
        "_ALLEGRO_glProgramUniform1dvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform2dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f64vector a3))
        "_ALLEGRO_glProgramUniform2dvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f64vector a3))
        "_ALLEGRO_glProgramUniform3dvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform4dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f64vector a3))
        "_ALLEGRO_glProgramUniform4dvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform-matrix2dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix2dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix3dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix4dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix2x3dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix2x3dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix2x4dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix2x4dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3x2dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix3x2dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3x4dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix3x4dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4x2dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix4x2dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4x3dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f64vector a4))
        "_ALLEGRO_glProgramUniformMatrix4x3dvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-subroutine-uniform-location
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "return(_ALLEGRO_glGetSubroutineUniformLocation_t(a0 , a1 , a2));")))
  (begin
    (define gl::get-subroutine-index
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "return(_ALLEGRO_glGetSubroutineIndex_t(a0 , a1 , a2));")))
  (begin
    (define gl::get-active-subroutine-uniformiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (s32vector a4))
        "_ALLEGRO_glGetActiveSubroutineUniformiv_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-active-subroutine-uniform-name
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (s32vector a4)
         (c-string a5))
        "_ALLEGRO_glGetActiveSubroutineUniformName_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-active-subroutine-name
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (s32vector a4)
         (c-string a5))
        "_ALLEGRO_glGetActiveSubroutineName_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::uniform-subroutinesuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniformSubroutinesuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniform-subroutineuiv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glGetUniformSubroutineuiv_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-stageiv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetProgramStageiv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::patch-parameteri
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPatchParameteri_t(a0 , a1);")))
  (begin
    (define gl::patch-parameterfv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPatchParameterfv_t(a0 , a1);")))
  (begin
    (define gl::bind-transform-feedback
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindTransformFeedback_t(a0 , a1);")))
  (begin
    (define gl::delete-transform-feedbacks
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteTransformFeedbacks_t(a0 , a1);")))
  (begin
    (define gl::gen-transform-feedbacks
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenTransformFeedbacks_t(a0 , a1);")))
  (begin
    (define gl::is-transform-feedback
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsTransformFeedback_t(a0));")))
  (begin
    (define gl::pause-transform-feedback
      (foreign-lambda* void () "_ALLEGRO_glPauseTransformFeedback_t();")))
  (begin
    (define gl::resume-transform-feedback
      (foreign-lambda* void () "_ALLEGRO_glResumeTransformFeedback_t();")))
  (begin
    (define gl::draw-transform-feedback
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDrawTransformFeedback_t(a0 , a1);")))
  (begin
    (define gl::draw-transform-feedback-stream
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glDrawTransformFeedbackStream_t(a0 , a1 , a2);")))
  (begin
    (define gl::begin-query-indexed
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBeginQueryIndexed_t(a0 , a1 , a2);")))
  (begin
    (define gl::end-query-indexed
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEndQueryIndexed_t(a0 , a1);")))
  (begin
    (define gl::get-query-indexediv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetQueryIndexediv_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::blend-color-ext
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glBlendColorEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::polygon-offset-ext
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "_ALLEGRO_glPolygonOffsetEXT_t(a0 , a1);")))
  (begin
    (define gl::tex-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glTexImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::tex-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glTexSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::get-tex-filter-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetTexFilterFuncSGIS_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-filter-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (f32vector a3))
        "_ALLEGRO_glTexFilterFuncSGIS_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glTexSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::tex-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glTexSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::copy-tex-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "_ALLEGRO_glCopyTexImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::copy-tex-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "_ALLEGRO_glCopyTexImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::copy-tex-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glCopyTexSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::copy-tex-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "_ALLEGRO_glCopyTexSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::copy-tex-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyTexSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::get-histogram-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glGetHistogramEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-histogram-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetHistogramParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-histogram-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetHistogramParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-minmax-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glGetMinmaxEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-minmax-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetMinmaxParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-minmax-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetMinmaxParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::histogram-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3))
        "_ALLEGRO_glHistogramEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::minmax-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-char a2))
        "_ALLEGRO_glMinmaxEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::reset-histogram-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glResetHistogramEXT_t(a0);")))
  (begin
    (define gl::reset-minmax-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glResetMinmaxEXT_t(a0);")))
  (begin
    (define gl::convolution-filter1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glConvolutionFilter1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::convolution-filter2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glConvolutionFilter2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::convolution-parameterf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glConvolutionParameterfEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glConvolutionParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameteri-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glConvolutionParameteriEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glConvolutionParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-convolution-filter1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyConvolutionFilter1DEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::copy-convolution-filter2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glCopyConvolutionFilter2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-convolution-filter-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetConvolutionFilterEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-convolution-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetConvolutionParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-convolution-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetConvolutionParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-separable-filter-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         ((c-pointer void) a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glGetSeparableFilterEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::separable-filter2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         ((c-pointer void) a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glSeparableFilter2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::color-table-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glColorTableSGI_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::color-table-parameterfv-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glColorTableParameterfvSGI_t(a0 , a1 , a2);")))
  (begin
    (define gl::color-table-parameteriv-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glColorTableParameterivSGI_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-color-table-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyColorTableSGI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-color-table-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetColorTableSGI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-color-table-parameterfv-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetColorTableParameterfvSGI_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-color-table-parameteriv-sgi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetColorTableParameterivSGI_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-tex-gen-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glPixelTexGenSGIX_t(a0);")))
  (begin
    (define gl::pixel-tex-gen-parameteri-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPixelTexGenParameteriSGIS_t(a0 , a1);")))
  (begin
    (define gl::pixel-tex-gen-parameteriv-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glPixelTexGenParameterivSGIS_t(a0 , a1);")))
  (begin
    (define gl::pixel-tex-gen-parameterf-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPixelTexGenParameterfSGIS_t(a0 , a1);")))
  (begin
    (define gl::pixel-tex-gen-parameterfv-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPixelTexGenParameterfvSGIS_t(a0 , a1);")))
  (begin
    (define gl::get-pixel-tex-gen-parameteriv-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glGetPixelTexGenParameterivSGIS_t(a0 , a1);")))
  (begin
    (define gl::get-pixel-tex-gen-parameterfv-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glGetPixelTexGenParameterfvSGIS_t(a0 , a1);")))
  (begin
    (define gl::tex-image4dsgis
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glTexImage4DSGIS_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::tex-sub-image4dsgis
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (integer a9)
         (unsigned-integer a10)
         (unsigned-integer a11)
         ((c-pointer void) a12))
        "_ALLEGRO_glTexSubImage4DSGIS_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12);")))
  (begin
    (define gl::are-textures-resident-ext
      (foreign-lambda*
        unsigned-char
        ((integer a0) (u32vector a1) (u8vector a2))
        "return(_ALLEGRO_glAreTexturesResidentEXT_t(a0 , a1 , a2));")))
  (begin
    (define gl::bind-texture-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindTextureEXT_t(a0 , a1);")))
  (begin
    (define gl::delete-textures-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteTexturesEXT_t(a0 , a1);")))
  (begin
    (define gl::gen-textures-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenTexturesEXT_t(a0 , a1);")))
  (begin
    (define gl::is-texture-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsTextureEXT_t(a0));")))
  (begin
    (define gl::prioritize-textures-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1) (f32vector a2))
        "_ALLEGRO_glPrioritizeTexturesEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::detail-tex-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glDetailTexFuncSGIS_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-detail-tex-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glGetDetailTexFuncSGIS_t(a0 , a1);")))
  (begin
    (define gl::sharpen-tex-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glSharpenTexFuncSGIS_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-sharpen-tex-func-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glGetSharpenTexFuncSGIS_t(a0 , a1);")))
  (begin
    (define gl::sample-mask-sgis
      (foreign-lambda*
        void
        ((float a0) (unsigned-char a1))
        "_ALLEGRO_glSampleMaskSGIS_t(a0 , a1);")))
  (begin
    (define gl::sample-pattern-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glSamplePatternSGIS_t(a0);")))
  (begin
    (define gl::array-element-ext
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glArrayElementEXT_t(a0);")))
  (begin
    (define gl::color-pointer-ext
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glColorPointerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::draw-arrays-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glDrawArraysEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::edge-flag-pointer-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u8vector a2))
        "_ALLEGRO_glEdgeFlagPointerEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-pointerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer (c-pointer void)) a1))
        "_ALLEGRO_glGetPointervEXT_t(a0 , a1);")))
  (begin
    (define gl::index-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glIndexPointerEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glNormalPointerEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-coord-pointer-ext
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glTexCoordPointerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-pointer-ext
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glVertexPointerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::blend-equation-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBlendEquationEXT_t(a0);")))
  (begin
    (define gl::sprite-parameterf-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glSpriteParameterfSGIX_t(a0 , a1);")))
  (begin
    (define gl::sprite-parameterfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glSpriteParameterfvSGIX_t(a0 , a1);")))
  (begin
    (define gl::sprite-parameteri-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glSpriteParameteriSGIX_t(a0 , a1);")))
  (begin
    (define gl::sprite-parameteriv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glSpriteParameterivSGIX_t(a0 , a1);")))
  (begin
    (define gl::point-parameterf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPointParameterfEXT_t(a0 , a1);")))
  (begin
    (define gl::point-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPointParameterfvEXT_t(a0 , a1);")))
  (begin
    (define gl::point-parameterf-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPointParameterfSGIS_t(a0 , a1);")))
  (begin
    (define gl::point-parameterfv-sgis
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glPointParameterfvSGIS_t(a0 , a1);")))
  (begin
    (define gl::get-instruments-sgix
      (foreign-lambda*
        integer
        ()
        "return(_ALLEGRO_glGetInstrumentsSGIX_t());")))
  (begin
    (define gl::instruments-buffer-sgix
      (foreign-lambda*
        void
        ((integer a0) (s32vector a1))
        "_ALLEGRO_glInstrumentsBufferSGIX_t(a0 , a1);")))
  (begin
    (define gl::poll-instruments-sgix
      (foreign-lambda*
        integer
        ((s32vector a0))
        "return(_ALLEGRO_glPollInstrumentsSGIX_t(a0));")))
  (begin
    (define gl::read-instruments-sgix
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glReadInstrumentsSGIX_t(a0);")))
  (begin
    (define gl::start-instruments-sgix
      (foreign-lambda* void () "_ALLEGRO_glStartInstrumentsSGIX_t();")))
  (begin
    (define gl::stop-instruments-sgix
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glStopInstrumentsSGIX_t(a0);")))
  (begin
    (define gl::frame-zoom-sgix
      (foreign-lambda* void ((integer a0)) "_ALLEGRO_glFrameZoomSGIX_t(a0);")))
  (begin
    (define gl::tag-sample-buffer-sgix
      (foreign-lambda* void () "_ALLEGRO_glTagSampleBufferSGIX_t();")))
  (begin
    (define gl::deformation-map3d-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (integer a3)
         (integer a4)
         (double a5)
         (double a6)
         (integer a7)
         (integer a8)
         (double a9)
         (double a10)
         (integer a11)
         (integer a12)
         (f64vector a13))
        "_ALLEGRO_glDeformationMap3dSGIX_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13);")))
  (begin
    (define gl::deformation-map3f-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (integer a3)
         (integer a4)
         (float a5)
         (float a6)
         (integer a7)
         (integer a8)
         (float a9)
         (float a10)
         (integer a11)
         (integer a12)
         (f32vector a13))
        "_ALLEGRO_glDeformationMap3fSGIX_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13);")))
  (begin
    (define gl::deform-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDeformSGIX_t(a0);")))
  (begin
    (define gl::load-identity-deformation-map-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glLoadIdentityDeformationMapSGIX_t(a0);")))
  (begin
    (define gl::reference-plane-sgix
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glReferencePlaneSGIX_t(a0);")))
  (begin
    (define gl::flush-raster-sgix
      (foreign-lambda* void () "_ALLEGRO_glFlushRasterSGIX_t();")))
  (begin
    (define gl::fog-func-sgis
      (foreign-lambda*
        void
        ((integer a0) (f32vector a1))
        "_ALLEGRO_glFogFuncSGIS_t(a0 , a1);")))
  (begin
    (define gl::get-fog-func-sgis
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glGetFogFuncSGIS_t(a0);")))
  (begin
    (define gl::image-transform-parameteri-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glImageTransformParameteriHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::image-transform-parameterf-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glImageTransformParameterfHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::image-transform-parameteriv-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glImageTransformParameterivHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::image-transform-parameterfv-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glImageTransformParameterfvHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-image-transform-parameteriv-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetImageTransformParameterivHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-image-transform-parameterfv-hp
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetImageTransformParameterfvHP_t(a0 , a1 , a2);")))
  (begin
    (define gl::copy-color-sub-table-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glCopyColorSubTableEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::hint-pgi
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glHintPGI_t(a0 , a1);")))
  (begin
    (define gl::color-table-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glColorTableEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-color-table-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetColorTableEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-color-table-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetColorTableParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-color-table-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetColorTableParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-list-parameterfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetListParameterfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-list-parameteriv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetListParameterivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::list-parameterf-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glListParameterfSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::list-parameterfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glListParameterfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::list-parameteri-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glListParameteriSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::list-parameteriv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glListParameterivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::index-material-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glIndexMaterialEXT_t(a0 , a1);")))
  (begin
    (define gl::index-func-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glIndexFuncEXT_t(a0 , a1);")))
  (begin
    (define gl::lock-arrays-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glLockArraysEXT_t(a0 , a1);")))
  (begin
    (define gl::unlock-arrays-ext
      (foreign-lambda* void () "_ALLEGRO_glUnlockArraysEXT_t();")))
  (begin
    (define gl::cull-parameterdv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glCullParameterdvEXT_t(a0 , a1);")))
  (begin
    (define gl::cull-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glCullParameterfvEXT_t(a0 , a1);")))
  (begin
    (define gl::fragment-color-material-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glFragmentColorMaterialSGIX_t(a0 , a1);")))
  (begin
    (define gl::fragment-lightf-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glFragmentLightfSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-lightfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glFragmentLightfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-lighti-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glFragmentLightiSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-lightiv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glFragmentLightivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-light-modelf-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glFragmentLightModelfSGIX_t(a0 , a1);")))
  (begin
    (define gl::fragment-light-modelfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glFragmentLightModelfvSGIX_t(a0 , a1);")))
  (begin
    (define gl::fragment-light-modeli-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glFragmentLightModeliSGIX_t(a0 , a1);")))
  (begin
    (define gl::fragment-light-modeliv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glFragmentLightModelivSGIX_t(a0 , a1);")))
  (begin
    (define gl::fragment-materialf-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glFragmentMaterialfSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-materialfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glFragmentMaterialfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-materiali-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glFragmentMaterialiSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::fragment-materialiv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glFragmentMaterialivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-fragment-lightfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetFragmentLightfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-fragment-lightiv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFragmentLightivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-fragment-materialfv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetFragmentMaterialfvSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-fragment-materialiv-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFragmentMaterialivSGIX_t(a0 , a1 , a2);")))
  (begin
    (define gl::light-envi-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glLightEnviSGIX_t(a0 , a1);")))
  (begin
    (define gl::draw-range-elements-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glDrawRangeElementsEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::apply-texture-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glApplyTextureEXT_t(a0);")))
  (begin
    (define gl::texture-light-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glTextureLightEXT_t(a0);")))
  (begin
    (define gl::texture-material-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTextureMaterialEXT_t(a0 , a1);")))
  (begin
    (define gl::async-marker-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glAsyncMarkerSGIX_t(a0);")))
  (begin
    (define gl::finish-async-sgix
      (foreign-lambda*
        integer
        ((u32vector a0))
        "return(_ALLEGRO_glFinishAsyncSGIX_t(a0));")))
  (begin
    (define gl::poll-async-sgix
      (foreign-lambda*
        integer
        ((u32vector a0))
        "return(_ALLEGRO_glPollAsyncSGIX_t(a0));")))
  (begin
    (define gl::gen-async-markers-sgix
      (foreign-lambda*
        unsigned-integer
        ((integer a0))
        "return(_ALLEGRO_glGenAsyncMarkersSGIX_t(a0));")))
  (begin
    (define gl::delete-async-markers-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glDeleteAsyncMarkersSGIX_t(a0 , a1);")))
  (begin
    (define gl::is-async-marker-sgix
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsAsyncMarkerSGIX_t(a0));")))
  (begin
    (define gl::vertex-pointerv-intel
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer (const void))) a2))
        "_ALLEGRO_glVertexPointervINTEL_t(a0 , a1 , a2);")))
  (begin
    (define gl::normal-pointerv-intel
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer (c-pointer (const void))) a1))
        "_ALLEGRO_glNormalPointervINTEL_t(a0 , a1);")))
  (begin
    (define gl::color-pointerv-intel
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer (const void))) a2))
        "_ALLEGRO_glColorPointervINTEL_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord-pointerv-intel
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer (const void))) a2))
        "_ALLEGRO_glTexCoordPointervINTEL_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-transform-parameteri-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glPixelTransformParameteriEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-transform-parameterf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (float a2))
        "_ALLEGRO_glPixelTransformParameterfEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-transform-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glPixelTransformParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-transform-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glPixelTransformParameterfvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3b-ext
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glSecondaryColor3bEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3bv-ext
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glSecondaryColor3bvEXT_t(a0);")))
  (begin
    (define gl::secondary-color3d-ext
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glSecondaryColor3dEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3dv-ext
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glSecondaryColor3dvEXT_t(a0);")))
  (begin
    (define gl::secondary-color3f-ext
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glSecondaryColor3fEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3fv-ext
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glSecondaryColor3fvEXT_t(a0);")))
  (begin
    (define gl::secondary-color3i-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glSecondaryColor3iEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3iv-ext
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glSecondaryColor3ivEXT_t(a0);")))
  (begin
    (define gl::secondary-color3s-ext
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glSecondaryColor3sEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3sv-ext
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glSecondaryColor3svEXT_t(a0);")))
  (begin
    (define gl::secondary-color3ub-ext
      (foreign-lambda*
        void
        ((unsigned-char a0) (unsigned-char a1) (unsigned-char a2))
        "_ALLEGRO_glSecondaryColor3ubEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3ubv-ext
      (foreign-lambda*
        void
        ((u8vector a0))
        "_ALLEGRO_glSecondaryColor3ubvEXT_t(a0);")))
  (begin
    (define gl::secondary-color3ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glSecondaryColor3uiEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3uiv-ext
      (foreign-lambda*
        void
        ((u32vector a0))
        "_ALLEGRO_glSecondaryColor3uivEXT_t(a0);")))
  (begin
    (define gl::secondary-color3us-ext
      (foreign-lambda*
        void
        ((unsigned-short a0) (unsigned-short a1) (unsigned-short a2))
        "_ALLEGRO_glSecondaryColor3usEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3usv-ext
      (foreign-lambda*
        void
        ((u16vector a0))
        "_ALLEGRO_glSecondaryColor3usvEXT_t(a0);")))
  (begin
    (define gl::secondary-color-pointer-ext
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glSecondaryColorPointerEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-normal-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glTextureNormalEXT_t(a0);")))
  (begin
    (define gl::multi-draw-arrays-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1) (s32vector a2) (integer a3))
        "_ALLEGRO_glMultiDrawArraysEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-draw-elements-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (s32vector a1)
         (unsigned-integer a2)
         ((c-pointer (c-pointer (const void))) a3)
         (integer a4))
        "_ALLEGRO_glMultiDrawElementsEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::fog-coordf-ext
      (foreign-lambda* void ((float a0)) "_ALLEGRO_glFogCoordfEXT_t(a0);")))
  (begin
    (define gl::fog-coordfv-ext
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glFogCoordfvEXT_t(a0);")))
  (begin
    (define gl::fog-coordd-ext
      (foreign-lambda* void ((double a0)) "_ALLEGRO_glFogCoorddEXT_t(a0);")))
  (begin
    (define gl::fog-coorddv-ext
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glFogCoorddvEXT_t(a0);")))
  (begin
    (define gl::fog-coord-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glFogCoordPointerEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3b-ext
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glTangent3bEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3bv-ext
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glTangent3bvEXT_t(a0);")))
  (begin
    (define gl::tangent3d-ext
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glTangent3dEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3dv-ext
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glTangent3dvEXT_t(a0);")))
  (begin
    (define gl::tangent3f-ext
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glTangent3fEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3fv-ext
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glTangent3fvEXT_t(a0);")))
  (begin
    (define gl::tangent3i-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glTangent3iEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3iv-ext
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glTangent3ivEXT_t(a0);")))
  (begin
    (define gl::tangent3s-ext
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glTangent3sEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::tangent3sv-ext
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glTangent3svEXT_t(a0);")))
  (begin
    (define gl::binormal3b-ext
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glBinormal3bEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal3bv-ext
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glBinormal3bvEXT_t(a0);")))
  (begin
    (define gl::binormal3d-ext
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glBinormal3dEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal3dv-ext
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glBinormal3dvEXT_t(a0);")))
  (begin
    (define gl::binormal3f-ext
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glBinormal3fEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal3fv-ext
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glBinormal3fvEXT_t(a0);")))
  (begin
    (define gl::binormal3i-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glBinormal3iEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal3iv-ext
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glBinormal3ivEXT_t(a0);")))
  (begin
    (define gl::binormal3s-ext
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glBinormal3sEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal3sv-ext
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glBinormal3svEXT_t(a0);")))
  (begin
    (define gl::tangent-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glTangentPointerEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::binormal-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glBinormalPointerEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::finish-texture-sunx
      (foreign-lambda* void () "_ALLEGRO_glFinishTextureSUNX_t();")))
  (begin
    (define gl::global-alpha-factorb-sun
      (foreign-lambda*
        void
        ((char a0))
        "_ALLEGRO_glGlobalAlphaFactorbSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factors-sun
      (foreign-lambda*
        void
        ((short a0))
        "_ALLEGRO_glGlobalAlphaFactorsSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factori-sun
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glGlobalAlphaFactoriSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factorf-sun
      (foreign-lambda*
        void
        ((float a0))
        "_ALLEGRO_glGlobalAlphaFactorfSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factord-sun
      (foreign-lambda*
        void
        ((double a0))
        "_ALLEGRO_glGlobalAlphaFactordSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factorub-sun
      (foreign-lambda*
        void
        ((unsigned-char a0))
        "_ALLEGRO_glGlobalAlphaFactorubSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factorus-sun
      (foreign-lambda*
        void
        ((unsigned-short a0))
        "_ALLEGRO_glGlobalAlphaFactorusSUN_t(a0);")))
  (begin
    (define gl::global-alpha-factorui-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glGlobalAlphaFactoruiSUN_t(a0);")))
  (begin
    (define gl::replacement-codeui-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glReplacementCodeuiSUN_t(a0);")))
  (begin
    (define gl::replacement-codeus-sun
      (foreign-lambda*
        void
        ((unsigned-short a0))
        "_ALLEGRO_glReplacementCodeusSUN_t(a0);")))
  (begin
    (define gl::replacement-codeub-sun
      (foreign-lambda*
        void
        ((unsigned-char a0))
        "_ALLEGRO_glReplacementCodeubSUN_t(a0);")))
  (begin
    (define gl::replacement-codeuiv-sun
      (foreign-lambda*
        void
        ((u32vector a0))
        "_ALLEGRO_glReplacementCodeuivSUN_t(a0);")))
  (begin
    (define gl::replacement-codeusv-sun
      (foreign-lambda*
        void
        ((u16vector a0))
        "_ALLEGRO_glReplacementCodeusvSUN_t(a0);")))
  (begin
    (define gl::replacement-codeubv-sun
      (foreign-lambda*
        void
        ((u8vector a0))
        "_ALLEGRO_glReplacementCodeubvSUN_t(a0);")))
  (begin
    (define gl::replacement-code-pointer-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         ((c-pointer (c-pointer (const void))) a2))
        "_ALLEGRO_glReplacementCodePointerSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::color4ub-vertex2f-sun
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glColor4ubVertex2fSUN_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::color4ub-vertex2fv-sun
      (foreign-lambda*
        void
        ((u8vector a0) (f32vector a1))
        "_ALLEGRO_glColor4ubVertex2fvSUN_t(a0 , a1);")))
  (begin
    (define gl::color4ub-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (float a4)
         (float a5)
         (float a6))
        "_ALLEGRO_glColor4ubVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::color4ub-vertex3fv-sun
      (foreign-lambda*
        void
        ((u8vector a0) (f32vector a1))
        "_ALLEGRO_glColor4ubVertex3fvSUN_t(a0 , a1);")))
  (begin
    (define gl::color3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3) (float a4) (float a5))
        "_ALLEGRO_glColor3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::color3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "_ALLEGRO_glColor3fVertex3fvSUN_t(a0 , a1);")))
  (begin
    (define gl::normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3) (float a4) (float a5))
        "_ALLEGRO_glNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "_ALLEGRO_glNormal3fVertex3fvSUN_t(a0 , a1);")))
  (begin
    (define gl::color4f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8)
         (float a9))
        "_ALLEGRO_glColor4fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::color4f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glColor4fNormal3fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord2f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glTexCoord2fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-coord2f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "_ALLEGRO_glTexCoord2fVertex3fvSUN_t(a0 , a1);")))
  (begin
    (define gl::tex-coord4f-vertex4f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7))
        "_ALLEGRO_glTexCoord4fVertex4fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::tex-coord4f-vertex4fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1))
        "_ALLEGRO_glTexCoord4fVertex4fvSUN_t(a0 , a1);")))
  (begin
    (define gl::tex-coord2f-color4ub-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4)
         (unsigned-char a5)
         (float a6)
         (float a7)
         (float a8))
        "_ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::tex-coord2f-color4ub-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (u8vector a1) (f32vector a2))
        "_ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord2f-color3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7))
        "_ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::tex-coord2f-color3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord2f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7))
        "_ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::tex-coord2f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord2f-color4f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8)
         (float a9)
         (float a10)
         (float a11))
        "_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::tex-coord2f-color4f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1) (f32vector a2) (f32vector a3))
        "_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-coord4f-color4f-normal3f-vertex4f-sun
      (foreign-lambda*
        void
        ((float a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8)
         (float a9)
         (float a10)
         (float a11)
         (float a12)
         (float a13)
         (float a14))
        "_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14);")))
  (begin
    (define gl::tex-coord4f-color4f-normal3f-vertex4fv-sun
      (foreign-lambda*
        void
        ((f32vector a0) (f32vector a1) (f32vector a2) (f32vector a3))
        "_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::replacement-codeui-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glReplacementCodeuiVertex3fSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::replacement-codeui-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1))
        "_ALLEGRO_glReplacementCodeuiVertex3fvSUN_t(a0 , a1);")))
  (begin
    (define gl::replacement-codeui-color4ub-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4)
         (float a5)
         (float a6)
         (float a7))
        "_ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::replacement-codeui-color4ub-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (u8vector a1) (f32vector a2))
        "_ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::replacement-codeui-color3f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6))
        "_ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::replacement-codeui-color3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::replacement-codeui-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6))
        "_ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::replacement-codeui-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::replacement-codeui-color4f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8)
         (float a9)
         (float a10))
        "_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::replacement-codeui-color4f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1) (f32vector a2) (f32vector a3))
        "_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1) (f32vector a2))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t(a0 , a1 , a2);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0) (f32vector a1) (f32vector a2) (f32vector a3))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-color4f-normal3f-vertex3f-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (float a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6)
         (float a7)
         (float a8)
         (float a9)
         (float a10)
         (float a11)
         (float a12))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12);")))
  (begin
    (define gl::replacement-codeui-tex-coord2f-color4f-normal3f-vertex3fv-sun
      (foreign-lambda*
        void
        ((u32vector a0)
         (f32vector a1)
         (f32vector a2)
         (f32vector a3)
         (f32vector a4))
        "_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::blend-func-separate-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glBlendFuncSeparateEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::blend-func-separate-ingr
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glBlendFuncSeparateINGR_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-weightf-ext
      (foreign-lambda*
        void
        ((float a0))
        "_ALLEGRO_glVertexWeightfEXT_t(a0);")))
  (begin
    (define gl::vertex-weightfv-ext
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glVertexWeightfvEXT_t(a0);")))
  (begin
    (define gl::vertex-weight-pointer-ext
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2) ((c-pointer void) a3))
        "_ALLEGRO_glVertexWeightPointerEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::flush-vertex-array-range-nv
      (foreign-lambda* void () "_ALLEGRO_glFlushVertexArrayRangeNV_t();")))
  (begin
    (define gl::vertex-array-range-nv
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glVertexArrayRangeNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glCombinerParameterfvNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-parameterf-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glCombinerParameterfNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glCombinerParameterivNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-parameteri-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glCombinerParameteriNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-input-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glCombinerInputNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::combiner-output-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-char a7)
         (unsigned-char a8)
         (unsigned-char a9))
        "_ALLEGRO_glCombinerOutputNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::final-combiner-input-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glFinalCombinerInputNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-combiner-input-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (f32vector a4))
        "_ALLEGRO_glGetCombinerInputParameterfvNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-combiner-input-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (s32vector a4))
        "_ALLEGRO_glGetCombinerInputParameterivNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-combiner-output-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetCombinerOutputParameterfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-combiner-output-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetCombinerOutputParameterivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-final-combiner-input-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetFinalCombinerInputParameterfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-final-combiner-input-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFinalCombinerInputParameterivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::resize-buffers-mesa
      (foreign-lambda* void () "_ALLEGRO_glResizeBuffersMESA_t();")))
  (begin
    (define gl::window-pos2d-mesa
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glWindowPos2dMESA_t(a0 , a1);")))
  (begin
    (define gl::window-pos2dv-mesa
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos2dvMESA_t(a0);")))
  (begin
    (define gl::window-pos2f-mesa
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "_ALLEGRO_glWindowPos2fMESA_t(a0 , a1);")))
  (begin
    (define gl::window-pos2fv-mesa
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos2fvMESA_t(a0);")))
  (begin
    (define gl::window-pos2i-mesa
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glWindowPos2iMESA_t(a0 , a1);")))
  (begin
    (define gl::window-pos2iv-mesa
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos2ivMESA_t(a0);")))
  (begin
    (define gl::window-pos2s-mesa
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "_ALLEGRO_glWindowPos2sMESA_t(a0 , a1);")))
  (begin
    (define gl::window-pos2sv-mesa
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos2svMESA_t(a0);")))
  (begin
    (define gl::window-pos3d-mesa
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2))
        "_ALLEGRO_glWindowPos3dMESA_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3dv-mesa
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos3dvMESA_t(a0);")))
  (begin
    (define gl::window-pos3f-mesa
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2))
        "_ALLEGRO_glWindowPos3fMESA_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3fv-mesa
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos3fvMESA_t(a0);")))
  (begin
    (define gl::window-pos3i-mesa
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glWindowPos3iMESA_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3iv-mesa
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos3ivMESA_t(a0);")))
  (begin
    (define gl::window-pos3s-mesa
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glWindowPos3sMESA_t(a0 , a1 , a2);")))
  (begin
    (define gl::window-pos3sv-mesa
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos3svMESA_t(a0);")))
  (begin
    (define gl::window-pos4d-mesa
      (foreign-lambda*
        void
        ((double a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glWindowPos4dMESA_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos4dv-mesa
      (foreign-lambda*
        void
        ((f64vector a0))
        "_ALLEGRO_glWindowPos4dvMESA_t(a0);")))
  (begin
    (define gl::window-pos4f-mesa
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glWindowPos4fMESA_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos4fv-mesa
      (foreign-lambda*
        void
        ((f32vector a0))
        "_ALLEGRO_glWindowPos4fvMESA_t(a0);")))
  (begin
    (define gl::window-pos4i-mesa
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glWindowPos4iMESA_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos4iv-mesa
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glWindowPos4ivMESA_t(a0);")))
  (begin
    (define gl::window-pos4s-mesa
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glWindowPos4sMESA_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::window-pos4sv-mesa
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glWindowPos4svMESA_t(a0);")))
  (begin
    (define gl::multi-mode-draw-arrays-ibm
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (s32vector a1)
         (s32vector a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glMultiModeDrawArraysIBM_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-mode-draw-elements-ibm
      (foreign-lambda*
        void
        ((u32vector a0)
         (s32vector a1)
         (unsigned-integer a2)
         ((c-pointer (c-pointer (const void))) a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glMultiModeDrawElementsIBM_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::tbuffer-mask3dfx
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glTbufferMask3DFX_t(a0);")))
  (begin
    (define gl::sample-mask-ext
      (foreign-lambda*
        void
        ((float a0) (unsigned-char a1))
        "_ALLEGRO_glSampleMaskEXT_t(a0 , a1);")))
  (begin
    (define gl::sample-pattern-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glSamplePatternEXT_t(a0);")))
  (begin
    (define gl::texture-color-mask-sgis
      (foreign-lambda*
        void
        ((unsigned-char a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3))
        "_ALLEGRO_glTextureColorMaskSGIS_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::igloo-interface-sgix
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glIglooInterfaceSGIX_t(a0 , a1);")))
  (begin
    (define gl::delete-fences-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteFencesNV_t(a0 , a1);")))
  (begin
    (define gl::gen-fences-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenFencesNV_t(a0 , a1);")))
  (begin
    (define gl::is-fence-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsFenceNV_t(a0));")))
  (begin
    (define gl::test-fence-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glTestFenceNV_t(a0));")))
  (begin
    (define gl::get-fenceiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFenceivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::finish-fence-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glFinishFenceNV_t(a0);")))
  (begin
    (define gl::set-fence-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glSetFenceNV_t(a0 , a1);")))
  (begin
    (define gl::map-control-points-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-char a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glMapControlPointsNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::map-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glMapParameterivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::map-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glMapParameterfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-map-control-points-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (unsigned-char a5)
         ((c-pointer void) a6))
        "_ALLEGRO_glGetMapControlPointsNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-map-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetMapParameterivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-map-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetMapParameterfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-map-attrib-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetMapAttribParameterivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-map-attrib-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetMapAttribParameterfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::eval-maps-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEvalMapsNV_t(a0 , a1);")))
  (begin
    (define gl::combiner-stage-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glCombinerStageParameterfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-combiner-stage-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetCombinerStageParameterfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::are-programs-resident-nv
      (foreign-lambda*
        unsigned-char
        ((integer a0) (u32vector a1) (u8vector a2))
        "return(_ALLEGRO_glAreProgramsResidentNV_t(a0 , a1 , a2));")))
  (begin
    (define gl::bind-program-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindProgramNV_t(a0 , a1);")))
  (begin
    (define gl::delete-programs-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteProgramsNV_t(a0 , a1);")))
  (begin
    (define gl::execute-program-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glExecuteProgramNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::gen-programs-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenProgramsNV_t(a0 , a1);")))
  (begin
    (define gl::get-program-parameterdv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glGetProgramParameterdvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetProgramParameterfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-programiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetProgramivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-string-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetProgramStringNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-track-matrixiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetTrackMatrixivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-vertex-attribdv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetVertexAttribdvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVertexAttribfvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attribiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-pointerv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetVertexAttribPointervNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::is-program-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsProgramNV_t(a0));")))
  (begin
    (define gl::load-program-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (u8vector a3))
        "_ALLEGRO_glLoadProgramNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-parameter4d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5))
        "_ALLEGRO_glProgramParameter4dNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-parameter4dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glProgramParameter4dvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-parameter4f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glProgramParameter4fNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-parameter4fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glProgramParameter4fvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-parameters4dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glProgramParameters4dvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-parameters4fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glProgramParameters4fvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::request-resident-programs-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glRequestResidentProgramsNV_t(a0 , a1);")))
  (begin
    (define gl::track-matrix-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glTrackMatrixNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-pointer-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glVertexAttribPointerNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib1d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glVertexAttrib1dNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib1dvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glVertexAttrib1fNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib1fvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1s-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glVertexAttrib1sNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib1svNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glVertexAttrib2dNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib2dvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glVertexAttrib2fNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib2fvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2s-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glVertexAttrib2sNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib2svNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glVertexAttrib3dNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib3dvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glVertexAttrib3fNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib3fvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3s-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertexAttrib3sNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib3svNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glVertexAttrib4dNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexAttrib4dvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glVertexAttrib4fNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexAttrib4fvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4s-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glVertexAttrib4sNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4svNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4ub-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4))
        "_ALLEGRO_glVertexAttrib4ubNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4ubv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttrib4ubvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attribs1dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glVertexAttribs1dvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs1fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glVertexAttribs1fvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs1sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs1svNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs2dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glVertexAttribs2dvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs2fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glVertexAttribs2fvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs2sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs2svNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs3dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glVertexAttribs3dvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs3fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glVertexAttribs3fvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs3sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs3svNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs4dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f64vector a2))
        "_ALLEGRO_glVertexAttribs4dvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs4fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (f32vector a2))
        "_ALLEGRO_glVertexAttribs4fvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs4sv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs4svNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs4ubv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u8vector a2))
        "_ALLEGRO_glVertexAttribs4ubvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-bump-parameteriv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glTexBumpParameterivATI_t(a0 , a1);")))
  (begin
    (define gl::tex-bump-parameterfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glTexBumpParameterfvATI_t(a0 , a1);")))
  (begin
    (define gl::get-tex-bump-parameteriv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glGetTexBumpParameterivATI_t(a0 , a1);")))
  (begin
    (define gl::get-tex-bump-parameterfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glGetTexBumpParameterfvATI_t(a0 , a1);")))
  (begin
    (define gl::gen-fragment-shaders-ati
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glGenFragmentShadersATI_t(a0));")))
  (begin
    (define gl::bind-fragment-shader-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBindFragmentShaderATI_t(a0);")))
  (begin
    (define gl::delete-fragment-shader-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDeleteFragmentShaderATI_t(a0);")))
  (begin
    (define gl::begin-fragment-shader-ati
      (foreign-lambda* void () "_ALLEGRO_glBeginFragmentShaderATI_t();")))
  (begin
    (define gl::end-fragment-shader-ati
      (foreign-lambda* void () "_ALLEGRO_glEndFragmentShaderATI_t();")))
  (begin
    (define gl::pass-tex-coord-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glPassTexCoordATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::sample-map-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glSampleMapATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::color-fragment-op1ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6))
        "_ALLEGRO_glColorFragmentOp1ATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::color-fragment-op2ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9))
        "_ALLEGRO_glColorFragmentOp2ATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::color-fragment-op3ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         (unsigned-integer a10)
         (unsigned-integer a11)
         (unsigned-integer a12))
        "_ALLEGRO_glColorFragmentOp3ATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12);")))
  (begin
    (define gl::alpha-fragment-op1ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glAlphaFragmentOp1ATI_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::alpha-fragment-op2ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8))
        "_ALLEGRO_glAlphaFragmentOp2ATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::alpha-fragment-op3ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         (unsigned-integer a10)
         (unsigned-integer a11))
        "_ALLEGRO_glAlphaFragmentOp3ATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::set-fragment-shader-constant-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glSetFragmentShaderConstantATI_t(a0 , a1);")))
  (begin
    (define gl::pntrianglesi-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPNTrianglesiATI_t(a0 , a1);")))
  (begin
    (define gl::pntrianglesf-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glPNTrianglesfATI_t(a0 , a1);")))
  (begin
    (define gl::new-object-buffer-ati
      (foreign-lambda*
        unsigned-integer
        ((integer a0) ((c-pointer void) a1) (unsigned-integer a2))
        "return(_ALLEGRO_glNewObjectBufferATI_t(a0 , a1 , a2));")))
  (begin
    (define gl::is-object-buffer-ati
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsObjectBufferATI_t(a0));")))
  (begin
    (define gl::update-object-buffer-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         ((c-pointer void) a3)
         (unsigned-integer a4))
        "_ALLEGRO_glUpdateObjectBufferATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-object-bufferfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetObjectBufferfvATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-object-bufferiv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetObjectBufferivATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::free-object-buffer-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glFreeObjectBufferATI_t(a0);")))
  (begin
    (define gl::array-object-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glArrayObjectATI_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-array-objectfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetArrayObjectfvATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-array-objectiv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetArrayObjectivATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::variant-array-object-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glVariantArrayObjectATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-variant-array-objectfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVariantArrayObjectfvATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-variant-array-objectiv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVariantArrayObjectivATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::begin-vertex-shader-ext
      (foreign-lambda* void () "_ALLEGRO_glBeginVertexShaderEXT_t();")))
  (begin
    (define gl::end-vertex-shader-ext
      (foreign-lambda* void () "_ALLEGRO_glEndVertexShaderEXT_t();")))
  (begin
    (define gl::bind-vertex-shader-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBindVertexShaderEXT_t(a0);")))
  (begin
    (define gl::gen-vertex-shaders-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glGenVertexShadersEXT_t(a0));")))
  (begin
    (define gl::delete-vertex-shader-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDeleteVertexShaderEXT_t(a0);")))
  (begin
    (define gl::shader-op1ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glShaderOp1EXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::shader-op2ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glShaderOp2EXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::shader-op3ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glShaderOp3EXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::swizzle-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glSwizzleEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::write-mask-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glWriteMaskEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::insert-component-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glInsertComponentEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::extract-component-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glExtractComponentEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::gen-symbols-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "return(_ALLEGRO_glGenSymbolsEXT_t(a0 , a1 , a2 , a3));")))
  (begin
    (define gl::set-invariant-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glSetInvariantEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::set-local-constant-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glSetLocalConstantEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::variantbv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVariantbvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantsv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVariantsvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVariantivEXT_t(a0 , a1);")))
  (begin
    (define gl::variantfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVariantfvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantdv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVariantdvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantubv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVariantubvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantusv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVariantusvEXT_t(a0 , a1);")))
  (begin
    (define gl::variantuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVariantuivEXT_t(a0 , a1);")))
  (begin
    (define gl::variant-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glVariantPointerEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::enable-variant-client-state-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEnableVariantClientStateEXT_t(a0);")))
  (begin
    (define gl::disable-variant-client-state-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glDisableVariantClientStateEXT_t(a0);")))
  (begin
    (define gl::bind-light-parameter-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glBindLightParameterEXT_t(a0 , a1));")))
  (begin
    (define gl::bind-material-parameter-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glBindMaterialParameterEXT_t(a0 , a1));")))
  (begin
    (define gl::bind-tex-gen-parameter-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "return(_ALLEGRO_glBindTexGenParameterEXT_t(a0 , a1 , a2));")))
  (begin
    (define gl::bind-texture-unit-parameter-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glBindTextureUnitParameterEXT_t(a0 , a1));")))
  (begin
    (define gl::bind-parameter-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glBindParameterEXT_t(a0));")))
  (begin
    (define gl::is-variant-enabled-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glIsVariantEnabledEXT_t(a0 , a1));")))
  (begin
    (define gl::get-variant-booleanv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetVariantBooleanvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-variant-integerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVariantIntegervEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-variant-floatv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVariantFloatvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-variant-pointerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetVariantPointervEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-invariant-booleanv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetInvariantBooleanvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-invariant-integerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetInvariantIntegervEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-invariant-floatv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetInvariantFloatvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-local-constant-booleanv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetLocalConstantBooleanvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-local-constant-integerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetLocalConstantIntegervEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-local-constant-floatv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetLocalConstantFloatvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-stream1s-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glVertexStream1sATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1sv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexStream1svATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1i-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glVertexStream1iATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1iv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexStream1ivATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1f-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glVertexStream1fATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1fv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexStream1fvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1d-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1))
        "_ALLEGRO_glVertexStream1dATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream1dv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexStream1dvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream2s-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glVertexStream2sATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-stream2sv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexStream2svATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream2i-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glVertexStream2iATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-stream2iv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexStream2ivATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream2f-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2))
        "_ALLEGRO_glVertexStream2fATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-stream2fv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexStream2fvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream2d-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2))
        "_ALLEGRO_glVertexStream2dATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-stream2dv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexStream2dvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream3s-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertexStream3sATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-stream3sv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexStream3svATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream3i-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glVertexStream3iATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-stream3iv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexStream3ivATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream3f-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glVertexStream3fATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-stream3fv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexStream3fvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream3d-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glVertexStream3dATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-stream3dv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexStream3dvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream4s-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glVertexStream4sATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-stream4sv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexStream4svATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream4i-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glVertexStream4iATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-stream4iv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexStream4ivATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream4f-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glVertexStream4fATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-stream4fv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glVertexStream4fvATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-stream4d-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glVertexStream4dATI_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-stream4dv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glVertexStream4dvATI_t(a0 , a1);")))
  (begin
    (define gl::normal-stream3b-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (char a1) (char a2) (char a3))
        "_ALLEGRO_glNormalStream3bATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-stream3bv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glNormalStream3bvATI_t(a0 , a1);")))
  (begin
    (define gl::normal-stream3s-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glNormalStream3sATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-stream3sv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glNormalStream3svATI_t(a0 , a1);")))
  (begin
    (define gl::normal-stream3i-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glNormalStream3iATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-stream3iv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glNormalStream3ivATI_t(a0 , a1);")))
  (begin
    (define gl::normal-stream3f-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glNormalStream3fATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-stream3fv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glNormalStream3fvATI_t(a0 , a1);")))
  (begin
    (define gl::normal-stream3d-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glNormalStream3dATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::normal-stream3dv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glNormalStream3dvATI_t(a0 , a1);")))
  (begin
    (define gl::client-active-vertex-stream-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glClientActiveVertexStreamATI_t(a0);")))
  (begin
    (define gl::vertex-blend-envi-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glVertexBlendEnviATI_t(a0 , a1);")))
  (begin
    (define gl::vertex-blend-envf-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1))
        "_ALLEGRO_glVertexBlendEnvfATI_t(a0 , a1);")))
  (begin
    (define gl::element-pointer-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glElementPointerATI_t(a0 , a1);")))
  (begin
    (define gl::draw-element-array-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glDrawElementArrayATI_t(a0 , a1);")))
  (begin
    (define gl::draw-range-element-array-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glDrawRangeElementArrayATI_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::draw-mesh-arrays-sun
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glDrawMeshArraysSUN_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::gen-occlusion-queries-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenOcclusionQueriesNV_t(a0 , a1);")))
  (begin
    (define gl::delete-occlusion-queries-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteOcclusionQueriesNV_t(a0 , a1);")))
  (begin
    (define gl::is-occlusion-query-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsOcclusionQueryNV_t(a0));")))
  (begin
    (define gl::begin-occlusion-query-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginOcclusionQueryNV_t(a0);")))
  (begin
    (define gl::end-occlusion-query-nv
      (foreign-lambda* void () "_ALLEGRO_glEndOcclusionQueryNV_t();")))
  (begin
    (define gl::get-occlusion-queryiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetOcclusionQueryivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-occlusion-queryuiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetOcclusionQueryuivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::point-parameteri-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPointParameteriNV_t(a0 , a1);")))
  (begin
    (define gl::point-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glPointParameterivNV_t(a0 , a1);")))
  (begin
    (define gl::active-stencil-face-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glActiveStencilFaceEXT_t(a0);")))
  (begin
    (define gl::element-pointer-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glElementPointerAPPLE_t(a0 , a1);")))
  (begin
    (define gl::draw-element-array-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glDrawElementArrayAPPLE_t(a0 , a1 , a2);")))
  (begin
    (define gl::draw-range-element-array-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glDrawRangeElementArrayAPPLE_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-draw-element-array-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1) (s32vector a2) (integer a3))
        "_ALLEGRO_glMultiDrawElementArrayAPPLE_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-draw-range-element-array-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3)
         (s32vector a4)
         (integer a5))
        "_ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::gen-fences-apple
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenFencesAPPLE_t(a0 , a1);")))
  (begin
    (define gl::delete-fences-apple
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteFencesAPPLE_t(a0 , a1);")))
  (begin
    (define gl::set-fence-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glSetFenceAPPLE_t(a0);")))
  (begin
    (define gl::is-fence-apple
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsFenceAPPLE_t(a0));")))
  (begin
    (define gl::test-fence-apple
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glTestFenceAPPLE_t(a0));")))
  (begin
    (define gl::finish-fence-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glFinishFenceAPPLE_t(a0);")))
  (begin
    (define gl::test-object-apple
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glTestObjectAPPLE_t(a0 , a1));")))
  (begin
    (define gl::finish-object-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glFinishObjectAPPLE_t(a0 , a1);")))
  (begin
    (define gl::bind-vertex-array-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBindVertexArrayAPPLE_t(a0);")))
  (begin
    (define gl::delete-vertex-arrays-apple
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteVertexArraysAPPLE_t(a0 , a1);")))
  (begin
    (define gl::gen-vertex-arrays-apple
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenVertexArraysAPPLE_t(a0 , a1);")))
  (begin
    (define gl::is-vertex-array-apple
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsVertexArrayAPPLE_t(a0));")))
  (begin
    (define gl::vertex-array-range-apple
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glVertexArrayRangeAPPLE_t(a0 , a1);")))
  (begin
    (define gl::flush-vertex-array-range-apple
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glFlushVertexArrayRangeAPPLE_t(a0 , a1);")))
  (begin
    (define gl::vertex-array-parameteri-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glVertexArrayParameteriAPPLE_t(a0 , a1);")))
  (begin
    (define gl::draw-buffers-ati
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDrawBuffersATI_t(a0 , a1);")))
  (begin
    (define gl::program-named-parameter4f-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (u8vector a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6))
        "_ALLEGRO_glProgramNamedParameter4fNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::program-named-parameter4d-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (u8vector a2)
         (double a3)
         (double a4)
         (double a5)
         (double a6))
        "_ALLEGRO_glProgramNamedParameter4dNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::program-named-parameter4fv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u8vector a2) (f32vector a3))
        "_ALLEGRO_glProgramNamedParameter4fvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-named-parameter4dv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u8vector a2) (f64vector a3))
        "_ALLEGRO_glProgramNamedParameter4dvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-named-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u8vector a2) (f32vector a3))
        "_ALLEGRO_glGetProgramNamedParameterfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-named-parameterdv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u8vector a2) (f64vector a3))
        "_ALLEGRO_glGetProgramNamedParameterdvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex2h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "_ALLEGRO_glVertex2hNV_t(a0 , a1);")))
  (begin
    (define gl::vertex2hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glVertex2hvNV_t(a0);")))
  (begin
    (define gl::vertex3h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glVertex3hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex3hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glVertex3hvNV_t(a0);")))
  (begin
    (define gl::vertex4h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertex4hNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex4hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glVertex4hvNV_t(a0);")))
  (begin
    (define gl::normal3h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glNormal3hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::normal3hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glNormal3hvNV_t(a0);")))
  (begin
    (define gl::color3h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glColor3hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::color3hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glColor3hvNV_t(a0);")))
  (begin
    (define gl::color4h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glColor4hNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::color4hv-nv
      (foreign-lambda* void ((s16vector a0)) "_ALLEGRO_glColor4hvNV_t(a0);")))
  (begin
    (define gl::tex-coord1h-nv
      (foreign-lambda* void ((short a0)) "_ALLEGRO_glTexCoord1hNV_t(a0);")))
  (begin
    (define gl::tex-coord1hv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glTexCoord1hvNV_t(a0);")))
  (begin
    (define gl::tex-coord2h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1))
        "_ALLEGRO_glTexCoord2hNV_t(a0 , a1);")))
  (begin
    (define gl::tex-coord2hv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glTexCoord2hvNV_t(a0);")))
  (begin
    (define gl::tex-coord3h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glTexCoord3hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord3hv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glTexCoord3hvNV_t(a0);")))
  (begin
    (define gl::tex-coord4h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glTexCoord4hNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-coord4hv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glTexCoord4hvNV_t(a0);")))
  (begin
    (define gl::multi-tex-coord1h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glMultiTexCoord1hNV_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord1hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord1hvNV_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glMultiTexCoord2hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord2hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord2hvNV_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glMultiTexCoord3hNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord3hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord3hvNV_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glMultiTexCoord4hNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord4hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glMultiTexCoord4hvNV_t(a0 , a1);")))
  (begin
    (define gl::fog-coordh-nv
      (foreign-lambda* void ((short a0)) "_ALLEGRO_glFogCoordhNV_t(a0);")))
  (begin
    (define gl::fog-coordhv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glFogCoordhvNV_t(a0);")))
  (begin
    (define gl::secondary-color3h-nv
      (foreign-lambda*
        void
        ((short a0) (short a1) (short a2))
        "_ALLEGRO_glSecondaryColor3hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::secondary-color3hv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glSecondaryColor3hvNV_t(a0);")))
  (begin
    (define gl::vertex-weighth-nv
      (foreign-lambda* void ((short a0)) "_ALLEGRO_glVertexWeighthNV_t(a0);")))
  (begin
    (define gl::vertex-weighthv-nv
      (foreign-lambda*
        void
        ((s16vector a0))
        "_ALLEGRO_glVertexWeighthvNV_t(a0);")))
  (begin
    (define gl::vertex-attrib1h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1))
        "_ALLEGRO_glVertexAttrib1hNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib1hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib1hvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib2h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2))
        "_ALLEGRO_glVertexAttrib2hNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib2hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib2hvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib3h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3))
        "_ALLEGRO_glVertexAttrib3hNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib3hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib3hvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib4h-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (short a1) (short a2) (short a3) (short a4))
        "_ALLEGRO_glVertexAttrib4hNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib4hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttrib4hvNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attribs1hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs1hvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs2hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs2hvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs3hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs3hvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attribs4hv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s16vector a2))
        "_ALLEGRO_glVertexAttribs4hvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-data-range-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glPixelDataRangeNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::flush-pixel-data-range-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glFlushPixelDataRangeNV_t(a0);")))
  (begin
    (define gl::primitive-restart-nv
      (foreign-lambda* void () "_ALLEGRO_glPrimitiveRestartNV_t();")))
  (begin
    (define gl::primitive-restart-index-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glPrimitiveRestartIndexNV_t(a0);")))
  (begin
    (define gl::map-object-buffer-ati
      (foreign-lambda*
        (c-pointer void)
        ((unsigned-integer a0))
        "return(_ALLEGRO_glMapObjectBufferATI_t(a0));")))
  (begin
    (define gl::unmap-object-buffer-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glUnmapObjectBufferATI_t(a0);")))
  (begin
    (define gl::vertex-attrib-array-object-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3)
         (integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6))
        "_ALLEGRO_glVertexAttribArrayObjectATI_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::get-vertex-attrib-array-objectfv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetVertexAttribArrayObjectfvATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-array-objectiv-ati
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribArrayObjectivATI_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex2b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1))
        "_ALLEGRO_glVertex2bOES_t(a0 , a1);")))
  (begin
    (define gl::vertex3b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glVertex3bOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex4b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2) (char a3))
        "_ALLEGRO_glVertex4bOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex2bv-oes
      (foreign-lambda* void ((c-string a0)) "_ALLEGRO_glVertex2bvOES_t(a0);")))
  (begin
    (define gl::vertex3bv-oes
      (foreign-lambda* void ((c-string a0)) "_ALLEGRO_glVertex3bvOES_t(a0);")))
  (begin
    (define gl::vertex4bv-oes
      (foreign-lambda* void ((c-string a0)) "_ALLEGRO_glVertex4bvOES_t(a0);")))
  (begin
    (define gl::tex-coord1b-oes
      (foreign-lambda* void ((char a0)) "_ALLEGRO_glTexCoord1bOES_t(a0);")))
  (begin
    (define gl::tex-coord2b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1))
        "_ALLEGRO_glTexCoord2bOES_t(a0 , a1);")))
  (begin
    (define gl::tex-coord3b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2))
        "_ALLEGRO_glTexCoord3bOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord4b-oes
      (foreign-lambda*
        void
        ((char a0) (char a1) (char a2) (char a3))
        "_ALLEGRO_glTexCoord4bOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-coord1bv-oes
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glTexCoord1bvOES_t(a0);")))
  (begin
    (define gl::tex-coord2bv-oes
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glTexCoord2bvOES_t(a0);")))
  (begin
    (define gl::tex-coord3bv-oes
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glTexCoord3bvOES_t(a0);")))
  (begin
    (define gl::tex-coord4bv-oes
      (foreign-lambda*
        void
        ((c-string a0))
        "_ALLEGRO_glTexCoord4bvOES_t(a0);")))
  (begin
    (define gl::multi-tex-coord1b-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (char a1))
        "_ALLEGRO_glMultiTexCoord1bOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2b-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (char a1) (char a2))
        "_ALLEGRO_glMultiTexCoord2bOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord3b-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (char a1) (char a2) (char a3))
        "_ALLEGRO_glMultiTexCoord3bOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord4b-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (char a1) (char a2) (char a3) (char a4))
        "_ALLEGRO_glMultiTexCoord4bOES_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord1bv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glMultiTexCoord1bvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2bv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glMultiTexCoord2bvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3bv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glMultiTexCoord3bvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4bv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glMultiTexCoord4bvOES_t(a0 , a1);")))
  (begin
    (define gl::vertex2x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glVertex2xOES_t(a0 , a1);")))
  (begin
    (define gl::vertex3x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glVertex3xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex4x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glVertex4xOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex2xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glVertex2xvOES_t(a0);")))
  (begin
    (define gl::vertex3xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glVertex3xvOES_t(a0);")))
  (begin
    (define gl::vertex4xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glVertex4xvOES_t(a0);")))
  (begin
    (define gl::normal3x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glNormal3xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::normal3xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glNormal3xvOES_t(a0);")))
  (begin
    (define gl::tex-coord1x-oes
      (foreign-lambda* void ((integer a0)) "_ALLEGRO_glTexCoord1xOES_t(a0);")))
  (begin
    (define gl::tex-coord2x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glTexCoord2xOES_t(a0 , a1);")))
  (begin
    (define gl::tex-coord3x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glTexCoord3xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-coord4x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glTexCoord4xOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::tex-coord1xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glTexCoord1xvOES_t(a0);")))
  (begin
    (define gl::tex-coord2xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glTexCoord2xvOES_t(a0);")))
  (begin
    (define gl::tex-coord3xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glTexCoord3xvOES_t(a0);")))
  (begin
    (define gl::tex-coord4xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glTexCoord4xvOES_t(a0);")))
  (begin
    (define gl::multi-tex-coord1x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glMultiTexCoord1xOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glMultiTexCoord2xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-coord3x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glMultiTexCoord3xOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-coord4x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glMultiTexCoord4xOES_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-coord1xv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord1xvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord2xv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord2xvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord3xv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord3xvOES_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord4xv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glMultiTexCoord4xvOES_t(a0 , a1);")))
  (begin
    (define gl::color3x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glColor3xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::color4x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glColor4xOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::color3xv-oes
      (foreign-lambda* void ((s32vector a0)) "_ALLEGRO_glColor3xvOES_t(a0);")))
  (begin
    (define gl::color4xv-oes
      (foreign-lambda* void ((s32vector a0)) "_ALLEGRO_glColor4xvOES_t(a0);")))
  (begin
    (define gl::indexx-oes
      (foreign-lambda* void ((integer a0)) "_ALLEGRO_glIndexxOES_t(a0);")))
  (begin
    (define gl::indexxv-oes
      (foreign-lambda* void ((s32vector a0)) "_ALLEGRO_glIndexxvOES_t(a0);")))
  (begin
    (define gl::rectx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glRectxOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::depth-rangex-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glDepthRangexOES_t(a0 , a1);")))
  (begin
    (define gl::rotatex-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glRotatexOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::scalex-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glScalexOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::translatex-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glTranslatexOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::frustumx-oes
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glFrustumxOES_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::orthox-oes
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glOrthoxOES_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::tex-genx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glTexGenxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-genxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glTexGenxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-genxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTexGenxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::clip-planex-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glClipPlanexOES_t(a0 , a1);")))
  (begin
    (define gl::get-clip-planex-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glGetClipPlanexOES_t(a0 , a1);")))
  (begin
    (define gl::raster-pos2x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glRasterPos2xOES_t(a0 , a1);")))
  (begin
    (define gl::raster-pos3x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glRasterPos3xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::raster-pos4x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glRasterPos4xOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::raster-pos2xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glRasterPos2xvOES_t(a0);")))
  (begin
    (define gl::raster-pos3xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glRasterPos3xvOES_t(a0);")))
  (begin
    (define gl::raster-pos4xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glRasterPos4xvOES_t(a0);")))
  (begin
    (define gl::materialx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glMaterialxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::materialxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glMaterialxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-materialx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetMaterialxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::lightx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glLightxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::lightxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glLightxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-lightx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetLightxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::light-modelx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glLightModelxOES_t(a0 , a1);")))
  (begin
    (define gl::light-modelxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glLightModelxvOES_t(a0 , a1);")))
  (begin
    (define gl::point-sizex-oes
      (foreign-lambda* void ((integer a0)) "_ALLEGRO_glPointSizexOES_t(a0);")))
  (begin
    (define gl::line-widthx-oes
      (foreign-lambda* void ((integer a0)) "_ALLEGRO_glLineWidthxOES_t(a0);")))
  (begin
    (define gl::polygon-offsetx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glPolygonOffsetxOES_t(a0 , a1);")))
  (begin
    (define gl::pixel-storex
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPixelStorex_t(a0 , a1);")))
  (begin
    (define gl::pixel-transferx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glPixelTransferxOES_t(a0 , a1);")))
  (begin
    (define gl::pixel-mapx
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glPixelMapx_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-pixel-mapxv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glGetPixelMapxv_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameterx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glConvolutionParameterxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::convolution-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glConvolutionParameterxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-convolution-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetConvolutionParameterxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-histogram-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetHistogramParameterxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::pixel-zoomx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glPixelZoomxOES_t(a0 , a1);")))
  (begin
    (define gl::bitmapx-oes
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (u8vector a6))
        "_ALLEGRO_glBitmapxOES_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::tex-parameterx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glTexParameterxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glTexParameterxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTexParameterxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-level-parameterxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetTexLevelParameterxvOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::prioritize-texturesx-oes
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1) (s32vector a2))
        "_ALLEGRO_glPrioritizeTexturesxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-envx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glTexEnvxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::tex-envxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glTexEnvxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-envxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTexEnvxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::fogx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glFogxOES_t(a0 , a1);")))
  (begin
    (define gl::fogxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glFogxvOES_t(a0 , a1);")))
  (begin
    (define gl::sample-coverage-oes
      (foreign-lambda*
        void
        ((integer a0) (unsigned-char a1))
        "_ALLEGRO_glSampleCoverageOES_t(a0 , a1);")))
  (begin
    (define gl::alpha-funcx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glAlphaFuncxOES_t(a0 , a1);")))
  (begin
    (define gl::blend-colorx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glBlendColorxOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::clear-colorx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glClearColorxOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::clear-depthx-oes
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glClearDepthxOES_t(a0);")))
  (begin
    (define gl::clear-accumx-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glClearAccumxOES_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::accumx-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glAccumxOES_t(a0 , a1);")))
  (begin
    (define gl::map1x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (s32vector a5))
        "_ALLEGRO_glMap1xOES_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::map2x-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (s32vector a9))
        "_ALLEGRO_glMap2xOES_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::map-grid1x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glMapGrid1xOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::map-grid2x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (integer a2) (integer a3) (integer a4))
        "_ALLEGRO_glMapGrid2xOES_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-mapxv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetMapxvOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::eval-coord1x-oes
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glEvalCoord1xOES_t(a0);")))
  (begin
    (define gl::eval-coord2x-oes
      (foreign-lambda*
        void
        ((integer a0) (integer a1))
        "_ALLEGRO_glEvalCoord2xOES_t(a0 , a1);")))
  (begin
    (define gl::eval-coord1xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glEvalCoord1xvOES_t(a0);")))
  (begin
    (define gl::eval-coord2xv-oes
      (foreign-lambda*
        void
        ((s32vector a0))
        "_ALLEGRO_glEvalCoord2xvOES_t(a0);")))
  (begin
    (define gl::feedback-bufferx-oes
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glFeedbackBufferxOES_t(a0 , a1 , a2);")))
  (begin
    (define gl::pass-throughx-oes
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glPassThroughxOES_t(a0);")))
  (begin
    (define gl::get-fixedv-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glGetFixedvOES_t(a0 , a1);")))
  (begin
    (define gl::depth-rangef-oes
      (foreign-lambda*
        void
        ((float a0) (float a1))
        "_ALLEGRO_glDepthRangefOES_t(a0 , a1);")))
  (begin
    (define gl::frustumf-oes
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3) (float a4) (float a5))
        "_ALLEGRO_glFrustumfOES_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::orthof-oes
      (foreign-lambda*
        void
        ((float a0) (float a1) (float a2) (float a3) (float a4) (float a5))
        "_ALLEGRO_glOrthofOES_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::clip-planef-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glClipPlanefOES_t(a0 , a1);")))
  (begin
    (define gl::get-clip-planef-oes
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glGetClipPlanefOES_t(a0 , a1);")))
  (begin
    (define gl::clear-depthf-oes
      (foreign-lambda* void ((double a0)) "_ALLEGRO_glClearDepthfOES_t(a0);")))
  (begin
    (define gl::depth-bounds-ext
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glDepthBoundsEXT_t(a0 , a1);")))
  (begin
    (define gl::blend-equation-separate-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBlendEquationSeparateEXT_t(a0 , a1);")))
  (begin
    (define gl::is-renderbuffer-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsRenderbufferEXT_t(a0));")))
  (begin
    (define gl::bind-renderbuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindRenderbufferEXT_t(a0 , a1);")))
  (begin
    (define gl::delete-renderbuffers-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteRenderbuffersEXT_t(a0 , a1);")))
  (begin
    (define gl::gen-renderbuffers-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenRenderbuffersEXT_t(a0 , a1);")))
  (begin
    (define gl::renderbuffer-storage-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glRenderbufferStorageEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-renderbuffer-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetRenderbufferParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::is-framebuffer-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsFramebufferEXT_t(a0));")))
  (begin
    (define gl::bind-framebuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindFramebufferEXT_t(a0 , a1);")))
  (begin
    (define gl::delete-framebuffers-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteFramebuffersEXT_t(a0 , a1);")))
  (begin
    (define gl::gen-framebuffers-ext
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenFramebuffersEXT_t(a0 , a1);")))
  (begin
    (define gl::check-framebuffer-status-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0))
        "return(_ALLEGRO_glCheckFramebufferStatusEXT_t(a0));")))
  (begin
    (define gl::framebuffer-texture1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTexture1DEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTexture2DEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::framebuffer-texture3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glFramebufferTexture3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::framebuffer-renderbuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glFramebufferRenderbufferEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-framebuffer-attachment-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::generate-mipmap-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glGenerateMipmapEXT_t(a0);")))
  (begin
    (define gl::string-marker-gremedy
      (foreign-lambda*
        void
        ((integer a0) ((c-pointer void) a1))
        "_ALLEGRO_glStringMarkerGREMEDY_t(a0 , a1);")))
  (begin
    (define gl::stencil-clear-tag-ext
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1))
        "_ALLEGRO_glStencilClearTagEXT_t(a0 , a1);")))
  (begin
    (define gl::blit-framebuffer-ext
      (foreign-lambda*
        void
        ((integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9))
        "_ALLEGRO_glBlitFramebufferEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::renderbuffer-storage-multisample-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glRenderbufferStorageMultisampleEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-query-objecti64v-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer integer64) a2))
        "_ALLEGRO_glGetQueryObjecti64vEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-query-objectui64v-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetQueryObjectui64vEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-env-parameters4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (f32vector a3))
        "_ALLEGRO_glProgramEnvParameters4fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-local-parameters4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (f32vector a3))
        "_ALLEGRO_glProgramLocalParameters4fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::buffer-parameteri-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glBufferParameteriAPPLE_t(a0 , a1 , a2);")))
  (begin
    (define gl::flush-mapped-buffer-range-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) ("intptr_t" a1) ("intptr_t" a2))
        "_ALLEGRO_glFlushMappedBufferRangeAPPLE_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer a2))
        "_ALLEGRO_glUniformBufferEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniform-buffer-size-ext
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (integer a1))
        "return(_ALLEGRO_glGetUniformBufferSizeEXT_t(a0 , a1));")))
  (begin
    (define gl::get-uniform-offset-ext
      (foreign-lambda*
        "intptr_t"
        ((unsigned-integer a0) (integer a1))
        "return(_ALLEGRO_glGetUniformOffsetEXT_t(a0 , a1));")))
  (begin
    (define gl::color-mask-indexed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-char a2)
         (unsigned-char a3)
         (unsigned-char a4))
        "_ALLEGRO_glColorMaskIndexedEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-boolean-indexedv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u8vector a2))
        "_ALLEGRO_glGetBooleanIndexedvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-integer-indexedv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetIntegerIndexedvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::enable-indexed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEnableIndexedEXT_t(a0 , a1);")))
  (begin
    (define gl::disable-indexed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDisableIndexedEXT_t(a0 , a1);")))
  (begin
    (define gl::is-enabled-indexed-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glIsEnabledIndexedEXT_t(a0 , a1));")))
  (begin
    (define gl::draw-arrays-instanced-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glDrawArraysInstancedEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::draw-elements-instanced-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3)
         (integer a4))
        "_ALLEGRO_glDrawElementsInstancedEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-parameteri-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glProgramParameteriEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::framebuffer-texture-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glFramebufferTextureEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::framebuffer-texture-face-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glFramebufferTextureFaceEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-i1i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glVertexAttribI1iEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glVertexAttribI2iEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib-i3i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glVertexAttribI3iEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-i4i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glVertexAttribI4iEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-i1ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glVertexAttribI1uiEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glVertexAttribI2uiEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::vertex-attrib-i3ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glVertexAttribI3uiEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-attrib-i4ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glVertexAttribI4uiEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-i1iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI1ivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI2ivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i3iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI3ivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s32vector a1))
        "_ALLEGRO_glVertexAttribI4ivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i1uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI1uivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i2uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI2uivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i3uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI3uivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u32vector a1))
        "_ALLEGRO_glVertexAttribI4uivEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4bv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glVertexAttribI4bvEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4sv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (s16vector a1))
        "_ALLEGRO_glVertexAttribI4svEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4ubv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u8vector a1))
        "_ALLEGRO_glVertexAttribI4ubvEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-i4usv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (u16vector a1))
        "_ALLEGRO_glVertexAttribI4usvEXT_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-ipointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glVertexAttribIPointerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-vertex-attrib-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribIivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-vertex-attrib-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVertexAttribIuivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform1ui-ext
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1))
        "_ALLEGRO_glUniform1uiEXT_t(a0 , a1);")))
  (begin
    (define gl::uniform2ui-ext
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glUniform2uiEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3ui-ext
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glUniform3uiEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::uniform4ui-ext
      (foreign-lambda*
        void
        ((integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glUniform4uiEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::uniform1uiv-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform1uivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform2uiv-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform2uivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform3uiv-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform3uivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::uniform4uiv-ext
      (foreign-lambda*
        void
        ((integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glUniform4uivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniformuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2))
        "_ALLEGRO_glGetUniformuivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::bind-frag-data-location-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (c-string a2))
        "_ALLEGRO_glBindFragDataLocationEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-frag-data-location-ext
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetFragDataLocationEXT_t(a0 , a1));")))
  (begin
    (define gl::framebuffer-texture-layer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glFramebufferTextureLayerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tex-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glTexBufferEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::depth-ranged-nv
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glDepthRangedNV_t(a0 , a1);")))
  (begin
    (define gl::clear-depthd-nv
      (foreign-lambda* void ((double a0)) "_ALLEGRO_glClearDepthdNV_t(a0);")))
  (begin
    (define gl::depth-boundsd-nv
      (foreign-lambda*
        void
        ((double a0) (double a1))
        "_ALLEGRO_glDepthBoundsdNV_t(a0 , a1);")))
  (begin
    (define gl::renderbuffer-storage-multsample-coverage-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-vertex-limit-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glProgramVertexLimitNV_t(a0 , a1);")))
  (begin
    (define gl::program-local-parameter-i4i-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glProgramLocalParameterI4iNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-local-parameter-i4iv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glProgramLocalParameterI4ivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-local-parameters-i4iv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3))
        "_ALLEGRO_glProgramLocalParametersI4ivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-local-parameter-i4ui-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glProgramLocalParameterI4uiNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-local-parameter-i4uiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glProgramLocalParameterI4uivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-local-parameters-i4uiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (u32vector a3))
        "_ALLEGRO_glProgramLocalParametersI4uivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-env-parameter-i4i-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glProgramEnvParameterI4iNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-env-parameter-i4iv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glProgramEnvParameterI4ivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-env-parameters-i4iv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3))
        "_ALLEGRO_glProgramEnvParametersI4ivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-env-parameter-i4ui-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glProgramEnvParameterI4uiNV_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-env-parameter-i4uiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glProgramEnvParameterI4uivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-env-parameters-i4uiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (u32vector a3))
        "_ALLEGRO_glProgramEnvParametersI4uivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-program-local-parameter-iiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetProgramLocalParameterIivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-local-parameter-iuiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetProgramLocalParameterIuivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-env-parameter-iiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetProgramEnvParameterIivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-program-env-parameter-iuiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (u32vector a2))
        "_ALLEGRO_glGetProgramEnvParameterIuivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-buffer-parametersfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (f32vector a4))
        "_ALLEGRO_glProgramBufferParametersfvNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-buffer-parameters-iiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (s32vector a4))
        "_ALLEGRO_glProgramBufferParametersIivNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-buffer-parameters-iuiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (u32vector a4))
        "_ALLEGRO_glProgramBufferParametersIuivNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::bind-buffer-range-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3)
         ("intptr_t" a4))
        "_ALLEGRO_glBindBufferRangeNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::bind-buffer-offset-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3))
        "_ALLEGRO_glBindBufferOffsetNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-buffer-base-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBindBufferBaseNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::transform-feedback-attribs-nv
      (foreign-lambda*
        void
        ((integer a0) (s32vector a1) (unsigned-integer a2))
        "_ALLEGRO_glTransformFeedbackAttribsNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::transform-feedback-varyings-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (s32vector a2)
         (unsigned-integer a3))
        "_ALLEGRO_glTransformFeedbackVaryingsNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::begin-transform-feedback-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginTransformFeedbackNV_t(a0);")))
  (begin
    (define gl::end-transform-feedback-nv
      (foreign-lambda* void () "_ALLEGRO_glEndTransformFeedbackNV_t();")))
  (begin
    (define gl::get-varying-location-nv
      (foreign-lambda*
        integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glGetVaryingLocationNV_t(a0 , a1));")))
  (begin
    (define gl::get-active-varying-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (s32vector a4)
         (u32vector a5)
         (c-string a6))
        "_ALLEGRO_glGetActiveVaryingNV_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::active-varying-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (c-string a1))
        "_ALLEGRO_glActiveVaryingNV_t(a0 , a1);")))
  (begin
    (define gl::get-transform-feedback-varying-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTransformFeedbackVaryingNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::frame-terminator-gremedy
      (foreign-lambda* void () "_ALLEGRO_glFrameTerminatorGREMEDY_t();")))
  (begin
    (define gl::begin-conditional-render-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBeginConditionalRenderNV_t(a0 , a1);")))
  (begin
    (define gl::end-conditional-render-nv
      (foreign-lambda* void () "_ALLEGRO_glEndConditionalRenderNV_t();")))
  (begin
    (define gl::begin-transform-feedback-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginTransformFeedbackEXT_t(a0);")))
  (begin
    (define gl::end-transform-feedback-ext
      (foreign-lambda* void () "_ALLEGRO_glEndTransformFeedbackEXT_t();")))
  (begin
    (define gl::bind-buffer-range-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3)
         ("intptr_t" a4))
        "_ALLEGRO_glBindBufferRangeEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::bind-buffer-offset-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3))
        "_ALLEGRO_glBindBufferOffsetEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-buffer-base-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBindBufferBaseEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::transform-feedback-varyings-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (s32vector a2)
         (unsigned-integer a3))
        "_ALLEGRO_glTransformFeedbackVaryingsEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-transform-feedback-varying-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetTransformFeedbackVaryingEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::client-attrib-default-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glClientAttribDefaultEXT_t(a0);")))
  (begin
    (define gl::push-client-attrib-default-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glPushClientAttribDefaultEXT_t(a0);")))
  (begin
    (define gl::matrix-loadf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMatrixLoadfEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-loadd-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMatrixLoaddEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-multf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMatrixMultfEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-multd-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMatrixMultdEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-load-identity-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glMatrixLoadIdentityEXT_t(a0);")))
  (begin
    (define gl::matrix-rotatef-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glMatrixRotatefEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::matrix-rotated-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3) (double a4))
        "_ALLEGRO_glMatrixRotatedEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::matrix-scalef-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glMatrixScalefEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::matrix-scaled-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glMatrixScaledEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::matrix-translatef-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (float a1) (float a2) (float a3))
        "_ALLEGRO_glMatrixTranslatefEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::matrix-translated-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (double a1) (double a2) (double a3))
        "_ALLEGRO_glMatrixTranslatedEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::matrix-frustum-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5)
         (double a6))
        "_ALLEGRO_glMatrixFrustumEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::matrix-ortho-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (double a1)
         (double a2)
         (double a3)
         (double a4)
         (double a5)
         (double a6))
        "_ALLEGRO_glMatrixOrthoEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::matrix-pop-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glMatrixPopEXT_t(a0);")))
  (begin
    (define gl::matrix-push-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glMatrixPushEXT_t(a0);")))
  (begin
    (define gl::matrix-load-transposef-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMatrixLoadTransposefEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-load-transposed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMatrixLoadTransposedEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-mult-transposef-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f32vector a1))
        "_ALLEGRO_glMatrixMultTransposefEXT_t(a0 , a1);")))
  (begin
    (define gl::matrix-mult-transposed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (f64vector a1))
        "_ALLEGRO_glMatrixMultTransposedEXT_t(a0 , a1);")))
  (begin
    (define gl::texture-parameterf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (float a3))
        "_ALLEGRO_glTextureParameterfEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glTextureParameterfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-parameteri-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glTextureParameteriEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glTextureParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glTextureImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::texture-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glTextureImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::texture-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glTextureSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::texture-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glTextureSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::copy-texture-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "_ALLEGRO_glCopyTextureImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::copy-texture-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyTextureImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::copy-texture-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "_ALLEGRO_glCopyTextureSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::copy-texture-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyTextureSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::get-texture-image-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glGetTextureImageEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-texture-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetTextureParameterfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-texture-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetTextureParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-texture-level-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (f32vector a4))
        "_ALLEGRO_glGetTextureLevelParameterfvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-texture-level-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (s32vector a4))
        "_ALLEGRO_glGetTextureLevelParameterivEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::texture-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glTextureImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::texture-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (unsigned-integer a9)
         (unsigned-integer a10)
         ((c-pointer void) a11))
        "_ALLEGRO_glTextureSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::copy-texture-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (integer a9))
        "_ALLEGRO_glCopyTextureSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::multi-tex-parameterf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (float a3))
        "_ALLEGRO_glMultiTexParameterfEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glMultiTexParameterfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-parameteri-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glMultiTexParameteriEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glMultiTexParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (unsigned-integer a6)
         (unsigned-integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glMultiTexImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::multi-tex-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glMultiTexImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::multi-tex-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glMultiTexSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::multi-tex-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (unsigned-integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glMultiTexSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::copy-multi-tex-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7))
        "_ALLEGRO_glCopyMultiTexImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::copy-multi-tex-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyMultiTexImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::copy-multi-tex-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "_ALLEGRO_glCopyMultiTexSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::copy-multi-tex-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8))
        "_ALLEGRO_glCopyMultiTexSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::get-multi-tex-image-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         ((c-pointer void) a5))
        "_ALLEGRO_glGetMultiTexImageEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::get-multi-tex-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetMultiTexParameterfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetMultiTexParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-level-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (f32vector a4))
        "_ALLEGRO_glGetMultiTexLevelParameterfvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-multi-tex-level-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (s32vector a4))
        "_ALLEGRO_glGetMultiTexLevelParameterivEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (unsigned-integer a8)
         (unsigned-integer a9)
         ((c-pointer void) a10))
        "_ALLEGRO_glMultiTexImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::multi-tex-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (unsigned-integer a9)
         (unsigned-integer a10)
         ((c-pointer void) a11))
        "_ALLEGRO_glMultiTexSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::copy-multi-tex-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (integer a9))
        "_ALLEGRO_glCopyMultiTexSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::bind-multi-texture-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBindMultiTextureEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::enable-client-state-indexed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEnableClientStateIndexedEXT_t(a0 , a1);")))
  (begin
    (define gl::disable-client-state-indexed-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDisableClientStateIndexedEXT_t(a0 , a1);")))
  (begin
    (define gl::multi-tex-coord-pointer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glMultiTexCoordPointerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::multi-tex-envf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (float a3))
        "_ALLEGRO_glMultiTexEnvfEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-envfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glMultiTexEnvfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-envi-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glMultiTexEnviEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-enviv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glMultiTexEnvivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-gend-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (double a3))
        "_ALLEGRO_glMultiTexGendEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-gendv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glMultiTexGendvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-genf-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (float a3))
        "_ALLEGRO_glMultiTexGenfEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-genfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glMultiTexGenfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-geni-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glMultiTexGeniEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-geniv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glMultiTexGenivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-envfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetMultiTexEnvfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-enviv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetMultiTexEnvivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-gendv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glGetMultiTexGendvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-genfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetMultiTexGenfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-geniv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetMultiTexGenivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-float-indexedv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetFloatIndexedvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-double-indexedv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f64vector a2))
        "_ALLEGRO_glGetDoubleIndexedvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-pointer-indexedv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetPointerIndexedvEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::compressed-texture-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glCompressedTextureImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::compressed-texture-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedTextureImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-texture-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedTextureImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::compressed-texture-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (unsigned-integer a9)
         (integer a10)
         ((c-pointer void) a11))
        "_ALLEGRO_glCompressedTextureSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::compressed-texture-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glCompressedTextureSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::compressed-texture-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedTextureSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::get-compressed-texture-image-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetCompressedTextureImageEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::compressed-multi-tex-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glCompressedMultiTexImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::compressed-multi-tex-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         ((c-pointer void) a8))
        "_ALLEGRO_glCompressedMultiTexImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8);")))
  (begin
    (define gl::compressed-multi-tex-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedMultiTexImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::compressed-multi-tex-sub-image3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (integer a7)
         (integer a8)
         (unsigned-integer a9)
         (integer a10)
         ((c-pointer void) a11))
        "_ALLEGRO_glCompressedMultiTexSubImage3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11);")))
  (begin
    (define gl::compressed-multi-tex-sub-image2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6)
         (unsigned-integer a7)
         (integer a8)
         ((c-pointer void) a9))
        "_ALLEGRO_glCompressedMultiTexSubImage2DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9);")))
  (begin
    (define gl::compressed-multi-tex-sub-image1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (unsigned-integer a5)
         (integer a6)
         ((c-pointer void) a7))
        "_ALLEGRO_glCompressedMultiTexSubImage1DEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7);")))
  (begin
    (define gl::get-compressed-multi-tex-image-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetCompressedMultiTexImageEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-program-string-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         ((c-pointer void) a4))
        "_ALLEGRO_glNamedProgramStringEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-program-local-parameter4d-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (double a3)
         (double a4)
         (double a5)
         (double a6))
        "_ALLEGRO_glNamedProgramLocalParameter4dEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::named-program-local-parameter4dv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glNamedProgramLocalParameter4dvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-program-local-parameter4f-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (float a3)
         (float a4)
         (float a5)
         (float a6))
        "_ALLEGRO_glNamedProgramLocalParameter4fEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::named-program-local-parameter4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glNamedProgramLocalParameter4fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-program-local-parameterdv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-program-local-parameterfv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-programiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetNamedProgramivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-program-string-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetNamedProgramStringEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-program-local-parameters4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (f32vector a4))
        "_ALLEGRO_glNamedProgramLocalParameters4fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-program-local-parameter-i4i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4)
         (integer a5)
         (integer a6))
        "_ALLEGRO_glNamedProgramLocalParameterI4iEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::named-program-local-parameter-i4iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-program-local-parameters-i4iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (s32vector a4))
        "_ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-program-local-parameter-i4ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5)
         (unsigned-integer a6))
        "_ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::named-program-local-parameter-i4uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-program-local-parameters-i4uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (u32vector a4))
        "_ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-named-program-local-parameter-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-program-local-parameter-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-parameter-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glTextureParameterIivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-parameter-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glTextureParameterIuivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-texture-parameter-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetTextureParameterIivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-texture-parameter-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glGetTextureParameterIuivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-parameter-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glMultiTexParameterIivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-parameter-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glMultiTexParameterIuivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-parameter-iiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetMultiTexParameterIivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-multi-tex-parameter-iuiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (u32vector a3))
        "_ALLEGRO_glGetMultiTexParameterIuivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform1f-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (float a2))
        "_ALLEGRO_glProgramUniform1fEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniform2f-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (float a2) (float a3))
        "_ALLEGRO_glProgramUniform2fEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3f-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (float a2) (float a3) (float a4))
        "_ALLEGRO_glProgramUniform3fEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform4f-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (float a2)
         (float a3)
         (float a4)
         (float a5))
        "_ALLEGRO_glProgramUniform4fEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-uniform1i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2))
        "_ALLEGRO_glProgramUniform1iEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniform2i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glProgramUniform2iEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glProgramUniform3iEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform4i-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glProgramUniform4iEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-uniform1fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f32vector a3))
        "_ALLEGRO_glProgramUniform1fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform2fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f32vector a3))
        "_ALLEGRO_glProgramUniform2fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f32vector a3))
        "_ALLEGRO_glProgramUniform3fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (f32vector a3))
        "_ALLEGRO_glProgramUniform4fvEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform1iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (s32vector a3))
        "_ALLEGRO_glProgramUniform1ivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform2iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (s32vector a3))
        "_ALLEGRO_glProgramUniform2ivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (s32vector a3))
        "_ALLEGRO_glProgramUniform3ivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform4iv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (s32vector a3))
        "_ALLEGRO_glProgramUniform4ivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform-matrix2fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix2fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix3fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix4fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix2x3fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix2x3fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3x2fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix3x2fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix2x4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix2x4fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4x2fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix4x2fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix3x4fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix3x4fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform-matrix4x3fv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-char a3)
         (f32vector a4))
        "_ALLEGRO_glProgramUniformMatrix4x3fvEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform1ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer a2))
        "_ALLEGRO_glProgramUniform1uiEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniform2ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glProgramUniform2uiEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glProgramUniform3uiEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::program-uniform4ui-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4)
         (unsigned-integer a5))
        "_ALLEGRO_glProgramUniform4uiEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::program-uniform1uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (u32vector a3))
        "_ALLEGRO_glProgramUniform1uivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform2uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (u32vector a3))
        "_ALLEGRO_glProgramUniform2uivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform3uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (u32vector a3))
        "_ALLEGRO_glProgramUniform3uivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::program-uniform4uiv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (integer a2) (u32vector a3))
        "_ALLEGRO_glProgramUniform4uivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-buffer-data-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ((c-pointer void) a2)
         (unsigned-integer a3))
        "_ALLEGRO_glNamedBufferDataEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-buffer-sub-data-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glNamedBufferSubDataEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::map-named-buffer-ext
      (foreign-lambda*
        (c-pointer void)
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glMapNamedBufferEXT_t(a0 , a1));")))
  (begin
    (define gl::unmap-named-buffer-ext
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glUnmapNamedBufferEXT_t(a0));")))
  (begin
    (define gl::get-named-buffer-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetNamedBufferParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-named-buffer-pointerv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetNamedBufferPointervEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-named-buffer-sub-data-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         ("intptr_t" a1)
         ("intptr_t" a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetNamedBufferSubDataEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::texture-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glTextureBufferEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::multi-tex-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glMultiTexBufferEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-renderbuffer-storage-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (integer a2) (integer a3))
        "_ALLEGRO_glNamedRenderbufferStorageEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-renderbuffer-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetNamedRenderbufferParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::check-named-framebuffer-status-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glCheckNamedFramebufferStatusEXT_t(a0 , a1));")))
  (begin
    (define gl::named-framebuffer-texture1dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glNamedFramebufferTexture1DEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-framebuffer-texture2dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4))
        "_ALLEGRO_glNamedFramebufferTexture2DEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-framebuffer-texture3dext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glNamedFramebufferTexture3DEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::named-framebuffer-renderbuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3))
        "_ALLEGRO_glNamedFramebufferRenderbufferEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-named-framebuffer-attachment-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::generate-texture-mipmap-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glGenerateTextureMipmapEXT_t(a0 , a1);")))
  (begin
    (define gl::generate-multi-tex-mipmap-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glGenerateMultiTexMipmapEXT_t(a0 , a1);")))
  (begin
    (define gl::framebuffer-draw-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glFramebufferDrawBufferEXT_t(a0 , a1);")))
  (begin
    (define gl::framebuffer-draw-buffers-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glFramebufferDrawBuffersEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::framebuffer-read-buffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glFramebufferReadBufferEXT_t(a0 , a1);")))
  (begin
    (define gl::get-framebuffer-parameteriv-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetFramebufferParameterivEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::named-renderbuffer-storage-multisample-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-renderbuffer-storage-multisample-coverage-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         (unsigned-integer a3)
         (integer a4)
         (integer a5))
        "_ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t(a0 , a1 , a2 , a3 , a4 , a5);")))
  (begin
    (define gl::named-framebuffer-texture-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3))
        "_ALLEGRO_glNamedFramebufferTextureEXT_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::named-framebuffer-texture-layer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (integer a4))
        "_ALLEGRO_glNamedFramebufferTextureLayerEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::named-framebuffer-texture-face-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glNamedFramebufferTextureFaceEXT_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::texture-renderbuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glTextureRenderbufferEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::multi-tex-renderbuffer-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glMultiTexRenderbufferEXT_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-multisamplefv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (f32vector a2))
        "_ALLEGRO_glGetMultisamplefvNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::sample-mask-indexed-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glSampleMaskIndexedNV_t(a0 , a1);")))
  (begin
    (define gl::tex-renderbuffer-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glTexRenderbufferNV_t(a0 , a1);")))
  (begin
    (define gl::bind-transform-feedback-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBindTransformFeedbackNV_t(a0 , a1);")))
  (begin
    (define gl::delete-transform-feedbacks-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeleteTransformFeedbacksNV_t(a0 , a1);")))
  (begin
    (define gl::gen-transform-feedbacks-nv
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenTransformFeedbacksNV_t(a0 , a1);")))
  (begin
    (define gl::is-transform-feedback-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsTransformFeedbackNV_t(a0));")))
  (begin
    (define gl::pause-transform-feedback-nv
      (foreign-lambda* void () "_ALLEGRO_glPauseTransformFeedbackNV_t();")))
  (begin
    (define gl::resume-transform-feedback-nv
      (foreign-lambda* void () "_ALLEGRO_glResumeTransformFeedbackNV_t();")))
  (begin
    (define gl::draw-transform-feedback-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDrawTransformFeedbackNV_t(a0 , a1);")))
  (begin
    (define gl::get-perf-monitor-groups-amd
      (foreign-lambda*
        void
        ((s32vector a0) (integer a1) (u32vector a2))
        "_ALLEGRO_glGetPerfMonitorGroupsAMD_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-perf-monitor-counters-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (s32vector a1)
         (s32vector a2)
         (integer a3)
         (u32vector a4))
        "_ALLEGRO_glGetPerfMonitorCountersAMD_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-perf-monitor-group-string-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (s32vector a2) (c-string a3))
        "_ALLEGRO_glGetPerfMonitorGroupStringAMD_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-perf-monitor-counter-string-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (s32vector a3)
         (c-string a4))
        "_ALLEGRO_glGetPerfMonitorCounterStringAMD_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::get-perf-monitor-counter-info-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ((c-pointer void) a3))
        "_ALLEGRO_glGetPerfMonitorCounterInfoAMD_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::gen-perf-monitors-amd
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glGenPerfMonitorsAMD_t(a0 , a1);")))
  (begin
    (define gl::delete-perf-monitors-amd
      (foreign-lambda*
        void
        ((integer a0) (u32vector a1))
        "_ALLEGRO_glDeletePerfMonitorsAMD_t(a0 , a1);")))
  (begin
    (define gl::select-perf-monitor-counters-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-char a1)
         (unsigned-integer a2)
         (integer a3)
         (u32vector a4))
        "_ALLEGRO_glSelectPerfMonitorCountersAMD_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::begin-perf-monitor-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginPerfMonitorAMD_t(a0);")))
  (begin
    (define gl::end-perf-monitor-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEndPerfMonitorAMD_t(a0);")))
  (begin
    (define gl::get-perf-monitor-counter-data-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (integer a2)
         (u32vector a3)
         (s32vector a4))
        "_ALLEGRO_glGetPerfMonitorCounterDataAMD_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::tessellation-factor-amd
      (foreign-lambda*
        void
        ((float a0))
        "_ALLEGRO_glTessellationFactorAMD_t(a0);")))
  (begin
    (define gl::tessellation-mode-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glTessellationModeAMD_t(a0);")))
  (begin
    (define gl::provoking-vertex-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glProvokingVertexEXT_t(a0);")))
  (begin
    (define gl::blend-func-indexed-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBlendFuncIndexedAMD_t(a0 , a1 , a2);")))
  (begin
    (define gl::blend-func-separate-indexed-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glBlendFuncSeparateIndexedAMD_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::blend-equation-indexed-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glBlendEquationIndexedAMD_t(a0 , a1);")))
  (begin
    (define gl::blend-equation-separate-indexed-amd
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "_ALLEGRO_glBlendEquationSeparateIndexedAMD_t(a0 , a1 , a2);")))
  (begin
    (define gl::texture-range-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) ((c-pointer void) a2))
        "_ALLEGRO_glTextureRangeAPPLE_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-tex-parameter-pointerv-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer (c-pointer void)) a2))
        "_ALLEGRO_glGetTexParameterPointervAPPLE_t(a0 , a1 , a2);")))
  (begin
    (define gl::enable-vertex-attrib-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glEnableVertexAttribAPPLE_t(a0 , a1);")))
  (begin
    (define gl::disable-vertex-attrib-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glDisableVertexAttribAPPLE_t(a0 , a1);")))
  (begin
    (define gl::is-vertex-attrib-enabled-apple
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0) (unsigned-integer a1))
        "return(_ALLEGRO_glIsVertexAttribEnabledAPPLE_t(a0 , a1));")))
  (begin
    (define gl::map-vertex-attrib1d-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (double a2)
         (double a3)
         (integer a4)
         (integer a5)
         (f64vector a6))
        "_ALLEGRO_glMapVertexAttrib1dAPPLE_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::map-vertex-attrib1f-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (float a2)
         (float a3)
         (integer a4)
         (integer a5)
         (f32vector a6))
        "_ALLEGRO_glMapVertexAttrib1fAPPLE_t(a0 , a1 , a2 , a3 , a4 , a5 , a6);")))
  (begin
    (define gl::map-vertex-attrib2d-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (double a2)
         (double a3)
         (integer a4)
         (integer a5)
         (double a6)
         (double a7)
         (integer a8)
         (integer a9)
         (f64vector a10))
        "_ALLEGRO_glMapVertexAttrib2dAPPLE_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::map-vertex-attrib2f-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (float a2)
         (float a3)
         (integer a4)
         (integer a5)
         (float a6)
         (float a7)
         (integer a8)
         (integer a9)
         (f32vector a10))
        "_ALLEGRO_glMapVertexAttrib2fAPPLE_t(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10);")))
  (begin
    (define gl::object-purgeable-apple
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "return(_ALLEGRO_glObjectPurgeableAPPLE_t(a0 , a1 , a2));")))
  (begin
    (define gl::object-unpurgeable-apple
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (unsigned-integer a1) (unsigned-integer a2))
        "return(_ALLEGRO_glObjectUnpurgeableAPPLE_t(a0 , a1 , a2));")))
  (begin
    (define gl::get-object-parameteriv-apple
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetObjectParameterivAPPLE_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::begin-video-capture-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glBeginVideoCaptureNV_t(a0);")))
  (begin
    (define gl::bind-video-capture-stream-buffer-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         ("intptr_t" a3))
        "_ALLEGRO_glBindVideoCaptureStreamBufferNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::bind-video-capture-stream-texture-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (unsigned-integer a3)
         (unsigned-integer a4))
        "_ALLEGRO_glBindVideoCaptureStreamTextureNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::end-video-capture-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glEndVideoCaptureNV_t(a0);")))
  (begin
    (define gl::get-video-captureiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1) (s32vector a2))
        "_ALLEGRO_glGetVideoCaptureivNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-video-capture-streamiv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glGetVideoCaptureStreamivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-video-capture-streamfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glGetVideoCaptureStreamfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-video-capture-streamdv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glGetVideoCaptureStreamdvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::video-capture-nv
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0)
         (u32vector a1)
         ((c-pointer unsigned-integer64) a2))
        "return(_ALLEGRO_glVideoCaptureNV_t(a0 , a1 , a2));")))
  (begin
    (define gl::video-capture-stream-parameteriv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (s32vector a3))
        "_ALLEGRO_glVideoCaptureStreamParameterivNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::video-capture-stream-parameterfv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f32vector a3))
        "_ALLEGRO_glVideoCaptureStreamParameterfvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::video-capture-stream-parameterdv-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer a2)
         (f64vector a3))
        "_ALLEGRO_glVideoCaptureStreamParameterdvNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::use-shader-program-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glUseShaderProgramEXT_t(a0 , a1);")))
  (begin
    (define gl::active-program-ext
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glActiveProgramEXT_t(a0);")))
  (begin
    (define gl::create-shader-program-ext
      (foreign-lambda*
        unsigned-integer
        ((unsigned-integer a0) (c-string a1))
        "return(_ALLEGRO_glCreateShaderProgramEXT_t(a0 , a1));")))
  (begin
    (define gl::make-buffer-resident-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glMakeBufferResidentNV_t(a0 , a1);")))
  (begin
    (define gl::make-buffer-non-resident-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glMakeBufferNonResidentNV_t(a0);")))
  (begin
    (define gl::is-buffer-resident-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsBufferResidentNV_t(a0));")))
  (begin
    (define gl::make-named-buffer-resident-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (unsigned-integer a1))
        "_ALLEGRO_glMakeNamedBufferResidentNV_t(a0 , a1);")))
  (begin
    (define gl::make-named-buffer-non-resident-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0))
        "_ALLEGRO_glMakeNamedBufferNonResidentNV_t(a0);")))
  (begin
    (define gl::is-named-buffer-resident-nv
      (foreign-lambda*
        unsigned-char
        ((unsigned-integer a0))
        "return(_ALLEGRO_glIsNamedBufferResidentNV_t(a0));")))
  (begin
    (define gl::get-buffer-parameterui64v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetBufferParameterui64vNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-named-buffer-parameterui64v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetNamedBufferParameterui64vNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-integerui64v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) ((c-pointer unsigned-integer64) a1))
        "_ALLEGRO_glGetIntegerui64vNV_t(a0 , a1);")))
  (begin
    (define gl::uniformui64nv
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer64 a1))
        "_ALLEGRO_glUniformui64NV_t(a0 , a1);")))
  (begin
    (define gl::uniformui64v-nv
      (foreign-lambda*
        void
        ((integer a0) (integer a1) ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glUniformui64vNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::get-uniformui64v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetUniformui64vNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniformui64nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer64 a2))
        "_ALLEGRO_glProgramUniformui64NV_t(a0 , a1 , a2);")))
  (begin
    (define gl::program-uniformui64v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (integer a2)
         ((c-pointer unsigned-integer64) a3))
        "_ALLEGRO_glProgramUniformui64vNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::buffer-address-range-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         (unsigned-integer64 a2)
         ("intptr_t" a3))
        "_ALLEGRO_glBufferAddressRangeNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::vertex-format-nv
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glVertexFormatNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::normal-format-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glNormalFormatNV_t(a0 , a1);")))
  (begin
    (define gl::color-format-nv
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glColorFormatNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::index-format-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glIndexFormatNV_t(a0 , a1);")))
  (begin
    (define gl::tex-coord-format-nv
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glTexCoordFormatNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::edge-flag-format-nv
      (foreign-lambda*
        void
        ((integer a0))
        "_ALLEGRO_glEdgeFlagFormatNV_t(a0);")))
  (begin
    (define gl::secondary-color-format-nv
      (foreign-lambda*
        void
        ((integer a0) (unsigned-integer a1) (integer a2))
        "_ALLEGRO_glSecondaryColorFormatNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::fog-coord-format-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1))
        "_ALLEGRO_glFogCoordFormatNV_t(a0 , a1);")))
  (begin
    (define gl::vertex-attrib-format-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (integer a1)
         (unsigned-integer a2)
         (unsigned-char a3)
         (integer a4))
        "_ALLEGRO_glVertexAttribFormatNV_t(a0 , a1 , a2 , a3 , a4);")))
  (begin
    (define gl::vertex-attrib-iformat-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0) (integer a1) (unsigned-integer a2) (integer a3))
        "_ALLEGRO_glVertexAttribIFormatNV_t(a0 , a1 , a2 , a3);")))
  (begin
    (define gl::get-integerui64i-v-nv
      (foreign-lambda*
        void
        ((unsigned-integer a0)
         (unsigned-integer a1)
         ((c-pointer unsigned-integer64) a2))
        "_ALLEGRO_glGetIntegerui64i_vNV_t(a0 , a1 , a2);")))
  (begin
    (define gl::texture-barrier-nv
      (foreign-lambda* void () "_ALLEGRO_glTextureBarrierNV_t();")))
  (define gl:-ext-list:gl:arb-imaging
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_imaging);"))
  (define gl:-ext-list:gl:arb-multitexture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_multitexture);"))
  (define gl:-ext-list:gl:arb-transpose-matrix
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_transpose_matrix);"))
  (define gl:-ext-list:gl:arb-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_multisample);"))
  (define gl:-ext-list:gl:arb-texture-env-add
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_env_add);"))
  (define gl:-ext-list:gl:arb-texture-cube-map
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_cube_map);"))
  (define gl:-ext-list:gl:arb-texture-compression
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_compression);"))
  (define gl:-ext-list:gl:arb-texture-border-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_border_clamp);"))
  (define gl:-ext-list:gl:arb-point-parameters
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_point_parameters);"))
  (define gl:-ext-list:gl:arb-vertex-blend
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_blend);"))
  (define gl:-ext-list:gl:arb-texture-env-combine
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_env_combine);"))
  (define gl:-ext-list:gl:arb-texture-env-crossbar
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_env_crossbar);"))
  (define gl:-ext-list:gl:arb-texture-env-dot3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_env_dot3);"))
  (define gl:-ext-list:gl:arb-texture-mirrored-repeat
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_mirrored_repeat);"))
  (define gl:-ext-list:gl:arb-depth-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_depth_texture);"))
  (define gl:-ext-list:gl:arb-shadow
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shadow);"))
  (define gl:-ext-list:gl:arb-shadow-ambient
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shadow_ambient);"))
  (define gl:-ext-list:gl:arb-window-pos
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_window_pos);"))
  (define gl:-ext-list:gl:arb-vertex-program
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_program);"))
  (define gl:-ext-list:gl:arb-fragment-program
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_fragment_program);"))
  (define gl:-ext-list:gl:arb-vertex-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_buffer_object);"))
  (define gl:-ext-list:gl:arb-occlusion-query
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_occlusion_query);"))
  (define gl:-ext-list:gl:arb-shader-objects
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shader_objects);"))
  (define gl:-ext-list:gl:arb-vertex-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_shader);"))
  (define gl:-ext-list:gl:arb-fragment-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_fragment_shader);"))
  (define gl:-ext-list:gl:arb-shading-language-100
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shading_language_100);"))
  (define gl:-ext-list:gl:arb-texture-non-power-of-two
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_non_power_of_two);"))
  (define gl:-ext-list:gl:arb-point-sprite
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_point_sprite);"))
  (define gl:-ext-list:gl:arb-fragment-program-shadow
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_fragment_program_shadow);"))
  (define gl:-ext-list:gl:arb-draw-buffers
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_draw_buffers);"))
  (define gl:-ext-list:gl:arb-texture-rectangle
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_rectangle);"))
  (define gl:-ext-list:gl:arb-color-buffer-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_color_buffer_float);"))
  (define gl:-ext-list:gl:arb-half-float-pixel
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_half_float_pixel);"))
  (define gl:-ext-list:gl:arb-texture-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_float);"))
  (define gl:-ext-list:gl:arb-pixel-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_pixel_buffer_object);"))
  (define gl:-ext-list:gl:arb-instanced-arrays
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_instanced_arrays);"))
  (define gl:-ext-list:gl:arb-draw-instanced
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_draw_instanced);"))
  (define gl:-ext-list:gl:arb-geometry-shader4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_geometry_shader4);"))
  (define gl:-ext-list:gl:arb-texture-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_buffer_object);"))
  (define gl:-ext-list:gl:arb-depth-buffer-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_depth_buffer_float);"))
  (define gl:-ext-list:gl:arb-framebuffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_framebuffer_object);"))
  (define gl:-ext-list:gl:arb-framebuffer-s-rgb
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_framebuffer_sRGB);"))
  (define gl:-ext-list:gl:arb-half-float-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_half_float_vertex);"))
  (define gl:-ext-list:gl:arb-map-buffer-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_map_buffer_range);"))
  (define gl:-ext-list:gl:arb-texture-compression-rgtc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_compression_rgtc);"))
  (define gl:-ext-list:gl:arb-texture-rg
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_rg);"))
  (define gl:-ext-list:gl:arb-vertex-array-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_array_object);"))
  (define gl:-ext-list:gl:arb-copy-buffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_copy_buffer);"))
  (define gl:-ext-list:gl:arb-compatibility
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_compatibility);"))
  (define gl:-ext-list:gl:arb-uniform-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_uniform_buffer_object);"))
  (define gl:-ext-list:gl:arb-shader-texture-lod
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shader_texture_lod);"))
  (define gl:-ext-list:gl:arb-depth-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_depth_clamp);"))
  (define gl:-ext-list:gl:arb-draw-elements-base-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_draw_elements_base_vertex);"))
  (define gl:-ext-list:gl:arb-fragment-coord-conventions
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_fragment_coord_conventions);"))
  (define gl:-ext-list:gl:arb-provoking-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_provoking_vertex);"))
  (define gl:-ext-list:gl:arb-seamless-cube-map
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_seamless_cube_map);"))
  (define gl:-ext-list:gl:arb-sync
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_sync);"))
  (define gl:-ext-list:gl:arb-texture-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_multisample);"))
  (define gl:-ext-list:gl:arb-vertex-array-bgra
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_array_bgra);"))
  (define gl:-ext-list:gl:arb-draw-buffers-blend
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_draw_buffers_blend);"))
  (define gl:-ext-list:gl:arb-sample-shading
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_sample_shading);"))
  (define gl:-ext-list:gl:arb-texture-cube-map-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_cube_map_array);"))
  (define gl:-ext-list:gl:arb-texture-gather
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_gather);"))
  (define gl:-ext-list:gl:arb-texture-query-lod
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_query_lod);"))
  (define gl:-ext-list:gl:arb-shading-language-include
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shading_language_include);"))
  (define gl:-ext-list:gl:arb-texture-compression-bptc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_compression_bptc);"))
  (define gl:-ext-list:gl:arb-blend-func-extended
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_blend_func_extended);"))
  (define gl:-ext-list:gl:arb-explicit-attrib-location
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_explicit_attrib_location);"))
  (define gl:-ext-list:gl:arb-occlusion-query2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_occlusion_query2);"))
  (define gl:-ext-list:gl:arb-sampler-objects
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_sampler_objects);"))
  (define gl:-ext-list:gl:arb-shader-bit-encoding
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shader_bit_encoding);"))
  (define gl:-ext-list:gl:arb-texture-rgb10-a2ui
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_rgb10_a2ui);"))
  (define gl:-ext-list:gl:arb-texture-swizzle
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_swizzle);"))
  (define gl:-ext-list:gl:arb-timer-query
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_timer_query);"))
  (define gl:-ext-list:gl:arb-vertex-type-2-10-10-10-rev
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev);"))
  (define gl:-ext-list:gl:arb-draw-indirect
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_draw_indirect);"))
  (define gl:-ext-list:gl:arb-gpu-shader5
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_gpu_shader5);"))
  (define gl:-ext-list:gl:arb-gpu-shader-fp64
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_gpu_shader_fp64);"))
  (define gl:-ext-list:gl:arb-shader-subroutine
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_shader_subroutine);"))
  (define gl:-ext-list:gl:arb-tessellation-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_tessellation_shader);"))
  (define gl:-ext-list:gl:arb-texture-buffer-object-rgb32
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_texture_buffer_object_rgb32);"))
  (define gl:-ext-list:gl:arb-transform-feedback2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_transform_feedback2);"))
  (define gl:-ext-list:gl:arb-transform-feedback3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ARB_transform_feedback3);"))
  (define gl:-ext-list:gl:ext-abgr
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_abgr);"))
  (define gl:-ext-list:gl:ext-blend-color
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_color);"))
  (define gl:-ext-list:gl:ext-polygon-offset
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_polygon_offset);"))
  (define gl:-ext-list:gl:ext-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture);"))
  (define gl:-ext-list:gl:ext-texture3d
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture3D);"))
  (define gl:-ext-list:gl:sgis-texture-filter4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_filter4);"))
  (define gl:-ext-list:gl:ext-subtexture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_subtexture);"))
  (define gl:-ext-list:gl:ext-copy-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_copy_texture);"))
  (define gl:-ext-list:gl:ext-histogram
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_histogram);"))
  (define gl:-ext-list:gl:ext-convolution
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_convolution);"))
  (define gl:-ext-list:gl:sgi-color-matrix
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGI_color_matrix);"))
  (define gl:-ext-list:gl:sgi-color-table
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGI_color_table);"))
  (define gl:-ext-list:gl:sgis-pixel-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_pixel_texture);"))
  (define gl:-ext-list:gl:sgix-pixel-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_pixel_texture);"))
  (define gl:-ext-list:gl:sgis-texture4d
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture4D);"))
  (define gl:-ext-list:gl:sgi-texture-color-table
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGI_texture_color_table);"))
  (define gl:-ext-list:gl:ext-cmyka
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_cmyka);"))
  (define gl:-ext-list:gl:ext-texture-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_object);"))
  (define gl:-ext-list:gl:sgis-detail-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_detail_texture);"))
  (define gl:-ext-list:gl:sgis-sharpen-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_sharpen_texture);"))
  (define gl:-ext-list:gl:ext-packed-pixels
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_packed_pixels);"))
  (define gl:-ext-list:gl:sgis-texture-lod
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_lod);"))
  (define gl:-ext-list:gl:sgis-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_multisample);"))
  (define gl:-ext-list:gl:ext-rescale-normal
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_rescale_normal);"))
  (define gl:-ext-list:gl:ext-vertex-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_vertex_array);"))
  (define gl:-ext-list:gl:ext-misc-attribute
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_misc_attribute);"))
  (define gl:-ext-list:gl:sgis-generate-mipmap
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_generate_mipmap);"))
  (define gl:-ext-list:gl:sgix-clipmap
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_clipmap);"))
  (define gl:-ext-list:gl:sgix-shadow
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_shadow);"))
  (define gl:-ext-list:gl:sgis-texture-edge-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_edge_clamp);"))
  (define gl:-ext-list:gl:sgis-texture-border-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_border_clamp);"))
  (define gl:-ext-list:gl:ext-blend-minmax
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_minmax);"))
  (define gl:-ext-list:gl:ext-blend-subtract
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_subtract);"))
  (define gl:-ext-list:gl:ext-blend-logic-op
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_logic_op);"))
  (define gl:-ext-list:gl:sgix-interlace
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_interlace);"))
  (define gl:-ext-list:gl:sgis-texture-select
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_select);"))
  (define gl:-ext-list:gl:sgix-sprite
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_sprite);"))
  (define gl:-ext-list:gl:sgix-texture-multi-buffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_multi_buffer);"))
  (define gl:-ext-list:gl:ext-point-parameters
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_point_parameters);"))
  (define gl:-ext-list:gl:sgix-instruments
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_instruments);"))
  (define gl:-ext-list:gl:sgix-texture-scale-bias
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_scale_bias);"))
  (define gl:-ext-list:gl:sgix-framezoom
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_framezoom);"))
  (define gl:-ext-list:gl:sgix-tag-sample-buffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_tag_sample_buffer);"))
  (define gl:-ext-list:gl:sgix-reference-plane
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_reference_plane);"))
  (define gl:-ext-list:gl:sgix-flush-raster
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_flush_raster);"))
  (define gl:-ext-list:gl:sgix-depth-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_depth_texture);"))
  (define gl:-ext-list:gl:sgis-fog-function
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_fog_function);"))
  (define gl:-ext-list:gl:sgix-fog-offset
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_fog_offset);"))
  (define gl:-ext-list:gl:hp-image-transform
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_HP_image_transform);"))
  (define gl:-ext-list:gl:hp-convolution-border-modes
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_HP_convolution_border_modes);"))
  (define gl:-ext-list:gl:sgix-texture-add-env
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_add_env);"))
  (define gl:-ext-list:gl:ext-color-subtable
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_color_subtable);"))
  (define gl:-ext-list:gl:pgi-vertex-hints
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_PGI_vertex_hints);"))
  (define gl:-ext-list:gl:pgi-misc-hints
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_PGI_misc_hints);"))
  (define gl:-ext-list:gl:ext-paletted-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_paletted_texture);"))
  (define gl:-ext-list:gl:ext-clip-volume-hint
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_clip_volume_hint);"))
  (define gl:-ext-list:gl:sgix-list-priority
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_list_priority);"))
  (define gl:-ext-list:gl:sgix-ir-instrument1
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_ir_instrument1);"))
  (define gl:-ext-list:gl:sgix-texture-lod-bias
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_lod_bias);"))
  (define gl:-ext-list:gl:sgix-shadow-ambient
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_shadow_ambient);"))
  (define gl:-ext-list:gl:ext-index-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_index_texture);"))
  (define gl:-ext-list:gl:ext-index-material
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_index_material);"))
  (define gl:-ext-list:gl:ext-index-func
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_index_func);"))
  (define gl:-ext-list:gl:ext-index-array-formats
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_index_array_formats);"))
  (define gl:-ext-list:gl:ext-compiled-vertex-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_compiled_vertex_array);"))
  (define gl:-ext-list:gl:ext-cull-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_cull_vertex);"))
  (define gl:-ext-list:gl:sgix-ycrcb
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_ycrcb);"))
  (define gl:-ext-list:gl:ext-fragment-lighting
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_fragment_lighting);"))
  (define gl:-ext-list:gl:ibm-rasterpos-clip
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_rasterpos_clip);"))
  (define gl:-ext-list:gl:hp-texture-lighting
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_HP_texture_lighting);"))
  (define gl:-ext-list:gl:ext-draw-range-elements
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_draw_range_elements);"))
  (define gl:-ext-list:gl:win-phong-shading
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_WIN_phong_shading);"))
  (define gl:-ext-list:gl:win-specular-fog
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_WIN_specular_fog);"))
  (define gl:-ext-list:gl:ext-light-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_light_texture);"))
  (define gl:-ext-list:gl:sgix-blend-alpha-minmax
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_blend_alpha_minmax);"))
  (define gl:-ext-list:gl:ext-scene-marker
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_scene_marker);"))
  (define gl:-ext-list:gl:sgix-pixel-texture-bits
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_pixel_texture_bits);"))
  (define gl:-ext-list:gl:ext-bgra
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_bgra);"))
  (define gl:-ext-list:gl:sgix-async
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_async);"))
  (define gl:-ext-list:gl:sgix-async-pixel
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_async_pixel);"))
  (define gl:-ext-list:gl:sgix-async-histogram
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_async_histogram);"))
  (define gl:-ext-list:gl:intel-texture-scissor
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_INTEL_texture_scissor);"))
  (define gl:-ext-list:gl:intel-parallel-arrays
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_INTEL_parallel_arrays);"))
  (define gl:-ext-list:gl:hp-occlusion-test
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_HP_occlusion_test);"))
  (define gl:-ext-list:gl:ext-pixel-transform
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_pixel_transform);"))
  (define gl:-ext-list:gl:ext-pixel-transform-color-table
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_pixel_transform_color_table);"))
  (define gl:-ext-list:gl:ext-shared-texture-palette
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_shared_texture_palette);"))
  (define gl:-ext-list:gl:ext-separate-specular-color
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_separate_specular_color);"))
  (define gl:-ext-list:gl:ext-secondary-color
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_secondary_color);"))
  (define gl:-ext-list:gl:ext-texture-env
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_env);"))
  (define gl:-ext-list:gl:ext-texture-perturb-normal
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_perturb_normal);"))
  (define gl:-ext-list:gl:ext-multi-draw-arrays
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_multi_draw_arrays);"))
  (define gl:-ext-list:gl:ext-fog-coord
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_fog_coord);"))
  (define gl:-ext-list:gl:rend-screen-coordinates
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_REND_screen_coordinates);"))
  (define gl:-ext-list:gl:ext-coordinate-frame
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_coordinate_frame);"))
  (define gl:-ext-list:gl:ext-texture-env-combine
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_env_combine);"))
  (define gl:-ext-list:gl:apple-specular-vector
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_specular_vector);"))
  (define gl:-ext-list:gl:apple-transform-hint
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_transform_hint);"))
  (define gl:-ext-list:gl:sunx-constant-data
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUNX_constant_data);"))
  (define gl:-ext-list:gl:sun-global-alpha
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_global_alpha);"))
  (define gl:-ext-list:gl:sun-triangle-list
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_triangle_list);"))
  (define gl:-ext-list:gl:sun-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_vertex);"))
  (define gl:-ext-list:gl:ext-blend-func-separate
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_func_separate);"))
  (define gl:-ext-list:gl:ingr-color-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_INGR_color_clamp);"))
  (define gl:-ext-list:gl:ingr-interlace-read
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_INGR_interlace_read);"))
  (define gl:-ext-list:gl:ext-stencil-wrap
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_stencil_wrap);"))
  (define gl:-ext-list:gl:ext-422-pixels
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_422_pixels);"))
  (define gl:-ext-list:gl:nv-texgen-reflection
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texgen_reflection);"))
  (define gl:-ext-list:gl:sgix-texture-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_range);"))
  (define gl:-ext-list:gl:sun-convolution-border-modes
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_convolution_border_modes);"))
  (define gl:-ext-list:gl:ext-texture-env-add
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_env_add);"))
  (define gl:-ext-list:gl:ext-texture-lod-bias
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_lod_bias);"))
  (define gl:-ext-list:gl:ext-texture-filter-anisotropic
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_filter_anisotropic);"))
  (define gl:-ext-list:gl:ext-vertex-weighting
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_vertex_weighting);"))
  (define gl:-ext-list:gl:nv-light-max-exponent
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_light_max_exponent);"))
  (define gl:-ext-list:gl:nv-vertex-array-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_array_range);"))
  (define gl:-ext-list:gl:nv-register-combiners
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_register_combiners);"))
  (define gl:-ext-list:gl:nv-fog-distance
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fog_distance);"))
  (define gl:-ext-list:gl:nv-texgen-emboss
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texgen_emboss);"))
  (define gl:-ext-list:gl:nv-blend-square
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_blend_square);"))
  (define gl:-ext-list:gl:nv-texture-env-combine4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_env_combine4);"))
  (define gl:-ext-list:gl:mesa-resize-buffers
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_MESA_resize_buffers);"))
  (define gl:-ext-list:gl:mesa-window-pos
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_MESA_window_pos);"))
  (define gl:-ext-list:gl:ext-texture-compression-s3tc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_compression_s3tc);"))
  (define gl:-ext-list:gl:ibm-cull-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_cull_vertex);"))
  (define gl:-ext-list:gl:ibm-multimode-draw-arrays
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_multimode_draw_arrays);"))
  (define gl:-ext-list:gl:ibm-vertex-array-lists
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_vertex_array_lists);"))
  (define gl:-ext-list:gl:3dfx-texture-compression-fxt1
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_3DFX_texture_compression_FXT1);"))
  (define gl:-ext-list:gl:3dfx-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_3DFX_multisample);"))
  (define gl:-ext-list:gl:3dfx-tbuffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_3DFX_tbuffer);"))
  (define gl:-ext-list:gl:sgix-vertex-preclip
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_vertex_preclip);"))
  (define gl:-ext-list:gl:sgix-resample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_resample);"))
  (define gl:-ext-list:gl:sgis-texture-color-mask
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIS_texture_color_mask);"))
  (define gl:-ext-list:gl:ext-texture-env-dot3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_env_dot3);"))
  (define gl:-ext-list:gl:ati-texture-mirror-once
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_texture_mirror_once);"))
  (define gl:-ext-list:gl:nv-fence
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fence);"))
  (define gl:-ext-list:gl:ibm-static-data
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_static_data);"))
  (define gl:-ext-list:gl:ibm-texture-mirrored-repeat
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_IBM_texture_mirrored_repeat);"))
  (define gl:-ext-list:gl:nv-evaluators
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_evaluators);"))
  (define gl:-ext-list:gl:nv-packed-depth-stencil
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_packed_depth_stencil);"))
  (define gl:-ext-list:gl:nv-register-combiners2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_register_combiners2);"))
  (define gl:-ext-list:gl:nv-texture-compression-vtc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_compression_vtc);"))
  (define gl:-ext-list:gl:nv-texture-rectangle
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_rectangle);"))
  (define gl:-ext-list:gl:nv-texture-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_shader);"))
  (define gl:-ext-list:gl:nv-texture-shader2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_shader2);"))
  (define gl:-ext-list:gl:nv-vertex-array-range2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_array_range2);"))
  (define gl:-ext-list:gl:nv-vertex-program
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program);"))
  (define gl:-ext-list:gl:sgix-texture-coordinate-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SGIX_texture_coordinate_clamp);"))
  (define gl:-ext-list:gl:oml-interlace
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OML_interlace);"))
  (define gl:-ext-list:gl:oml-subsample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OML_subsample);"))
  (define gl:-ext-list:gl:oml-resample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OML_resample);"))
  (define gl:-ext-list:gl:nv-copy-depth-to-color
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_copy_depth_to_color);"))
  (define gl:-ext-list:gl:ati-envmap-bumpmap
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_envmap_bumpmap);"))
  (define gl:-ext-list:gl:ati-fragment-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_fragment_shader);"))
  (define gl:-ext-list:gl:ati-pn-triangles
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_pn_triangles);"))
  (define gl:-ext-list:gl:ati-vertex-array-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_vertex_array_object);"))
  (define gl:-ext-list:gl:ext-vertex-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_vertex_shader);"))
  (define gl:-ext-list:gl:ati-vertex-streams
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_vertex_streams);"))
  (define gl:-ext-list:gl:ati-element-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_element_array);"))
  (define gl:-ext-list:gl:sun-mesh-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_mesh_array);"))
  (define gl:-ext-list:gl:sun-slice-accum
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_SUN_slice_accum);"))
  (define gl:-ext-list:gl:nv-multisample-filter-hint
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_multisample_filter_hint);"))
  (define gl:-ext-list:gl:nv-depth-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_depth_clamp);"))
  (define gl:-ext-list:gl:nv-occlusion-query
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_occlusion_query);"))
  (define gl:-ext-list:gl:nv-point-sprite
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_point_sprite);"))
  (define gl:-ext-list:gl:nv-texture-shader3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_shader3);"))
  (define gl:-ext-list:gl:nv-vertex-program1-1
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program1_1);"))
  (define gl:-ext-list:gl:ext-shadow-funcs
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_shadow_funcs);"))
  (define gl:-ext-list:gl:ext-stencil-two-side
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_stencil_two_side);"))
  (define gl:-ext-list:gl:ati-text-fragment-shader
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_text_fragment_shader);"))
  (define gl:-ext-list:gl:apple-client-storage
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_client_storage);"))
  (define gl:-ext-list:gl:apple-element-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_element_array);"))
  (define gl:-ext-list:gl:apple-fence
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_fence);"))
  (define gl:-ext-list:gl:apple-vertex-array-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_vertex_array_object);"))
  (define gl:-ext-list:gl:apple-vertex-array-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_vertex_array_range);"))
  (define gl:-ext-list:gl:apple-ycbcr-422
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_ycbcr_422);"))
  (define gl:-ext-list:gl:s3-s3tc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_S3_s3tc);"))
  (define gl:-ext-list:gl:ati-draw-buffers
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_draw_buffers);"))
  (define gl:-ext-list:gl:ati-texture-env-combine3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_texture_env_combine3);"))
  (define gl:-ext-list:gl:ati-texture-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_texture_float);"))
  (define gl:-ext-list:gl:nv-float-buffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_float_buffer);"))
  (define gl:-ext-list:gl:nv-fragment-program
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fragment_program);"))
  (define gl:-ext-list:gl:nv-half-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_half_float);"))
  (define gl:-ext-list:gl:nv-pixel-data-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_pixel_data_range);"))
  (define gl:-ext-list:gl:nv-primitive-restart
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_primitive_restart);"))
  (define gl:-ext-list:gl:nv-texture-expand-normal
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_expand_normal);"))
  (define gl:-ext-list:gl:nv-vertex-program2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program2);"))
  (define gl:-ext-list:gl:ati-map-object-buffer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_map_object_buffer);"))
  (define gl:-ext-list:gl:ati-separate-stencil
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_separate_stencil);"))
  (define gl:-ext-list:gl:ati-vertex-attrib-array-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_vertex_attrib_array_object);"))
  (define gl:-ext-list:gl:oes-byte-coordinates
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_byte_coordinates);"))
  (define gl:-ext-list:gl:oes-fixed-point
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_fixed_point);"))
  (define gl:-ext-list:gl:oes-single-precision
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_single_precision);"))
  (define gl:-ext-list:gl:oes-compressed-paletted-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_compressed_paletted_texture);"))
  (define gl:-ext-list:gl:oes-read-format
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_read_format);"))
  (define gl:-ext-list:gl:oes-query-matrix
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_query_matrix);"))
  (define gl:-ext-list:gl:oes-framebuffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_framebuffer_object);"))
  (define gl:-ext-list:gl:oes-texture-npot
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_OES_texture_npot);"))
  (define gl:-ext-list:gl:ext-depth-bounds-test
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_depth_bounds_test);"))
  (define gl:-ext-list:gl:ext-texture-mirror-clamp
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_mirror_clamp);"))
  (define gl:-ext-list:gl:ext-blend-equation-separate
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_blend_equation_separate);"))
  (define gl:-ext-list:gl:mesa-pack-invert
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_MESA_pack_invert);"))
  (define gl:-ext-list:gl:mesa-ycbcr-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_MESA_ycbcr_texture);"))
  (define gl:-ext-list:gl:ext-pixel-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_pixel_buffer_object);"))
  (define gl:-ext-list:gl:nv-fragment-program-option
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fragment_program_option);"))
  (define gl:-ext-list:gl:nv-fragment-program2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fragment_program2);"))
  (define gl:-ext-list:gl:nv-vertex-program2-option
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program2_option);"))
  (define gl:-ext-list:gl:nv-vertex-program3
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program3);"))
  (define gl:-ext-list:gl:ext-texture-compression-dxt1
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_compression_dxt1);"))
  (define gl:-ext-list:gl:ext-framebuffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_framebuffer_object);"))
  (define gl:-ext-list:gl:gremedy-string-marker
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_GREMEDY_string_marker);"))
  (define gl:-ext-list:gl:ext-packed-depth-stencil
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_packed_depth_stencil);"))
  (define gl:-ext-list:gl:ext-stencil-clear-tag
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_stencil_clear_tag);"))
  (define gl:-ext-list:gl:ext-texture-s-rgb
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_sRGB);"))
  (define gl:-ext-list:gl:ext-framebuffer-blit
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_framebuffer_blit);"))
  (define gl:-ext-list:gl:ext-framebuffer-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_framebuffer_multisample);"))
  (define gl:-ext-list:gl:mesax-texture-stack
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_MESAX_texture_stack);"))
  (define gl:-ext-list:gl:ext-timer-query
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_timer_query);"))
  (define gl:-ext-list:gl:ext-gpu-program-parameters
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_gpu_program_parameters);"))
  (define gl:-ext-list:gl:apple-flush-buffer-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_flush_buffer_range);"))
  (define gl:-ext-list:gl:ext-bindable-uniform
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_bindable_uniform);"))
  (define gl:-ext-list:gl:ext-draw-buffers2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_draw_buffers2);"))
  (define gl:-ext-list:gl:ext-draw-instanced
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_draw_instanced);"))
  (define gl:-ext-list:gl:ext-framebuffer-s-rgb
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_framebuffer_sRGB);"))
  (define gl:-ext-list:gl:ext-geometry-shader4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_geometry_shader4);"))
  (define gl:-ext-list:gl:ext-gpu-shader4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_gpu_shader4);"))
  (define gl:-ext-list:gl:ext-packed-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_packed_float);"))
  (define gl:-ext-list:gl:ext-texture-array
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_array);"))
  (define gl:-ext-list:gl:ext-texture-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_buffer_object);"))
  (define gl:-ext-list:gl:ext-texture-compression-latc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_compression_latc);"))
  (define gl:-ext-list:gl:ext-texture-compression-rgtc
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_compression_rgtc);"))
  (define gl:-ext-list:gl:ext-texture-integer
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_integer);"))
  (define gl:-ext-list:gl:ext-texture-shared-exponent
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_shared_exponent);"))
  (define gl:-ext-list:gl:nv-depth-buffer-float
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_depth_buffer_float);"))
  (define gl:-ext-list:gl:nv-fragment-program4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_fragment_program4);"))
  (define gl:-ext-list:gl:nv-framebuffer-multisample-coverage
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_framebuffer_multisample_coverage);"))
  (define gl:-ext-list:gl:nv-geometry-program4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_geometry_program4);"))
  (define gl:-ext-list:gl:nv-gpu-program4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_gpu_program4);"))
  (define gl:-ext-list:gl:nv-parameter-buffer-object
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_parameter_buffer_object);"))
  (define gl:-ext-list:gl:nv-transform-feedback
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_transform_feedback);"))
  (define gl:-ext-list:gl:nv-vertex-program4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_program4);"))
  (define gl:-ext-list:gl:gremedy-frame-terminator
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_GREMEDY_frame_terminator);"))
  (define gl:-ext-list:gl:nv-conditional-render
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_conditional_render);"))
  (define gl:-ext-list:gl:nv-present-video
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_present_video);"))
  (define gl:-ext-list:gl:ext-direct-state-access
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_direct_state_access);"))
  (define gl:-ext-list:gl:ext-transform-feedback
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_transform_feedback);"))
  (define gl:-ext-list:gl:ext-texture-swizzle
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_swizzle);"))
  (define gl:-ext-list:gl:nv-explicit-multisample
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_explicit_multisample);"))
  (define gl:-ext-list:gl:nv-transform-feedback2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_transform_feedback2);"))
  (define gl:-ext-list:gl:ati-meminfo
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_ATI_meminfo);"))
  (define gl:-ext-list:gl:amd-performance-monitor
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_performance_monitor);"))
  (define gl:-ext-list:gl:amd-texture-texture4
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_texture_texture4);"))
  (define gl:-ext-list:gl:amd-vertex-shader-tesselator
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_vertex_shader_tesselator);"))
  (define gl:-ext-list:gl:ext-provoking-vertex
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_provoking_vertex);"))
  (define gl:-ext-list:gl:ext-texture-snorm
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_texture_snorm);"))
  (define gl:-ext-list:gl:amd-draw-buffers-blend
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_draw_buffers_blend);"))
  (define gl:-ext-list:gl:apple-texture-range
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_texture_range);"))
  (define gl:-ext-list:gl:apple-float-pixels
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_float_pixels);"))
  (define gl:-ext-list:gl:apple-vertex-program-evaluators
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_vertex_program_evaluators);"))
  (define gl:-ext-list:gl:apple-aux-depth-stencil
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_aux_depth_stencil);"))
  (define gl:-ext-list:gl:apple-object-purgeable
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_object_purgeable);"))
  (define gl:-ext-list:gl:apple-row-bytes
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_row_bytes);"))
  (define gl:-ext-list:gl:apple-rgb-422
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_APPLE_rgb_422);"))
  (define gl:-ext-list:gl:nv-video-capture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_video_capture);"))
  (define gl:-ext-list:gl:ext-separate-shader-objects
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_EXT_separate_shader_objects);"))
  (define gl:-ext-list:gl:nv-parameter-buffer-object2
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_parameter_buffer_object2);"))
  (define gl:-ext-list:gl:nv-shader-buffer-load
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_shader_buffer_load);"))
  (define gl:-ext-list:gl:nv-vertex-buffer-unified-memory
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_vertex_buffer_unified_memory);"))
  (define gl:-ext-list:gl:nv-texture-barrier
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_NV_texture_barrier);"))
  (define gl:-ext-list:gl:amd-shader-stencil-export
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_shader_stencil_export);"))
  (define gl:-ext-list:gl:amd-seamless-cubemap-per-texture
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_seamless_cubemap_per_texture);"))
  (define gl:-ext-list:gl:amd-conservative-depth
    (foreign-lambda*
      integer
      (((c-pointer (struct "ALLEGRO_OGL_EXT_LIST")) s))
      "return(s->ALLEGRO_GL_AMD_conservative_depth);"))
  (define make-allegro-ogl-ext-list
    (foreign-lambda*
      (c-pointer (struct "ALLEGRO_OGL_EXT_LIST"))
      ((integer ALLEGRO_GL_ARB_imaging)
       (integer ALLEGRO_GL_ARB_multitexture)
       (integer ALLEGRO_GL_ARB_transpose_matrix)
       (integer ALLEGRO_GL_ARB_multisample)
       (integer ALLEGRO_GL_ARB_texture_env_add)
       (integer ALLEGRO_GL_ARB_texture_cube_map)
       (integer ALLEGRO_GL_ARB_texture_compression)
       (integer ALLEGRO_GL_ARB_texture_border_clamp)
       (integer ALLEGRO_GL_ARB_point_parameters)
       (integer ALLEGRO_GL_ARB_vertex_blend)
       (integer ALLEGRO_GL_ARB_texture_env_combine)
       (integer ALLEGRO_GL_ARB_texture_env_crossbar)
       (integer ALLEGRO_GL_ARB_texture_env_dot3)
       (integer ALLEGRO_GL_ARB_texture_mirrored_repeat)
       (integer ALLEGRO_GL_ARB_depth_texture)
       (integer ALLEGRO_GL_ARB_shadow)
       (integer ALLEGRO_GL_ARB_shadow_ambient)
       (integer ALLEGRO_GL_ARB_window_pos)
       (integer ALLEGRO_GL_ARB_vertex_program)
       (integer ALLEGRO_GL_ARB_fragment_program)
       (integer ALLEGRO_GL_ARB_vertex_buffer_object)
       (integer ALLEGRO_GL_ARB_occlusion_query)
       (integer ALLEGRO_GL_ARB_shader_objects)
       (integer ALLEGRO_GL_ARB_vertex_shader)
       (integer ALLEGRO_GL_ARB_fragment_shader)
       (integer ALLEGRO_GL_ARB_shading_language_100)
       (integer ALLEGRO_GL_ARB_texture_non_power_of_two)
       (integer ALLEGRO_GL_ARB_point_sprite)
       (integer ALLEGRO_GL_ARB_fragment_program_shadow)
       (integer ALLEGRO_GL_ARB_draw_buffers)
       (integer ALLEGRO_GL_ARB_texture_rectangle)
       (integer ALLEGRO_GL_ARB_color_buffer_float)
       (integer ALLEGRO_GL_ARB_half_float_pixel)
       (integer ALLEGRO_GL_ARB_texture_float)
       (integer ALLEGRO_GL_ARB_pixel_buffer_object)
       (integer ALLEGRO_GL_ARB_instanced_arrays)
       (integer ALLEGRO_GL_ARB_draw_instanced)
       (integer ALLEGRO_GL_ARB_geometry_shader4)
       (integer ALLEGRO_GL_ARB_texture_buffer_object)
       (integer ALLEGRO_GL_ARB_depth_buffer_float)
       (integer ALLEGRO_GL_ARB_framebuffer_object)
       (integer ALLEGRO_GL_ARB_framebuffer_sRGB)
       (integer ALLEGRO_GL_ARB_half_float_vertex)
       (integer ALLEGRO_GL_ARB_map_buffer_range)
       (integer ALLEGRO_GL_ARB_texture_compression_rgtc)
       (integer ALLEGRO_GL_ARB_texture_rg)
       (integer ALLEGRO_GL_ARB_vertex_array_object)
       (integer ALLEGRO_GL_ARB_copy_buffer)
       (integer ALLEGRO_GL_ARB_compatibility)
       (integer ALLEGRO_GL_ARB_uniform_buffer_object)
       (integer ALLEGRO_GL_ARB_shader_texture_lod)
       (integer ALLEGRO_GL_ARB_depth_clamp)
       (integer ALLEGRO_GL_ARB_draw_elements_base_vertex)
       (integer ALLEGRO_GL_ARB_fragment_coord_conventions)
       (integer ALLEGRO_GL_ARB_provoking_vertex)
       (integer ALLEGRO_GL_ARB_seamless_cube_map)
       (integer ALLEGRO_GL_ARB_sync)
       (integer ALLEGRO_GL_ARB_texture_multisample)
       (integer ALLEGRO_GL_ARB_vertex_array_bgra)
       (integer ALLEGRO_GL_ARB_draw_buffers_blend)
       (integer ALLEGRO_GL_ARB_sample_shading)
       (integer ALLEGRO_GL_ARB_texture_cube_map_array)
       (integer ALLEGRO_GL_ARB_texture_gather)
       (integer ALLEGRO_GL_ARB_texture_query_lod)
       (integer ALLEGRO_GL_ARB_shading_language_include)
       (integer ALLEGRO_GL_ARB_texture_compression_bptc)
       (integer ALLEGRO_GL_ARB_blend_func_extended)
       (integer ALLEGRO_GL_ARB_explicit_attrib_location)
       (integer ALLEGRO_GL_ARB_occlusion_query2)
       (integer ALLEGRO_GL_ARB_sampler_objects)
       (integer ALLEGRO_GL_ARB_shader_bit_encoding)
       (integer ALLEGRO_GL_ARB_texture_rgb10_a2ui)
       (integer ALLEGRO_GL_ARB_texture_swizzle)
       (integer ALLEGRO_GL_ARB_timer_query)
       (integer ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev)
       (integer ALLEGRO_GL_ARB_draw_indirect)
       (integer ALLEGRO_GL_ARB_gpu_shader5)
       (integer ALLEGRO_GL_ARB_gpu_shader_fp64)
       (integer ALLEGRO_GL_ARB_shader_subroutine)
       (integer ALLEGRO_GL_ARB_tessellation_shader)
       (integer ALLEGRO_GL_ARB_texture_buffer_object_rgb32)
       (integer ALLEGRO_GL_ARB_transform_feedback2)
       (integer ALLEGRO_GL_ARB_transform_feedback3)
       (integer ALLEGRO_GL_EXT_abgr)
       (integer ALLEGRO_GL_EXT_blend_color)
       (integer ALLEGRO_GL_EXT_polygon_offset)
       (integer ALLEGRO_GL_EXT_texture)
       (integer ALLEGRO_GL_EXT_texture3D)
       (integer ALLEGRO_GL_SGIS_texture_filter4)
       (integer ALLEGRO_GL_EXT_subtexture)
       (integer ALLEGRO_GL_EXT_copy_texture)
       (integer ALLEGRO_GL_EXT_histogram)
       (integer ALLEGRO_GL_EXT_convolution)
       (integer ALLEGRO_GL_SGI_color_matrix)
       (integer ALLEGRO_GL_SGI_color_table)
       (integer ALLEGRO_GL_SGIS_pixel_texture)
       (integer ALLEGRO_GL_SGIX_pixel_texture)
       (integer ALLEGRO_GL_SGIS_texture4D)
       (integer ALLEGRO_GL_SGI_texture_color_table)
       (integer ALLEGRO_GL_EXT_cmyka)
       (integer ALLEGRO_GL_EXT_texture_object)
       (integer ALLEGRO_GL_SGIS_detail_texture)
       (integer ALLEGRO_GL_SGIS_sharpen_texture)
       (integer ALLEGRO_GL_EXT_packed_pixels)
       (integer ALLEGRO_GL_SGIS_texture_lod)
       (integer ALLEGRO_GL_SGIS_multisample)
       (integer ALLEGRO_GL_EXT_rescale_normal)
       (integer ALLEGRO_GL_EXT_vertex_array)
       (integer ALLEGRO_GL_EXT_misc_attribute)
       (integer ALLEGRO_GL_SGIS_generate_mipmap)
       (integer ALLEGRO_GL_SGIX_clipmap)
       (integer ALLEGRO_GL_SGIX_shadow)
       (integer ALLEGRO_GL_SGIS_texture_edge_clamp)
       (integer ALLEGRO_GL_SGIS_texture_border_clamp)
       (integer ALLEGRO_GL_EXT_blend_minmax)
       (integer ALLEGRO_GL_EXT_blend_subtract)
       (integer ALLEGRO_GL_EXT_blend_logic_op)
       (integer ALLEGRO_GL_SGIX_interlace)
       (integer ALLEGRO_GL_SGIS_texture_select)
       (integer ALLEGRO_GL_SGIX_sprite)
       (integer ALLEGRO_GL_SGIX_texture_multi_buffer)
       (integer ALLEGRO_GL_EXT_point_parameters)
       (integer ALLEGRO_GL_SGIX_instruments)
       (integer ALLEGRO_GL_SGIX_texture_scale_bias)
       (integer ALLEGRO_GL_SGIX_framezoom)
       (integer ALLEGRO_GL_SGIX_tag_sample_buffer)
       (integer ALLEGRO_GL_SGIX_reference_plane)
       (integer ALLEGRO_GL_SGIX_flush_raster)
       (integer ALLEGRO_GL_SGIX_depth_texture)
       (integer ALLEGRO_GL_SGIS_fog_function)
       (integer ALLEGRO_GL_SGIX_fog_offset)
       (integer ALLEGRO_GL_HP_image_transform)
       (integer ALLEGRO_GL_HP_convolution_border_modes)
       (integer ALLEGRO_GL_SGIX_texture_add_env)
       (integer ALLEGRO_GL_EXT_color_subtable)
       (integer ALLEGRO_GL_PGI_vertex_hints)
       (integer ALLEGRO_GL_PGI_misc_hints)
       (integer ALLEGRO_GL_EXT_paletted_texture)
       (integer ALLEGRO_GL_EXT_clip_volume_hint)
       (integer ALLEGRO_GL_SGIX_list_priority)
       (integer ALLEGRO_GL_SGIX_ir_instrument1)
       (integer ALLEGRO_GL_SGIX_texture_lod_bias)
       (integer ALLEGRO_GL_SGIX_shadow_ambient)
       (integer ALLEGRO_GL_EXT_index_texture)
       (integer ALLEGRO_GL_EXT_index_material)
       (integer ALLEGRO_GL_EXT_index_func)
       (integer ALLEGRO_GL_EXT_index_array_formats)
       (integer ALLEGRO_GL_EXT_compiled_vertex_array)
       (integer ALLEGRO_GL_EXT_cull_vertex)
       (integer ALLEGRO_GL_SGIX_ycrcb)
       (integer ALLEGRO_GL_EXT_fragment_lighting)
       (integer ALLEGRO_GL_IBM_rasterpos_clip)
       (integer ALLEGRO_GL_HP_texture_lighting)
       (integer ALLEGRO_GL_EXT_draw_range_elements)
       (integer ALLEGRO_GL_WIN_phong_shading)
       (integer ALLEGRO_GL_WIN_specular_fog)
       (integer ALLEGRO_GL_EXT_light_texture)
       (integer ALLEGRO_GL_SGIX_blend_alpha_minmax)
       (integer ALLEGRO_GL_EXT_scene_marker)
       (integer ALLEGRO_GL_SGIX_pixel_texture_bits)
       (integer ALLEGRO_GL_EXT_bgra)
       (integer ALLEGRO_GL_SGIX_async)
       (integer ALLEGRO_GL_SGIX_async_pixel)
       (integer ALLEGRO_GL_SGIX_async_histogram)
       (integer ALLEGRO_GL_INTEL_texture_scissor)
       (integer ALLEGRO_GL_INTEL_parallel_arrays)
       (integer ALLEGRO_GL_HP_occlusion_test)
       (integer ALLEGRO_GL_EXT_pixel_transform)
       (integer ALLEGRO_GL_EXT_pixel_transform_color_table)
       (integer ALLEGRO_GL_EXT_shared_texture_palette)
       (integer ALLEGRO_GL_EXT_separate_specular_color)
       (integer ALLEGRO_GL_EXT_secondary_color)
       (integer ALLEGRO_GL_EXT_texture_env)
       (integer ALLEGRO_GL_EXT_texture_perturb_normal)
       (integer ALLEGRO_GL_EXT_multi_draw_arrays)
       (integer ALLEGRO_GL_EXT_fog_coord)
       (integer ALLEGRO_GL_REND_screen_coordinates)
       (integer ALLEGRO_GL_EXT_coordinate_frame)
       (integer ALLEGRO_GL_EXT_texture_env_combine)
       (integer ALLEGRO_GL_APPLE_specular_vector)
       (integer ALLEGRO_GL_APPLE_transform_hint)
       (integer ALLEGRO_GL_SUNX_constant_data)
       (integer ALLEGRO_GL_SUN_global_alpha)
       (integer ALLEGRO_GL_SUN_triangle_list)
       (integer ALLEGRO_GL_SUN_vertex)
       (integer ALLEGRO_GL_EXT_blend_func_separate)
       (integer ALLEGRO_GL_INGR_color_clamp)
       (integer ALLEGRO_GL_INGR_interlace_read)
       (integer ALLEGRO_GL_EXT_stencil_wrap)
       (integer ALLEGRO_GL_EXT_422_pixels)
       (integer ALLEGRO_GL_NV_texgen_reflection)
       (integer ALLEGRO_GL_SGIX_texture_range)
       (integer ALLEGRO_GL_SUN_convolution_border_modes)
       (integer ALLEGRO_GL_EXT_texture_env_add)
       (integer ALLEGRO_GL_EXT_texture_lod_bias)
       (integer ALLEGRO_GL_EXT_texture_filter_anisotropic)
       (integer ALLEGRO_GL_EXT_vertex_weighting)
       (integer ALLEGRO_GL_NV_light_max_exponent)
       (integer ALLEGRO_GL_NV_vertex_array_range)
       (integer ALLEGRO_GL_NV_register_combiners)
       (integer ALLEGRO_GL_NV_fog_distance)
       (integer ALLEGRO_GL_NV_texgen_emboss)
       (integer ALLEGRO_GL_NV_blend_square)
       (integer ALLEGRO_GL_NV_texture_env_combine4)
       (integer ALLEGRO_GL_MESA_resize_buffers)
       (integer ALLEGRO_GL_MESA_window_pos)
       (integer ALLEGRO_GL_EXT_texture_compression_s3tc)
       (integer ALLEGRO_GL_IBM_cull_vertex)
       (integer ALLEGRO_GL_IBM_multimode_draw_arrays)
       (integer ALLEGRO_GL_IBM_vertex_array_lists)
       (integer ALLEGRO_GL_3DFX_texture_compression_FXT1)
       (integer ALLEGRO_GL_3DFX_multisample)
       (integer ALLEGRO_GL_3DFX_tbuffer)
       (integer ALLEGRO_GL_SGIX_vertex_preclip)
       (integer ALLEGRO_GL_SGIX_resample)
       (integer ALLEGRO_GL_SGIS_texture_color_mask)
       (integer ALLEGRO_GL_EXT_texture_env_dot3)
       (integer ALLEGRO_GL_ATI_texture_mirror_once)
       (integer ALLEGRO_GL_NV_fence)
       (integer ALLEGRO_GL_IBM_static_data)
       (integer ALLEGRO_GL_IBM_texture_mirrored_repeat)
       (integer ALLEGRO_GL_NV_evaluators)
       (integer ALLEGRO_GL_NV_packed_depth_stencil)
       (integer ALLEGRO_GL_NV_register_combiners2)
       (integer ALLEGRO_GL_NV_texture_compression_vtc)
       (integer ALLEGRO_GL_NV_texture_rectangle)
       (integer ALLEGRO_GL_NV_texture_shader)
       (integer ALLEGRO_GL_NV_texture_shader2)
       (integer ALLEGRO_GL_NV_vertex_array_range2)
       (integer ALLEGRO_GL_NV_vertex_program)
       (integer ALLEGRO_GL_SGIX_texture_coordinate_clamp)
       (integer ALLEGRO_GL_OML_interlace)
       (integer ALLEGRO_GL_OML_subsample)
       (integer ALLEGRO_GL_OML_resample)
       (integer ALLEGRO_GL_NV_copy_depth_to_color)
       (integer ALLEGRO_GL_ATI_envmap_bumpmap)
       (integer ALLEGRO_GL_ATI_fragment_shader)
       (integer ALLEGRO_GL_ATI_pn_triangles)
       (integer ALLEGRO_GL_ATI_vertex_array_object)
       (integer ALLEGRO_GL_EXT_vertex_shader)
       (integer ALLEGRO_GL_ATI_vertex_streams)
       (integer ALLEGRO_GL_ATI_element_array)
       (integer ALLEGRO_GL_SUN_mesh_array)
       (integer ALLEGRO_GL_SUN_slice_accum)
       (integer ALLEGRO_GL_NV_multisample_filter_hint)
       (integer ALLEGRO_GL_NV_depth_clamp)
       (integer ALLEGRO_GL_NV_occlusion_query)
       (integer ALLEGRO_GL_NV_point_sprite)
       (integer ALLEGRO_GL_NV_texture_shader3)
       (integer ALLEGRO_GL_NV_vertex_program1_1)
       (integer ALLEGRO_GL_EXT_shadow_funcs)
       (integer ALLEGRO_GL_EXT_stencil_two_side)
       (integer ALLEGRO_GL_ATI_text_fragment_shader)
       (integer ALLEGRO_GL_APPLE_client_storage)
       (integer ALLEGRO_GL_APPLE_element_array)
       (integer ALLEGRO_GL_APPLE_fence)
       (integer ALLEGRO_GL_APPLE_vertex_array_object)
       (integer ALLEGRO_GL_APPLE_vertex_array_range)
       (integer ALLEGRO_GL_APPLE_ycbcr_422)
       (integer ALLEGRO_GL_S3_s3tc)
       (integer ALLEGRO_GL_ATI_draw_buffers)
       (integer ALLEGRO_GL_ATI_texture_env_combine3)
       (integer ALLEGRO_GL_ATI_texture_float)
       (integer ALLEGRO_GL_NV_float_buffer)
       (integer ALLEGRO_GL_NV_fragment_program)
       (integer ALLEGRO_GL_NV_half_float)
       (integer ALLEGRO_GL_NV_pixel_data_range)
       (integer ALLEGRO_GL_NV_primitive_restart)
       (integer ALLEGRO_GL_NV_texture_expand_normal)
       (integer ALLEGRO_GL_NV_vertex_program2)
       (integer ALLEGRO_GL_ATI_map_object_buffer)
       (integer ALLEGRO_GL_ATI_separate_stencil)
       (integer ALLEGRO_GL_ATI_vertex_attrib_array_object)
       (integer ALLEGRO_GL_OES_byte_coordinates)
       (integer ALLEGRO_GL_OES_fixed_point)
       (integer ALLEGRO_GL_OES_single_precision)
       (integer ALLEGRO_GL_OES_compressed_paletted_texture)
       (integer ALLEGRO_GL_OES_read_format)
       (integer ALLEGRO_GL_OES_query_matrix)
       (integer ALLEGRO_GL_OES_framebuffer_object)
       (integer ALLEGRO_GL_OES_texture_npot)
       (integer ALLEGRO_GL_EXT_depth_bounds_test)
       (integer ALLEGRO_GL_EXT_texture_mirror_clamp)
       (integer ALLEGRO_GL_EXT_blend_equation_separate)
       (integer ALLEGRO_GL_MESA_pack_invert)
       (integer ALLEGRO_GL_MESA_ycbcr_texture)
       (integer ALLEGRO_GL_EXT_pixel_buffer_object)
       (integer ALLEGRO_GL_NV_fragment_program_option)
       (integer ALLEGRO_GL_NV_fragment_program2)
       (integer ALLEGRO_GL_NV_vertex_program2_option)
       (integer ALLEGRO_GL_NV_vertex_program3)
       (integer ALLEGRO_GL_EXT_texture_compression_dxt1)
       (integer ALLEGRO_GL_EXT_framebuffer_object)
       (integer ALLEGRO_GL_GREMEDY_string_marker)
       (integer ALLEGRO_GL_EXT_packed_depth_stencil)
       (integer ALLEGRO_GL_EXT_stencil_clear_tag)
       (integer ALLEGRO_GL_EXT_texture_sRGB)
       (integer ALLEGRO_GL_EXT_framebuffer_blit)
       (integer ALLEGRO_GL_EXT_framebuffer_multisample)
       (integer ALLEGRO_GL_MESAX_texture_stack)
       (integer ALLEGRO_GL_EXT_timer_query)
       (integer ALLEGRO_GL_EXT_gpu_program_parameters)
       (integer ALLEGRO_GL_APPLE_flush_buffer_range)
       (integer ALLEGRO_GL_EXT_bindable_uniform)
       (integer ALLEGRO_GL_EXT_draw_buffers2)
       (integer ALLEGRO_GL_EXT_draw_instanced)
       (integer ALLEGRO_GL_EXT_framebuffer_sRGB)
       (integer ALLEGRO_GL_EXT_geometry_shader4)
       (integer ALLEGRO_GL_EXT_gpu_shader4)
       (integer ALLEGRO_GL_EXT_packed_float)
       (integer ALLEGRO_GL_EXT_texture_array)
       (integer ALLEGRO_GL_EXT_texture_buffer_object)
       (integer ALLEGRO_GL_EXT_texture_compression_latc)
       (integer ALLEGRO_GL_EXT_texture_compression_rgtc)
       (integer ALLEGRO_GL_EXT_texture_integer)
       (integer ALLEGRO_GL_EXT_texture_shared_exponent)
       (integer ALLEGRO_GL_NV_depth_buffer_float)
       (integer ALLEGRO_GL_NV_fragment_program4)
       (integer ALLEGRO_GL_NV_framebuffer_multisample_coverage)
       (integer ALLEGRO_GL_NV_geometry_program4)
       (integer ALLEGRO_GL_NV_gpu_program4)
       (integer ALLEGRO_GL_NV_parameter_buffer_object)
       (integer ALLEGRO_GL_NV_transform_feedback)
       (integer ALLEGRO_GL_NV_vertex_program4)
       (integer ALLEGRO_GL_GREMEDY_frame_terminator)
       (integer ALLEGRO_GL_NV_conditional_render)
       (integer ALLEGRO_GL_NV_present_video)
       (integer ALLEGRO_GL_EXT_direct_state_access)
       (integer ALLEGRO_GL_EXT_transform_feedback)
       (integer ALLEGRO_GL_EXT_texture_swizzle)
       (integer ALLEGRO_GL_NV_explicit_multisample)
       (integer ALLEGRO_GL_NV_transform_feedback2)
       (integer ALLEGRO_GL_ATI_meminfo)
       (integer ALLEGRO_GL_AMD_performance_monitor)
       (integer ALLEGRO_GL_AMD_texture_texture4)
       (integer ALLEGRO_GL_AMD_vertex_shader_tesselator)
       (integer ALLEGRO_GL_EXT_provoking_vertex)
       (integer ALLEGRO_GL_EXT_texture_snorm)
       (integer ALLEGRO_GL_AMD_draw_buffers_blend)
       (integer ALLEGRO_GL_APPLE_texture_range)
       (integer ALLEGRO_GL_APPLE_float_pixels)
       (integer ALLEGRO_GL_APPLE_vertex_program_evaluators)
       (integer ALLEGRO_GL_APPLE_aux_depth_stencil)
       (integer ALLEGRO_GL_APPLE_object_purgeable)
       (integer ALLEGRO_GL_APPLE_row_bytes)
       (integer ALLEGRO_GL_APPLE_rgb_422)
       (integer ALLEGRO_GL_NV_video_capture)
       (integer ALLEGRO_GL_EXT_separate_shader_objects)
       (integer ALLEGRO_GL_NV_parameter_buffer_object2)
       (integer ALLEGRO_GL_NV_shader_buffer_load)
       (integer ALLEGRO_GL_NV_vertex_buffer_unified_memory)
       (integer ALLEGRO_GL_NV_texture_barrier)
       (integer ALLEGRO_GL_AMD_shader_stencil_export)
       (integer ALLEGRO_GL_AMD_seamless_cubemap_per_texture)
       (integer ALLEGRO_GL_AMD_conservative_depth))
      "struct ALLEGRO_OGL_EXT_LIST *tmp_ =  (struct ALLEGRO_OGL_EXT_LIST *)C_malloc(sizeof(struct ALLEGRO_OGL_EXT_LIST));\ntmp_->ALLEGRO_GL_ARB_imaging = ALLEGRO_GL_ARB_imaging;\ntmp_->ALLEGRO_GL_ARB_multitexture = ALLEGRO_GL_ARB_multitexture;\ntmp_->ALLEGRO_GL_ARB_transpose_matrix = ALLEGRO_GL_ARB_transpose_matrix;\ntmp_->ALLEGRO_GL_ARB_multisample = ALLEGRO_GL_ARB_multisample;\ntmp_->ALLEGRO_GL_ARB_texture_env_add = ALLEGRO_GL_ARB_texture_env_add;\ntmp_->ALLEGRO_GL_ARB_texture_cube_map = ALLEGRO_GL_ARB_texture_cube_map;\ntmp_->ALLEGRO_GL_ARB_texture_compression = ALLEGRO_GL_ARB_texture_compression;\ntmp_->ALLEGRO_GL_ARB_texture_border_clamp = ALLEGRO_GL_ARB_texture_border_clamp;\ntmp_->ALLEGRO_GL_ARB_point_parameters = ALLEGRO_GL_ARB_point_parameters;\ntmp_->ALLEGRO_GL_ARB_vertex_blend = ALLEGRO_GL_ARB_vertex_blend;\ntmp_->ALLEGRO_GL_ARB_texture_env_combine = ALLEGRO_GL_ARB_texture_env_combine;\ntmp_->ALLEGRO_GL_ARB_texture_env_crossbar = ALLEGRO_GL_ARB_texture_env_crossbar;\ntmp_->ALLEGRO_GL_ARB_texture_env_dot3 = ALLEGRO_GL_ARB_texture_env_dot3;\ntmp_->ALLEGRO_GL_ARB_texture_mirrored_repeat = ALLEGRO_GL_ARB_texture_mirrored_repeat;\ntmp_->ALLEGRO_GL_ARB_depth_texture = ALLEGRO_GL_ARB_depth_texture;\ntmp_->ALLEGRO_GL_ARB_shadow = ALLEGRO_GL_ARB_shadow;\ntmp_->ALLEGRO_GL_ARB_shadow_ambient = ALLEGRO_GL_ARB_shadow_ambient;\ntmp_->ALLEGRO_GL_ARB_window_pos = ALLEGRO_GL_ARB_window_pos;\ntmp_->ALLEGRO_GL_ARB_vertex_program = ALLEGRO_GL_ARB_vertex_program;\ntmp_->ALLEGRO_GL_ARB_fragment_program = ALLEGRO_GL_ARB_fragment_program;\ntmp_->ALLEGRO_GL_ARB_vertex_buffer_object = ALLEGRO_GL_ARB_vertex_buffer_object;\ntmp_->ALLEGRO_GL_ARB_occlusion_query = ALLEGRO_GL_ARB_occlusion_query;\ntmp_->ALLEGRO_GL_ARB_shader_objects = ALLEGRO_GL_ARB_shader_objects;\ntmp_->ALLEGRO_GL_ARB_vertex_shader = ALLEGRO_GL_ARB_vertex_shader;\ntmp_->ALLEGRO_GL_ARB_fragment_shader = ALLEGRO_GL_ARB_fragment_shader;\ntmp_->ALLEGRO_GL_ARB_shading_language_100 = ALLEGRO_GL_ARB_shading_language_100;\ntmp_->ALLEGRO_GL_ARB_texture_non_power_of_two = ALLEGRO_GL_ARB_texture_non_power_of_two;\ntmp_->ALLEGRO_GL_ARB_point_sprite = ALLEGRO_GL_ARB_point_sprite;\ntmp_->ALLEGRO_GL_ARB_fragment_program_shadow = ALLEGRO_GL_ARB_fragment_program_shadow;\ntmp_->ALLEGRO_GL_ARB_draw_buffers = ALLEGRO_GL_ARB_draw_buffers;\ntmp_->ALLEGRO_GL_ARB_texture_rectangle = ALLEGRO_GL_ARB_texture_rectangle;\ntmp_->ALLEGRO_GL_ARB_color_buffer_float = ALLEGRO_GL_ARB_color_buffer_float;\ntmp_->ALLEGRO_GL_ARB_half_float_pixel = ALLEGRO_GL_ARB_half_float_pixel;\ntmp_->ALLEGRO_GL_ARB_texture_float = ALLEGRO_GL_ARB_texture_float;\ntmp_->ALLEGRO_GL_ARB_pixel_buffer_object = ALLEGRO_GL_ARB_pixel_buffer_object;\ntmp_->ALLEGRO_GL_ARB_instanced_arrays = ALLEGRO_GL_ARB_instanced_arrays;\ntmp_->ALLEGRO_GL_ARB_draw_instanced = ALLEGRO_GL_ARB_draw_instanced;\ntmp_->ALLEGRO_GL_ARB_geometry_shader4 = ALLEGRO_GL_ARB_geometry_shader4;\ntmp_->ALLEGRO_GL_ARB_texture_buffer_object = ALLEGRO_GL_ARB_texture_buffer_object;\ntmp_->ALLEGRO_GL_ARB_depth_buffer_float = ALLEGRO_GL_ARB_depth_buffer_float;\ntmp_->ALLEGRO_GL_ARB_framebuffer_object = ALLEGRO_GL_ARB_framebuffer_object;\ntmp_->ALLEGRO_GL_ARB_framebuffer_sRGB = ALLEGRO_GL_ARB_framebuffer_sRGB;\ntmp_->ALLEGRO_GL_ARB_half_float_vertex = ALLEGRO_GL_ARB_half_float_vertex;\ntmp_->ALLEGRO_GL_ARB_map_buffer_range = ALLEGRO_GL_ARB_map_buffer_range;\ntmp_->ALLEGRO_GL_ARB_texture_compression_rgtc = ALLEGRO_GL_ARB_texture_compression_rgtc;\ntmp_->ALLEGRO_GL_ARB_texture_rg = ALLEGRO_GL_ARB_texture_rg;\ntmp_->ALLEGRO_GL_ARB_vertex_array_object = ALLEGRO_GL_ARB_vertex_array_object;\ntmp_->ALLEGRO_GL_ARB_copy_buffer = ALLEGRO_GL_ARB_copy_buffer;\ntmp_->ALLEGRO_GL_ARB_compatibility = ALLEGRO_GL_ARB_compatibility;\ntmp_->ALLEGRO_GL_ARB_uniform_buffer_object = ALLEGRO_GL_ARB_uniform_buffer_object;\ntmp_->ALLEGRO_GL_ARB_shader_texture_lod = ALLEGRO_GL_ARB_shader_texture_lod;\ntmp_->ALLEGRO_GL_ARB_depth_clamp = ALLEGRO_GL_ARB_depth_clamp;\ntmp_->ALLEGRO_GL_ARB_draw_elements_base_vertex = ALLEGRO_GL_ARB_draw_elements_base_vertex;\ntmp_->ALLEGRO_GL_ARB_fragment_coord_conventions = ALLEGRO_GL_ARB_fragment_coord_conventions;\ntmp_->ALLEGRO_GL_ARB_provoking_vertex = ALLEGRO_GL_ARB_provoking_vertex;\ntmp_->ALLEGRO_GL_ARB_seamless_cube_map = ALLEGRO_GL_ARB_seamless_cube_map;\ntmp_->ALLEGRO_GL_ARB_sync = ALLEGRO_GL_ARB_sync;\ntmp_->ALLEGRO_GL_ARB_texture_multisample = ALLEGRO_GL_ARB_texture_multisample;\ntmp_->ALLEGRO_GL_ARB_vertex_array_bgra = ALLEGRO_GL_ARB_vertex_array_bgra;\ntmp_->ALLEGRO_GL_ARB_draw_buffers_blend = ALLEGRO_GL_ARB_draw_buffers_blend;\ntmp_->ALLEGRO_GL_ARB_sample_shading = ALLEGRO_GL_ARB_sample_shading;\ntmp_->ALLEGRO_GL_ARB_texture_cube_map_array = ALLEGRO_GL_ARB_texture_cube_map_array;\ntmp_->ALLEGRO_GL_ARB_texture_gather = ALLEGRO_GL_ARB_texture_gather;\ntmp_->ALLEGRO_GL_ARB_texture_query_lod = ALLEGRO_GL_ARB_texture_query_lod;\ntmp_->ALLEGRO_GL_ARB_shading_language_include = ALLEGRO_GL_ARB_shading_language_include;\ntmp_->ALLEGRO_GL_ARB_texture_compression_bptc = ALLEGRO_GL_ARB_texture_compression_bptc;\ntmp_->ALLEGRO_GL_ARB_blend_func_extended = ALLEGRO_GL_ARB_blend_func_extended;\ntmp_->ALLEGRO_GL_ARB_explicit_attrib_location = ALLEGRO_GL_ARB_explicit_attrib_location;\ntmp_->ALLEGRO_GL_ARB_occlusion_query2 = ALLEGRO_GL_ARB_occlusion_query2;\ntmp_->ALLEGRO_GL_ARB_sampler_objects = ALLEGRO_GL_ARB_sampler_objects;\ntmp_->ALLEGRO_GL_ARB_shader_bit_encoding = ALLEGRO_GL_ARB_shader_bit_encoding;\ntmp_->ALLEGRO_GL_ARB_texture_rgb10_a2ui = ALLEGRO_GL_ARB_texture_rgb10_a2ui;\ntmp_->ALLEGRO_GL_ARB_texture_swizzle = ALLEGRO_GL_ARB_texture_swizzle;\ntmp_->ALLEGRO_GL_ARB_timer_query = ALLEGRO_GL_ARB_timer_query;\ntmp_->ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev = ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev;\ntmp_->ALLEGRO_GL_ARB_draw_indirect = ALLEGRO_GL_ARB_draw_indirect;\ntmp_->ALLEGRO_GL_ARB_gpu_shader5 = ALLEGRO_GL_ARB_gpu_shader5;\ntmp_->ALLEGRO_GL_ARB_gpu_shader_fp64 = ALLEGRO_GL_ARB_gpu_shader_fp64;\ntmp_->ALLEGRO_GL_ARB_shader_subroutine = ALLEGRO_GL_ARB_shader_subroutine;\ntmp_->ALLEGRO_GL_ARB_tessellation_shader = ALLEGRO_GL_ARB_tessellation_shader;\ntmp_->ALLEGRO_GL_ARB_texture_buffer_object_rgb32 = ALLEGRO_GL_ARB_texture_buffer_object_rgb32;\ntmp_->ALLEGRO_GL_ARB_transform_feedback2 = ALLEGRO_GL_ARB_transform_feedback2;\ntmp_->ALLEGRO_GL_ARB_transform_feedback3 = ALLEGRO_GL_ARB_transform_feedback3;\ntmp_->ALLEGRO_GL_EXT_abgr = ALLEGRO_GL_EXT_abgr;\ntmp_->ALLEGRO_GL_EXT_blend_color = ALLEGRO_GL_EXT_blend_color;\ntmp_->ALLEGRO_GL_EXT_polygon_offset = ALLEGRO_GL_EXT_polygon_offset;\ntmp_->ALLEGRO_GL_EXT_texture = ALLEGRO_GL_EXT_texture;\ntmp_->ALLEGRO_GL_EXT_texture3D = ALLEGRO_GL_EXT_texture3D;\ntmp_->ALLEGRO_GL_SGIS_texture_filter4 = ALLEGRO_GL_SGIS_texture_filter4;\ntmp_->ALLEGRO_GL_EXT_subtexture = ALLEGRO_GL_EXT_subtexture;\ntmp_->ALLEGRO_GL_EXT_copy_texture = ALLEGRO_GL_EXT_copy_texture;\ntmp_->ALLEGRO_GL_EXT_histogram = ALLEGRO_GL_EXT_histogram;\ntmp_->ALLEGRO_GL_EXT_convolution = ALLEGRO_GL_EXT_convolution;\ntmp_->ALLEGRO_GL_SGI_color_matrix = ALLEGRO_GL_SGI_color_matrix;\ntmp_->ALLEGRO_GL_SGI_color_table = ALLEGRO_GL_SGI_color_table;\ntmp_->ALLEGRO_GL_SGIS_pixel_texture = ALLEGRO_GL_SGIS_pixel_texture;\ntmp_->ALLEGRO_GL_SGIX_pixel_texture = ALLEGRO_GL_SGIX_pixel_texture;\ntmp_->ALLEGRO_GL_SGIS_texture4D = ALLEGRO_GL_SGIS_texture4D;\ntmp_->ALLEGRO_GL_SGI_texture_color_table = ALLEGRO_GL_SGI_texture_color_table;\ntmp_->ALLEGRO_GL_EXT_cmyka = ALLEGRO_GL_EXT_cmyka;\ntmp_->ALLEGRO_GL_EXT_texture_object = ALLEGRO_GL_EXT_texture_object;\ntmp_->ALLEGRO_GL_SGIS_detail_texture = ALLEGRO_GL_SGIS_detail_texture;\ntmp_->ALLEGRO_GL_SGIS_sharpen_texture = ALLEGRO_GL_SGIS_sharpen_texture;\ntmp_->ALLEGRO_GL_EXT_packed_pixels = ALLEGRO_GL_EXT_packed_pixels;\ntmp_->ALLEGRO_GL_SGIS_texture_lod = ALLEGRO_GL_SGIS_texture_lod;\ntmp_->ALLEGRO_GL_SGIS_multisample = ALLEGRO_GL_SGIS_multisample;\ntmp_->ALLEGRO_GL_EXT_rescale_normal = ALLEGRO_GL_EXT_rescale_normal;\ntmp_->ALLEGRO_GL_EXT_vertex_array = ALLEGRO_GL_EXT_vertex_array;\ntmp_->ALLEGRO_GL_EXT_misc_attribute = ALLEGRO_GL_EXT_misc_attribute;\ntmp_->ALLEGRO_GL_SGIS_generate_mipmap = ALLEGRO_GL_SGIS_generate_mipmap;\ntmp_->ALLEGRO_GL_SGIX_clipmap = ALLEGRO_GL_SGIX_clipmap;\ntmp_->ALLEGRO_GL_SGIX_shadow = ALLEGRO_GL_SGIX_shadow;\ntmp_->ALLEGRO_GL_SGIS_texture_edge_clamp = ALLEGRO_GL_SGIS_texture_edge_clamp;\ntmp_->ALLEGRO_GL_SGIS_texture_border_clamp = ALLEGRO_GL_SGIS_texture_border_clamp;\ntmp_->ALLEGRO_GL_EXT_blend_minmax = ALLEGRO_GL_EXT_blend_minmax;\ntmp_->ALLEGRO_GL_EXT_blend_subtract = ALLEGRO_GL_EXT_blend_subtract;\ntmp_->ALLEGRO_GL_EXT_blend_logic_op = ALLEGRO_GL_EXT_blend_logic_op;\ntmp_->ALLEGRO_GL_SGIX_interlace = ALLEGRO_GL_SGIX_interlace;\ntmp_->ALLEGRO_GL_SGIS_texture_select = ALLEGRO_GL_SGIS_texture_select;\ntmp_->ALLEGRO_GL_SGIX_sprite = ALLEGRO_GL_SGIX_sprite;\ntmp_->ALLEGRO_GL_SGIX_texture_multi_buffer = ALLEGRO_GL_SGIX_texture_multi_buffer;\ntmp_->ALLEGRO_GL_EXT_point_parameters = ALLEGRO_GL_EXT_point_parameters;\ntmp_->ALLEGRO_GL_SGIX_instruments = ALLEGRO_GL_SGIX_instruments;\ntmp_->ALLEGRO_GL_SGIX_texture_scale_bias = ALLEGRO_GL_SGIX_texture_scale_bias;\ntmp_->ALLEGRO_GL_SGIX_framezoom = ALLEGRO_GL_SGIX_framezoom;\ntmp_->ALLEGRO_GL_SGIX_tag_sample_buffer = ALLEGRO_GL_SGIX_tag_sample_buffer;\ntmp_->ALLEGRO_GL_SGIX_reference_plane = ALLEGRO_GL_SGIX_reference_plane;\ntmp_->ALLEGRO_GL_SGIX_flush_raster = ALLEGRO_GL_SGIX_flush_raster;\ntmp_->ALLEGRO_GL_SGIX_depth_texture = ALLEGRO_GL_SGIX_depth_texture;\ntmp_->ALLEGRO_GL_SGIS_fog_function = ALLEGRO_GL_SGIS_fog_function;\ntmp_->ALLEGRO_GL_SGIX_fog_offset = ALLEGRO_GL_SGIX_fog_offset;\ntmp_->ALLEGRO_GL_HP_image_transform = ALLEGRO_GL_HP_image_transform;\ntmp_->ALLEGRO_GL_HP_convolution_border_modes = ALLEGRO_GL_HP_convolution_border_modes;\ntmp_->ALLEGRO_GL_SGIX_texture_add_env = ALLEGRO_GL_SGIX_texture_add_env;\ntmp_->ALLEGRO_GL_EXT_color_subtable = ALLEGRO_GL_EXT_color_subtable;\ntmp_->ALLEGRO_GL_PGI_vertex_hints = ALLEGRO_GL_PGI_vertex_hints;\ntmp_->ALLEGRO_GL_PGI_misc_hints = ALLEGRO_GL_PGI_misc_hints;\ntmp_->ALLEGRO_GL_EXT_paletted_texture = ALLEGRO_GL_EXT_paletted_texture;\ntmp_->ALLEGRO_GL_EXT_clip_volume_hint = ALLEGRO_GL_EXT_clip_volume_hint;\ntmp_->ALLEGRO_GL_SGIX_list_priority = ALLEGRO_GL_SGIX_list_priority;\ntmp_->ALLEGRO_GL_SGIX_ir_instrument1 = ALLEGRO_GL_SGIX_ir_instrument1;\ntmp_->ALLEGRO_GL_SGIX_texture_lod_bias = ALLEGRO_GL_SGIX_texture_lod_bias;\ntmp_->ALLEGRO_GL_SGIX_shadow_ambient = ALLEGRO_GL_SGIX_shadow_ambient;\ntmp_->ALLEGRO_GL_EXT_index_texture = ALLEGRO_GL_EXT_index_texture;\ntmp_->ALLEGRO_GL_EXT_index_material = ALLEGRO_GL_EXT_index_material;\ntmp_->ALLEGRO_GL_EXT_index_func = ALLEGRO_GL_EXT_index_func;\ntmp_->ALLEGRO_GL_EXT_index_array_formats = ALLEGRO_GL_EXT_index_array_formats;\ntmp_->ALLEGRO_GL_EXT_compiled_vertex_array = ALLEGRO_GL_EXT_compiled_vertex_array;\ntmp_->ALLEGRO_GL_EXT_cull_vertex = ALLEGRO_GL_EXT_cull_vertex;\ntmp_->ALLEGRO_GL_SGIX_ycrcb = ALLEGRO_GL_SGIX_ycrcb;\ntmp_->ALLEGRO_GL_EXT_fragment_lighting = ALLEGRO_GL_EXT_fragment_lighting;\ntmp_->ALLEGRO_GL_IBM_rasterpos_clip = ALLEGRO_GL_IBM_rasterpos_clip;\ntmp_->ALLEGRO_GL_HP_texture_lighting = ALLEGRO_GL_HP_texture_lighting;\ntmp_->ALLEGRO_GL_EXT_draw_range_elements = ALLEGRO_GL_EXT_draw_range_elements;\ntmp_->ALLEGRO_GL_WIN_phong_shading = ALLEGRO_GL_WIN_phong_shading;\ntmp_->ALLEGRO_GL_WIN_specular_fog = ALLEGRO_GL_WIN_specular_fog;\ntmp_->ALLEGRO_GL_EXT_light_texture = ALLEGRO_GL_EXT_light_texture;\ntmp_->ALLEGRO_GL_SGIX_blend_alpha_minmax = ALLEGRO_GL_SGIX_blend_alpha_minmax;\ntmp_->ALLEGRO_GL_EXT_scene_marker = ALLEGRO_GL_EXT_scene_marker;\ntmp_->ALLEGRO_GL_SGIX_pixel_texture_bits = ALLEGRO_GL_SGIX_pixel_texture_bits;\ntmp_->ALLEGRO_GL_EXT_bgra = ALLEGRO_GL_EXT_bgra;\ntmp_->ALLEGRO_GL_SGIX_async = ALLEGRO_GL_SGIX_async;\ntmp_->ALLEGRO_GL_SGIX_async_pixel = ALLEGRO_GL_SGIX_async_pixel;\ntmp_->ALLEGRO_GL_SGIX_async_histogram = ALLEGRO_GL_SGIX_async_histogram;\ntmp_->ALLEGRO_GL_INTEL_texture_scissor = ALLEGRO_GL_INTEL_texture_scissor;\ntmp_->ALLEGRO_GL_INTEL_parallel_arrays = ALLEGRO_GL_INTEL_parallel_arrays;\ntmp_->ALLEGRO_GL_HP_occlusion_test = ALLEGRO_GL_HP_occlusion_test;\ntmp_->ALLEGRO_GL_EXT_pixel_transform = ALLEGRO_GL_EXT_pixel_transform;\ntmp_->ALLEGRO_GL_EXT_pixel_transform_color_table = ALLEGRO_GL_EXT_pixel_transform_color_table;\ntmp_->ALLEGRO_GL_EXT_shared_texture_palette = ALLEGRO_GL_EXT_shared_texture_palette;\ntmp_->ALLEGRO_GL_EXT_separate_specular_color = ALLEGRO_GL_EXT_separate_specular_color;\ntmp_->ALLEGRO_GL_EXT_secondary_color = ALLEGRO_GL_EXT_secondary_color;\ntmp_->ALLEGRO_GL_EXT_texture_env = ALLEGRO_GL_EXT_texture_env;\ntmp_->ALLEGRO_GL_EXT_texture_perturb_normal = ALLEGRO_GL_EXT_texture_perturb_normal;\ntmp_->ALLEGRO_GL_EXT_multi_draw_arrays = ALLEGRO_GL_EXT_multi_draw_arrays;\ntmp_->ALLEGRO_GL_EXT_fog_coord = ALLEGRO_GL_EXT_fog_coord;\ntmp_->ALLEGRO_GL_REND_screen_coordinates = ALLEGRO_GL_REND_screen_coordinates;\ntmp_->ALLEGRO_GL_EXT_coordinate_frame = ALLEGRO_GL_EXT_coordinate_frame;\ntmp_->ALLEGRO_GL_EXT_texture_env_combine = ALLEGRO_GL_EXT_texture_env_combine;\ntmp_->ALLEGRO_GL_APPLE_specular_vector = ALLEGRO_GL_APPLE_specular_vector;\ntmp_->ALLEGRO_GL_APPLE_transform_hint = ALLEGRO_GL_APPLE_transform_hint;\ntmp_->ALLEGRO_GL_SUNX_constant_data = ALLEGRO_GL_SUNX_constant_data;\ntmp_->ALLEGRO_GL_SUN_global_alpha = ALLEGRO_GL_SUN_global_alpha;\ntmp_->ALLEGRO_GL_SUN_triangle_list = ALLEGRO_GL_SUN_triangle_list;\ntmp_->ALLEGRO_GL_SUN_vertex = ALLEGRO_GL_SUN_vertex;\ntmp_->ALLEGRO_GL_EXT_blend_func_separate = ALLEGRO_GL_EXT_blend_func_separate;\ntmp_->ALLEGRO_GL_INGR_color_clamp = ALLEGRO_GL_INGR_color_clamp;\ntmp_->ALLEGRO_GL_INGR_interlace_read = ALLEGRO_GL_INGR_interlace_read;\ntmp_->ALLEGRO_GL_EXT_stencil_wrap = ALLEGRO_GL_EXT_stencil_wrap;\ntmp_->ALLEGRO_GL_EXT_422_pixels = ALLEGRO_GL_EXT_422_pixels;\ntmp_->ALLEGRO_GL_NV_texgen_reflection = ALLEGRO_GL_NV_texgen_reflection;\ntmp_->ALLEGRO_GL_SGIX_texture_range = ALLEGRO_GL_SGIX_texture_range;\ntmp_->ALLEGRO_GL_SUN_convolution_border_modes = ALLEGRO_GL_SUN_convolution_border_modes;\ntmp_->ALLEGRO_GL_EXT_texture_env_add = ALLEGRO_GL_EXT_texture_env_add;\ntmp_->ALLEGRO_GL_EXT_texture_lod_bias = ALLEGRO_GL_EXT_texture_lod_bias;\ntmp_->ALLEGRO_GL_EXT_texture_filter_anisotropic = ALLEGRO_GL_EXT_texture_filter_anisotropic;\ntmp_->ALLEGRO_GL_EXT_vertex_weighting = ALLEGRO_GL_EXT_vertex_weighting;\ntmp_->ALLEGRO_GL_NV_light_max_exponent = ALLEGRO_GL_NV_light_max_exponent;\ntmp_->ALLEGRO_GL_NV_vertex_array_range = ALLEGRO_GL_NV_vertex_array_range;\ntmp_->ALLEGRO_GL_NV_register_combiners = ALLEGRO_GL_NV_register_combiners;\ntmp_->ALLEGRO_GL_NV_fog_distance = ALLEGRO_GL_NV_fog_distance;\ntmp_->ALLEGRO_GL_NV_texgen_emboss = ALLEGRO_GL_NV_texgen_emboss;\ntmp_->ALLEGRO_GL_NV_blend_square = ALLEGRO_GL_NV_blend_square;\ntmp_->ALLEGRO_GL_NV_texture_env_combine4 = ALLEGRO_GL_NV_texture_env_combine4;\ntmp_->ALLEGRO_GL_MESA_resize_buffers = ALLEGRO_GL_MESA_resize_buffers;\ntmp_->ALLEGRO_GL_MESA_window_pos = ALLEGRO_GL_MESA_window_pos;\ntmp_->ALLEGRO_GL_EXT_texture_compression_s3tc = ALLEGRO_GL_EXT_texture_compression_s3tc;\ntmp_->ALLEGRO_GL_IBM_cull_vertex = ALLEGRO_GL_IBM_cull_vertex;\ntmp_->ALLEGRO_GL_IBM_multimode_draw_arrays = ALLEGRO_GL_IBM_multimode_draw_arrays;\ntmp_->ALLEGRO_GL_IBM_vertex_array_lists = ALLEGRO_GL_IBM_vertex_array_lists;\ntmp_->ALLEGRO_GL_3DFX_texture_compression_FXT1 = ALLEGRO_GL_3DFX_texture_compression_FXT1;\ntmp_->ALLEGRO_GL_3DFX_multisample = ALLEGRO_GL_3DFX_multisample;\ntmp_->ALLEGRO_GL_3DFX_tbuffer = ALLEGRO_GL_3DFX_tbuffer;\ntmp_->ALLEGRO_GL_SGIX_vertex_preclip = ALLEGRO_GL_SGIX_vertex_preclip;\ntmp_->ALLEGRO_GL_SGIX_resample = ALLEGRO_GL_SGIX_resample;\ntmp_->ALLEGRO_GL_SGIS_texture_color_mask = ALLEGRO_GL_SGIS_texture_color_mask;\ntmp_->ALLEGRO_GL_EXT_texture_env_dot3 = ALLEGRO_GL_EXT_texture_env_dot3;\ntmp_->ALLEGRO_GL_ATI_texture_mirror_once = ALLEGRO_GL_ATI_texture_mirror_once;\ntmp_->ALLEGRO_GL_NV_fence = ALLEGRO_GL_NV_fence;\ntmp_->ALLEGRO_GL_IBM_static_data = ALLEGRO_GL_IBM_static_data;\ntmp_->ALLEGRO_GL_IBM_texture_mirrored_repeat = ALLEGRO_GL_IBM_texture_mirrored_repeat;\ntmp_->ALLEGRO_GL_NV_evaluators = ALLEGRO_GL_NV_evaluators;\ntmp_->ALLEGRO_GL_NV_packed_depth_stencil = ALLEGRO_GL_NV_packed_depth_stencil;\ntmp_->ALLEGRO_GL_NV_register_combiners2 = ALLEGRO_GL_NV_register_combiners2;\ntmp_->ALLEGRO_GL_NV_texture_compression_vtc = ALLEGRO_GL_NV_texture_compression_vtc;\ntmp_->ALLEGRO_GL_NV_texture_rectangle = ALLEGRO_GL_NV_texture_rectangle;\ntmp_->ALLEGRO_GL_NV_texture_shader = ALLEGRO_GL_NV_texture_shader;\ntmp_->ALLEGRO_GL_NV_texture_shader2 = ALLEGRO_GL_NV_texture_shader2;\ntmp_->ALLEGRO_GL_NV_vertex_array_range2 = ALLEGRO_GL_NV_vertex_array_range2;\ntmp_->ALLEGRO_GL_NV_vertex_program = ALLEGRO_GL_NV_vertex_program;\ntmp_->ALLEGRO_GL_SGIX_texture_coordinate_clamp = ALLEGRO_GL_SGIX_texture_coordinate_clamp;\ntmp_->ALLEGRO_GL_OML_interlace = ALLEGRO_GL_OML_interlace;\ntmp_->ALLEGRO_GL_OML_subsample = ALLEGRO_GL_OML_subsample;\ntmp_->ALLEGRO_GL_OML_resample = ALLEGRO_GL_OML_resample;\ntmp_->ALLEGRO_GL_NV_copy_depth_to_color = ALLEGRO_GL_NV_copy_depth_to_color;\ntmp_->ALLEGRO_GL_ATI_envmap_bumpmap = ALLEGRO_GL_ATI_envmap_bumpmap;\ntmp_->ALLEGRO_GL_ATI_fragment_shader = ALLEGRO_GL_ATI_fragment_shader;\ntmp_->ALLEGRO_GL_ATI_pn_triangles = ALLEGRO_GL_ATI_pn_triangles;\ntmp_->ALLEGRO_GL_ATI_vertex_array_object = ALLEGRO_GL_ATI_vertex_array_object;\ntmp_->ALLEGRO_GL_EXT_vertex_shader = ALLEGRO_GL_EXT_vertex_shader;\ntmp_->ALLEGRO_GL_ATI_vertex_streams = ALLEGRO_GL_ATI_vertex_streams;\ntmp_->ALLEGRO_GL_ATI_element_array = ALLEGRO_GL_ATI_element_array;\ntmp_->ALLEGRO_GL_SUN_mesh_array = ALLEGRO_GL_SUN_mesh_array;\ntmp_->ALLEGRO_GL_SUN_slice_accum = ALLEGRO_GL_SUN_slice_accum;\ntmp_->ALLEGRO_GL_NV_multisample_filter_hint = ALLEGRO_GL_NV_multisample_filter_hint;\ntmp_->ALLEGRO_GL_NV_depth_clamp = ALLEGRO_GL_NV_depth_clamp;\ntmp_->ALLEGRO_GL_NV_occlusion_query = ALLEGRO_GL_NV_occlusion_query;\ntmp_->ALLEGRO_GL_NV_point_sprite = ALLEGRO_GL_NV_point_sprite;\ntmp_->ALLEGRO_GL_NV_texture_shader3 = ALLEGRO_GL_NV_texture_shader3;\ntmp_->ALLEGRO_GL_NV_vertex_program1_1 = ALLEGRO_GL_NV_vertex_program1_1;\ntmp_->ALLEGRO_GL_EXT_shadow_funcs = ALLEGRO_GL_EXT_shadow_funcs;\ntmp_->ALLEGRO_GL_EXT_stencil_two_side = ALLEGRO_GL_EXT_stencil_two_side;\ntmp_->ALLEGRO_GL_ATI_text_fragment_shader = ALLEGRO_GL_ATI_text_fragment_shader;\ntmp_->ALLEGRO_GL_APPLE_client_storage = ALLEGRO_GL_APPLE_client_storage;\ntmp_->ALLEGRO_GL_APPLE_element_array = ALLEGRO_GL_APPLE_element_array;\ntmp_->ALLEGRO_GL_APPLE_fence = ALLEGRO_GL_APPLE_fence;\ntmp_->ALLEGRO_GL_APPLE_vertex_array_object = ALLEGRO_GL_APPLE_vertex_array_object;\ntmp_->ALLEGRO_GL_APPLE_vertex_array_range = ALLEGRO_GL_APPLE_vertex_array_range;\ntmp_->ALLEGRO_GL_APPLE_ycbcr_422 = ALLEGRO_GL_APPLE_ycbcr_422;\ntmp_->ALLEGRO_GL_S3_s3tc = ALLEGRO_GL_S3_s3tc;\ntmp_->ALLEGRO_GL_ATI_draw_buffers = ALLEGRO_GL_ATI_draw_buffers;\ntmp_->ALLEGRO_GL_ATI_texture_env_combine3 = ALLEGRO_GL_ATI_texture_env_combine3;\ntmp_->ALLEGRO_GL_ATI_texture_float = ALLEGRO_GL_ATI_texture_float;\ntmp_->ALLEGRO_GL_NV_float_buffer = ALLEGRO_GL_NV_float_buffer;\ntmp_->ALLEGRO_GL_NV_fragment_program = ALLEGRO_GL_NV_fragment_program;\ntmp_->ALLEGRO_GL_NV_half_float = ALLEGRO_GL_NV_half_float;\ntmp_->ALLEGRO_GL_NV_pixel_data_range = ALLEGRO_GL_NV_pixel_data_range;\ntmp_->ALLEGRO_GL_NV_primitive_restart = ALLEGRO_GL_NV_primitive_restart;\ntmp_->ALLEGRO_GL_NV_texture_expand_normal = ALLEGRO_GL_NV_texture_expand_normal;\ntmp_->ALLEGRO_GL_NV_vertex_program2 = ALLEGRO_GL_NV_vertex_program2;\ntmp_->ALLEGRO_GL_ATI_map_object_buffer = ALLEGRO_GL_ATI_map_object_buffer;\ntmp_->ALLEGRO_GL_ATI_separate_stencil = ALLEGRO_GL_ATI_separate_stencil;\ntmp_->ALLEGRO_GL_ATI_vertex_attrib_array_object = ALLEGRO_GL_ATI_vertex_attrib_array_object;\ntmp_->ALLEGRO_GL_OES_byte_coordinates = ALLEGRO_GL_OES_byte_coordinates;\ntmp_->ALLEGRO_GL_OES_fixed_point = ALLEGRO_GL_OES_fixed_point;\ntmp_->ALLEGRO_GL_OES_single_precision = ALLEGRO_GL_OES_single_precision;\ntmp_->ALLEGRO_GL_OES_compressed_paletted_texture = ALLEGRO_GL_OES_compressed_paletted_texture;\ntmp_->ALLEGRO_GL_OES_read_format = ALLEGRO_GL_OES_read_format;\ntmp_->ALLEGRO_GL_OES_query_matrix = ALLEGRO_GL_OES_query_matrix;\ntmp_->ALLEGRO_GL_OES_framebuffer_object = ALLEGRO_GL_OES_framebuffer_object;\ntmp_->ALLEGRO_GL_OES_texture_npot = ALLEGRO_GL_OES_texture_npot;\ntmp_->ALLEGRO_GL_EXT_depth_bounds_test = ALLEGRO_GL_EXT_depth_bounds_test;\ntmp_->ALLEGRO_GL_EXT_texture_mirror_clamp = ALLEGRO_GL_EXT_texture_mirror_clamp;\ntmp_->ALLEGRO_GL_EXT_blend_equation_separate = ALLEGRO_GL_EXT_blend_equation_separate;\ntmp_->ALLEGRO_GL_MESA_pack_invert = ALLEGRO_GL_MESA_pack_invert;\ntmp_->ALLEGRO_GL_MESA_ycbcr_texture = ALLEGRO_GL_MESA_ycbcr_texture;\ntmp_->ALLEGRO_GL_EXT_pixel_buffer_object = ALLEGRO_GL_EXT_pixel_buffer_object;\ntmp_->ALLEGRO_GL_NV_fragment_program_option = ALLEGRO_GL_NV_fragment_program_option;\ntmp_->ALLEGRO_GL_NV_fragment_program2 = ALLEGRO_GL_NV_fragment_program2;\ntmp_->ALLEGRO_GL_NV_vertex_program2_option = ALLEGRO_GL_NV_vertex_program2_option;\ntmp_->ALLEGRO_GL_NV_vertex_program3 = ALLEGRO_GL_NV_vertex_program3;\ntmp_->ALLEGRO_GL_EXT_texture_compression_dxt1 = ALLEGRO_GL_EXT_texture_compression_dxt1;\ntmp_->ALLEGRO_GL_EXT_framebuffer_object = ALLEGRO_GL_EXT_framebuffer_object;\ntmp_->ALLEGRO_GL_GREMEDY_string_marker = ALLEGRO_GL_GREMEDY_string_marker;\ntmp_->ALLEGRO_GL_EXT_packed_depth_stencil = ALLEGRO_GL_EXT_packed_depth_stencil;\ntmp_->ALLEGRO_GL_EXT_stencil_clear_tag = ALLEGRO_GL_EXT_stencil_clear_tag;\ntmp_->ALLEGRO_GL_EXT_texture_sRGB = ALLEGRO_GL_EXT_texture_sRGB;\ntmp_->ALLEGRO_GL_EXT_framebuffer_blit = ALLEGRO_GL_EXT_framebuffer_blit;\ntmp_->ALLEGRO_GL_EXT_framebuffer_multisample = ALLEGRO_GL_EXT_framebuffer_multisample;\ntmp_->ALLEGRO_GL_MESAX_texture_stack = ALLEGRO_GL_MESAX_texture_stack;\ntmp_->ALLEGRO_GL_EXT_timer_query = ALLEGRO_GL_EXT_timer_query;\ntmp_->ALLEGRO_GL_EXT_gpu_program_parameters = ALLEGRO_GL_EXT_gpu_program_parameters;\ntmp_->ALLEGRO_GL_APPLE_flush_buffer_range = ALLEGRO_GL_APPLE_flush_buffer_range;\ntmp_->ALLEGRO_GL_EXT_bindable_uniform = ALLEGRO_GL_EXT_bindable_uniform;\ntmp_->ALLEGRO_GL_EXT_draw_buffers2 = ALLEGRO_GL_EXT_draw_buffers2;\ntmp_->ALLEGRO_GL_EXT_draw_instanced = ALLEGRO_GL_EXT_draw_instanced;\ntmp_->ALLEGRO_GL_EXT_framebuffer_sRGB = ALLEGRO_GL_EXT_framebuffer_sRGB;\ntmp_->ALLEGRO_GL_EXT_geometry_shader4 = ALLEGRO_GL_EXT_geometry_shader4;\ntmp_->ALLEGRO_GL_EXT_gpu_shader4 = ALLEGRO_GL_EXT_gpu_shader4;\ntmp_->ALLEGRO_GL_EXT_packed_float = ALLEGRO_GL_EXT_packed_float;\ntmp_->ALLEGRO_GL_EXT_texture_array = ALLEGRO_GL_EXT_texture_array;\ntmp_->ALLEGRO_GL_EXT_texture_buffer_object = ALLEGRO_GL_EXT_texture_buffer_object;\ntmp_->ALLEGRO_GL_EXT_texture_compression_latc = ALLEGRO_GL_EXT_texture_compression_latc;\ntmp_->ALLEGRO_GL_EXT_texture_compression_rgtc = ALLEGRO_GL_EXT_texture_compression_rgtc;\ntmp_->ALLEGRO_GL_EXT_texture_integer = ALLEGRO_GL_EXT_texture_integer;\ntmp_->ALLEGRO_GL_EXT_texture_shared_exponent = ALLEGRO_GL_EXT_texture_shared_exponent;\ntmp_->ALLEGRO_GL_NV_depth_buffer_float = ALLEGRO_GL_NV_depth_buffer_float;\ntmp_->ALLEGRO_GL_NV_fragment_program4 = ALLEGRO_GL_NV_fragment_program4;\ntmp_->ALLEGRO_GL_NV_framebuffer_multisample_coverage = ALLEGRO_GL_NV_framebuffer_multisample_coverage;\ntmp_->ALLEGRO_GL_NV_geometry_program4 = ALLEGRO_GL_NV_geometry_program4;\ntmp_->ALLEGRO_GL_NV_gpu_program4 = ALLEGRO_GL_NV_gpu_program4;\ntmp_->ALLEGRO_GL_NV_parameter_buffer_object = ALLEGRO_GL_NV_parameter_buffer_object;\ntmp_->ALLEGRO_GL_NV_transform_feedback = ALLEGRO_GL_NV_transform_feedback;\ntmp_->ALLEGRO_GL_NV_vertex_program4 = ALLEGRO_GL_NV_vertex_program4;\ntmp_->ALLEGRO_GL_GREMEDY_frame_terminator = ALLEGRO_GL_GREMEDY_frame_terminator;\ntmp_->ALLEGRO_GL_NV_conditional_render = ALLEGRO_GL_NV_conditional_render;\ntmp_->ALLEGRO_GL_NV_present_video = ALLEGRO_GL_NV_present_video;\ntmp_->ALLEGRO_GL_EXT_direct_state_access = ALLEGRO_GL_EXT_direct_state_access;\ntmp_->ALLEGRO_GL_EXT_transform_feedback = ALLEGRO_GL_EXT_transform_feedback;\ntmp_->ALLEGRO_GL_EXT_texture_swizzle = ALLEGRO_GL_EXT_texture_swizzle;\ntmp_->ALLEGRO_GL_NV_explicit_multisample = ALLEGRO_GL_NV_explicit_multisample;\ntmp_->ALLEGRO_GL_NV_transform_feedback2 = ALLEGRO_GL_NV_transform_feedback2;\ntmp_->ALLEGRO_GL_ATI_meminfo = ALLEGRO_GL_ATI_meminfo;\ntmp_->ALLEGRO_GL_AMD_performance_monitor = ALLEGRO_GL_AMD_performance_monitor;\ntmp_->ALLEGRO_GL_AMD_texture_texture4 = ALLEGRO_GL_AMD_texture_texture4;\ntmp_->ALLEGRO_GL_AMD_vertex_shader_tesselator = ALLEGRO_GL_AMD_vertex_shader_tesselator;\ntmp_->ALLEGRO_GL_EXT_provoking_vertex = ALLEGRO_GL_EXT_provoking_vertex;\ntmp_->ALLEGRO_GL_EXT_texture_snorm = ALLEGRO_GL_EXT_texture_snorm;\ntmp_->ALLEGRO_GL_AMD_draw_buffers_blend = ALLEGRO_GL_AMD_draw_buffers_blend;\ntmp_->ALLEGRO_GL_APPLE_texture_range = ALLEGRO_GL_APPLE_texture_range;\ntmp_->ALLEGRO_GL_APPLE_float_pixels = ALLEGRO_GL_APPLE_float_pixels;\ntmp_->ALLEGRO_GL_APPLE_vertex_program_evaluators = ALLEGRO_GL_APPLE_vertex_program_evaluators;\ntmp_->ALLEGRO_GL_APPLE_aux_depth_stencil = ALLEGRO_GL_APPLE_aux_depth_stencil;\ntmp_->ALLEGRO_GL_APPLE_object_purgeable = ALLEGRO_GL_APPLE_object_purgeable;\ntmp_->ALLEGRO_GL_APPLE_row_bytes = ALLEGRO_GL_APPLE_row_bytes;\ntmp_->ALLEGRO_GL_APPLE_rgb_422 = ALLEGRO_GL_APPLE_rgb_422;\ntmp_->ALLEGRO_GL_NV_video_capture = ALLEGRO_GL_NV_video_capture;\ntmp_->ALLEGRO_GL_EXT_separate_shader_objects = ALLEGRO_GL_EXT_separate_shader_objects;\ntmp_->ALLEGRO_GL_NV_parameter_buffer_object2 = ALLEGRO_GL_NV_parameter_buffer_object2;\ntmp_->ALLEGRO_GL_NV_shader_buffer_load = ALLEGRO_GL_NV_shader_buffer_load;\ntmp_->ALLEGRO_GL_NV_vertex_buffer_unified_memory = ALLEGRO_GL_NV_vertex_buffer_unified_memory;\ntmp_->ALLEGRO_GL_NV_texture_barrier = ALLEGRO_GL_NV_texture_barrier;\ntmp_->ALLEGRO_GL_AMD_shader_stencil_export = ALLEGRO_GL_AMD_shader_stencil_export;\ntmp_->ALLEGRO_GL_AMD_seamless_cubemap_per_texture = ALLEGRO_GL_AMD_seamless_cubemap_per_texture;\ntmp_->ALLEGRO_GL_AMD_conservative_depth = ALLEGRO_GL_AMD_conservative_depth;\nreturn(tmp_);;\n"))
  (define gl:-ext-api:blend-color
    (foreign-lambda*
      "_ALLEGRO_glBlendColor_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendColor);"))
  (define gl:-ext-api:blend-equation
    (foreign-lambda*
      "_ALLEGRO_glBlendEquation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquation);"))
  (define gl:-ext-api:draw-range-elements
    (foreign-lambda*
      "_ALLEGRO_glDrawRangeElements_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawRangeElements);"))
  (define gl:-ext-api:color-table
    (foreign-lambda*
      "_ALLEGRO_glColorTable_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTable);"))
  (define gl:-ext-api:color-table-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glColorTableParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableParameterfv);"))
  (define gl:-ext-api:color-table-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glColorTableParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableParameteriv);"))
  (define gl:-ext-api:copy-color-table
    (foreign-lambda*
      "_ALLEGRO_glCopyColorTable_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyColorTable);"))
  (define gl:-ext-api:get-color-table
    (foreign-lambda*
      "_ALLEGRO_glGetColorTable_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTable);"))
  (define gl:-ext-api:get-color-table-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameterfv);"))
  (define gl:-ext-api:get-color-table-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameteriv);"))
  (define gl:-ext-api:color-sub-table
    (foreign-lambda*
      "_ALLEGRO_glColorSubTable_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorSubTable);"))
  (define gl:-ext-api:copy-color-sub-table
    (foreign-lambda*
      "_ALLEGRO_glCopyColorSubTable_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyColorSubTable);"))
  (define gl:-ext-api:tex-image3d
    (foreign-lambda*
      "_ALLEGRO_glTexImage3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexImage3D);"))
  (define gl:-ext-api:tex-sub-image3d
    (foreign-lambda*
      "_ALLEGRO_glTexSubImage3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexSubImage3D);"))
  (define gl:-ext-api:copy-tex-sub-image3d
    (foreign-lambda*
      "_ALLEGRO_glCopyTexSubImage3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexSubImage3D);"))
  (define gl:-ext-api:convolution-filter1d
    (foreign-lambda*
      "_ALLEGRO_glConvolutionFilter1D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionFilter1D);"))
  (define gl:-ext-api:convolution-filter2d
    (foreign-lambda*
      "_ALLEGRO_glConvolutionFilter2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionFilter2D);"))
  (define gl:-ext-api:convolution-parameterf
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterf);"))
  (define gl:-ext-api:convolution-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterfv);"))
  (define gl:-ext-api:convolution-parameteri
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameteri);"))
  (define gl:-ext-api:convolution-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameteriv);"))
  (define gl:-ext-api:copy-convolution-filter1d
    (foreign-lambda*
      "_ALLEGRO_glCopyConvolutionFilter1D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyConvolutionFilter1D);"))
  (define gl:-ext-api:copy-convolution-filter2d
    (foreign-lambda*
      "_ALLEGRO_glCopyConvolutionFilter2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyConvolutionFilter2D);"))
  (define gl:-ext-api:get-convolution-filter
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionFilter_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionFilter);"))
  (define gl:-ext-api:get-convolution-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionParameterfv);"))
  (define gl:-ext-api:get-convolution-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionParameteriv);"))
  (define gl:-ext-api:get-separable-filter
    (foreign-lambda*
      "_ALLEGRO_glGetSeparableFilter_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSeparableFilter);"))
  (define gl:-ext-api:separable-filter2d
    (foreign-lambda*
      "_ALLEGRO_glSeparableFilter2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SeparableFilter2D);"))
  (define gl:-ext-api:get-histogram
    (foreign-lambda*
      "_ALLEGRO_glGetHistogram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogram);"))
  (define gl:-ext-api:get-histogram-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramParameterfv);"))
  (define gl:-ext-api:get-histogram-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramParameteriv);"))
  (define gl:-ext-api:get-minmax
    (foreign-lambda*
      "_ALLEGRO_glGetMinmax_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmax);"))
  (define gl:-ext-api:get-minmax-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glGetMinmaxParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmaxParameterfv);"))
  (define gl:-ext-api:get-minmax-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetMinmaxParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmaxParameteriv);"))
  (define gl:-ext-api:histogram
    (foreign-lambda*
      "_ALLEGRO_glHistogram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Histogram);"))
  (define gl:-ext-api:minmax
    (foreign-lambda*
      "_ALLEGRO_glMinmax_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Minmax);"))
  (define gl:-ext-api:reset-histogram
    (foreign-lambda*
      "_ALLEGRO_glResetHistogram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResetHistogram);"))
  (define gl:-ext-api:reset-minmax
    (foreign-lambda*
      "_ALLEGRO_glResetMinmax_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResetMinmax);"))
  (define gl:-ext-api:active-texture
    (foreign-lambda*
      "_ALLEGRO_glActiveTexture_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ActiveTexture);"))
  (define gl:-ext-api:client-active-texture
    (foreign-lambda*
      "_ALLEGRO_glClientActiveTexture_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClientActiveTexture);"))
  (define gl:-ext-api:multi-tex-coord1d
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1d);"))
  (define gl:-ext-api:multi-tex-coord1dv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1dv);"))
  (define gl:-ext-api:multi-tex-coord1f
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1f);"))
  (define gl:-ext-api:multi-tex-coord1fv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1fv);"))
  (define gl:-ext-api:multi-tex-coord1i
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1i);"))
  (define gl:-ext-api:multi-tex-coord1iv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1iv);"))
  (define gl:-ext-api:multi-tex-coord1s
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1s);"))
  (define gl:-ext-api:multi-tex-coord1sv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1sv);"))
  (define gl:-ext-api:multi-tex-coord2d
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2d);"))
  (define gl:-ext-api:multi-tex-coord2dv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2dv);"))
  (define gl:-ext-api:multi-tex-coord2f
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2f);"))
  (define gl:-ext-api:multi-tex-coord2fv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2fv);"))
  (define gl:-ext-api:multi-tex-coord2i
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2i);"))
  (define gl:-ext-api:multi-tex-coord2iv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2iv);"))
  (define gl:-ext-api:multi-tex-coord2s
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2s);"))
  (define gl:-ext-api:multi-tex-coord2sv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2sv);"))
  (define gl:-ext-api:multi-tex-coord3d
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3d);"))
  (define gl:-ext-api:multi-tex-coord3dv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3dv);"))
  (define gl:-ext-api:multi-tex-coord3f
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3f);"))
  (define gl:-ext-api:multi-tex-coord3fv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3fv);"))
  (define gl:-ext-api:multi-tex-coord3i
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3i);"))
  (define gl:-ext-api:multi-tex-coord3iv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3iv);"))
  (define gl:-ext-api:multi-tex-coord3s
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3s);"))
  (define gl:-ext-api:multi-tex-coord3sv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3sv);"))
  (define gl:-ext-api:multi-tex-coord4d
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4d);"))
  (define gl:-ext-api:multi-tex-coord4dv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4dv);"))
  (define gl:-ext-api:multi-tex-coord4f
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4f);"))
  (define gl:-ext-api:multi-tex-coord4fv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4fv);"))
  (define gl:-ext-api:multi-tex-coord4i
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4i);"))
  (define gl:-ext-api:multi-tex-coord4iv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4iv);"))
  (define gl:-ext-api:multi-tex-coord4s
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4s);"))
  (define gl:-ext-api:multi-tex-coord4sv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4sv);"))
  (define gl:-ext-api:load-transpose-matrixf
    (foreign-lambda*
      "_ALLEGRO_glLoadTransposeMatrixf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadTransposeMatrixf);"))
  (define gl:-ext-api:load-transpose-matrixd
    (foreign-lambda*
      "_ALLEGRO_glLoadTransposeMatrixd_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadTransposeMatrixd);"))
  (define gl:-ext-api:mult-transpose-matrixf
    (foreign-lambda*
      "_ALLEGRO_glMultTransposeMatrixf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultTransposeMatrixf);"))
  (define gl:-ext-api:mult-transpose-matrixd
    (foreign-lambda*
      "_ALLEGRO_glMultTransposeMatrixd_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultTransposeMatrixd);"))
  (define gl:-ext-api:sample-coverage
    (foreign-lambda*
      "_ALLEGRO_glSampleCoverage_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleCoverage);"))
  (define gl:-ext-api:compressed-tex-image3d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage3D);"))
  (define gl:-ext-api:compressed-tex-image2d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage2D);"))
  (define gl:-ext-api:compressed-tex-image1d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage1D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage1D);"))
  (define gl:-ext-api:compressed-tex-sub-image3d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage3D);"))
  (define gl:-ext-api:compressed-tex-sub-image2d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage2D);"))
  (define gl:-ext-api:compressed-tex-sub-image1d
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage1D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage1D);"))
  (define gl:-ext-api:get-compressed-tex-image
    (foreign-lambda*
      "_ALLEGRO_glGetCompressedTexImage_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCompressedTexImage);"))
  (define gl:-ext-api:blend-func-separate
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncSeparate_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncSeparate);"))
  (define gl:-ext-api:fog-coordf
    (foreign-lambda*
      "_ALLEGRO_glFogCoordf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordf);"))
  (define gl:-ext-api:fog-coordfv
    (foreign-lambda*
      "_ALLEGRO_glFogCoordfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordfv);"))
  (define gl:-ext-api:fog-coordd
    (foreign-lambda*
      "_ALLEGRO_glFogCoordd_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordd);"))
  (define gl:-ext-api:fog-coorddv
    (foreign-lambda*
      "_ALLEGRO_glFogCoorddv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoorddv);"))
  (define gl:-ext-api:fog-coord-pointer
    (foreign-lambda*
      "_ALLEGRO_glFogCoordPointer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordPointer);"))
  (define gl:-ext-api:multi-draw-arrays
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawArrays_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawArrays);"))
  (define gl:-ext-api:multi-draw-elements
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawElements_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawElements);"))
  (define gl:-ext-api:point-parameterf
    (foreign-lambda*
      "_ALLEGRO_glPointParameterf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterf);"))
  (define gl:-ext-api:point-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfv);"))
  (define gl:-ext-api:point-parameteri
    (foreign-lambda*
      "_ALLEGRO_glPointParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameteri);"))
  (define gl:-ext-api:point-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glPointParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameteriv);"))
  (define gl:-ext-api:secondary-color3b
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3b_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3b);"))
  (define gl:-ext-api:secondary-color3bv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3bv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3bv);"))
  (define gl:-ext-api:secondary-color3d
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3d);"))
  (define gl:-ext-api:secondary-color3dv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3dv);"))
  (define gl:-ext-api:secondary-color3f
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3f);"))
  (define gl:-ext-api:secondary-color3fv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3fv);"))
  (define gl:-ext-api:secondary-color3i
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3i);"))
  (define gl:-ext-api:secondary-color3iv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3iv);"))
  (define gl:-ext-api:secondary-color3s
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3s);"))
  (define gl:-ext-api:secondary-color3sv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3sv);"))
  (define gl:-ext-api:secondary-color3ub
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ub_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ub);"))
  (define gl:-ext-api:secondary-color3ubv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ubv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ubv);"))
  (define gl:-ext-api:secondary-color3ui
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ui);"))
  (define gl:-ext-api:secondary-color3uiv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3uiv);"))
  (define gl:-ext-api:secondary-color3us
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3us_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3us);"))
  (define gl:-ext-api:secondary-color3usv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3usv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3usv);"))
  (define gl:-ext-api:secondary-color-pointer
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColorPointer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColorPointer);"))
  (define gl:-ext-api:window-pos2d
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2d);"))
  (define gl:-ext-api:window-pos2dv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2dv);"))
  (define gl:-ext-api:window-pos2f
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2f);"))
  (define gl:-ext-api:window-pos2fv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2fv);"))
  (define gl:-ext-api:window-pos2i
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2i);"))
  (define gl:-ext-api:window-pos2iv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2iv);"))
  (define gl:-ext-api:window-pos2s
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2s);"))
  (define gl:-ext-api:window-pos2sv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2sv);"))
  (define gl:-ext-api:window-pos3d
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3d);"))
  (define gl:-ext-api:window-pos3dv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3dv);"))
  (define gl:-ext-api:window-pos3f
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3f);"))
  (define gl:-ext-api:window-pos3fv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3fv);"))
  (define gl:-ext-api:window-pos3i
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3i);"))
  (define gl:-ext-api:window-pos3iv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3iv);"))
  (define gl:-ext-api:window-pos3s
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3s);"))
  (define gl:-ext-api:window-pos3sv
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3sv);"))
  (define gl:-ext-api:bind-buffer
    (foreign-lambda*
      "_ALLEGRO_glBindBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBuffer);"))
  (define gl:-ext-api:delete-buffers
    (foreign-lambda*
      "_ALLEGRO_glDeleteBuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteBuffers);"))
  (define gl:-ext-api:gen-buffers
    (foreign-lambda*
      "_ALLEGRO_glGenBuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenBuffers);"))
  (define gl:-ext-api:is-buffer
    (foreign-lambda*
      "_ALLEGRO_glIsBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsBuffer);"))
  (define gl:-ext-api:buffer-data
    (foreign-lambda*
      "_ALLEGRO_glBufferData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferData);"))
  (define gl:-ext-api:buffer-sub-data
    (foreign-lambda*
      "_ALLEGRO_glBufferSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferSubData);"))
  (define gl:-ext-api:get-buffer-sub-data
    (foreign-lambda*
      "_ALLEGRO_glGetBufferSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferSubData);"))
  (define gl:-ext-api:map-buffer
    (foreign-lambda*
      "_ALLEGRO_glMapBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapBuffer);"))
  (define gl:-ext-api:unmap-buffer
    (foreign-lambda*
      "_ALLEGRO_glUnmapBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UnmapBuffer);"))
  (define gl:-ext-api:get-buffer-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetBufferParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferParameteriv);"))
  (define gl:-ext-api:get-buffer-pointerv
    (foreign-lambda*
      "_ALLEGRO_glGetBufferPointerv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferPointerv);"))
  (define gl:-ext-api:gen-queries
    (foreign-lambda*
      "_ALLEGRO_glGenQueries_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenQueries);"))
  (define gl:-ext-api:delete-queries
    (foreign-lambda*
      "_ALLEGRO_glDeleteQueries_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteQueries);"))
  (define gl:-ext-api:is-query
    (foreign-lambda*
      "_ALLEGRO_glIsQuery_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsQuery);"))
  (define gl:-ext-api:begin-query
    (foreign-lambda*
      "_ALLEGRO_glBeginQuery_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginQuery);"))
  (define gl:-ext-api:end-query
    (foreign-lambda*
      "_ALLEGRO_glEndQuery_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndQuery);"))
  (define gl:-ext-api:get-queryiv
    (foreign-lambda*
      "_ALLEGRO_glGetQueryiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryiv);"))
  (define gl:-ext-api:get-query-objectiv
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectiv);"))
  (define gl:-ext-api:get-query-objectuiv
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectuiv);"))
  (define gl:-ext-api:blend-equation-separate
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationSeparate_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationSeparate);"))
  (define gl:-ext-api:create-program
    (foreign-lambda*
      "_ALLEGRO_glCreateProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CreateProgram);"))
  (define gl:-ext-api:create-shader
    (foreign-lambda*
      "_ALLEGRO_glCreateShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CreateShader);"))
  (define gl:-ext-api:delete-program
    (foreign-lambda*
      "_ALLEGRO_glDeleteProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteProgram);"))
  (define gl:-ext-api:delete-shader
    (foreign-lambda*
      "_ALLEGRO_glDeleteShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteShader);"))
  (define gl:-ext-api:attach-shader
    (foreign-lambda*
      "_ALLEGRO_glAttachShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AttachShader);"))
  (define gl:-ext-api:detach-shader
    (foreign-lambda*
      "_ALLEGRO_glDetachShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DetachShader);"))
  (define gl:-ext-api:shader-source
    (foreign-lambda*
      "_ALLEGRO_glShaderSource_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderSource);"))
  (define gl:-ext-api:compile-shader
    (foreign-lambda*
      "_ALLEGRO_glCompileShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompileShader);"))
  (define gl:-ext-api:is-program
    (foreign-lambda*
      "_ALLEGRO_glIsProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsProgram);"))
  (define gl:-ext-api:is-shader
    (foreign-lambda*
      "_ALLEGRO_glIsShader_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsShader);"))
  (define gl:-ext-api:link-program
    (foreign-lambda*
      "_ALLEGRO_glLinkProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LinkProgram);"))
  (define gl:-ext-api:use-program
    (foreign-lambda*
      "_ALLEGRO_glUseProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UseProgram);"))
  (define gl:-ext-api:validate-program
    (foreign-lambda*
      "_ALLEGRO_glValidateProgram_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ValidateProgram);"))
  (define gl:-ext-api:uniform1f
    (foreign-lambda*
      "_ALLEGRO_glUniform1f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1f);"))
  (define gl:-ext-api:uniform2f
    (foreign-lambda*
      "_ALLEGRO_glUniform2f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2f);"))
  (define gl:-ext-api:uniform3f
    (foreign-lambda*
      "_ALLEGRO_glUniform3f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3f);"))
  (define gl:-ext-api:uniform4f
    (foreign-lambda*
      "_ALLEGRO_glUniform4f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4f);"))
  (define gl:-ext-api:uniform1i
    (foreign-lambda*
      "_ALLEGRO_glUniform1i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1i);"))
  (define gl:-ext-api:uniform2i
    (foreign-lambda*
      "_ALLEGRO_glUniform2i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2i);"))
  (define gl:-ext-api:uniform3i
    (foreign-lambda*
      "_ALLEGRO_glUniform3i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3i);"))
  (define gl:-ext-api:uniform4i
    (foreign-lambda*
      "_ALLEGRO_glUniform4i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4i);"))
  (define gl:-ext-api:uniform1fv
    (foreign-lambda*
      "_ALLEGRO_glUniform1fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1fv);"))
  (define gl:-ext-api:uniform2fv
    (foreign-lambda*
      "_ALLEGRO_glUniform2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2fv);"))
  (define gl:-ext-api:uniform3fv
    (foreign-lambda*
      "_ALLEGRO_glUniform3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3fv);"))
  (define gl:-ext-api:uniform4fv
    (foreign-lambda*
      "_ALLEGRO_glUniform4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4fv);"))
  (define gl:-ext-api:uniform1iv
    (foreign-lambda*
      "_ALLEGRO_glUniform1iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1iv);"))
  (define gl:-ext-api:uniform2iv
    (foreign-lambda*
      "_ALLEGRO_glUniform2iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2iv);"))
  (define gl:-ext-api:uniform3iv
    (foreign-lambda*
      "_ALLEGRO_glUniform3iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3iv);"))
  (define gl:-ext-api:uniform4iv
    (foreign-lambda*
      "_ALLEGRO_glUniform4iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4iv);"))
  (define gl:-ext-api:uniform-matrix2fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2fv);"))
  (define gl:-ext-api:uniform-matrix3fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3fv);"))
  (define gl:-ext-api:uniform-matrix4fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4fv);"))
  (define gl:-ext-api:get-shaderfv
    (foreign-lambda*
      "_ALLEGRO_glGetShaderfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetShaderfv);"))
  (define gl:-ext-api:get-shaderiv
    (foreign-lambda*
      "_ALLEGRO_glGetShaderiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetShaderiv);"))
  (define gl:-ext-api:get-programfv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramfv);"))
  (define gl:-ext-api:get-programiv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramiv);"))
  (define gl:-ext-api:get-shader-info-log
    (foreign-lambda*
      "_ALLEGRO_glGetShaderInfoLog_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetShaderInfoLog);"))
  (define gl:-ext-api:get-program-info-log
    (foreign-lambda*
      "_ALLEGRO_glGetProgramInfoLog_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramInfoLog);"))
  (define gl:-ext-api:get-attached-shaders
    (foreign-lambda*
      "_ALLEGRO_glGetAttachedShaders_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetAttachedShaders);"))
  (define gl:-ext-api:get-uniform-location
    (foreign-lambda*
      "_ALLEGRO_glGetUniformLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformLocation);"))
  (define gl:-ext-api:get-active-uniform
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniform_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniform);"))
  (define gl:-ext-api:get-uniformfv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformfv);"))
  (define gl:-ext-api:get-uniformiv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformiv);"))
  (define gl:-ext-api:get-shader-source
    (foreign-lambda*
      "_ALLEGRO_glGetShaderSource_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetShaderSource);"))
  (define gl:-ext-api:vertex-attrib1f
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1f);"))
  (define gl:-ext-api:vertex-attrib1s
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1s);"))
  (define gl:-ext-api:vertex-attrib1d
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1d);"))
  (define gl:-ext-api:vertex-attrib2f
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2f);"))
  (define gl:-ext-api:vertex-attrib2s
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2s);"))
  (define gl:-ext-api:vertex-attrib2d
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2d);"))
  (define gl:-ext-api:vertex-attrib3f
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3f);"))
  (define gl:-ext-api:vertex-attrib3s
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3s);"))
  (define gl:-ext-api:vertex-attrib3d
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3d);"))
  (define gl:-ext-api:vertex-attrib4f
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4f_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4f);"))
  (define gl:-ext-api:vertex-attrib4s
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4s_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4s);"))
  (define gl:-ext-api:vertex-attrib4d
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4d);"))
  (define gl:-ext-api:vertex-attrib4nub
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nub_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nub);"))
  (define gl:-ext-api:vertex-attrib1fv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1fv);"))
  (define gl:-ext-api:vertex-attrib1sv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1sv);"))
  (define gl:-ext-api:vertex-attrib1dv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1dv);"))
  (define gl:-ext-api:vertex-attrib2fv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2fv);"))
  (define gl:-ext-api:vertex-attrib2sv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2sv);"))
  (define gl:-ext-api:vertex-attrib2dv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2dv);"))
  (define gl:-ext-api:vertex-attrib3fv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3fv);"))
  (define gl:-ext-api:vertex-attrib3sv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3sv);"))
  (define gl:-ext-api:vertex-attrib3dv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3dv);"))
  (define gl:-ext-api:vertex-attrib4fv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4fv);"))
  (define gl:-ext-api:vertex-attrib4sv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4sv);"))
  (define gl:-ext-api:vertex-attrib4dv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4dv);"))
  (define gl:-ext-api:vertex-attrib4iv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4iv);"))
  (define gl:-ext-api:vertex-attrib4bv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4bv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4bv);"))
  (define gl:-ext-api:vertex-attrib4ubv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4ubv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4ubv);"))
  (define gl:-ext-api:vertex-attrib4usv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4usv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4usv);"))
  (define gl:-ext-api:vertex-attrib4uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4uiv);"))
  (define gl:-ext-api:vertex-attrib4nbv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nbv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nbv);"))
  (define gl:-ext-api:vertex-attrib4nsv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nsv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nsv);"))
  (define gl:-ext-api:vertex-attrib4niv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Niv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Niv);"))
  (define gl:-ext-api:vertex-attrib4nubv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nubv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nubv);"))
  (define gl:-ext-api:vertex-attrib4nusv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nusv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nusv);"))
  (define gl:-ext-api:vertex-attrib4nuiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4Nuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4Nuiv);"))
  (define gl:-ext-api:vertex-attrib-pointer
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribPointer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribPointer);"))
  (define gl:-ext-api:enable-vertex-attrib-array
    (foreign-lambda*
      "_ALLEGRO_glEnableVertexAttribArray_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableVertexAttribArray);"))
  (define gl:-ext-api:disable-vertex-attrib-array
    (foreign-lambda*
      "_ALLEGRO_glDisableVertexAttribArray_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableVertexAttribArray);"))
  (define gl:-ext-api:bind-attrib-location
    (foreign-lambda*
      "_ALLEGRO_glBindAttribLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindAttribLocation);"))
  (define gl:-ext-api:get-active-attrib
    (foreign-lambda*
      "_ALLEGRO_glGetActiveAttrib_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveAttrib);"))
  (define gl:-ext-api:get-attrib-location
    (foreign-lambda*
      "_ALLEGRO_glGetAttribLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetAttribLocation);"))
  (define gl:-ext-api:get-vertex-attribdv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribdv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribdv);"))
  (define gl:-ext-api:get-vertex-attribfv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribfv);"))
  (define gl:-ext-api:get-vertex-attribiv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribiv);"))
  (define gl:-ext-api:get-vertex-attrib-pointerv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribPointerv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribPointerv);"))
  (define gl:-ext-api:draw-buffers
    (foreign-lambda*
      "_ALLEGRO_glDrawBuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawBuffers);"))
  (define gl:-ext-api:stencil-op-separate
    (foreign-lambda*
      "_ALLEGRO_glStencilOpSeparate_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StencilOpSeparate);"))
  (define gl:-ext-api:stencil-func-separate
    (foreign-lambda*
      "_ALLEGRO_glStencilFuncSeparate_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StencilFuncSeparate);"))
  (define gl:-ext-api:stencil-mask-separate
    (foreign-lambda*
      "_ALLEGRO_glStencilMaskSeparate_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StencilMaskSeparate);"))
  (define gl:-ext-api:uniform-matrix2x3fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2x3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2x3fv);"))
  (define gl:-ext-api:uniform-matrix3x2fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3x2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3x2fv);"))
  (define gl:-ext-api:uniform-matrix2x4fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2x4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2x4fv);"))
  (define gl:-ext-api:uniform-matrix4x2fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4x2fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4x2fv);"))
  (define gl:-ext-api:uniform-matrix3x4fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3x4fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3x4fv);"))
  (define gl:-ext-api:uniform-matrix4x3fv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4x3fv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4x3fv);"))
  (define gl:-ext-api:color-maski
    (foreign-lambda*
      "_ALLEGRO_glColorMaski_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorMaski);"))
  (define gl:-ext-api:get-booleani-v
    (foreign-lambda*
      "_ALLEGRO_glGetBooleani_v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBooleani_v);"))
  (define gl:-ext-api:get-integeri-v
    (foreign-lambda*
      "_ALLEGRO_glGetIntegeri_v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetIntegeri_v);"))
  (define gl:-ext-api:enablei
    (foreign-lambda*
      "_ALLEGRO_glEnablei_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Enablei);"))
  (define gl:-ext-api:disablei
    (foreign-lambda*
      "_ALLEGRO_glDisablei_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Disablei);"))
  (define gl:-ext-api:is-enabledi
    (foreign-lambda*
      "_ALLEGRO_glIsEnabledi_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsEnabledi);"))
  (define gl:-ext-api:begin-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glBeginTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginTransformFeedback);"))
  (define gl:-ext-api:end-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glEndTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndTransformFeedback);"))
  (define gl:-ext-api:bind-buffer-range
    (foreign-lambda*
      "_ALLEGRO_glBindBufferRange_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferRange);"))
  (define gl:-ext-api:bind-buffer-base
    (foreign-lambda*
      "_ALLEGRO_glBindBufferBase_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferBase);"))
  (define gl:-ext-api:transform-feedback-varyings
    (foreign-lambda*
      "_ALLEGRO_glTransformFeedbackVaryings_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TransformFeedbackVaryings);"))
  (define gl:-ext-api:get-transform-feedback-varying
    (foreign-lambda*
      "_ALLEGRO_glGetTransformFeedbackVarying_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTransformFeedbackVarying);"))
  (define gl:-ext-api:clamp-color
    (foreign-lambda*
      "_ALLEGRO_glClampColor_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClampColor);"))
  (define gl:-ext-api:begin-conditional-render
    (foreign-lambda*
      "_ALLEGRO_glBeginConditionalRender_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginConditionalRender);"))
  (define gl:-ext-api:end-conditional-render
    (foreign-lambda*
      "_ALLEGRO_glEndConditionalRender_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndConditionalRender);"))
  (define gl:-ext-api:vertex-attrib-i1i
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1i);"))
  (define gl:-ext-api:vertex-attrib-i2i
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2i);"))
  (define gl:-ext-api:vertex-attrib-i3i
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3i);"))
  (define gl:-ext-api:vertex-attrib-i4i
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4i_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4i);"))
  (define gl:-ext-api:vertex-attrib-i1ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1ui);"))
  (define gl:-ext-api:vertex-attrib-i2ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2ui);"))
  (define gl:-ext-api:vertex-attrib-i3ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3ui);"))
  (define gl:-ext-api:vertex-attrib-i4ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4ui);"))
  (define gl:-ext-api:vertex-attrib-i1iv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1iv);"))
  (define gl:-ext-api:vertex-attrib-i2iv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2iv);"))
  (define gl:-ext-api:vertex-attrib-i3iv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3iv);"))
  (define gl:-ext-api:vertex-attrib-i4iv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4iv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4iv);"))
  (define gl:-ext-api:vertex-attrib-i1uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1uiv);"))
  (define gl:-ext-api:vertex-attrib-i2uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2uiv);"))
  (define gl:-ext-api:vertex-attrib-i3uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3uiv);"))
  (define gl:-ext-api:vertex-attrib-i4uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4uiv);"))
  (define gl:-ext-api:vertex-attrib-i4bv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4bv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4bv);"))
  (define gl:-ext-api:vertex-attrib-i4sv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4sv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4sv);"))
  (define gl:-ext-api:vertex-attrib-i4ubv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4ubv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4ubv);"))
  (define gl:-ext-api:vertex-attrib-i4usv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4usv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4usv);"))
  (define gl:-ext-api:vertex-attrib-ipointer
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribIPointer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribIPointer);"))
  (define gl:-ext-api:get-vertex-attrib-iiv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribIiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribIiv);"))
  (define gl:-ext-api:get-vertex-attrib-iuiv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribIuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribIuiv);"))
  (define gl:-ext-api:get-uniformuiv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformuiv);"))
  (define gl:-ext-api:bind-frag-data-location
    (foreign-lambda*
      "_ALLEGRO_glBindFragDataLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFragDataLocation);"))
  (define gl:-ext-api:get-frag-data-location
    (foreign-lambda*
      "_ALLEGRO_glGetFragDataLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragDataLocation);"))
  (define gl:-ext-api:uniform1ui
    (foreign-lambda*
      "_ALLEGRO_glUniform1ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1ui);"))
  (define gl:-ext-api:uniform2ui
    (foreign-lambda*
      "_ALLEGRO_glUniform2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2ui);"))
  (define gl:-ext-api:uniform3ui
    (foreign-lambda*
      "_ALLEGRO_glUniform3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3ui);"))
  (define gl:-ext-api:uniform4ui
    (foreign-lambda*
      "_ALLEGRO_glUniform4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4ui);"))
  (define gl:-ext-api:uniform1uiv
    (foreign-lambda*
      "_ALLEGRO_glUniform1uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1uiv);"))
  (define gl:-ext-api:uniform2uiv
    (foreign-lambda*
      "_ALLEGRO_glUniform2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2uiv);"))
  (define gl:-ext-api:uniform3uiv
    (foreign-lambda*
      "_ALLEGRO_glUniform3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3uiv);"))
  (define gl:-ext-api:uniform4uiv
    (foreign-lambda*
      "_ALLEGRO_glUniform4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4uiv);"))
  (define gl:-ext-api:tex-parameter-iiv
    (foreign-lambda*
      "_ALLEGRO_glTexParameterIiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexParameterIiv);"))
  (define gl:-ext-api:tex-parameter-iuiv
    (foreign-lambda*
      "_ALLEGRO_glTexParameterIuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexParameterIuiv);"))
  (define gl:-ext-api:get-tex-parameter-iiv
    (foreign-lambda*
      "_ALLEGRO_glGetTexParameterIiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexParameterIiv);"))
  (define gl:-ext-api:get-tex-parameter-iuiv
    (foreign-lambda*
      "_ALLEGRO_glGetTexParameterIuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexParameterIuiv);"))
  (define gl:-ext-api:clear-bufferiv
    (foreign-lambda*
      "_ALLEGRO_glClearBufferiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferiv);"))
  (define gl:-ext-api:clear-bufferuiv
    (foreign-lambda*
      "_ALLEGRO_glClearBufferuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferuiv);"))
  (define gl:-ext-api:clear-bufferfv
    (foreign-lambda*
      "_ALLEGRO_glClearBufferfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferfv);"))
  (define gl:-ext-api:clear-bufferfi
    (foreign-lambda*
      "_ALLEGRO_glClearBufferfi_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferfi);"))
  (define gl:-ext-api:get-stringi
    (foreign-lambda*
      "_ALLEGRO_glGetStringi_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetStringi);"))
  (define gl:-ext-api:draw-arrays-instanced
    (foreign-lambda*
      "_ALLEGRO_glDrawArraysInstanced_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawArraysInstanced);"))
  (define gl:-ext-api:draw-elements-instanced
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsInstanced_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsInstanced);"))
  (define gl:-ext-api:tex-buffer
    (foreign-lambda*
      "_ALLEGRO_glTexBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBuffer);"))
  (define gl:-ext-api:primitive-restart-index
    (foreign-lambda*
      "_ALLEGRO_glPrimitiveRestartIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PrimitiveRestartIndex);"))
  (define gl:-ext-api:get-integer64i-v
    (foreign-lambda*
      "_ALLEGRO_glGetInteger64i_v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInteger64i_v);"))
  (define gl:-ext-api:get-buffer-parameteri64v
    (foreign-lambda*
      "_ALLEGRO_glGetBufferParameteri64v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferParameteri64v);"))
  (define gl:-ext-api:program-parameteri
    (foreign-lambda*
      "_ALLEGRO_glProgramParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameteri);"))
  (define gl:-ext-api:framebuffer-texture
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture);"))
  (define gl:-ext-api:clear-buffer-data
    (foreign-lambda*
      "_ALLEGRO_glClearBufferData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferData);"))
  (define gl:-ext-api:clear-buffer-sub-data
    (foreign-lambda*
      "_ALLEGRO_glClearBufferSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearBufferSubData);"))
  (define gl:-ext-api:dispatch-compute
    (foreign-lambda*
      "_ALLEGRO_glDispatchCompute_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DispatchCompute);"))
  (define gl:-ext-api:dispatch-compute-indirect
    (foreign-lambda*
      "_ALLEGRO_glDispatchComputeIndirect_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DispatchComputeIndirect);"))
  (define gl:-ext-api:copy-image-sub-data
    (foreign-lambda*
      "_ALLEGRO_glCopyImageSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyImageSubData);"))
  (define gl:-ext-api:framebuffer-parameteri
    (foreign-lambda*
      "_ALLEGRO_glFramebufferParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferParameteri);"))
  (define gl:-ext-api:get-framebuffer-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetFramebufferParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFramebufferParameteriv);"))
  (define gl:-ext-api:get-internalformati64v
    (foreign-lambda*
      "_ALLEGRO_glGetInternalformati64v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInternalformati64v);"))
  (define gl:-ext-api:invalidate-tex-sub-image
    (foreign-lambda*
      "_ALLEGRO_glInvalidateTexSubImage_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateTexSubImage);"))
  (define gl:-ext-api:invalidate-tex-image
    (foreign-lambda*
      "_ALLEGRO_glInvalidateTexImage_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateTexImage);"))
  (define gl:-ext-api:invalidate-buffer-sub-data
    (foreign-lambda*
      "_ALLEGRO_glInvalidateBufferSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateBufferSubData);"))
  (define gl:-ext-api:invalidate-buffer-data
    (foreign-lambda*
      "_ALLEGRO_glInvalidateBufferData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateBufferData);"))
  (define gl:-ext-api:invalidate-framebuffer
    (foreign-lambda*
      "_ALLEGRO_glInvalidateFramebuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateFramebuffer);"))
  (define gl:-ext-api:invalidate-sub-framebuffer
    (foreign-lambda*
      "_ALLEGRO_glInvalidateSubFramebuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InvalidateSubFramebuffer);"))
  (define gl:-ext-api:multi-draw-arrays-indirect
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawArraysIndirect_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawArraysIndirect);"))
  (define gl:-ext-api:multi-draw-elements-indirect
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawElementsIndirect_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawElementsIndirect);"))
  (define gl:-ext-api:get-program-interfaceiv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramInterfaceiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramInterfaceiv);"))
  (define gl:-ext-api:get-program-resource-index
    (foreign-lambda*
      "_ALLEGRO_glGetProgramResourceIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramResourceIndex);"))
  (define gl:-ext-api:get-program-resource-name
    (foreign-lambda*
      "_ALLEGRO_glGetProgramResourceName_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramResourceName);"))
  (define gl:-ext-api:get-program-resourceiv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramResourceiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramResourceiv);"))
  (define gl:-ext-api:get-program-resource-location
    (foreign-lambda*
      "_ALLEGRO_glGetProgramResourceLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramResourceLocation);"))
  (define gl:-ext-api:get-program-resource-location-index
    (foreign-lambda*
      "_ALLEGRO_glGetProgramResourceLocationIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramResourceLocationIndex);"))
  (define gl:-ext-api:shader-storage-block-binding
    (foreign-lambda*
      "_ALLEGRO_glShaderStorageBlockBinding_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderStorageBlockBinding);"))
  (define gl:-ext-api:tex-buffer-range
    (foreign-lambda*
      "_ALLEGRO_glTexBufferRange_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBufferRange);"))
  (define gl:-ext-api:tex-storage2dmultisample
    (foreign-lambda*
      "_ALLEGRO_glTexStorage2DMultisample_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexStorage2DMultisample);"))
  (define gl:-ext-api:tex-storage3dmultisample
    (foreign-lambda*
      "_ALLEGRO_glTexStorage3DMultisample_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexStorage3DMultisample);"))
  (define gl:-ext-api:texture-view
    (foreign-lambda*
      "_ALLEGRO_glTextureView_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureView);"))
  (define gl:-ext-api:bind-vertex-buffer
    (foreign-lambda*
      "_ALLEGRO_glBindVertexBuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVertexBuffer);"))
  (define gl:-ext-api:vertex-attrib-format
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribFormat_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribFormat);"))
  (define gl:-ext-api:vertex-attrib-iformat
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribIFormat_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribIFormat);"))
  (define gl:-ext-api:vertex-attrib-lformat
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribLFormat_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribLFormat);"))
  (define gl:-ext-api:vertex-attrib-binding
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribBinding_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribBinding);"))
  (define gl:-ext-api:vertex-binding-divisor
    (foreign-lambda*
      "_ALLEGRO_glVertexBindingDivisor_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexBindingDivisor);"))
  (define gl:-ext-api:debug-message-control
    (foreign-lambda*
      "_ALLEGRO_glDebugMessageControl_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DebugMessageControl);"))
  (define gl:-ext-api:debug-message-insert
    (foreign-lambda*
      "_ALLEGRO_glDebugMessageInsert_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DebugMessageInsert);"))
  (define gl:-ext-api:debug-message-callback
    (foreign-lambda*
      "_ALLEGRO_glDebugMessageCallback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DebugMessageCallback);"))
  (define gl:-ext-api:get-debug-message-log
    (foreign-lambda*
      "_ALLEGRO_glGetDebugMessageLog_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetDebugMessageLog);"))
  (define gl:-ext-api:push-debug-group
    (foreign-lambda*
      "_ALLEGRO_glPushDebugGroup_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PushDebugGroup);"))
  (define gl:-ext-api:pop-debug-group
    (foreign-lambda*
      "_ALLEGRO_glPopDebugGroup_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PopDebugGroup);"))
  (define gl:-ext-api:object-label
    (foreign-lambda*
      "_ALLEGRO_glObjectLabel_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ObjectLabel);"))
  (define gl:-ext-api:get-object-label
    (foreign-lambda*
      "_ALLEGRO_glGetObjectLabel_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectLabel);"))
  (define gl:-ext-api:object-ptr-label
    (foreign-lambda*
      "_ALLEGRO_glObjectPtrLabel_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ObjectPtrLabel);"))
  (define gl:-ext-api:get-object-ptr-label
    (foreign-lambda*
      "_ALLEGRO_glGetObjectPtrLabel_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectPtrLabel);"))
  (define gl:-ext-api:active-texture-arb
    (foreign-lambda*
      "_ALLEGRO_glActiveTextureARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ActiveTextureARB);"))
  (define gl:-ext-api:client-active-texture-arb
    (foreign-lambda*
      "_ALLEGRO_glClientActiveTextureARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClientActiveTextureARB);"))
  (define gl:-ext-api:multi-tex-coord1d-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1dARB);"))
  (define gl:-ext-api:multi-tex-coord1dv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1dvARB);"))
  (define gl:-ext-api:multi-tex-coord1f-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1fARB);"))
  (define gl:-ext-api:multi-tex-coord1fv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1fvARB);"))
  (define gl:-ext-api:multi-tex-coord1i-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1iARB);"))
  (define gl:-ext-api:multi-tex-coord1iv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1ivARB);"))
  (define gl:-ext-api:multi-tex-coord1s-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1sARB);"))
  (define gl:-ext-api:multi-tex-coord1sv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1svARB);"))
  (define gl:-ext-api:multi-tex-coord2d-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2dARB);"))
  (define gl:-ext-api:multi-tex-coord2dv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2dvARB);"))
  (define gl:-ext-api:multi-tex-coord2f-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2fARB);"))
  (define gl:-ext-api:multi-tex-coord2fv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2fvARB);"))
  (define gl:-ext-api:multi-tex-coord2i-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2iARB);"))
  (define gl:-ext-api:multi-tex-coord2iv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2ivARB);"))
  (define gl:-ext-api:multi-tex-coord2s-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2sARB);"))
  (define gl:-ext-api:multi-tex-coord2sv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2svARB);"))
  (define gl:-ext-api:multi-tex-coord3d-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3dARB);"))
  (define gl:-ext-api:multi-tex-coord3dv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3dvARB);"))
  (define gl:-ext-api:multi-tex-coord3f-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3fARB);"))
  (define gl:-ext-api:multi-tex-coord3fv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3fvARB);"))
  (define gl:-ext-api:multi-tex-coord3i-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3iARB);"))
  (define gl:-ext-api:multi-tex-coord3iv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3ivARB);"))
  (define gl:-ext-api:multi-tex-coord3s-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3sARB);"))
  (define gl:-ext-api:multi-tex-coord3sv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3svARB);"))
  (define gl:-ext-api:multi-tex-coord4d-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4dARB);"))
  (define gl:-ext-api:multi-tex-coord4dv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4dvARB);"))
  (define gl:-ext-api:multi-tex-coord4f-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4fARB);"))
  (define gl:-ext-api:multi-tex-coord4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4fvARB);"))
  (define gl:-ext-api:multi-tex-coord4i-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4iARB);"))
  (define gl:-ext-api:multi-tex-coord4iv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4ivARB);"))
  (define gl:-ext-api:multi-tex-coord4s-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4sARB);"))
  (define gl:-ext-api:multi-tex-coord4sv-arb
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4svARB);"))
  (define gl:-ext-api:load-transpose-matrixf-arb
    (foreign-lambda*
      "_ALLEGRO_glLoadTransposeMatrixfARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadTransposeMatrixfARB);"))
  (define gl:-ext-api:load-transpose-matrixd-arb
    (foreign-lambda*
      "_ALLEGRO_glLoadTransposeMatrixdARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadTransposeMatrixdARB);"))
  (define gl:-ext-api:mult-transpose-matrixf-arb
    (foreign-lambda*
      "_ALLEGRO_glMultTransposeMatrixfARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultTransposeMatrixfARB);"))
  (define gl:-ext-api:mult-transpose-matrixd-arb
    (foreign-lambda*
      "_ALLEGRO_glMultTransposeMatrixdARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultTransposeMatrixdARB);"))
  (define gl:-ext-api:sample-coverage-arb
    (foreign-lambda*
      "_ALLEGRO_glSampleCoverageARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleCoverageARB);"))
  (define gl:-ext-api:compressed-tex-image3darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage3DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage3DARB);"))
  (define gl:-ext-api:compressed-tex-image2darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage2DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage2DARB);"))
  (define gl:-ext-api:compressed-tex-image1darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexImage1DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexImage1DARB);"))
  (define gl:-ext-api:compressed-tex-sub-image3darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage3DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage3DARB);"))
  (define gl:-ext-api:compressed-tex-sub-image2darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage2DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage2DARB);"))
  (define gl:-ext-api:compressed-tex-sub-image1darb
    (foreign-lambda*
      "_ALLEGRO_glCompressedTexSubImage1DARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTexSubImage1DARB);"))
  (define gl:-ext-api:get-compressed-tex-image-arb
    (foreign-lambda*
      "_ALLEGRO_glGetCompressedTexImageARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCompressedTexImageARB);"))
  (define gl:-ext-api:point-parameterf-arb
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfARB);"))
  (define gl:-ext-api:point-parameterfv-arb
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfvARB);"))
  (define gl:-ext-api:weightbv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightbvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightbvARB);"))
  (define gl:-ext-api:weightsv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightsvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightsvARB);"))
  (define gl:-ext-api:weightiv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightivARB);"))
  (define gl:-ext-api:weightfv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightfvARB);"))
  (define gl:-ext-api:weightdv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightdvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightdvARB);"))
  (define gl:-ext-api:weightubv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightubvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightubvARB);"))
  (define gl:-ext-api:weightusv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightusvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightusvARB);"))
  (define gl:-ext-api:weightuiv-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightuivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightuivARB);"))
  (define gl:-ext-api:weight-pointer-arb
    (foreign-lambda*
      "_ALLEGRO_glWeightPointerARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WeightPointerARB);"))
  (define gl:-ext-api:vertex-blend-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexBlendARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexBlendARB);"))
  (define gl:-ext-api:current-palette-matrix-arb
    (foreign-lambda*
      "_ALLEGRO_glCurrentPaletteMatrixARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CurrentPaletteMatrixARB);"))
  (define gl:-ext-api:matrix-indexubv-arb
    (foreign-lambda*
      "_ALLEGRO_glMatrixIndexubvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixIndexubvARB);"))
  (define gl:-ext-api:matrix-indexusv-arb
    (foreign-lambda*
      "_ALLEGRO_glMatrixIndexusvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixIndexusvARB);"))
  (define gl:-ext-api:matrix-indexuiv-arb
    (foreign-lambda*
      "_ALLEGRO_glMatrixIndexuivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixIndexuivARB);"))
  (define gl:-ext-api:matrix-index-pointer-arb
    (foreign-lambda*
      "_ALLEGRO_glMatrixIndexPointerARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixIndexPointerARB);"))
  (define gl:-ext-api:window-pos2d-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2dARB);"))
  (define gl:-ext-api:window-pos2dv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2dvARB);"))
  (define gl:-ext-api:window-pos2f-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2fARB);"))
  (define gl:-ext-api:window-pos2fv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2fvARB);"))
  (define gl:-ext-api:window-pos2i-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2iARB);"))
  (define gl:-ext-api:window-pos2iv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2ivARB);"))
  (define gl:-ext-api:window-pos2s-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2sARB);"))
  (define gl:-ext-api:window-pos2sv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2svARB);"))
  (define gl:-ext-api:window-pos3d-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3dARB);"))
  (define gl:-ext-api:window-pos3dv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3dvARB);"))
  (define gl:-ext-api:window-pos3f-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3fARB);"))
  (define gl:-ext-api:window-pos3fv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3fvARB);"))
  (define gl:-ext-api:window-pos3i-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3iARB);"))
  (define gl:-ext-api:window-pos3iv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3ivARB);"))
  (define gl:-ext-api:window-pos3s-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3sARB);"))
  (define gl:-ext-api:window-pos3sv-arb
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3svARB);"))
  (define gl:-ext-api:vertex-attrib1d-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1dARB);"))
  (define gl:-ext-api:vertex-attrib1dv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1dvARB);"))
  (define gl:-ext-api:vertex-attrib1f-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1fARB);"))
  (define gl:-ext-api:vertex-attrib1fv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1fvARB);"))
  (define gl:-ext-api:vertex-attrib1s-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1sARB);"))
  (define gl:-ext-api:vertex-attrib1sv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1svARB);"))
  (define gl:-ext-api:vertex-attrib2d-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2dARB);"))
  (define gl:-ext-api:vertex-attrib2dv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2dvARB);"))
  (define gl:-ext-api:vertex-attrib2f-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2fARB);"))
  (define gl:-ext-api:vertex-attrib2fv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2fvARB);"))
  (define gl:-ext-api:vertex-attrib2s-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2sARB);"))
  (define gl:-ext-api:vertex-attrib2sv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2svARB);"))
  (define gl:-ext-api:vertex-attrib3d-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3dARB);"))
  (define gl:-ext-api:vertex-attrib3dv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3dvARB);"))
  (define gl:-ext-api:vertex-attrib3f-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3fARB);"))
  (define gl:-ext-api:vertex-attrib3fv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3fvARB);"))
  (define gl:-ext-api:vertex-attrib3s-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3sARB);"))
  (define gl:-ext-api:vertex-attrib3sv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3svARB);"))
  (define gl:-ext-api:vertex-attrib4nbv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NbvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NbvARB);"))
  (define gl:-ext-api:vertex-attrib4niv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NivARB);"))
  (define gl:-ext-api:vertex-attrib4nsv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NsvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NsvARB);"))
  (define gl:-ext-api:vertex-attrib4nub-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NubARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NubARB);"))
  (define gl:-ext-api:vertex-attrib4nubv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NubvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NubvARB);"))
  (define gl:-ext-api:vertex-attrib4nuiv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NuivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NuivARB);"))
  (define gl:-ext-api:vertex-attrib4nusv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4NusvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4NusvARB);"))
  (define gl:-ext-api:vertex-attrib4bv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4bvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4bvARB);"))
  (define gl:-ext-api:vertex-attrib4d-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4dARB);"))
  (define gl:-ext-api:vertex-attrib4dv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4dvARB);"))
  (define gl:-ext-api:vertex-attrib4f-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4fARB);"))
  (define gl:-ext-api:vertex-attrib4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4fvARB);"))
  (define gl:-ext-api:vertex-attrib4iv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4ivARB);"))
  (define gl:-ext-api:vertex-attrib4s-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4sARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4sARB);"))
  (define gl:-ext-api:vertex-attrib4sv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4svARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4svARB);"))
  (define gl:-ext-api:vertex-attrib4ubv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4ubvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4ubvARB);"))
  (define gl:-ext-api:vertex-attrib4uiv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4uivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4uivARB);"))
  (define gl:-ext-api:vertex-attrib4usv-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4usvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4usvARB);"))
  (define gl:-ext-api:vertex-attrib-pointer-arb
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribPointerARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribPointerARB);"))
  (define gl:-ext-api:enable-vertex-attrib-array-arb
    (foreign-lambda*
      "_ALLEGRO_glEnableVertexAttribArrayARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableVertexAttribArrayARB);"))
  (define gl:-ext-api:disable-vertex-attrib-array-arb
    (foreign-lambda*
      "_ALLEGRO_glDisableVertexAttribArrayARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableVertexAttribArrayARB);"))
  (define gl:-ext-api:program-string-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramStringARB);"))
  (define gl:-ext-api:bind-program-arb
    (foreign-lambda*
      "_ALLEGRO_glBindProgramARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindProgramARB);"))
  (define gl:-ext-api:delete-programs-arb
    (foreign-lambda*
      "_ALLEGRO_glDeleteProgramsARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteProgramsARB);"))
  (define gl:-ext-api:gen-programs-arb
    (foreign-lambda*
      "_ALLEGRO_glGenProgramsARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenProgramsARB);"))
  (define gl:-ext-api:program-env-parameter4d-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameter4dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameter4dARB);"))
  (define gl:-ext-api:program-env-parameter4dv-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameter4dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameter4dvARB);"))
  (define gl:-ext-api:program-env-parameter4f-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameter4fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameter4fARB);"))
  (define gl:-ext-api:program-env-parameter4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameter4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameter4fvARB);"))
  (define gl:-ext-api:program-local-parameter4d-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameter4dARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameter4dARB);"))
  (define gl:-ext-api:program-local-parameter4dv-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameter4dvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameter4dvARB);"))
  (define gl:-ext-api:program-local-parameter4f-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameter4fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameter4fARB);"))
  (define gl:-ext-api:program-local-parameter4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameter4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameter4fvARB);"))
  (define gl:-ext-api:get-program-env-parameterdv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramEnvParameterdvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramEnvParameterdvARB);"))
  (define gl:-ext-api:get-program-env-parameterfv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramEnvParameterfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramEnvParameterfvARB);"))
  (define gl:-ext-api:get-program-local-parameterdv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramLocalParameterdvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramLocalParameterdvARB);"))
  (define gl:-ext-api:get-program-local-parameterfv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramLocalParameterfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramLocalParameterfvARB);"))
  (define gl:-ext-api:get-programiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramivARB);"))
  (define gl:-ext-api:get-program-string-arb
    (foreign-lambda*
      "_ALLEGRO_glGetProgramStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramStringARB);"))
  (define gl:-ext-api:get-vertex-attribdv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribdvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribdvARB);"))
  (define gl:-ext-api:get-vertex-attribfv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribfvARB);"))
  (define gl:-ext-api:get-vertex-attribiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribivARB);"))
  (define gl:-ext-api:get-vertex-attrib-pointerv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribPointervARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribPointervARB);"))
  (define gl:-ext-api:is-program-arb
    (foreign-lambda*
      "_ALLEGRO_glIsProgramARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsProgramARB);"))
  (define gl:-ext-api:bind-buffer-arb
    (foreign-lambda*
      "_ALLEGRO_glBindBufferARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferARB);"))
  (define gl:-ext-api:delete-buffers-arb
    (foreign-lambda*
      "_ALLEGRO_glDeleteBuffersARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteBuffersARB);"))
  (define gl:-ext-api:gen-buffers-arb
    (foreign-lambda*
      "_ALLEGRO_glGenBuffersARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenBuffersARB);"))
  (define gl:-ext-api:is-buffer-arb
    (foreign-lambda*
      "_ALLEGRO_glIsBufferARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsBufferARB);"))
  (define gl:-ext-api:buffer-data-arb
    (foreign-lambda*
      "_ALLEGRO_glBufferDataARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferDataARB);"))
  (define gl:-ext-api:buffer-sub-data-arb
    (foreign-lambda*
      "_ALLEGRO_glBufferSubDataARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferSubDataARB);"))
  (define gl:-ext-api:get-buffer-sub-data-arb
    (foreign-lambda*
      "_ALLEGRO_glGetBufferSubDataARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferSubDataARB);"))
  (define gl:-ext-api:map-buffer-arb
    (foreign-lambda*
      "_ALLEGRO_glMapBufferARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapBufferARB);"))
  (define gl:-ext-api:unmap-buffer-arb
    (foreign-lambda*
      "_ALLEGRO_glUnmapBufferARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UnmapBufferARB);"))
  (define gl:-ext-api:get-buffer-parameteriv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetBufferParameterivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferParameterivARB);"))
  (define gl:-ext-api:get-buffer-pointerv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetBufferPointervARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferPointervARB);"))
  (define gl:-ext-api:gen-queries-arb
    (foreign-lambda*
      "_ALLEGRO_glGenQueriesARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenQueriesARB);"))
  (define gl:-ext-api:delete-queries-arb
    (foreign-lambda*
      "_ALLEGRO_glDeleteQueriesARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteQueriesARB);"))
  (define gl:-ext-api:is-query-arb
    (foreign-lambda*
      "_ALLEGRO_glIsQueryARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsQueryARB);"))
  (define gl:-ext-api:begin-query-arb
    (foreign-lambda*
      "_ALLEGRO_glBeginQueryARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginQueryARB);"))
  (define gl:-ext-api:end-query-arb
    (foreign-lambda*
      "_ALLEGRO_glEndQueryARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndQueryARB);"))
  (define gl:-ext-api:get-queryiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetQueryivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryivARB);"))
  (define gl:-ext-api:get-query-objectiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectivARB);"))
  (define gl:-ext-api:get-query-objectuiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectuivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectuivARB);"))
  (define gl:-ext-api:delete-object-arb
    (foreign-lambda*
      "_ALLEGRO_glDeleteObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteObjectARB);"))
  (define gl:-ext-api:get-handle-arb
    (foreign-lambda*
      "_ALLEGRO_glGetHandleARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHandleARB);"))
  (define gl:-ext-api:detach-object-arb
    (foreign-lambda*
      "_ALLEGRO_glDetachObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DetachObjectARB);"))
  (define gl:-ext-api:create-shader-object-arb
    (foreign-lambda*
      "_ALLEGRO_glCreateShaderObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CreateShaderObjectARB);"))
  (define gl:-ext-api:shader-source-arb
    (foreign-lambda*
      "_ALLEGRO_glShaderSourceARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderSourceARB);"))
  (define gl:-ext-api:compile-shader-arb
    (foreign-lambda*
      "_ALLEGRO_glCompileShaderARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompileShaderARB);"))
  (define gl:-ext-api:create-program-object-arb
    (foreign-lambda*
      "_ALLEGRO_glCreateProgramObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CreateProgramObjectARB);"))
  (define gl:-ext-api:attach-object-arb
    (foreign-lambda*
      "_ALLEGRO_glAttachObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AttachObjectARB);"))
  (define gl:-ext-api:link-program-arb
    (foreign-lambda*
      "_ALLEGRO_glLinkProgramARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LinkProgramARB);"))
  (define gl:-ext-api:use-program-object-arb
    (foreign-lambda*
      "_ALLEGRO_glUseProgramObjectARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UseProgramObjectARB);"))
  (define gl:-ext-api:validate-program-arb
    (foreign-lambda*
      "_ALLEGRO_glValidateProgramARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ValidateProgramARB);"))
  (define gl:-ext-api:uniform1f-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform1fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1fARB);"))
  (define gl:-ext-api:uniform2f-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform2fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2fARB);"))
  (define gl:-ext-api:uniform3f-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform3fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3fARB);"))
  (define gl:-ext-api:uniform4f-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform4fARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4fARB);"))
  (define gl:-ext-api:uniform1i-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform1iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1iARB);"))
  (define gl:-ext-api:uniform2i-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform2iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2iARB);"))
  (define gl:-ext-api:uniform3i-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform3iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3iARB);"))
  (define gl:-ext-api:uniform4i-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform4iARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4iARB);"))
  (define gl:-ext-api:uniform1fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform1fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1fvARB);"))
  (define gl:-ext-api:uniform2fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform2fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2fvARB);"))
  (define gl:-ext-api:uniform3fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform3fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3fvARB);"))
  (define gl:-ext-api:uniform4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4fvARB);"))
  (define gl:-ext-api:uniform1iv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform1ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1ivARB);"))
  (define gl:-ext-api:uniform2iv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform2ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2ivARB);"))
  (define gl:-ext-api:uniform3iv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform3ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3ivARB);"))
  (define gl:-ext-api:uniform4iv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniform4ivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4ivARB);"))
  (define gl:-ext-api:uniform-matrix2fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2fvARB);"))
  (define gl:-ext-api:uniform-matrix3fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3fvARB);"))
  (define gl:-ext-api:uniform-matrix4fv-arb
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4fvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4fvARB);"))
  (define gl:-ext-api:get-object-parameterfv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetObjectParameterfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectParameterfvARB);"))
  (define gl:-ext-api:get-object-parameteriv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetObjectParameterivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectParameterivARB);"))
  (define gl:-ext-api:get-info-log-arb
    (foreign-lambda*
      "_ALLEGRO_glGetInfoLogARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInfoLogARB);"))
  (define gl:-ext-api:get-attached-objects-arb
    (foreign-lambda*
      "_ALLEGRO_glGetAttachedObjectsARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetAttachedObjectsARB);"))
  (define gl:-ext-api:get-uniform-location-arb
    (foreign-lambda*
      "_ALLEGRO_glGetUniformLocationARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformLocationARB);"))
  (define gl:-ext-api:get-active-uniform-arb
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniformARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniformARB);"))
  (define gl:-ext-api:get-uniformfv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetUniformfvARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformfvARB);"))
  (define gl:-ext-api:get-uniformiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetUniformivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformivARB);"))
  (define gl:-ext-api:get-shader-source-arb
    (foreign-lambda*
      "_ALLEGRO_glGetShaderSourceARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetShaderSourceARB);"))
  (define gl:-ext-api:bind-attrib-location-arb
    (foreign-lambda*
      "_ALLEGRO_glBindAttribLocationARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindAttribLocationARB);"))
  (define gl:-ext-api:get-active-attrib-arb
    (foreign-lambda*
      "_ALLEGRO_glGetActiveAttribARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveAttribARB);"))
  (define gl:-ext-api:get-attrib-location-arb
    (foreign-lambda*
      "_ALLEGRO_glGetAttribLocationARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetAttribLocationARB);"))
  (define gl:-ext-api:draw-buffers-arb
    (foreign-lambda*
      "_ALLEGRO_glDrawBuffersARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawBuffersARB);"))
  (define gl:-ext-api:clamp-color-arb
    (foreign-lambda*
      "_ALLEGRO_glClampColorARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClampColorARB);"))
  (define gl:-ext-api:draw-arrays-instanced-arb
    (foreign-lambda*
      "_ALLEGRO_glDrawArraysInstancedARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawArraysInstancedARB);"))
  (define gl:-ext-api:draw-elements-instanced-arb
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsInstancedARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsInstancedARB);"))
  (define gl:-ext-api:is-renderbuffer
    (foreign-lambda*
      "_ALLEGRO_glIsRenderbuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsRenderbuffer);"))
  (define gl:-ext-api:bind-renderbuffer
    (foreign-lambda*
      "_ALLEGRO_glBindRenderbuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindRenderbuffer);"))
  (define gl:-ext-api:delete-renderbuffers
    (foreign-lambda*
      "_ALLEGRO_glDeleteRenderbuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteRenderbuffers);"))
  (define gl:-ext-api:gen-renderbuffers
    (foreign-lambda*
      "_ALLEGRO_glGenRenderbuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenRenderbuffers);"))
  (define gl:-ext-api:renderbuffer-storage
    (foreign-lambda*
      "_ALLEGRO_glRenderbufferStorage_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RenderbufferStorage);"))
  (define gl:-ext-api:get-renderbuffer-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetRenderbufferParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetRenderbufferParameteriv);"))
  (define gl:-ext-api:is-framebuffer
    (foreign-lambda*
      "_ALLEGRO_glIsFramebuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsFramebuffer);"))
  (define gl:-ext-api:bind-framebuffer
    (foreign-lambda*
      "_ALLEGRO_glBindFramebuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFramebuffer);"))
  (define gl:-ext-api:delete-framebuffers
    (foreign-lambda*
      "_ALLEGRO_glDeleteFramebuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteFramebuffers);"))
  (define gl:-ext-api:gen-framebuffers
    (foreign-lambda*
      "_ALLEGRO_glGenFramebuffers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenFramebuffers);"))
  (define gl:-ext-api:check-framebuffer-status
    (foreign-lambda*
      "_ALLEGRO_glCheckFramebufferStatus_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CheckFramebufferStatus);"))
  (define gl:-ext-api:framebuffer-texture1d
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture1D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture1D);"))
  (define gl:-ext-api:framebuffer-texture2d
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture2D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture2D);"))
  (define gl:-ext-api:framebuffer-texture3d
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture3D_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture3D);"))
  (define gl:-ext-api:framebuffer-renderbuffer
    (foreign-lambda*
      "_ALLEGRO_glFramebufferRenderbuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferRenderbuffer);"))
  (define gl:-ext-api:get-framebuffer-attachment-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetFramebufferAttachmentParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFramebufferAttachmentParameteriv);"))
  (define gl:-ext-api:generate-mipmap
    (foreign-lambda*
      "_ALLEGRO_glGenerateMipmap_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenerateMipmap);"))
  (define gl:-ext-api:blit-framebuffer
    (foreign-lambda*
      "_ALLEGRO_glBlitFramebuffer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlitFramebuffer);"))
  (define gl:-ext-api:renderbuffer-storage-multisample
    (foreign-lambda*
      "_ALLEGRO_glRenderbufferStorageMultisample_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RenderbufferStorageMultisample);"))
  (define gl:-ext-api:framebuffer-texture-layer
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureLayer_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureLayer);"))
  (define gl:-ext-api:program-parameteri-arb
    (foreign-lambda*
      "_ALLEGRO_glProgramParameteriARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameteriARB);"))
  (define gl:-ext-api:framebuffer-texture-arb
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureARB);"))
  (define gl:-ext-api:framebuffer-texture-layer-arb
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureLayerARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureLayerARB);"))
  (define gl:-ext-api:framebuffer-texture-face-arb
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureFaceARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureFaceARB);"))
  (define gl:-ext-api:vertex-attrib-divisor
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribDivisor_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribDivisor);"))
  (define gl:-ext-api:map-buffer-range
    (foreign-lambda*
      "_ALLEGRO_glMapBufferRange_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapBufferRange);"))
  (define gl:-ext-api:flush-mapped-buffer-range
    (foreign-lambda*
      "_ALLEGRO_glFlushMappedBufferRange_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushMappedBufferRange);"))
  (define gl:-ext-api:tex-buffer-arb
    (foreign-lambda*
      "_ALLEGRO_glTexBufferARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBufferARB);"))
  (define gl:-ext-api:bind-vertex-array
    (foreign-lambda*
      "_ALLEGRO_glBindVertexArray_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVertexArray);"))
  (define gl:-ext-api:delete-vertex-arrays
    (foreign-lambda*
      "_ALLEGRO_glDeleteVertexArrays_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteVertexArrays);"))
  (define gl:-ext-api:gen-vertex-arrays
    (foreign-lambda*
      "_ALLEGRO_glGenVertexArrays_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenVertexArrays);"))
  (define gl:-ext-api:is-vertex-array
    (foreign-lambda*
      "_ALLEGRO_glIsVertexArray_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsVertexArray);"))
  (define gl:-ext-api:get-uniform-indices
    (foreign-lambda*
      "_ALLEGRO_glGetUniformIndices_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformIndices);"))
  (define gl:-ext-api:get-active-uniformsiv
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniformsiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniformsiv);"))
  (define gl:-ext-api:get-active-uniform-name
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniformName_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniformName);"))
  (define gl:-ext-api:get-uniform-block-index
    (foreign-lambda*
      "_ALLEGRO_glGetUniformBlockIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformBlockIndex);"))
  (define gl:-ext-api:get-active-uniform-blockiv
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniformBlockiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniformBlockiv);"))
  (define gl:-ext-api:get-active-uniform-block-name
    (foreign-lambda*
      "_ALLEGRO_glGetActiveUniformBlockName_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveUniformBlockName);"))
  (define gl:-ext-api:uniform-block-binding
    (foreign-lambda*
      "_ALLEGRO_glUniformBlockBinding_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformBlockBinding);"))
  (define gl:-ext-api:copy-buffer-sub-data
    (foreign-lambda*
      "_ALLEGRO_glCopyBufferSubData_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyBufferSubData);"))
  (define gl:-ext-api:draw-elements-base-vertex
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsBaseVertex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsBaseVertex);"))
  (define gl:-ext-api:draw-range-elements-base-vertex
    (foreign-lambda*
      "_ALLEGRO_glDrawRangeElementsBaseVertex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawRangeElementsBaseVertex);"))
  (define gl:-ext-api:draw-elements-instanced-base-vertex
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsInstancedBaseVertex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsInstancedBaseVertex);"))
  (define gl:-ext-api:multi-draw-elements-base-vertex
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawElementsBaseVertex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawElementsBaseVertex);"))
  (define gl:-ext-api:provoking-vertex
    (foreign-lambda*
      "_ALLEGRO_glProvokingVertex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProvokingVertex);"))
  (define gl:-ext-api:fence-sync
    (foreign-lambda*
      "_ALLEGRO_glFenceSync_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FenceSync);"))
  (define gl:-ext-api:is-sync
    (foreign-lambda*
      "_ALLEGRO_glIsSync_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsSync);"))
  (define gl:-ext-api:delete-sync
    (foreign-lambda*
      "_ALLEGRO_glDeleteSync_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteSync);"))
  (define gl:-ext-api:client-wait-sync
    (foreign-lambda*
      "_ALLEGRO_glClientWaitSync_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClientWaitSync);"))
  (define gl:-ext-api:wait-sync
    (foreign-lambda*
      "_ALLEGRO_glWaitSync_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WaitSync);"))
  (define gl:-ext-api:get-integer64v
    (foreign-lambda*
      "_ALLEGRO_glGetInteger64v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInteger64v);"))
  (define gl:-ext-api:get-synciv
    (foreign-lambda*
      "_ALLEGRO_glGetSynciv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSynciv);"))
  (define gl:-ext-api:tex-image2dmultisample
    (foreign-lambda*
      "_ALLEGRO_glTexImage2DMultisample_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexImage2DMultisample);"))
  (define gl:-ext-api:tex-image3dmultisample
    (foreign-lambda*
      "_ALLEGRO_glTexImage3DMultisample_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexImage3DMultisample);"))
  (define gl:-ext-api:get-multisamplefv
    (foreign-lambda*
      "_ALLEGRO_glGetMultisamplefv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultisamplefv);"))
  (define gl:-ext-api:sample-maski
    (foreign-lambda*
      "_ALLEGRO_glSampleMaski_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleMaski);"))
  (define gl:-ext-api:blend-equationi
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationi_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationi);"))
  (define gl:-ext-api:blend-equation-separatei
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationSeparatei_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationSeparatei);"))
  (define gl:-ext-api:blend-funci
    (foreign-lambda*
      "_ALLEGRO_glBlendFunci_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFunci);"))
  (define gl:-ext-api:blend-func-separatei
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncSeparatei_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncSeparatei);"))
  (define gl:-ext-api:min-sample-shading
    (foreign-lambda*
      "_ALLEGRO_glMinSampleShading_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MinSampleShading);"))
  (define gl:-ext-api:named-string-arb
    (foreign-lambda*
      "_ALLEGRO_glNamedStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedStringARB);"))
  (define gl:-ext-api:delete-named-string-arb
    (foreign-lambda*
      "_ALLEGRO_glDeleteNamedStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteNamedStringARB);"))
  (define gl:-ext-api:compile-shader-include-arb
    (foreign-lambda*
      "_ALLEGRO_glCompileShaderIncludeARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompileShaderIncludeARB);"))
  (define gl:-ext-api:is-named-string-arb
    (foreign-lambda*
      "_ALLEGRO_glIsNamedStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsNamedStringARB);"))
  (define gl:-ext-api:get-named-string-arb
    (foreign-lambda*
      "_ALLEGRO_glGetNamedStringARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedStringARB);"))
  (define gl:-ext-api:get-named-stringiv-arb
    (foreign-lambda*
      "_ALLEGRO_glGetNamedStringivARB_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedStringivARB);"))
  (define gl:-ext-api:bind-frag-data-location-indexed
    (foreign-lambda*
      "_ALLEGRO_glBindFragDataLocationIndexed_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFragDataLocationIndexed);"))
  (define gl:-ext-api:get-frag-data-index
    (foreign-lambda*
      "_ALLEGRO_glGetFragDataIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragDataIndex);"))
  (define gl:-ext-api:gen-samplers
    (foreign-lambda*
      "_ALLEGRO_glGenSamplers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenSamplers);"))
  (define gl:-ext-api:delete-samplers
    (foreign-lambda*
      "_ALLEGRO_glDeleteSamplers_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteSamplers);"))
  (define gl:-ext-api:is-sampler
    (foreign-lambda*
      "_ALLEGRO_glIsSampler_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsSampler);"))
  (define gl:-ext-api:bind-sampler
    (foreign-lambda*
      "_ALLEGRO_glBindSampler_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindSampler);"))
  (define gl:-ext-api:sampler-parameteri
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameteri);"))
  (define gl:-ext-api:sampler-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameteriv);"))
  (define gl:-ext-api:sampler-parameterf
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameterf_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameterf);"))
  (define gl:-ext-api:sampler-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameterfv);"))
  (define gl:-ext-api:sampler-parameter-iiv
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameterIiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameterIiv);"))
  (define gl:-ext-api:sampler-parameter-iuiv
    (foreign-lambda*
      "_ALLEGRO_glSamplerParameterIuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplerParameterIuiv);"))
  (define gl:-ext-api:get-sampler-parameteriv
    (foreign-lambda*
      "_ALLEGRO_glGetSamplerParameteriv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSamplerParameteriv);"))
  (define gl:-ext-api:get-sampler-parameter-iiv
    (foreign-lambda*
      "_ALLEGRO_glGetSamplerParameterIiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSamplerParameterIiv);"))
  (define gl:-ext-api:get-sampler-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glGetSamplerParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSamplerParameterfv);"))
  (define gl:-ext-api:get-sampler-parameter-ifv
    (foreign-lambda*
      "_ALLEGRO_glGetSamplerParameterIfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSamplerParameterIfv);"))
  (define gl:-ext-api:query-counter
    (foreign-lambda*
      "_ALLEGRO_glQueryCounter_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->QueryCounter);"))
  (define gl:-ext-api:get-query-objecti64v
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjecti64v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjecti64v);"))
  (define gl:-ext-api:get-query-objectui64v
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectui64v_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectui64v);"))
  (define gl:-ext-api:vertex-p2ui
    (foreign-lambda*
      "_ALLEGRO_glVertexP2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP2ui);"))
  (define gl:-ext-api:vertex-p2uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexP2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP2uiv);"))
  (define gl:-ext-api:vertex-p3ui
    (foreign-lambda*
      "_ALLEGRO_glVertexP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP3ui);"))
  (define gl:-ext-api:vertex-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP3uiv);"))
  (define gl:-ext-api:vertex-p4ui
    (foreign-lambda*
      "_ALLEGRO_glVertexP4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP4ui);"))
  (define gl:-ext-api:vertex-p4uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexP4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexP4uiv);"))
  (define gl:-ext-api:tex-coord-p1ui
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP1ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP1ui);"))
  (define gl:-ext-api:tex-coord-p1uiv
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP1uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP1uiv);"))
  (define gl:-ext-api:tex-coord-p2ui
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP2ui);"))
  (define gl:-ext-api:tex-coord-p2uiv
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP2uiv);"))
  (define gl:-ext-api:tex-coord-p3ui
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP3ui);"))
  (define gl:-ext-api:tex-coord-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP3uiv);"))
  (define gl:-ext-api:tex-coord-p4ui
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP4ui);"))
  (define gl:-ext-api:tex-coord-p4uiv
    (foreign-lambda*
      "_ALLEGRO_glTexCoordP4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordP4uiv);"))
  (define gl:-ext-api:multi-tex-coord-p1ui
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP1ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP1ui);"))
  (define gl:-ext-api:multi-tex-coord-p1uiv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP1uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP1uiv);"))
  (define gl:-ext-api:multi-tex-coord-p2ui
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP2ui);"))
  (define gl:-ext-api:multi-tex-coord-p2uiv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP2uiv);"))
  (define gl:-ext-api:multi-tex-coord-p3ui
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP3ui);"))
  (define gl:-ext-api:multi-tex-coord-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP3uiv);"))
  (define gl:-ext-api:multi-tex-coord-p4ui
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP4ui);"))
  (define gl:-ext-api:multi-tex-coord-p4uiv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordP4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordP4uiv);"))
  (define gl:-ext-api:normal-p3ui
    (foreign-lambda*
      "_ALLEGRO_glNormalP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalP3ui);"))
  (define gl:-ext-api:normal-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glNormalP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalP3uiv);"))
  (define gl:-ext-api:color-p3ui
    (foreign-lambda*
      "_ALLEGRO_glColorP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorP3ui);"))
  (define gl:-ext-api:color-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glColorP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorP3uiv);"))
  (define gl:-ext-api:color-p4ui
    (foreign-lambda*
      "_ALLEGRO_glColorP4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorP4ui);"))
  (define gl:-ext-api:color-p4uiv
    (foreign-lambda*
      "_ALLEGRO_glColorP4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorP4uiv);"))
  (define gl:-ext-api:secondary-color-p3ui
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColorP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColorP3ui);"))
  (define gl:-ext-api:secondary-color-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColorP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColorP3uiv);"))
  (define gl:-ext-api:vertex-attrib-p1ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP1ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP1ui);"))
  (define gl:-ext-api:vertex-attrib-p1uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP1uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP1uiv);"))
  (define gl:-ext-api:vertex-attrib-p2ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP2ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP2ui);"))
  (define gl:-ext-api:vertex-attrib-p2uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP2uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP2uiv);"))
  (define gl:-ext-api:vertex-attrib-p3ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP3ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP3ui);"))
  (define gl:-ext-api:vertex-attrib-p3uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP3uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP3uiv);"))
  (define gl:-ext-api:vertex-attrib-p4ui
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP4ui_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP4ui);"))
  (define gl:-ext-api:vertex-attrib-p4uiv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribP4uiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribP4uiv);"))
  (define gl:-ext-api:draw-arrays-indirect
    (foreign-lambda*
      "_ALLEGRO_glDrawArraysIndirect_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawArraysIndirect);"))
  (define gl:-ext-api:draw-elements-indirect
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsIndirect_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsIndirect);"))
  (define gl:-ext-api:uniform1d
    (foreign-lambda*
      "_ALLEGRO_glUniform1d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1d);"))
  (define gl:-ext-api:uniform2d
    (foreign-lambda*
      "_ALLEGRO_glUniform2d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2d);"))
  (define gl:-ext-api:uniform3d
    (foreign-lambda*
      "_ALLEGRO_glUniform3d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3d);"))
  (define gl:-ext-api:uniform4d
    (foreign-lambda*
      "_ALLEGRO_glUniform4d_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4d);"))
  (define gl:-ext-api:uniform1dv
    (foreign-lambda*
      "_ALLEGRO_glUniform1dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1dv);"))
  (define gl:-ext-api:uniform2dv
    (foreign-lambda*
      "_ALLEGRO_glUniform2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2dv);"))
  (define gl:-ext-api:uniform3dv
    (foreign-lambda*
      "_ALLEGRO_glUniform3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3dv);"))
  (define gl:-ext-api:uniform4dv
    (foreign-lambda*
      "_ALLEGRO_glUniform4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4dv);"))
  (define gl:-ext-api:uniform-matrix2dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2dv);"))
  (define gl:-ext-api:uniform-matrix3dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3dv);"))
  (define gl:-ext-api:uniform-matrix4dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4dv);"))
  (define gl:-ext-api:uniform-matrix2x3dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2x3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2x3dv);"))
  (define gl:-ext-api:uniform-matrix2x4dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix2x4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix2x4dv);"))
  (define gl:-ext-api:uniform-matrix3x2dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3x2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3x2dv);"))
  (define gl:-ext-api:uniform-matrix3x4dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix3x4dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix3x4dv);"))
  (define gl:-ext-api:uniform-matrix4x2dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4x2dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4x2dv);"))
  (define gl:-ext-api:uniform-matrix4x3dv
    (foreign-lambda*
      "_ALLEGRO_glUniformMatrix4x3dv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformMatrix4x3dv);"))
  (define gl:-ext-api:get-uniformdv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformdv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformdv);"))
  (define gl:-ext-api:program-uniform1d-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1dEXT);"))
  (define gl:-ext-api:program-uniform2d-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2dEXT);"))
  (define gl:-ext-api:program-uniform3d-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3dEXT);"))
  (define gl:-ext-api:program-uniform4d-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4dEXT);"))
  (define gl:-ext-api:program-uniform1dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1dvEXT);"))
  (define gl:-ext-api:program-uniform2dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2dvEXT);"))
  (define gl:-ext-api:program-uniform3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3dvEXT);"))
  (define gl:-ext-api:program-uniform4dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix2dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix2x3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2x3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2x3dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix2x4dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2x4dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2x4dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3x2dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3x2dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3x2dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3x4dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3x4dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3x4dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4x2dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4x2dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4x2dvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4x3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4x3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4x3dvEXT);"))
  (define gl:-ext-api:get-subroutine-uniform-location
    (foreign-lambda*
      "_ALLEGRO_glGetSubroutineUniformLocation_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSubroutineUniformLocation);"))
  (define gl:-ext-api:get-subroutine-index
    (foreign-lambda*
      "_ALLEGRO_glGetSubroutineIndex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSubroutineIndex);"))
  (define gl:-ext-api:get-active-subroutine-uniformiv
    (foreign-lambda*
      "_ALLEGRO_glGetActiveSubroutineUniformiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveSubroutineUniformiv);"))
  (define gl:-ext-api:get-active-subroutine-uniform-name
    (foreign-lambda*
      "_ALLEGRO_glGetActiveSubroutineUniformName_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveSubroutineUniformName);"))
  (define gl:-ext-api:get-active-subroutine-name
    (foreign-lambda*
      "_ALLEGRO_glGetActiveSubroutineName_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveSubroutineName);"))
  (define gl:-ext-api:uniform-subroutinesuiv
    (foreign-lambda*
      "_ALLEGRO_glUniformSubroutinesuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformSubroutinesuiv);"))
  (define gl:-ext-api:get-uniform-subroutineuiv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformSubroutineuiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformSubroutineuiv);"))
  (define gl:-ext-api:get-program-stageiv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramStageiv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramStageiv);"))
  (define gl:-ext-api:patch-parameteri
    (foreign-lambda*
      "_ALLEGRO_glPatchParameteri_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PatchParameteri);"))
  (define gl:-ext-api:patch-parameterfv
    (foreign-lambda*
      "_ALLEGRO_glPatchParameterfv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PatchParameterfv);"))
  (define gl:-ext-api:bind-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glBindTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindTransformFeedback);"))
  (define gl:-ext-api:delete-transform-feedbacks
    (foreign-lambda*
      "_ALLEGRO_glDeleteTransformFeedbacks_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteTransformFeedbacks);"))
  (define gl:-ext-api:gen-transform-feedbacks
    (foreign-lambda*
      "_ALLEGRO_glGenTransformFeedbacks_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenTransformFeedbacks);"))
  (define gl:-ext-api:is-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glIsTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsTransformFeedback);"))
  (define gl:-ext-api:pause-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glPauseTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PauseTransformFeedback);"))
  (define gl:-ext-api:resume-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glResumeTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResumeTransformFeedback);"))
  (define gl:-ext-api:draw-transform-feedback
    (foreign-lambda*
      "_ALLEGRO_glDrawTransformFeedback_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawTransformFeedback);"))
  (define gl:-ext-api:draw-transform-feedback-stream
    (foreign-lambda*
      "_ALLEGRO_glDrawTransformFeedbackStream_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawTransformFeedbackStream);"))
  (define gl:-ext-api:begin-query-indexed
    (foreign-lambda*
      "_ALLEGRO_glBeginQueryIndexed_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginQueryIndexed);"))
  (define gl:-ext-api:end-query-indexed
    (foreign-lambda*
      "_ALLEGRO_glEndQueryIndexed_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndQueryIndexed);"))
  (define gl:-ext-api:get-query-indexediv
    (foreign-lambda*
      "_ALLEGRO_glGetQueryIndexediv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryIndexediv);"))
  (define gl:-ext-api:blend-color-ext
    (foreign-lambda*
      "_ALLEGRO_glBlendColorEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendColorEXT);"))
  (define gl:-ext-api:polygon-offset-ext
    (foreign-lambda*
      "_ALLEGRO_glPolygonOffsetEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PolygonOffsetEXT);"))
  (define gl:-ext-api:tex-image3dext
    (foreign-lambda*
      "_ALLEGRO_glTexImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexImage3DEXT);"))
  (define gl:-ext-api:tex-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glTexSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexSubImage3DEXT);"))
  (define gl:-ext-api:get-tex-filter-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetTexFilterFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexFilterFuncSGIS);"))
  (define gl:-ext-api:tex-filter-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glTexFilterFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexFilterFuncSGIS);"))
  (define gl:-ext-api:tex-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glTexSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexSubImage1DEXT);"))
  (define gl:-ext-api:tex-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glTexSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexSubImage2DEXT);"))
  (define gl:-ext-api:copy-tex-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTexImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexImage1DEXT);"))
  (define gl:-ext-api:copy-tex-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTexImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexImage2DEXT);"))
  (define gl:-ext-api:copy-tex-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTexSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexSubImage1DEXT);"))
  (define gl:-ext-api:copy-tex-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTexSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexSubImage2DEXT);"))
  (define gl:-ext-api:copy-tex-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTexSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTexSubImage3DEXT);"))
  (define gl:-ext-api:get-histogram-ext
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramEXT);"))
  (define gl:-ext-api:get-histogram-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramParameterfvEXT);"))
  (define gl:-ext-api:get-histogram-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramParameterivEXT);"))
  (define gl:-ext-api:get-minmax-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMinmaxEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmaxEXT);"))
  (define gl:-ext-api:get-minmax-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMinmaxParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmaxParameterfvEXT);"))
  (define gl:-ext-api:get-minmax-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMinmaxParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMinmaxParameterivEXT);"))
  (define gl:-ext-api:histogram-ext
    (foreign-lambda*
      "_ALLEGRO_glHistogramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->HistogramEXT);"))
  (define gl:-ext-api:minmax-ext
    (foreign-lambda*
      "_ALLEGRO_glMinmaxEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MinmaxEXT);"))
  (define gl:-ext-api:reset-histogram-ext
    (foreign-lambda*
      "_ALLEGRO_glResetHistogramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResetHistogramEXT);"))
  (define gl:-ext-api:reset-minmax-ext
    (foreign-lambda*
      "_ALLEGRO_glResetMinmaxEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResetMinmaxEXT);"))
  (define gl:-ext-api:convolution-filter1dext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionFilter1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionFilter1DEXT);"))
  (define gl:-ext-api:convolution-filter2dext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionFilter2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionFilter2DEXT);"))
  (define gl:-ext-api:convolution-parameterf-ext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterfEXT);"))
  (define gl:-ext-api:convolution-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterfvEXT);"))
  (define gl:-ext-api:convolution-parameteri-ext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameteriEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameteriEXT);"))
  (define gl:-ext-api:convolution-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterivEXT);"))
  (define gl:-ext-api:copy-convolution-filter1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyConvolutionFilter1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyConvolutionFilter1DEXT);"))
  (define gl:-ext-api:copy-convolution-filter2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyConvolutionFilter2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyConvolutionFilter2DEXT);"))
  (define gl:-ext-api:get-convolution-filter-ext
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionFilterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionFilterEXT);"))
  (define gl:-ext-api:get-convolution-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionParameterfvEXT);"))
  (define gl:-ext-api:get-convolution-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionParameterivEXT);"))
  (define gl:-ext-api:get-separable-filter-ext
    (foreign-lambda*
      "_ALLEGRO_glGetSeparableFilterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSeparableFilterEXT);"))
  (define gl:-ext-api:separable-filter2dext
    (foreign-lambda*
      "_ALLEGRO_glSeparableFilter2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SeparableFilter2DEXT);"))
  (define gl:-ext-api:color-table-sgi
    (foreign-lambda*
      "_ALLEGRO_glColorTableSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableSGI);"))
  (define gl:-ext-api:color-table-parameterfv-sgi
    (foreign-lambda*
      "_ALLEGRO_glColorTableParameterfvSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableParameterfvSGI);"))
  (define gl:-ext-api:color-table-parameteriv-sgi
    (foreign-lambda*
      "_ALLEGRO_glColorTableParameterivSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableParameterivSGI);"))
  (define gl:-ext-api:copy-color-table-sgi
    (foreign-lambda*
      "_ALLEGRO_glCopyColorTableSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyColorTableSGI);"))
  (define gl:-ext-api:get-color-table-sgi
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableSGI);"))
  (define gl:-ext-api:get-color-table-parameterfv-sgi
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameterfvSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameterfvSGI);"))
  (define gl:-ext-api:get-color-table-parameteriv-sgi
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameterivSGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameterivSGI);"))
  (define gl:-ext-api:pixel-tex-gen-sgix
    (foreign-lambda*
      "_ALLEGRO_glPixelTexGenSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTexGenSGIX);"))
  (define gl:-ext-api:pixel-tex-gen-parameteri-sgis
    (foreign-lambda*
      "_ALLEGRO_glPixelTexGenParameteriSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTexGenParameteriSGIS);"))
  (define gl:-ext-api:pixel-tex-gen-parameteriv-sgis
    (foreign-lambda*
      "_ALLEGRO_glPixelTexGenParameterivSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTexGenParameterivSGIS);"))
  (define gl:-ext-api:pixel-tex-gen-parameterf-sgis
    (foreign-lambda*
      "_ALLEGRO_glPixelTexGenParameterfSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTexGenParameterfSGIS);"))
  (define gl:-ext-api:pixel-tex-gen-parameterfv-sgis
    (foreign-lambda*
      "_ALLEGRO_glPixelTexGenParameterfvSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTexGenParameterfvSGIS);"))
  (define gl:-ext-api:get-pixel-tex-gen-parameteriv-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetPixelTexGenParameterivSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPixelTexGenParameterivSGIS);"))
  (define gl:-ext-api:get-pixel-tex-gen-parameterfv-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetPixelTexGenParameterfvSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPixelTexGenParameterfvSGIS);"))
  (define gl:-ext-api:tex-image4dsgis
    (foreign-lambda*
      "_ALLEGRO_glTexImage4DSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexImage4DSGIS);"))
  (define gl:-ext-api:tex-sub-image4dsgis
    (foreign-lambda*
      "_ALLEGRO_glTexSubImage4DSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexSubImage4DSGIS);"))
  (define gl:-ext-api:are-textures-resident-ext
    (foreign-lambda*
      "_ALLEGRO_glAreTexturesResidentEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AreTexturesResidentEXT);"))
  (define gl:-ext-api:bind-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glBindTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindTextureEXT);"))
  (define gl:-ext-api:delete-textures-ext
    (foreign-lambda*
      "_ALLEGRO_glDeleteTexturesEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteTexturesEXT);"))
  (define gl:-ext-api:gen-textures-ext
    (foreign-lambda*
      "_ALLEGRO_glGenTexturesEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenTexturesEXT);"))
  (define gl:-ext-api:is-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glIsTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsTextureEXT);"))
  (define gl:-ext-api:prioritize-textures-ext
    (foreign-lambda*
      "_ALLEGRO_glPrioritizeTexturesEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PrioritizeTexturesEXT);"))
  (define gl:-ext-api:detail-tex-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glDetailTexFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DetailTexFuncSGIS);"))
  (define gl:-ext-api:get-detail-tex-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetDetailTexFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetDetailTexFuncSGIS);"))
  (define gl:-ext-api:sharpen-tex-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glSharpenTexFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SharpenTexFuncSGIS);"))
  (define gl:-ext-api:get-sharpen-tex-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetSharpenTexFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetSharpenTexFuncSGIS);"))
  (define gl:-ext-api:sample-mask-sgis
    (foreign-lambda*
      "_ALLEGRO_glSampleMaskSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleMaskSGIS);"))
  (define gl:-ext-api:sample-pattern-sgis
    (foreign-lambda*
      "_ALLEGRO_glSamplePatternSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplePatternSGIS);"))
  (define gl:-ext-api:array-element-ext
    (foreign-lambda*
      "_ALLEGRO_glArrayElementEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ArrayElementEXT);"))
  (define gl:-ext-api:color-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glColorPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorPointerEXT);"))
  (define gl:-ext-api:draw-arrays-ext
    (foreign-lambda*
      "_ALLEGRO_glDrawArraysEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawArraysEXT);"))
  (define gl:-ext-api:edge-flag-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glEdgeFlagPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EdgeFlagPointerEXT);"))
  (define gl:-ext-api:get-pointerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetPointervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPointervEXT);"))
  (define gl:-ext-api:index-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glIndexPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexPointerEXT);"))
  (define gl:-ext-api:normal-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glNormalPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalPointerEXT);"))
  (define gl:-ext-api:tex-coord-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glTexCoordPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordPointerEXT);"))
  (define gl:-ext-api:vertex-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexPointerEXT);"))
  (define gl:-ext-api:blend-equation-ext
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationEXT);"))
  (define gl:-ext-api:sprite-parameterf-sgix
    (foreign-lambda*
      "_ALLEGRO_glSpriteParameterfSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SpriteParameterfSGIX);"))
  (define gl:-ext-api:sprite-parameterfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glSpriteParameterfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SpriteParameterfvSGIX);"))
  (define gl:-ext-api:sprite-parameteri-sgix
    (foreign-lambda*
      "_ALLEGRO_glSpriteParameteriSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SpriteParameteriSGIX);"))
  (define gl:-ext-api:sprite-parameteriv-sgix
    (foreign-lambda*
      "_ALLEGRO_glSpriteParameterivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SpriteParameterivSGIX);"))
  (define gl:-ext-api:point-parameterf-ext
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfEXT);"))
  (define gl:-ext-api:point-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfvEXT);"))
  (define gl:-ext-api:point-parameterf-sgis
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfSGIS);"))
  (define gl:-ext-api:point-parameterfv-sgis
    (foreign-lambda*
      "_ALLEGRO_glPointParameterfvSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterfvSGIS);"))
  (define gl:-ext-api:get-instruments-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetInstrumentsSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInstrumentsSGIX);"))
  (define gl:-ext-api:instruments-buffer-sgix
    (foreign-lambda*
      "_ALLEGRO_glInstrumentsBufferSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InstrumentsBufferSGIX);"))
  (define gl:-ext-api:poll-instruments-sgix
    (foreign-lambda*
      "_ALLEGRO_glPollInstrumentsSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PollInstrumentsSGIX);"))
  (define gl:-ext-api:read-instruments-sgix
    (foreign-lambda*
      "_ALLEGRO_glReadInstrumentsSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReadInstrumentsSGIX);"))
  (define gl:-ext-api:start-instruments-sgix
    (foreign-lambda*
      "_ALLEGRO_glStartInstrumentsSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StartInstrumentsSGIX);"))
  (define gl:-ext-api:stop-instruments-sgix
    (foreign-lambda*
      "_ALLEGRO_glStopInstrumentsSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StopInstrumentsSGIX);"))
  (define gl:-ext-api:frame-zoom-sgix
    (foreign-lambda*
      "_ALLEGRO_glFrameZoomSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FrameZoomSGIX);"))
  (define gl:-ext-api:tag-sample-buffer-sgix
    (foreign-lambda*
      "_ALLEGRO_glTagSampleBufferSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TagSampleBufferSGIX);"))
  (define gl:-ext-api:deformation-map3d-sgix
    (foreign-lambda*
      "_ALLEGRO_glDeformationMap3dSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeformationMap3dSGIX);"))
  (define gl:-ext-api:deformation-map3f-sgix
    (foreign-lambda*
      "_ALLEGRO_glDeformationMap3fSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeformationMap3fSGIX);"))
  (define gl:-ext-api:deform-sgix
    (foreign-lambda*
      "_ALLEGRO_glDeformSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeformSGIX);"))
  (define gl:-ext-api:load-identity-deformation-map-sgix
    (foreign-lambda*
      "_ALLEGRO_glLoadIdentityDeformationMapSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadIdentityDeformationMapSGIX);"))
  (define gl:-ext-api:reference-plane-sgix
    (foreign-lambda*
      "_ALLEGRO_glReferencePlaneSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReferencePlaneSGIX);"))
  (define gl:-ext-api:flush-raster-sgix
    (foreign-lambda*
      "_ALLEGRO_glFlushRasterSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushRasterSGIX);"))
  (define gl:-ext-api:fog-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glFogFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogFuncSGIS);"))
  (define gl:-ext-api:get-fog-func-sgis
    (foreign-lambda*
      "_ALLEGRO_glGetFogFuncSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFogFuncSGIS);"))
  (define gl:-ext-api:image-transform-parameteri-hp
    (foreign-lambda*
      "_ALLEGRO_glImageTransformParameteriHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ImageTransformParameteriHP);"))
  (define gl:-ext-api:image-transform-parameterf-hp
    (foreign-lambda*
      "_ALLEGRO_glImageTransformParameterfHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ImageTransformParameterfHP);"))
  (define gl:-ext-api:image-transform-parameteriv-hp
    (foreign-lambda*
      "_ALLEGRO_glImageTransformParameterivHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ImageTransformParameterivHP);"))
  (define gl:-ext-api:image-transform-parameterfv-hp
    (foreign-lambda*
      "_ALLEGRO_glImageTransformParameterfvHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ImageTransformParameterfvHP);"))
  (define gl:-ext-api:get-image-transform-parameteriv-hp
    (foreign-lambda*
      "_ALLEGRO_glGetImageTransformParameterivHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetImageTransformParameterivHP);"))
  (define gl:-ext-api:get-image-transform-parameterfv-hp
    (foreign-lambda*
      "_ALLEGRO_glGetImageTransformParameterfvHP_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetImageTransformParameterfvHP);"))
  (define gl:-ext-api:copy-color-sub-table-ext
    (foreign-lambda*
      "_ALLEGRO_glCopyColorSubTableEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyColorSubTableEXT);"))
  (define gl:-ext-api:hint-pgi
    (foreign-lambda*
      "_ALLEGRO_glHintPGI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->HintPGI);"))
  (define gl:-ext-api:color-table-ext
    (foreign-lambda*
      "_ALLEGRO_glColorTableEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorTableEXT);"))
  (define gl:-ext-api:get-color-table-ext
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableEXT);"))
  (define gl:-ext-api:get-color-table-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameterivEXT);"))
  (define gl:-ext-api:get-color-table-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetColorTableParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetColorTableParameterfvEXT);"))
  (define gl:-ext-api:get-list-parameterfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetListParameterfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetListParameterfvSGIX);"))
  (define gl:-ext-api:get-list-parameteriv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetListParameterivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetListParameterivSGIX);"))
  (define gl:-ext-api:list-parameterf-sgix
    (foreign-lambda*
      "_ALLEGRO_glListParameterfSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ListParameterfSGIX);"))
  (define gl:-ext-api:list-parameterfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glListParameterfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ListParameterfvSGIX);"))
  (define gl:-ext-api:list-parameteri-sgix
    (foreign-lambda*
      "_ALLEGRO_glListParameteriSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ListParameteriSGIX);"))
  (define gl:-ext-api:list-parameteriv-sgix
    (foreign-lambda*
      "_ALLEGRO_glListParameterivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ListParameterivSGIX);"))
  (define gl:-ext-api:index-material-ext
    (foreign-lambda*
      "_ALLEGRO_glIndexMaterialEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexMaterialEXT);"))
  (define gl:-ext-api:index-func-ext
    (foreign-lambda*
      "_ALLEGRO_glIndexFuncEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexFuncEXT);"))
  (define gl:-ext-api:lock-arrays-ext
    (foreign-lambda*
      "_ALLEGRO_glLockArraysEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LockArraysEXT);"))
  (define gl:-ext-api:unlock-arrays-ext
    (foreign-lambda*
      "_ALLEGRO_glUnlockArraysEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UnlockArraysEXT);"))
  (define gl:-ext-api:cull-parameterdv-ext
    (foreign-lambda*
      "_ALLEGRO_glCullParameterdvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CullParameterdvEXT);"))
  (define gl:-ext-api:cull-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glCullParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CullParameterfvEXT);"))
  (define gl:-ext-api:fragment-color-material-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentColorMaterialSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentColorMaterialSGIX);"))
  (define gl:-ext-api:fragment-lightf-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightfSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightfSGIX);"))
  (define gl:-ext-api:fragment-lightfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightfvSGIX);"))
  (define gl:-ext-api:fragment-lighti-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightiSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightiSGIX);"))
  (define gl:-ext-api:fragment-lightiv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightivSGIX);"))
  (define gl:-ext-api:fragment-light-modelf-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightModelfSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightModelfSGIX);"))
  (define gl:-ext-api:fragment-light-modelfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightModelfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightModelfvSGIX);"))
  (define gl:-ext-api:fragment-light-modeli-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightModeliSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightModeliSGIX);"))
  (define gl:-ext-api:fragment-light-modeliv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentLightModelivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentLightModelivSGIX);"))
  (define gl:-ext-api:fragment-materialf-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentMaterialfSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentMaterialfSGIX);"))
  (define gl:-ext-api:fragment-materialfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentMaterialfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentMaterialfvSGIX);"))
  (define gl:-ext-api:fragment-materiali-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentMaterialiSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentMaterialiSGIX);"))
  (define gl:-ext-api:fragment-materialiv-sgix
    (foreign-lambda*
      "_ALLEGRO_glFragmentMaterialivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FragmentMaterialivSGIX);"))
  (define gl:-ext-api:get-fragment-lightfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetFragmentLightfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragmentLightfvSGIX);"))
  (define gl:-ext-api:get-fragment-lightiv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetFragmentLightivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragmentLightivSGIX);"))
  (define gl:-ext-api:get-fragment-materialfv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetFragmentMaterialfvSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragmentMaterialfvSGIX);"))
  (define gl:-ext-api:get-fragment-materialiv-sgix
    (foreign-lambda*
      "_ALLEGRO_glGetFragmentMaterialivSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragmentMaterialivSGIX);"))
  (define gl:-ext-api:light-envi-sgix
    (foreign-lambda*
      "_ALLEGRO_glLightEnviSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LightEnviSGIX);"))
  (define gl:-ext-api:draw-range-elements-ext
    (foreign-lambda*
      "_ALLEGRO_glDrawRangeElementsEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawRangeElementsEXT);"))
  (define gl:-ext-api:apply-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glApplyTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ApplyTextureEXT);"))
  (define gl:-ext-api:texture-light-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureLightEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureLightEXT);"))
  (define gl:-ext-api:texture-material-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureMaterialEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureMaterialEXT);"))
  (define gl:-ext-api:async-marker-sgix
    (foreign-lambda*
      "_ALLEGRO_glAsyncMarkerSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AsyncMarkerSGIX);"))
  (define gl:-ext-api:finish-async-sgix
    (foreign-lambda*
      "_ALLEGRO_glFinishAsyncSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinishAsyncSGIX);"))
  (define gl:-ext-api:poll-async-sgix
    (foreign-lambda*
      "_ALLEGRO_glPollAsyncSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PollAsyncSGIX);"))
  (define gl:-ext-api:gen-async-markers-sgix
    (foreign-lambda*
      "_ALLEGRO_glGenAsyncMarkersSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenAsyncMarkersSGIX);"))
  (define gl:-ext-api:delete-async-markers-sgix
    (foreign-lambda*
      "_ALLEGRO_glDeleteAsyncMarkersSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteAsyncMarkersSGIX);"))
  (define gl:-ext-api:is-async-marker-sgix
    (foreign-lambda*
      "_ALLEGRO_glIsAsyncMarkerSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsAsyncMarkerSGIX);"))
  (define gl:-ext-api:vertex-pointerv-intel
    (foreign-lambda*
      "_ALLEGRO_glVertexPointervINTEL_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexPointervINTEL);"))
  (define gl:-ext-api:normal-pointerv-intel
    (foreign-lambda*
      "_ALLEGRO_glNormalPointervINTEL_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalPointervINTEL);"))
  (define gl:-ext-api:color-pointerv-intel
    (foreign-lambda*
      "_ALLEGRO_glColorPointervINTEL_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorPointervINTEL);"))
  (define gl:-ext-api:tex-coord-pointerv-intel
    (foreign-lambda*
      "_ALLEGRO_glTexCoordPointervINTEL_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordPointervINTEL);"))
  (define gl:-ext-api:pixel-transform-parameteri-ext
    (foreign-lambda*
      "_ALLEGRO_glPixelTransformParameteriEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTransformParameteriEXT);"))
  (define gl:-ext-api:pixel-transform-parameterf-ext
    (foreign-lambda*
      "_ALLEGRO_glPixelTransformParameterfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTransformParameterfEXT);"))
  (define gl:-ext-api:pixel-transform-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glPixelTransformParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTransformParameterivEXT);"))
  (define gl:-ext-api:pixel-transform-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glPixelTransformParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTransformParameterfvEXT);"))
  (define gl:-ext-api:secondary-color3b-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3bEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3bEXT);"))
  (define gl:-ext-api:secondary-color3bv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3bvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3bvEXT);"))
  (define gl:-ext-api:secondary-color3d-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3dEXT);"))
  (define gl:-ext-api:secondary-color3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3dvEXT);"))
  (define gl:-ext-api:secondary-color3f-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3fEXT);"))
  (define gl:-ext-api:secondary-color3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3fvEXT);"))
  (define gl:-ext-api:secondary-color3i-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3iEXT);"))
  (define gl:-ext-api:secondary-color3iv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ivEXT);"))
  (define gl:-ext-api:secondary-color3s-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3sEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3sEXT);"))
  (define gl:-ext-api:secondary-color3sv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3svEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3svEXT);"))
  (define gl:-ext-api:secondary-color3ub-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ubEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ubEXT);"))
  (define gl:-ext-api:secondary-color3ubv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3ubvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3ubvEXT);"))
  (define gl:-ext-api:secondary-color3ui-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3uiEXT);"))
  (define gl:-ext-api:secondary-color3uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3uivEXT);"))
  (define gl:-ext-api:secondary-color3us-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3usEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3usEXT);"))
  (define gl:-ext-api:secondary-color3usv-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3usvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3usvEXT);"))
  (define gl:-ext-api:secondary-color-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColorPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColorPointerEXT);"))
  (define gl:-ext-api:texture-normal-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureNormalEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureNormalEXT);"))
  (define gl:-ext-api:multi-draw-arrays-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawArraysEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawArraysEXT);"))
  (define gl:-ext-api:multi-draw-elements-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawElementsEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawElementsEXT);"))
  (define gl:-ext-api:fog-coordf-ext
    (foreign-lambda*
      "_ALLEGRO_glFogCoordfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordfEXT);"))
  (define gl:-ext-api:fog-coordfv-ext
    (foreign-lambda*
      "_ALLEGRO_glFogCoordfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordfvEXT);"))
  (define gl:-ext-api:fog-coordd-ext
    (foreign-lambda*
      "_ALLEGRO_glFogCoorddEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoorddEXT);"))
  (define gl:-ext-api:fog-coorddv-ext
    (foreign-lambda*
      "_ALLEGRO_glFogCoorddvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoorddvEXT);"))
  (define gl:-ext-api:fog-coord-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glFogCoordPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordPointerEXT);"))
  (define gl:-ext-api:tangent3b-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3bEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3bEXT);"))
  (define gl:-ext-api:tangent3bv-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3bvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3bvEXT);"))
  (define gl:-ext-api:tangent3d-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3dEXT);"))
  (define gl:-ext-api:tangent3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3dvEXT);"))
  (define gl:-ext-api:tangent3f-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3fEXT);"))
  (define gl:-ext-api:tangent3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3fvEXT);"))
  (define gl:-ext-api:tangent3i-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3iEXT);"))
  (define gl:-ext-api:tangent3iv-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3ivEXT);"))
  (define gl:-ext-api:tangent3s-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3sEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3sEXT);"))
  (define gl:-ext-api:tangent3sv-ext
    (foreign-lambda*
      "_ALLEGRO_glTangent3svEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Tangent3svEXT);"))
  (define gl:-ext-api:binormal3b-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3bEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3bEXT);"))
  (define gl:-ext-api:binormal3bv-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3bvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3bvEXT);"))
  (define gl:-ext-api:binormal3d-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3dEXT);"))
  (define gl:-ext-api:binormal3dv-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3dvEXT);"))
  (define gl:-ext-api:binormal3f-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3fEXT);"))
  (define gl:-ext-api:binormal3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3fvEXT);"))
  (define gl:-ext-api:binormal3i-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3iEXT);"))
  (define gl:-ext-api:binormal3iv-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3ivEXT);"))
  (define gl:-ext-api:binormal3s-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3sEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3sEXT);"))
  (define gl:-ext-api:binormal3sv-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormal3svEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Binormal3svEXT);"))
  (define gl:-ext-api:tangent-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glTangentPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TangentPointerEXT);"))
  (define gl:-ext-api:binormal-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glBinormalPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BinormalPointerEXT);"))
  (define gl:-ext-api:finish-texture-sunx
    (foreign-lambda*
      "_ALLEGRO_glFinishTextureSUNX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinishTextureSUNX);"))
  (define gl:-ext-api:global-alpha-factorb-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactorbSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactorbSUN);"))
  (define gl:-ext-api:global-alpha-factors-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactorsSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactorsSUN);"))
  (define gl:-ext-api:global-alpha-factori-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactoriSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactoriSUN);"))
  (define gl:-ext-api:global-alpha-factorf-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactorfSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactorfSUN);"))
  (define gl:-ext-api:global-alpha-factord-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactordSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactordSUN);"))
  (define gl:-ext-api:global-alpha-factorub-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactorubSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactorubSUN);"))
  (define gl:-ext-api:global-alpha-factorus-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactorusSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactorusSUN);"))
  (define gl:-ext-api:global-alpha-factorui-sun
    (foreign-lambda*
      "_ALLEGRO_glGlobalAlphaFactoruiSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GlobalAlphaFactoruiSUN);"))
  (define gl:-ext-api:replacement-codeui-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiSUN);"))
  (define gl:-ext-api:replacement-codeus-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeusSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeusSUN);"))
  (define gl:-ext-api:replacement-codeub-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeubSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeubSUN);"))
  (define gl:-ext-api:replacement-codeuiv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuivSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuivSUN);"))
  (define gl:-ext-api:replacement-codeusv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeusvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeusvSUN);"))
  (define gl:-ext-api:replacement-codeubv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeubvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeubvSUN);"))
  (define gl:-ext-api:replacement-code-pointer-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodePointerSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodePointerSUN);"))
  (define gl:-ext-api:color4ub-vertex2f-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4ubVertex2fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4ubVertex2fSUN);"))
  (define gl:-ext-api:color4ub-vertex2fv-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4ubVertex2fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4ubVertex2fvSUN);"))
  (define gl:-ext-api:color4ub-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4ubVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4ubVertex3fSUN);"))
  (define gl:-ext-api:color4ub-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4ubVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4ubVertex3fvSUN);"))
  (define gl:-ext-api:color3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glColor3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3fVertex3fSUN);"))
  (define gl:-ext-api:color3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glColor3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3fVertex3fvSUN);"))
  (define gl:-ext-api:normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3fVertex3fSUN);"))
  (define gl:-ext-api:normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3fVertex3fvSUN);"))
  (define gl:-ext-api:color4f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:color4f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glColor4fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord2f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fVertex3fSUN);"))
  (define gl:-ext-api:tex-coord2f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord4f-vertex4f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4fVertex4fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4fVertex4fSUN);"))
  (define gl:-ext-api:tex-coord4f-vertex4fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4fVertex4fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4fVertex4fvSUN);"))
  (define gl:-ext-api:tex-coord2f-color4ub-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor4ubVertex3fSUN);"))
  (define gl:-ext-api:tex-coord2f-color4ub-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor4ubVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord2f-color3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor3fVertex3fSUN);"))
  (define gl:-ext-api:tex-coord2f-color3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor3fVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord2f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:tex-coord2f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord2f-color4f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor4fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:tex-coord2f-color4f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2fColor4fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:tex-coord4f-color4f-normal3f-vertex4f-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4fColor4fNormal3fVertex4fSUN);"))
  (define gl:-ext-api:tex-coord4f-color4f-normal3f-vertex4fv-sun
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4fColor4fNormal3fVertex4fvSUN);"))
  (define gl:-ext-api:replacement-codeui-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-color4ub-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor4ubVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-color4ub-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor4ubVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-color3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor3fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-color3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor3fVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiNormal3fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-color4f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor4fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-color4f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiColor4fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-color4f-normal3f-vertex3f-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);"))
  (define gl:-ext-api:replacement-codeui-tex-coord2f-color4f-normal3f-vertex3fv-sun
    (foreign-lambda*
      "_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);"))
  (define gl:-ext-api:blend-func-separate-ext
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncSeparateEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncSeparateEXT);"))
  (define gl:-ext-api:blend-func-separate-ingr
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncSeparateINGR_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncSeparateINGR);"))
  (define gl:-ext-api:vertex-weightf-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexWeightfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexWeightfEXT);"))
  (define gl:-ext-api:vertex-weightfv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexWeightfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexWeightfvEXT);"))
  (define gl:-ext-api:vertex-weight-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexWeightPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexWeightPointerEXT);"))
  (define gl:-ext-api:flush-vertex-array-range-nv
    (foreign-lambda*
      "_ALLEGRO_glFlushVertexArrayRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushVertexArrayRangeNV);"))
  (define gl:-ext-api:vertex-array-range-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexArrayRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexArrayRangeNV);"))
  (define gl:-ext-api:combiner-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerParameterfvNV);"))
  (define gl:-ext-api:combiner-parameterf-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerParameterfNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerParameterfNV);"))
  (define gl:-ext-api:combiner-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerParameterivNV);"))
  (define gl:-ext-api:combiner-parameteri-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerParameteriNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerParameteriNV);"))
  (define gl:-ext-api:combiner-input-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerInputNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerInputNV);"))
  (define gl:-ext-api:combiner-output-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerOutputNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerOutputNV);"))
  (define gl:-ext-api:final-combiner-input-nv
    (foreign-lambda*
      "_ALLEGRO_glFinalCombinerInputNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinalCombinerInputNV);"))
  (define gl:-ext-api:get-combiner-input-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetCombinerInputParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCombinerInputParameterfvNV);"))
  (define gl:-ext-api:get-combiner-input-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetCombinerInputParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCombinerInputParameterivNV);"))
  (define gl:-ext-api:get-combiner-output-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetCombinerOutputParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCombinerOutputParameterfvNV);"))
  (define gl:-ext-api:get-combiner-output-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetCombinerOutputParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCombinerOutputParameterivNV);"))
  (define gl:-ext-api:get-final-combiner-input-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetFinalCombinerInputParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFinalCombinerInputParameterfvNV);"))
  (define gl:-ext-api:get-final-combiner-input-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetFinalCombinerInputParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFinalCombinerInputParameterivNV);"))
  (define gl:-ext-api:resize-buffers-mesa
    (foreign-lambda*
      "_ALLEGRO_glResizeBuffersMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResizeBuffersMESA);"))
  (define gl:-ext-api:window-pos2d-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2dMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2dMESA);"))
  (define gl:-ext-api:window-pos2dv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2dvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2dvMESA);"))
  (define gl:-ext-api:window-pos2f-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2fMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2fMESA);"))
  (define gl:-ext-api:window-pos2fv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2fvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2fvMESA);"))
  (define gl:-ext-api:window-pos2i-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2iMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2iMESA);"))
  (define gl:-ext-api:window-pos2iv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2ivMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2ivMESA);"))
  (define gl:-ext-api:window-pos2s-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2sMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2sMESA);"))
  (define gl:-ext-api:window-pos2sv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos2svMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos2svMESA);"))
  (define gl:-ext-api:window-pos3d-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3dMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3dMESA);"))
  (define gl:-ext-api:window-pos3dv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3dvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3dvMESA);"))
  (define gl:-ext-api:window-pos3f-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3fMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3fMESA);"))
  (define gl:-ext-api:window-pos3fv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3fvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3fvMESA);"))
  (define gl:-ext-api:window-pos3i-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3iMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3iMESA);"))
  (define gl:-ext-api:window-pos3iv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3ivMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3ivMESA);"))
  (define gl:-ext-api:window-pos3s-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3sMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3sMESA);"))
  (define gl:-ext-api:window-pos3sv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos3svMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos3svMESA);"))
  (define gl:-ext-api:window-pos4d-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4dMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4dMESA);"))
  (define gl:-ext-api:window-pos4dv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4dvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4dvMESA);"))
  (define gl:-ext-api:window-pos4f-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4fMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4fMESA);"))
  (define gl:-ext-api:window-pos4fv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4fvMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4fvMESA);"))
  (define gl:-ext-api:window-pos4i-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4iMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4iMESA);"))
  (define gl:-ext-api:window-pos4iv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4ivMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4ivMESA);"))
  (define gl:-ext-api:window-pos4s-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4sMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4sMESA);"))
  (define gl:-ext-api:window-pos4sv-mesa
    (foreign-lambda*
      "_ALLEGRO_glWindowPos4svMESA_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WindowPos4svMESA);"))
  (define gl:-ext-api:multi-mode-draw-arrays-ibm
    (foreign-lambda*
      "_ALLEGRO_glMultiModeDrawArraysIBM_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiModeDrawArraysIBM);"))
  (define gl:-ext-api:multi-mode-draw-elements-ibm
    (foreign-lambda*
      "_ALLEGRO_glMultiModeDrawElementsIBM_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiModeDrawElementsIBM);"))
  (define gl:-ext-api:tbuffer-mask3dfx
    (foreign-lambda*
      "_ALLEGRO_glTbufferMask3DFX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TbufferMask3DFX);"))
  (define gl:-ext-api:sample-mask-ext
    (foreign-lambda*
      "_ALLEGRO_glSampleMaskEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleMaskEXT);"))
  (define gl:-ext-api:sample-pattern-ext
    (foreign-lambda*
      "_ALLEGRO_glSamplePatternEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SamplePatternEXT);"))
  (define gl:-ext-api:texture-color-mask-sgis
    (foreign-lambda*
      "_ALLEGRO_glTextureColorMaskSGIS_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureColorMaskSGIS);"))
  (define gl:-ext-api:igloo-interface-sgix
    (foreign-lambda*
      "_ALLEGRO_glIglooInterfaceSGIX_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IglooInterfaceSGIX);"))
  (define gl:-ext-api:delete-fences-nv
    (foreign-lambda*
      "_ALLEGRO_glDeleteFencesNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteFencesNV);"))
  (define gl:-ext-api:gen-fences-nv
    (foreign-lambda*
      "_ALLEGRO_glGenFencesNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenFencesNV);"))
  (define gl:-ext-api:is-fence-nv
    (foreign-lambda*
      "_ALLEGRO_glIsFenceNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsFenceNV);"))
  (define gl:-ext-api:test-fence-nv
    (foreign-lambda*
      "_ALLEGRO_glTestFenceNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TestFenceNV);"))
  (define gl:-ext-api:get-fenceiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetFenceivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFenceivNV);"))
  (define gl:-ext-api:finish-fence-nv
    (foreign-lambda*
      "_ALLEGRO_glFinishFenceNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinishFenceNV);"))
  (define gl:-ext-api:set-fence-nv
    (foreign-lambda*
      "_ALLEGRO_glSetFenceNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SetFenceNV);"))
  (define gl:-ext-api:map-control-points-nv
    (foreign-lambda*
      "_ALLEGRO_glMapControlPointsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapControlPointsNV);"))
  (define gl:-ext-api:map-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glMapParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapParameterivNV);"))
  (define gl:-ext-api:map-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glMapParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapParameterfvNV);"))
  (define gl:-ext-api:get-map-control-points-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMapControlPointsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapControlPointsNV);"))
  (define gl:-ext-api:get-map-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMapParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapParameterivNV);"))
  (define gl:-ext-api:get-map-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMapParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapParameterfvNV);"))
  (define gl:-ext-api:get-map-attrib-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMapAttribParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapAttribParameterivNV);"))
  (define gl:-ext-api:get-map-attrib-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMapAttribParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapAttribParameterfvNV);"))
  (define gl:-ext-api:eval-maps-nv
    (foreign-lambda*
      "_ALLEGRO_glEvalMapsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EvalMapsNV);"))
  (define gl:-ext-api:combiner-stage-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glCombinerStageParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CombinerStageParameterfvNV);"))
  (define gl:-ext-api:get-combiner-stage-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetCombinerStageParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCombinerStageParameterfvNV);"))
  (define gl:-ext-api:are-programs-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glAreProgramsResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AreProgramsResidentNV);"))
  (define gl:-ext-api:bind-program-nv
    (foreign-lambda*
      "_ALLEGRO_glBindProgramNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindProgramNV);"))
  (define gl:-ext-api:delete-programs-nv
    (foreign-lambda*
      "_ALLEGRO_glDeleteProgramsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteProgramsNV);"))
  (define gl:-ext-api:execute-program-nv
    (foreign-lambda*
      "_ALLEGRO_glExecuteProgramNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ExecuteProgramNV);"))
  (define gl:-ext-api:gen-programs-nv
    (foreign-lambda*
      "_ALLEGRO_glGenProgramsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenProgramsNV);"))
  (define gl:-ext-api:get-program-parameterdv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramParameterdvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramParameterdvNV);"))
  (define gl:-ext-api:get-program-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramParameterfvNV);"))
  (define gl:-ext-api:get-programiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramivNV);"))
  (define gl:-ext-api:get-program-string-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramStringNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramStringNV);"))
  (define gl:-ext-api:get-track-matrixiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetTrackMatrixivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTrackMatrixivNV);"))
  (define gl:-ext-api:get-vertex-attribdv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribdvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribdvNV);"))
  (define gl:-ext-api:get-vertex-attribfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribfvNV);"))
  (define gl:-ext-api:get-vertex-attribiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribivNV);"))
  (define gl:-ext-api:get-vertex-attrib-pointerv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribPointervNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribPointervNV);"))
  (define gl:-ext-api:is-program-nv
    (foreign-lambda*
      "_ALLEGRO_glIsProgramNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsProgramNV);"))
  (define gl:-ext-api:load-program-nv
    (foreign-lambda*
      "_ALLEGRO_glLoadProgramNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LoadProgramNV);"))
  (define gl:-ext-api:program-parameter4d-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameter4dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameter4dNV);"))
  (define gl:-ext-api:program-parameter4dv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameter4dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameter4dvNV);"))
  (define gl:-ext-api:program-parameter4f-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameter4fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameter4fNV);"))
  (define gl:-ext-api:program-parameter4fv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameter4fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameter4fvNV);"))
  (define gl:-ext-api:program-parameters4dv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameters4dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameters4dvNV);"))
  (define gl:-ext-api:program-parameters4fv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramParameters4fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameters4fvNV);"))
  (define gl:-ext-api:request-resident-programs-nv
    (foreign-lambda*
      "_ALLEGRO_glRequestResidentProgramsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RequestResidentProgramsNV);"))
  (define gl:-ext-api:track-matrix-nv
    (foreign-lambda*
      "_ALLEGRO_glTrackMatrixNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TrackMatrixNV);"))
  (define gl:-ext-api:vertex-attrib-pointer-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribPointerNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribPointerNV);"))
  (define gl:-ext-api:vertex-attrib1d-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1dNV);"))
  (define gl:-ext-api:vertex-attrib1dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1dvNV);"))
  (define gl:-ext-api:vertex-attrib1f-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1fNV);"))
  (define gl:-ext-api:vertex-attrib1fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1fvNV);"))
  (define gl:-ext-api:vertex-attrib1s-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1sNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1sNV);"))
  (define gl:-ext-api:vertex-attrib1sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1svNV);"))
  (define gl:-ext-api:vertex-attrib2d-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2dNV);"))
  (define gl:-ext-api:vertex-attrib2dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2dvNV);"))
  (define gl:-ext-api:vertex-attrib2f-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2fNV);"))
  (define gl:-ext-api:vertex-attrib2fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2fvNV);"))
  (define gl:-ext-api:vertex-attrib2s-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2sNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2sNV);"))
  (define gl:-ext-api:vertex-attrib2sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2svNV);"))
  (define gl:-ext-api:vertex-attrib3d-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3dNV);"))
  (define gl:-ext-api:vertex-attrib3dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3dvNV);"))
  (define gl:-ext-api:vertex-attrib3f-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3fNV);"))
  (define gl:-ext-api:vertex-attrib3fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3fvNV);"))
  (define gl:-ext-api:vertex-attrib3s-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3sNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3sNV);"))
  (define gl:-ext-api:vertex-attrib3sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3svNV);"))
  (define gl:-ext-api:vertex-attrib4d-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4dNV);"))
  (define gl:-ext-api:vertex-attrib4dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4dvNV);"))
  (define gl:-ext-api:vertex-attrib4f-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4fNV);"))
  (define gl:-ext-api:vertex-attrib4fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4fvNV);"))
  (define gl:-ext-api:vertex-attrib4s-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4sNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4sNV);"))
  (define gl:-ext-api:vertex-attrib4sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4svNV);"))
  (define gl:-ext-api:vertex-attrib4ub-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4ubNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4ubNV);"))
  (define gl:-ext-api:vertex-attrib4ubv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4ubvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4ubvNV);"))
  (define gl:-ext-api:vertex-attribs1dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs1dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs1dvNV);"))
  (define gl:-ext-api:vertex-attribs1fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs1fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs1fvNV);"))
  (define gl:-ext-api:vertex-attribs1sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs1svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs1svNV);"))
  (define gl:-ext-api:vertex-attribs2dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs2dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs2dvNV);"))
  (define gl:-ext-api:vertex-attribs2fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs2fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs2fvNV);"))
  (define gl:-ext-api:vertex-attribs2sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs2svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs2svNV);"))
  (define gl:-ext-api:vertex-attribs3dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs3dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs3dvNV);"))
  (define gl:-ext-api:vertex-attribs3fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs3fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs3fvNV);"))
  (define gl:-ext-api:vertex-attribs3sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs3svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs3svNV);"))
  (define gl:-ext-api:vertex-attribs4dv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs4dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs4dvNV);"))
  (define gl:-ext-api:vertex-attribs4fv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs4fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs4fvNV);"))
  (define gl:-ext-api:vertex-attribs4sv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs4svNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs4svNV);"))
  (define gl:-ext-api:vertex-attribs4ubv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs4ubvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs4ubvNV);"))
  (define gl:-ext-api:tex-bump-parameteriv-ati
    (foreign-lambda*
      "_ALLEGRO_glTexBumpParameterivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBumpParameterivATI);"))
  (define gl:-ext-api:tex-bump-parameterfv-ati
    (foreign-lambda*
      "_ALLEGRO_glTexBumpParameterfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBumpParameterfvATI);"))
  (define gl:-ext-api:get-tex-bump-parameteriv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetTexBumpParameterivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexBumpParameterivATI);"))
  (define gl:-ext-api:get-tex-bump-parameterfv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetTexBumpParameterfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexBumpParameterfvATI);"))
  (define gl:-ext-api:gen-fragment-shaders-ati
    (foreign-lambda*
      "_ALLEGRO_glGenFragmentShadersATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenFragmentShadersATI);"))
  (define gl:-ext-api:bind-fragment-shader-ati
    (foreign-lambda*
      "_ALLEGRO_glBindFragmentShaderATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFragmentShaderATI);"))
  (define gl:-ext-api:delete-fragment-shader-ati
    (foreign-lambda*
      "_ALLEGRO_glDeleteFragmentShaderATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteFragmentShaderATI);"))
  (define gl:-ext-api:begin-fragment-shader-ati
    (foreign-lambda*
      "_ALLEGRO_glBeginFragmentShaderATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginFragmentShaderATI);"))
  (define gl:-ext-api:end-fragment-shader-ati
    (foreign-lambda*
      "_ALLEGRO_glEndFragmentShaderATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndFragmentShaderATI);"))
  (define gl:-ext-api:pass-tex-coord-ati
    (foreign-lambda*
      "_ALLEGRO_glPassTexCoordATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PassTexCoordATI);"))
  (define gl:-ext-api:sample-map-ati
    (foreign-lambda*
      "_ALLEGRO_glSampleMapATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleMapATI);"))
  (define gl:-ext-api:color-fragment-op1ati
    (foreign-lambda*
      "_ALLEGRO_glColorFragmentOp1ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorFragmentOp1ATI);"))
  (define gl:-ext-api:color-fragment-op2ati
    (foreign-lambda*
      "_ALLEGRO_glColorFragmentOp2ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorFragmentOp2ATI);"))
  (define gl:-ext-api:color-fragment-op3ati
    (foreign-lambda*
      "_ALLEGRO_glColorFragmentOp3ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorFragmentOp3ATI);"))
  (define gl:-ext-api:alpha-fragment-op1ati
    (foreign-lambda*
      "_ALLEGRO_glAlphaFragmentOp1ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AlphaFragmentOp1ATI);"))
  (define gl:-ext-api:alpha-fragment-op2ati
    (foreign-lambda*
      "_ALLEGRO_glAlphaFragmentOp2ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AlphaFragmentOp2ATI);"))
  (define gl:-ext-api:alpha-fragment-op3ati
    (foreign-lambda*
      "_ALLEGRO_glAlphaFragmentOp3ATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AlphaFragmentOp3ATI);"))
  (define gl:-ext-api:set-fragment-shader-constant-ati
    (foreign-lambda*
      "_ALLEGRO_glSetFragmentShaderConstantATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SetFragmentShaderConstantATI);"))
  (define gl:-ext-api:pntrianglesi-ati
    (foreign-lambda*
      "_ALLEGRO_glPNTrianglesiATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PNTrianglesiATI);"))
  (define gl:-ext-api:pntrianglesf-ati
    (foreign-lambda*
      "_ALLEGRO_glPNTrianglesfATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PNTrianglesfATI);"))
  (define gl:-ext-api:new-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glNewObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NewObjectBufferATI);"))
  (define gl:-ext-api:is-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glIsObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsObjectBufferATI);"))
  (define gl:-ext-api:update-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glUpdateObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UpdateObjectBufferATI);"))
  (define gl:-ext-api:get-object-bufferfv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetObjectBufferfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectBufferfvATI);"))
  (define gl:-ext-api:get-object-bufferiv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetObjectBufferivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectBufferivATI);"))
  (define gl:-ext-api:free-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glFreeObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FreeObjectBufferATI);"))
  (define gl:-ext-api:array-object-ati
    (foreign-lambda*
      "_ALLEGRO_glArrayObjectATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ArrayObjectATI);"))
  (define gl:-ext-api:get-array-objectfv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetArrayObjectfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetArrayObjectfvATI);"))
  (define gl:-ext-api:get-array-objectiv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetArrayObjectivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetArrayObjectivATI);"))
  (define gl:-ext-api:variant-array-object-ati
    (foreign-lambda*
      "_ALLEGRO_glVariantArrayObjectATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantArrayObjectATI);"))
  (define gl:-ext-api:get-variant-array-objectfv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetVariantArrayObjectfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantArrayObjectfvATI);"))
  (define gl:-ext-api:get-variant-array-objectiv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetVariantArrayObjectivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantArrayObjectivATI);"))
  (define gl:-ext-api:begin-vertex-shader-ext
    (foreign-lambda*
      "_ALLEGRO_glBeginVertexShaderEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginVertexShaderEXT);"))
  (define gl:-ext-api:end-vertex-shader-ext
    (foreign-lambda*
      "_ALLEGRO_glEndVertexShaderEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndVertexShaderEXT);"))
  (define gl:-ext-api:bind-vertex-shader-ext
    (foreign-lambda*
      "_ALLEGRO_glBindVertexShaderEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVertexShaderEXT);"))
  (define gl:-ext-api:gen-vertex-shaders-ext
    (foreign-lambda*
      "_ALLEGRO_glGenVertexShadersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenVertexShadersEXT);"))
  (define gl:-ext-api:delete-vertex-shader-ext
    (foreign-lambda*
      "_ALLEGRO_glDeleteVertexShaderEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteVertexShaderEXT);"))
  (define gl:-ext-api:shader-op1ext
    (foreign-lambda*
      "_ALLEGRO_glShaderOp1EXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderOp1EXT);"))
  (define gl:-ext-api:shader-op2ext
    (foreign-lambda*
      "_ALLEGRO_glShaderOp2EXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderOp2EXT);"))
  (define gl:-ext-api:shader-op3ext
    (foreign-lambda*
      "_ALLEGRO_glShaderOp3EXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ShaderOp3EXT);"))
  (define gl:-ext-api:swizzle-ext
    (foreign-lambda*
      "_ALLEGRO_glSwizzleEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SwizzleEXT);"))
  (define gl:-ext-api:write-mask-ext
    (foreign-lambda*
      "_ALLEGRO_glWriteMaskEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->WriteMaskEXT);"))
  (define gl:-ext-api:insert-component-ext
    (foreign-lambda*
      "_ALLEGRO_glInsertComponentEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->InsertComponentEXT);"))
  (define gl:-ext-api:extract-component-ext
    (foreign-lambda*
      "_ALLEGRO_glExtractComponentEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ExtractComponentEXT);"))
  (define gl:-ext-api:gen-symbols-ext
    (foreign-lambda*
      "_ALLEGRO_glGenSymbolsEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenSymbolsEXT);"))
  (define gl:-ext-api:set-invariant-ext
    (foreign-lambda*
      "_ALLEGRO_glSetInvariantEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SetInvariantEXT);"))
  (define gl:-ext-api:set-local-constant-ext
    (foreign-lambda*
      "_ALLEGRO_glSetLocalConstantEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SetLocalConstantEXT);"))
  (define gl:-ext-api:variantbv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantbvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantbvEXT);"))
  (define gl:-ext-api:variantsv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantsvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantsvEXT);"))
  (define gl:-ext-api:variantiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantivEXT);"))
  (define gl:-ext-api:variantfv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantfvEXT);"))
  (define gl:-ext-api:variantdv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantdvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantdvEXT);"))
  (define gl:-ext-api:variantubv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantubvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantubvEXT);"))
  (define gl:-ext-api:variantusv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantusvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantusvEXT);"))
  (define gl:-ext-api:variantuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantuivEXT);"))
  (define gl:-ext-api:variant-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glVariantPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VariantPointerEXT);"))
  (define gl:-ext-api:enable-variant-client-state-ext
    (foreign-lambda*
      "_ALLEGRO_glEnableVariantClientStateEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableVariantClientStateEXT);"))
  (define gl:-ext-api:disable-variant-client-state-ext
    (foreign-lambda*
      "_ALLEGRO_glDisableVariantClientStateEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableVariantClientStateEXT);"))
  (define gl:-ext-api:bind-light-parameter-ext
    (foreign-lambda*
      "_ALLEGRO_glBindLightParameterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindLightParameterEXT);"))
  (define gl:-ext-api:bind-material-parameter-ext
    (foreign-lambda*
      "_ALLEGRO_glBindMaterialParameterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindMaterialParameterEXT);"))
  (define gl:-ext-api:bind-tex-gen-parameter-ext
    (foreign-lambda*
      "_ALLEGRO_glBindTexGenParameterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindTexGenParameterEXT);"))
  (define gl:-ext-api:bind-texture-unit-parameter-ext
    (foreign-lambda*
      "_ALLEGRO_glBindTextureUnitParameterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindTextureUnitParameterEXT);"))
  (define gl:-ext-api:bind-parameter-ext
    (foreign-lambda*
      "_ALLEGRO_glBindParameterEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindParameterEXT);"))
  (define gl:-ext-api:is-variant-enabled-ext
    (foreign-lambda*
      "_ALLEGRO_glIsVariantEnabledEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsVariantEnabledEXT);"))
  (define gl:-ext-api:get-variant-booleanv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVariantBooleanvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantBooleanvEXT);"))
  (define gl:-ext-api:get-variant-integerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVariantIntegervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantIntegervEXT);"))
  (define gl:-ext-api:get-variant-floatv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVariantFloatvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantFloatvEXT);"))
  (define gl:-ext-api:get-variant-pointerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVariantPointervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVariantPointervEXT);"))
  (define gl:-ext-api:get-invariant-booleanv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetInvariantBooleanvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInvariantBooleanvEXT);"))
  (define gl:-ext-api:get-invariant-integerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetInvariantIntegervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInvariantIntegervEXT);"))
  (define gl:-ext-api:get-invariant-floatv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetInvariantFloatvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetInvariantFloatvEXT);"))
  (define gl:-ext-api:get-local-constant-booleanv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetLocalConstantBooleanvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetLocalConstantBooleanvEXT);"))
  (define gl:-ext-api:get-local-constant-integerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetLocalConstantIntegervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetLocalConstantIntegervEXT);"))
  (define gl:-ext-api:get-local-constant-floatv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetLocalConstantFloatvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetLocalConstantFloatvEXT);"))
  (define gl:-ext-api:vertex-stream1s-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1sATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1sATI);"))
  (define gl:-ext-api:vertex-stream1sv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1svATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1svATI);"))
  (define gl:-ext-api:vertex-stream1i-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1iATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1iATI);"))
  (define gl:-ext-api:vertex-stream1iv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1ivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1ivATI);"))
  (define gl:-ext-api:vertex-stream1f-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1fATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1fATI);"))
  (define gl:-ext-api:vertex-stream1fv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1fvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1fvATI);"))
  (define gl:-ext-api:vertex-stream1d-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1dATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1dATI);"))
  (define gl:-ext-api:vertex-stream1dv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream1dvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream1dvATI);"))
  (define gl:-ext-api:vertex-stream2s-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2sATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2sATI);"))
  (define gl:-ext-api:vertex-stream2sv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2svATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2svATI);"))
  (define gl:-ext-api:vertex-stream2i-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2iATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2iATI);"))
  (define gl:-ext-api:vertex-stream2iv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2ivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2ivATI);"))
  (define gl:-ext-api:vertex-stream2f-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2fATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2fATI);"))
  (define gl:-ext-api:vertex-stream2fv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2fvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2fvATI);"))
  (define gl:-ext-api:vertex-stream2d-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2dATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2dATI);"))
  (define gl:-ext-api:vertex-stream2dv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream2dvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream2dvATI);"))
  (define gl:-ext-api:vertex-stream3s-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3sATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3sATI);"))
  (define gl:-ext-api:vertex-stream3sv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3svATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3svATI);"))
  (define gl:-ext-api:vertex-stream3i-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3iATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3iATI);"))
  (define gl:-ext-api:vertex-stream3iv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3ivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3ivATI);"))
  (define gl:-ext-api:vertex-stream3f-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3fATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3fATI);"))
  (define gl:-ext-api:vertex-stream3fv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3fvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3fvATI);"))
  (define gl:-ext-api:vertex-stream3d-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3dATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3dATI);"))
  (define gl:-ext-api:vertex-stream3dv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream3dvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream3dvATI);"))
  (define gl:-ext-api:vertex-stream4s-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4sATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4sATI);"))
  (define gl:-ext-api:vertex-stream4sv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4svATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4svATI);"))
  (define gl:-ext-api:vertex-stream4i-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4iATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4iATI);"))
  (define gl:-ext-api:vertex-stream4iv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4ivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4ivATI);"))
  (define gl:-ext-api:vertex-stream4f-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4fATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4fATI);"))
  (define gl:-ext-api:vertex-stream4fv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4fvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4fvATI);"))
  (define gl:-ext-api:vertex-stream4d-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4dATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4dATI);"))
  (define gl:-ext-api:vertex-stream4dv-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexStream4dvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexStream4dvATI);"))
  (define gl:-ext-api:normal-stream3b-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3bATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3bATI);"))
  (define gl:-ext-api:normal-stream3bv-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3bvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3bvATI);"))
  (define gl:-ext-api:normal-stream3s-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3sATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3sATI);"))
  (define gl:-ext-api:normal-stream3sv-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3svATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3svATI);"))
  (define gl:-ext-api:normal-stream3i-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3iATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3iATI);"))
  (define gl:-ext-api:normal-stream3iv-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3ivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3ivATI);"))
  (define gl:-ext-api:normal-stream3f-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3fATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3fATI);"))
  (define gl:-ext-api:normal-stream3fv-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3fvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3fvATI);"))
  (define gl:-ext-api:normal-stream3d-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3dATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3dATI);"))
  (define gl:-ext-api:normal-stream3dv-ati
    (foreign-lambda*
      "_ALLEGRO_glNormalStream3dvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalStream3dvATI);"))
  (define gl:-ext-api:client-active-vertex-stream-ati
    (foreign-lambda*
      "_ALLEGRO_glClientActiveVertexStreamATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClientActiveVertexStreamATI);"))
  (define gl:-ext-api:vertex-blend-envi-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexBlendEnviATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexBlendEnviATI);"))
  (define gl:-ext-api:vertex-blend-envf-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexBlendEnvfATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexBlendEnvfATI);"))
  (define gl:-ext-api:element-pointer-ati
    (foreign-lambda*
      "_ALLEGRO_glElementPointerATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ElementPointerATI);"))
  (define gl:-ext-api:draw-element-array-ati
    (foreign-lambda*
      "_ALLEGRO_glDrawElementArrayATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementArrayATI);"))
  (define gl:-ext-api:draw-range-element-array-ati
    (foreign-lambda*
      "_ALLEGRO_glDrawRangeElementArrayATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawRangeElementArrayATI);"))
  (define gl:-ext-api:draw-mesh-arrays-sun
    (foreign-lambda*
      "_ALLEGRO_glDrawMeshArraysSUN_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawMeshArraysSUN);"))
  (define gl:-ext-api:gen-occlusion-queries-nv
    (foreign-lambda*
      "_ALLEGRO_glGenOcclusionQueriesNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenOcclusionQueriesNV);"))
  (define gl:-ext-api:delete-occlusion-queries-nv
    (foreign-lambda*
      "_ALLEGRO_glDeleteOcclusionQueriesNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteOcclusionQueriesNV);"))
  (define gl:-ext-api:is-occlusion-query-nv
    (foreign-lambda*
      "_ALLEGRO_glIsOcclusionQueryNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsOcclusionQueryNV);"))
  (define gl:-ext-api:begin-occlusion-query-nv
    (foreign-lambda*
      "_ALLEGRO_glBeginOcclusionQueryNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginOcclusionQueryNV);"))
  (define gl:-ext-api:end-occlusion-query-nv
    (foreign-lambda*
      "_ALLEGRO_glEndOcclusionQueryNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndOcclusionQueryNV);"))
  (define gl:-ext-api:get-occlusion-queryiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetOcclusionQueryivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetOcclusionQueryivNV);"))
  (define gl:-ext-api:get-occlusion-queryuiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetOcclusionQueryuivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetOcclusionQueryuivNV);"))
  (define gl:-ext-api:point-parameteri-nv
    (foreign-lambda*
      "_ALLEGRO_glPointParameteriNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameteriNV);"))
  (define gl:-ext-api:point-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glPointParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointParameterivNV);"))
  (define gl:-ext-api:active-stencil-face-ext
    (foreign-lambda*
      "_ALLEGRO_glActiveStencilFaceEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ActiveStencilFaceEXT);"))
  (define gl:-ext-api:element-pointer-apple
    (foreign-lambda*
      "_ALLEGRO_glElementPointerAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ElementPointerAPPLE);"))
  (define gl:-ext-api:draw-element-array-apple
    (foreign-lambda*
      "_ALLEGRO_glDrawElementArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementArrayAPPLE);"))
  (define gl:-ext-api:draw-range-element-array-apple
    (foreign-lambda*
      "_ALLEGRO_glDrawRangeElementArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawRangeElementArrayAPPLE);"))
  (define gl:-ext-api:multi-draw-element-array-apple
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawElementArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawElementArrayAPPLE);"))
  (define gl:-ext-api:multi-draw-range-element-array-apple
    (foreign-lambda*
      "_ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiDrawRangeElementArrayAPPLE);"))
  (define gl:-ext-api:gen-fences-apple
    (foreign-lambda*
      "_ALLEGRO_glGenFencesAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenFencesAPPLE);"))
  (define gl:-ext-api:delete-fences-apple
    (foreign-lambda*
      "_ALLEGRO_glDeleteFencesAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteFencesAPPLE);"))
  (define gl:-ext-api:set-fence-apple
    (foreign-lambda*
      "_ALLEGRO_glSetFenceAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SetFenceAPPLE);"))
  (define gl:-ext-api:is-fence-apple
    (foreign-lambda*
      "_ALLEGRO_glIsFenceAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsFenceAPPLE);"))
  (define gl:-ext-api:test-fence-apple
    (foreign-lambda*
      "_ALLEGRO_glTestFenceAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TestFenceAPPLE);"))
  (define gl:-ext-api:finish-fence-apple
    (foreign-lambda*
      "_ALLEGRO_glFinishFenceAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinishFenceAPPLE);"))
  (define gl:-ext-api:test-object-apple
    (foreign-lambda*
      "_ALLEGRO_glTestObjectAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TestObjectAPPLE);"))
  (define gl:-ext-api:finish-object-apple
    (foreign-lambda*
      "_ALLEGRO_glFinishObjectAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FinishObjectAPPLE);"))
  (define gl:-ext-api:bind-vertex-array-apple
    (foreign-lambda*
      "_ALLEGRO_glBindVertexArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVertexArrayAPPLE);"))
  (define gl:-ext-api:delete-vertex-arrays-apple
    (foreign-lambda*
      "_ALLEGRO_glDeleteVertexArraysAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteVertexArraysAPPLE);"))
  (define gl:-ext-api:gen-vertex-arrays-apple
    (foreign-lambda*
      "_ALLEGRO_glGenVertexArraysAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenVertexArraysAPPLE);"))
  (define gl:-ext-api:is-vertex-array-apple
    (foreign-lambda*
      "_ALLEGRO_glIsVertexArrayAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsVertexArrayAPPLE);"))
  (define gl:-ext-api:vertex-array-range-apple
    (foreign-lambda*
      "_ALLEGRO_glVertexArrayRangeAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexArrayRangeAPPLE);"))
  (define gl:-ext-api:flush-vertex-array-range-apple
    (foreign-lambda*
      "_ALLEGRO_glFlushVertexArrayRangeAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushVertexArrayRangeAPPLE);"))
  (define gl:-ext-api:vertex-array-parameteri-apple
    (foreign-lambda*
      "_ALLEGRO_glVertexArrayParameteriAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexArrayParameteriAPPLE);"))
  (define gl:-ext-api:draw-buffers-ati
    (foreign-lambda*
      "_ALLEGRO_glDrawBuffersATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawBuffersATI);"))
  (define gl:-ext-api:program-named-parameter4f-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramNamedParameter4fNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramNamedParameter4fNV);"))
  (define gl:-ext-api:program-named-parameter4d-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramNamedParameter4dNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramNamedParameter4dNV);"))
  (define gl:-ext-api:program-named-parameter4fv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramNamedParameter4fvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramNamedParameter4fvNV);"))
  (define gl:-ext-api:program-named-parameter4dv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramNamedParameter4dvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramNamedParameter4dvNV);"))
  (define gl:-ext-api:get-program-named-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramNamedParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramNamedParameterfvNV);"))
  (define gl:-ext-api:get-program-named-parameterdv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramNamedParameterdvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramNamedParameterdvNV);"))
  (define gl:-ext-api:vertex2h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex2hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2hNV);"))
  (define gl:-ext-api:vertex2hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex2hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2hvNV);"))
  (define gl:-ext-api:vertex3h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3hNV);"))
  (define gl:-ext-api:vertex3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3hvNV);"))
  (define gl:-ext-api:vertex4h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex4hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4hNV);"))
  (define gl:-ext-api:vertex4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertex4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4hvNV);"))
  (define gl:-ext-api:normal3h-nv
    (foreign-lambda*
      "_ALLEGRO_glNormal3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3hNV);"))
  (define gl:-ext-api:normal3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glNormal3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3hvNV);"))
  (define gl:-ext-api:color3h-nv
    (foreign-lambda*
      "_ALLEGRO_glColor3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3hNV);"))
  (define gl:-ext-api:color3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glColor3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3hvNV);"))
  (define gl:-ext-api:color4h-nv
    (foreign-lambda*
      "_ALLEGRO_glColor4hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4hNV);"))
  (define gl:-ext-api:color4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glColor4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4hvNV);"))
  (define gl:-ext-api:tex-coord1h-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1hNV);"))
  (define gl:-ext-api:tex-coord1hv-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1hvNV);"))
  (define gl:-ext-api:tex-coord2h-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2hNV);"))
  (define gl:-ext-api:tex-coord2hv-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2hvNV);"))
  (define gl:-ext-api:tex-coord3h-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3hNV);"))
  (define gl:-ext-api:tex-coord3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3hvNV);"))
  (define gl:-ext-api:tex-coord4h-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4hNV);"))
  (define gl:-ext-api:tex-coord4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4hvNV);"))
  (define gl:-ext-api:multi-tex-coord1h-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1hNV);"))
  (define gl:-ext-api:multi-tex-coord1hv-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1hvNV);"))
  (define gl:-ext-api:multi-tex-coord2h-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2hNV);"))
  (define gl:-ext-api:multi-tex-coord2hv-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2hvNV);"))
  (define gl:-ext-api:multi-tex-coord3h-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3hNV);"))
  (define gl:-ext-api:multi-tex-coord3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3hvNV);"))
  (define gl:-ext-api:multi-tex-coord4h-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4hNV);"))
  (define gl:-ext-api:multi-tex-coord4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4hvNV);"))
  (define gl:-ext-api:fog-coordh-nv
    (foreign-lambda*
      "_ALLEGRO_glFogCoordhNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordhNV);"))
  (define gl:-ext-api:fog-coordhv-nv
    (foreign-lambda*
      "_ALLEGRO_glFogCoordhvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordhvNV);"))
  (define gl:-ext-api:secondary-color3h-nv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3hNV);"))
  (define gl:-ext-api:secondary-color3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColor3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColor3hvNV);"))
  (define gl:-ext-api:vertex-weighth-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexWeighthNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexWeighthNV);"))
  (define gl:-ext-api:vertex-weighthv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexWeighthvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexWeighthvNV);"))
  (define gl:-ext-api:vertex-attrib1h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1hNV);"))
  (define gl:-ext-api:vertex-attrib1hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib1hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib1hvNV);"))
  (define gl:-ext-api:vertex-attrib2h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2hNV);"))
  (define gl:-ext-api:vertex-attrib2hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib2hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib2hvNV);"))
  (define gl:-ext-api:vertex-attrib3h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3hNV);"))
  (define gl:-ext-api:vertex-attrib3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib3hvNV);"))
  (define gl:-ext-api:vertex-attrib4h-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4hNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4hNV);"))
  (define gl:-ext-api:vertex-attrib4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttrib4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttrib4hvNV);"))
  (define gl:-ext-api:vertex-attribs1hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs1hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs1hvNV);"))
  (define gl:-ext-api:vertex-attribs2hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs2hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs2hvNV);"))
  (define gl:-ext-api:vertex-attribs3hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs3hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs3hvNV);"))
  (define gl:-ext-api:vertex-attribs4hv-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribs4hvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribs4hvNV);"))
  (define gl:-ext-api:pixel-data-range-nv
    (foreign-lambda*
      "_ALLEGRO_glPixelDataRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelDataRangeNV);"))
  (define gl:-ext-api:flush-pixel-data-range-nv
    (foreign-lambda*
      "_ALLEGRO_glFlushPixelDataRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushPixelDataRangeNV);"))
  (define gl:-ext-api:primitive-restart-nv
    (foreign-lambda*
      "_ALLEGRO_glPrimitiveRestartNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PrimitiveRestartNV);"))
  (define gl:-ext-api:primitive-restart-index-nv
    (foreign-lambda*
      "_ALLEGRO_glPrimitiveRestartIndexNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PrimitiveRestartIndexNV);"))
  (define gl:-ext-api:map-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glMapObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapObjectBufferATI);"))
  (define gl:-ext-api:unmap-object-buffer-ati
    (foreign-lambda*
      "_ALLEGRO_glUnmapObjectBufferATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UnmapObjectBufferATI);"))
  (define gl:-ext-api:vertex-attrib-array-object-ati
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribArrayObjectATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribArrayObjectATI);"))
  (define gl:-ext-api:get-vertex-attrib-array-objectfv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribArrayObjectfvATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribArrayObjectfvATI);"))
  (define gl:-ext-api:get-vertex-attrib-array-objectiv-ati
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribArrayObjectivATI_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribArrayObjectivATI);"))
  (define gl:-ext-api:vertex2b-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex2bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2bOES);"))
  (define gl:-ext-api:vertex3b-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex3bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3bOES);"))
  (define gl:-ext-api:vertex4b-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex4bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4bOES);"))
  (define gl:-ext-api:vertex2bv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex2bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2bvOES);"))
  (define gl:-ext-api:vertex3bv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex3bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3bvOES);"))
  (define gl:-ext-api:vertex4bv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex4bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4bvOES);"))
  (define gl:-ext-api:tex-coord1b-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1bOES);"))
  (define gl:-ext-api:tex-coord2b-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2bOES);"))
  (define gl:-ext-api:tex-coord3b-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3bOES);"))
  (define gl:-ext-api:tex-coord4b-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4bOES);"))
  (define gl:-ext-api:tex-coord1bv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1bvOES);"))
  (define gl:-ext-api:tex-coord2bv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2bvOES);"))
  (define gl:-ext-api:tex-coord3bv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3bvOES);"))
  (define gl:-ext-api:tex-coord4bv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4bvOES);"))
  (define gl:-ext-api:multi-tex-coord1b-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1bOES);"))
  (define gl:-ext-api:multi-tex-coord2b-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2bOES);"))
  (define gl:-ext-api:multi-tex-coord3b-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3bOES);"))
  (define gl:-ext-api:multi-tex-coord4b-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4bOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4bOES);"))
  (define gl:-ext-api:multi-tex-coord1bv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1bvOES);"))
  (define gl:-ext-api:multi-tex-coord2bv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2bvOES);"))
  (define gl:-ext-api:multi-tex-coord3bv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3bvOES);"))
  (define gl:-ext-api:multi-tex-coord4bv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4bvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4bvOES);"))
  (define gl:-ext-api:vertex2x-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2xOES);"))
  (define gl:-ext-api:vertex3x-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3xOES);"))
  (define gl:-ext-api:vertex4x-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex4xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4xOES);"))
  (define gl:-ext-api:vertex2xv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex2xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex2xvOES);"))
  (define gl:-ext-api:vertex3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex3xvOES);"))
  (define gl:-ext-api:vertex4xv-oes
    (foreign-lambda*
      "_ALLEGRO_glVertex4xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Vertex4xvOES);"))
  (define gl:-ext-api:normal3x-oes
    (foreign-lambda*
      "_ALLEGRO_glNormal3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3xOES);"))
  (define gl:-ext-api:normal3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glNormal3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Normal3xvOES);"))
  (define gl:-ext-api:tex-coord1x-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1xOES);"))
  (define gl:-ext-api:tex-coord2x-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2xOES);"))
  (define gl:-ext-api:tex-coord3x-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3xOES);"))
  (define gl:-ext-api:tex-coord4x-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4xOES);"))
  (define gl:-ext-api:tex-coord1xv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord1xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord1xvOES);"))
  (define gl:-ext-api:tex-coord2xv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord2xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord2xvOES);"))
  (define gl:-ext-api:tex-coord3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord3xvOES);"))
  (define gl:-ext-api:tex-coord4xv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexCoord4xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoord4xvOES);"))
  (define gl:-ext-api:multi-tex-coord1x-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1xOES);"))
  (define gl:-ext-api:multi-tex-coord2x-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2xOES);"))
  (define gl:-ext-api:multi-tex-coord3x-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3xOES);"))
  (define gl:-ext-api:multi-tex-coord4x-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4xOES);"))
  (define gl:-ext-api:multi-tex-coord1xv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord1xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord1xvOES);"))
  (define gl:-ext-api:multi-tex-coord2xv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord2xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord2xvOES);"))
  (define gl:-ext-api:multi-tex-coord3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord3xvOES);"))
  (define gl:-ext-api:multi-tex-coord4xv-oes
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoord4xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoord4xvOES);"))
  (define gl:-ext-api:color3x-oes
    (foreign-lambda*
      "_ALLEGRO_glColor3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3xOES);"))
  (define gl:-ext-api:color4x-oes
    (foreign-lambda*
      "_ALLEGRO_glColor4xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4xOES);"))
  (define gl:-ext-api:color3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glColor3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color3xvOES);"))
  (define gl:-ext-api:color4xv-oes
    (foreign-lambda*
      "_ALLEGRO_glColor4xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Color4xvOES);"))
  (define gl:-ext-api:indexx-oes
    (foreign-lambda*
      "_ALLEGRO_glIndexxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexxOES);"))
  (define gl:-ext-api:indexxv-oes
    (foreign-lambda*
      "_ALLEGRO_glIndexxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexxvOES);"))
  (define gl:-ext-api:rectx-oes
    (foreign-lambda*
      "_ALLEGRO_glRectxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RectxOES);"))
  (define gl:-ext-api:depth-rangex-oes
    (foreign-lambda*
      "_ALLEGRO_glDepthRangexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DepthRangexOES);"))
  (define gl:-ext-api:rotatex-oes
    (foreign-lambda*
      "_ALLEGRO_glRotatexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RotatexOES);"))
  (define gl:-ext-api:scalex-oes
    (foreign-lambda*
      "_ALLEGRO_glScalexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ScalexOES);"))
  (define gl:-ext-api:translatex-oes
    (foreign-lambda*
      "_ALLEGRO_glTranslatexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TranslatexOES);"))
  (define gl:-ext-api:frustumx-oes
    (foreign-lambda*
      "_ALLEGRO_glFrustumxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FrustumxOES);"))
  (define gl:-ext-api:orthox-oes
    (foreign-lambda*
      "_ALLEGRO_glOrthoxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->OrthoxOES);"))
  (define gl:-ext-api:tex-genx-oes
    (foreign-lambda*
      "_ALLEGRO_glTexGenxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexGenxOES);"))
  (define gl:-ext-api:tex-genxv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexGenxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexGenxvOES);"))
  (define gl:-ext-api:get-tex-genxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetTexGenxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexGenxvOES);"))
  (define gl:-ext-api:clip-planex-oes
    (foreign-lambda*
      "_ALLEGRO_glClipPlanexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClipPlanexOES);"))
  (define gl:-ext-api:get-clip-planex-oes
    (foreign-lambda*
      "_ALLEGRO_glGetClipPlanexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetClipPlanexOES);"))
  (define gl:-ext-api:raster-pos2x-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos2xOES);"))
  (define gl:-ext-api:raster-pos3x-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos3xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos3xOES);"))
  (define gl:-ext-api:raster-pos4x-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos4xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos4xOES);"))
  (define gl:-ext-api:raster-pos2xv-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos2xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos2xvOES);"))
  (define gl:-ext-api:raster-pos3xv-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos3xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos3xvOES);"))
  (define gl:-ext-api:raster-pos4xv-oes
    (foreign-lambda*
      "_ALLEGRO_glRasterPos4xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RasterPos4xvOES);"))
  (define gl:-ext-api:materialx-oes
    (foreign-lambda*
      "_ALLEGRO_glMaterialxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MaterialxOES);"))
  (define gl:-ext-api:materialxv-oes
    (foreign-lambda*
      "_ALLEGRO_glMaterialxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MaterialxvOES);"))
  (define gl:-ext-api:get-materialx-oes
    (foreign-lambda*
      "_ALLEGRO_glGetMaterialxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMaterialxOES);"))
  (define gl:-ext-api:lightx-oes
    (foreign-lambda*
      "_ALLEGRO_glLightxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LightxOES);"))
  (define gl:-ext-api:lightxv-oes
    (foreign-lambda*
      "_ALLEGRO_glLightxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LightxvOES);"))
  (define gl:-ext-api:get-lightx-oes
    (foreign-lambda*
      "_ALLEGRO_glGetLightxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetLightxOES);"))
  (define gl:-ext-api:light-modelx-oes
    (foreign-lambda*
      "_ALLEGRO_glLightModelxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LightModelxOES);"))
  (define gl:-ext-api:light-modelxv-oes
    (foreign-lambda*
      "_ALLEGRO_glLightModelxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LightModelxvOES);"))
  (define gl:-ext-api:point-sizex-oes
    (foreign-lambda*
      "_ALLEGRO_glPointSizexOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PointSizexOES);"))
  (define gl:-ext-api:line-widthx-oes
    (foreign-lambda*
      "_ALLEGRO_glLineWidthxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->LineWidthxOES);"))
  (define gl:-ext-api:polygon-offsetx-oes
    (foreign-lambda*
      "_ALLEGRO_glPolygonOffsetxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PolygonOffsetxOES);"))
  (define gl:-ext-api:pixel-storex
    (foreign-lambda*
      "_ALLEGRO_glPixelStorex_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelStorex);"))
  (define gl:-ext-api:pixel-transferx-oes
    (foreign-lambda*
      "_ALLEGRO_glPixelTransferxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelTransferxOES);"))
  (define gl:-ext-api:pixel-mapx
    (foreign-lambda*
      "_ALLEGRO_glPixelMapx_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelMapx);"))
  (define gl:-ext-api:get-pixel-mapxv
    (foreign-lambda*
      "_ALLEGRO_glGetPixelMapxv_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPixelMapxv);"))
  (define gl:-ext-api:convolution-parameterx-oes
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterxOES);"))
  (define gl:-ext-api:convolution-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glConvolutionParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ConvolutionParameterxvOES);"))
  (define gl:-ext-api:get-convolution-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetConvolutionParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetConvolutionParameterxvOES);"))
  (define gl:-ext-api:get-histogram-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetHistogramParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetHistogramParameterxvOES);"))
  (define gl:-ext-api:pixel-zoomx-oes
    (foreign-lambda*
      "_ALLEGRO_glPixelZoomxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PixelZoomxOES);"))
  (define gl:-ext-api:bitmapx-oes
    (foreign-lambda*
      "_ALLEGRO_glBitmapxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BitmapxOES);"))
  (define gl:-ext-api:tex-parameterx-oes
    (foreign-lambda*
      "_ALLEGRO_glTexParameterxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexParameterxOES);"))
  (define gl:-ext-api:tex-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexParameterxvOES);"))
  (define gl:-ext-api:get-tex-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetTexParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexParameterxvOES);"))
  (define gl:-ext-api:get-tex-level-parameterxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetTexLevelParameterxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexLevelParameterxvOES);"))
  (define gl:-ext-api:prioritize-texturesx-oes
    (foreign-lambda*
      "_ALLEGRO_glPrioritizeTexturesxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PrioritizeTexturesxOES);"))
  (define gl:-ext-api:tex-envx-oes
    (foreign-lambda*
      "_ALLEGRO_glTexEnvxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexEnvxOES);"))
  (define gl:-ext-api:tex-envxv-oes
    (foreign-lambda*
      "_ALLEGRO_glTexEnvxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexEnvxvOES);"))
  (define gl:-ext-api:get-tex-envxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetTexEnvxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexEnvxvOES);"))
  (define gl:-ext-api:fogx-oes
    (foreign-lambda*
      "_ALLEGRO_glFogxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogxOES);"))
  (define gl:-ext-api:fogxv-oes
    (foreign-lambda*
      "_ALLEGRO_glFogxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogxvOES);"))
  (define gl:-ext-api:sample-coverage-oes
    (foreign-lambda*
      "_ALLEGRO_glSampleCoverageOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleCoverageOES);"))
  (define gl:-ext-api:alpha-funcx-oes
    (foreign-lambda*
      "_ALLEGRO_glAlphaFuncxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AlphaFuncxOES);"))
  (define gl:-ext-api:blend-colorx-oes
    (foreign-lambda*
      "_ALLEGRO_glBlendColorxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendColorxOES);"))
  (define gl:-ext-api:clear-colorx-oes
    (foreign-lambda*
      "_ALLEGRO_glClearColorxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearColorxOES);"))
  (define gl:-ext-api:clear-depthx-oes
    (foreign-lambda*
      "_ALLEGRO_glClearDepthxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearDepthxOES);"))
  (define gl:-ext-api:clear-accumx-oes
    (foreign-lambda*
      "_ALLEGRO_glClearAccumxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearAccumxOES);"))
  (define gl:-ext-api:accumx-oes
    (foreign-lambda*
      "_ALLEGRO_glAccumxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->AccumxOES);"))
  (define gl:-ext-api:map1x-oes
    (foreign-lambda*
      "_ALLEGRO_glMap1xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Map1xOES);"))
  (define gl:-ext-api:map2x-oes
    (foreign-lambda*
      "_ALLEGRO_glMap2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Map2xOES);"))
  (define gl:-ext-api:map-grid1x-oes
    (foreign-lambda*
      "_ALLEGRO_glMapGrid1xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapGrid1xOES);"))
  (define gl:-ext-api:map-grid2x-oes
    (foreign-lambda*
      "_ALLEGRO_glMapGrid2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapGrid2xOES);"))
  (define gl:-ext-api:get-mapxv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetMapxvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMapxvOES);"))
  (define gl:-ext-api:eval-coord1x-oes
    (foreign-lambda*
      "_ALLEGRO_glEvalCoord1xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EvalCoord1xOES);"))
  (define gl:-ext-api:eval-coord2x-oes
    (foreign-lambda*
      "_ALLEGRO_glEvalCoord2xOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EvalCoord2xOES);"))
  (define gl:-ext-api:eval-coord1xv-oes
    (foreign-lambda*
      "_ALLEGRO_glEvalCoord1xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EvalCoord1xvOES);"))
  (define gl:-ext-api:eval-coord2xv-oes
    (foreign-lambda*
      "_ALLEGRO_glEvalCoord2xvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EvalCoord2xvOES);"))
  (define gl:-ext-api:feedback-bufferx-oes
    (foreign-lambda*
      "_ALLEGRO_glFeedbackBufferxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FeedbackBufferxOES);"))
  (define gl:-ext-api:pass-throughx-oes
    (foreign-lambda*
      "_ALLEGRO_glPassThroughxOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PassThroughxOES);"))
  (define gl:-ext-api:get-fixedv-oes
    (foreign-lambda*
      "_ALLEGRO_glGetFixedvOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFixedvOES);"))
  (define gl:-ext-api:depth-rangef-oes
    (foreign-lambda*
      "_ALLEGRO_glDepthRangefOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DepthRangefOES);"))
  (define gl:-ext-api:frustumf-oes
    (foreign-lambda*
      "_ALLEGRO_glFrustumfOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FrustumfOES);"))
  (define gl:-ext-api:orthof-oes
    (foreign-lambda*
      "_ALLEGRO_glOrthofOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->OrthofOES);"))
  (define gl:-ext-api:clip-planef-oes
    (foreign-lambda*
      "_ALLEGRO_glClipPlanefOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClipPlanefOES);"))
  (define gl:-ext-api:get-clip-planef-oes
    (foreign-lambda*
      "_ALLEGRO_glGetClipPlanefOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetClipPlanefOES);"))
  (define gl:-ext-api:clear-depthf-oes
    (foreign-lambda*
      "_ALLEGRO_glClearDepthfOES_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearDepthfOES);"))
  (define gl:-ext-api:depth-bounds-ext
    (foreign-lambda*
      "_ALLEGRO_glDepthBoundsEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DepthBoundsEXT);"))
  (define gl:-ext-api:blend-equation-separate-ext
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationSeparateEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationSeparateEXT);"))
  (define gl:-ext-api:is-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glIsRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsRenderbufferEXT);"))
  (define gl:-ext-api:bind-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glBindRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindRenderbufferEXT);"))
  (define gl:-ext-api:delete-renderbuffers-ext
    (foreign-lambda*
      "_ALLEGRO_glDeleteRenderbuffersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteRenderbuffersEXT);"))
  (define gl:-ext-api:gen-renderbuffers-ext
    (foreign-lambda*
      "_ALLEGRO_glGenRenderbuffersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenRenderbuffersEXT);"))
  (define gl:-ext-api:renderbuffer-storage-ext
    (foreign-lambda*
      "_ALLEGRO_glRenderbufferStorageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RenderbufferStorageEXT);"))
  (define gl:-ext-api:get-renderbuffer-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetRenderbufferParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetRenderbufferParameterivEXT);"))
  (define gl:-ext-api:is-framebuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glIsFramebufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsFramebufferEXT);"))
  (define gl:-ext-api:bind-framebuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glBindFramebufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFramebufferEXT);"))
  (define gl:-ext-api:delete-framebuffers-ext
    (foreign-lambda*
      "_ALLEGRO_glDeleteFramebuffersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteFramebuffersEXT);"))
  (define gl:-ext-api:gen-framebuffers-ext
    (foreign-lambda*
      "_ALLEGRO_glGenFramebuffersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenFramebuffersEXT);"))
  (define gl:-ext-api:check-framebuffer-status-ext
    (foreign-lambda*
      "_ALLEGRO_glCheckFramebufferStatusEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CheckFramebufferStatusEXT);"))
  (define gl:-ext-api:framebuffer-texture1dext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture1DEXT);"))
  (define gl:-ext-api:framebuffer-texture2dext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture2DEXT);"))
  (define gl:-ext-api:framebuffer-texture3dext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTexture3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTexture3DEXT);"))
  (define gl:-ext-api:framebuffer-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferRenderbufferEXT);"))
  (define gl:-ext-api:get-framebuffer-attachment-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFramebufferAttachmentParameterivEXT);"))
  (define gl:-ext-api:generate-mipmap-ext
    (foreign-lambda*
      "_ALLEGRO_glGenerateMipmapEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenerateMipmapEXT);"))
  (define gl:-ext-api:string-marker-gremedy
    (foreign-lambda*
      "_ALLEGRO_glStringMarkerGREMEDY_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StringMarkerGREMEDY);"))
  (define gl:-ext-api:stencil-clear-tag-ext
    (foreign-lambda*
      "_ALLEGRO_glStencilClearTagEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->StencilClearTagEXT);"))
  (define gl:-ext-api:blit-framebuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glBlitFramebufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlitFramebufferEXT);"))
  (define gl:-ext-api:renderbuffer-storage-multisample-ext
    (foreign-lambda*
      "_ALLEGRO_glRenderbufferStorageMultisampleEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RenderbufferStorageMultisampleEXT);"))
  (define gl:-ext-api:get-query-objecti64v-ext
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjecti64vEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjecti64vEXT);"))
  (define gl:-ext-api:get-query-objectui64v-ext
    (foreign-lambda*
      "_ALLEGRO_glGetQueryObjectui64vEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetQueryObjectui64vEXT);"))
  (define gl:-ext-api:program-env-parameters4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameters4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameters4fvEXT);"))
  (define gl:-ext-api:program-local-parameters4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameters4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameters4fvEXT);"))
  (define gl:-ext-api:buffer-parameteri-apple
    (foreign-lambda*
      "_ALLEGRO_glBufferParameteriAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferParameteriAPPLE);"))
  (define gl:-ext-api:flush-mapped-buffer-range-apple
    (foreign-lambda*
      "_ALLEGRO_glFlushMappedBufferRangeAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FlushMappedBufferRangeAPPLE);"))
  (define gl:-ext-api:uniform-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glUniformBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UniformBufferEXT);"))
  (define gl:-ext-api:get-uniform-buffer-size-ext
    (foreign-lambda*
      "_ALLEGRO_glGetUniformBufferSizeEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformBufferSizeEXT);"))
  (define gl:-ext-api:get-uniform-offset-ext
    (foreign-lambda*
      "_ALLEGRO_glGetUniformOffsetEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformOffsetEXT);"))
  (define gl:-ext-api:color-mask-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glColorMaskIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorMaskIndexedEXT);"))
  (define gl:-ext-api:get-boolean-indexedv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetBooleanIndexedvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBooleanIndexedvEXT);"))
  (define gl:-ext-api:get-integer-indexedv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetIntegerIndexedvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetIntegerIndexedvEXT);"))
  (define gl:-ext-api:enable-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glEnableIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableIndexedEXT);"))
  (define gl:-ext-api:disable-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glDisableIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableIndexedEXT);"))
  (define gl:-ext-api:is-enabled-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glIsEnabledIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsEnabledIndexedEXT);"))
  (define gl:-ext-api:draw-arrays-instanced-ext
    (foreign-lambda*
      "_ALLEGRO_glDrawArraysInstancedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawArraysInstancedEXT);"))
  (define gl:-ext-api:draw-elements-instanced-ext
    (foreign-lambda*
      "_ALLEGRO_glDrawElementsInstancedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawElementsInstancedEXT);"))
  (define gl:-ext-api:program-parameteri-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramParameteriEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramParameteriEXT);"))
  (define gl:-ext-api:framebuffer-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureEXT);"))
  (define gl:-ext-api:framebuffer-texture-face-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureFaceEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureFaceEXT);"))
  (define gl:-ext-api:vertex-attrib-i1i-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1iEXT);"))
  (define gl:-ext-api:vertex-attrib-i2i-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2iEXT);"))
  (define gl:-ext-api:vertex-attrib-i3i-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3iEXT);"))
  (define gl:-ext-api:vertex-attrib-i4i-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4iEXT);"))
  (define gl:-ext-api:vertex-attrib-i1ui-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1uiEXT);"))
  (define gl:-ext-api:vertex-attrib-i2ui-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2uiEXT);"))
  (define gl:-ext-api:vertex-attrib-i3ui-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3uiEXT);"))
  (define gl:-ext-api:vertex-attrib-i4ui-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4uiEXT);"))
  (define gl:-ext-api:vertex-attrib-i1iv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1ivEXT);"))
  (define gl:-ext-api:vertex-attrib-i2iv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2ivEXT);"))
  (define gl:-ext-api:vertex-attrib-i3iv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3ivEXT);"))
  (define gl:-ext-api:vertex-attrib-i4iv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4ivEXT);"))
  (define gl:-ext-api:vertex-attrib-i1uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI1uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI1uivEXT);"))
  (define gl:-ext-api:vertex-attrib-i2uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI2uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI2uivEXT);"))
  (define gl:-ext-api:vertex-attrib-i3uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI3uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI3uivEXT);"))
  (define gl:-ext-api:vertex-attrib-i4uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4uivEXT);"))
  (define gl:-ext-api:vertex-attrib-i4bv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4bvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4bvEXT);"))
  (define gl:-ext-api:vertex-attrib-i4sv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4svEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4svEXT);"))
  (define gl:-ext-api:vertex-attrib-i4ubv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4ubvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4ubvEXT);"))
  (define gl:-ext-api:vertex-attrib-i4usv-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribI4usvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribI4usvEXT);"))
  (define gl:-ext-api:vertex-attrib-ipointer-ext
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribIPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribIPointerEXT);"))
  (define gl:-ext-api:get-vertex-attrib-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribIivEXT);"))
  (define gl:-ext-api:get-vertex-attrib-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetVertexAttribIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVertexAttribIuivEXT);"))
  (define gl:-ext-api:uniform1ui-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform1uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1uiEXT);"))
  (define gl:-ext-api:uniform2ui-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform2uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2uiEXT);"))
  (define gl:-ext-api:uniform3ui-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform3uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3uiEXT);"))
  (define gl:-ext-api:uniform4ui-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform4uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4uiEXT);"))
  (define gl:-ext-api:uniform1uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform1uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform1uivEXT);"))
  (define gl:-ext-api:uniform2uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform2uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform2uivEXT);"))
  (define gl:-ext-api:uniform3uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform3uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform3uivEXT);"))
  (define gl:-ext-api:uniform4uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glUniform4uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniform4uivEXT);"))
  (define gl:-ext-api:get-uniformuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetUniformuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformuivEXT);"))
  (define gl:-ext-api:bind-frag-data-location-ext
    (foreign-lambda*
      "_ALLEGRO_glBindFragDataLocationEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindFragDataLocationEXT);"))
  (define gl:-ext-api:get-frag-data-location-ext
    (foreign-lambda*
      "_ALLEGRO_glGetFragDataLocationEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFragDataLocationEXT);"))
  (define gl:-ext-api:framebuffer-texture-layer-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferTextureLayerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferTextureLayerEXT);"))
  (define gl:-ext-api:tex-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glTexBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexBufferEXT);"))
  (define gl:-ext-api:depth-ranged-nv
    (foreign-lambda*
      "_ALLEGRO_glDepthRangedNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DepthRangedNV);"))
  (define gl:-ext-api:clear-depthd-nv
    (foreign-lambda*
      "_ALLEGRO_glClearDepthdNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClearDepthdNV);"))
  (define gl:-ext-api:depth-boundsd-nv
    (foreign-lambda*
      "_ALLEGRO_glDepthBoundsdNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DepthBoundsdNV);"))
  (define gl:-ext-api:renderbuffer-storage-multsample-coverage-nv
    (foreign-lambda*
      "_ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->RenderbufferStorageMultsampleCoverageNV);"))
  (define gl:-ext-api:program-vertex-limit-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramVertexLimitNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramVertexLimitNV);"))
  (define gl:-ext-api:program-local-parameter-i4i-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameterI4iNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameterI4iNV);"))
  (define gl:-ext-api:program-local-parameter-i4iv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameterI4ivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameterI4ivNV);"))
  (define gl:-ext-api:program-local-parameters-i4iv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParametersI4ivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParametersI4ivNV);"))
  (define gl:-ext-api:program-local-parameter-i4ui-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameterI4uiNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameterI4uiNV);"))
  (define gl:-ext-api:program-local-parameter-i4uiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParameterI4uivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParameterI4uivNV);"))
  (define gl:-ext-api:program-local-parameters-i4uiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramLocalParametersI4uivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramLocalParametersI4uivNV);"))
  (define gl:-ext-api:program-env-parameter-i4i-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameterI4iNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameterI4iNV);"))
  (define gl:-ext-api:program-env-parameter-i4iv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameterI4ivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameterI4ivNV);"))
  (define gl:-ext-api:program-env-parameters-i4iv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParametersI4ivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParametersI4ivNV);"))
  (define gl:-ext-api:program-env-parameter-i4ui-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameterI4uiNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameterI4uiNV);"))
  (define gl:-ext-api:program-env-parameter-i4uiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParameterI4uivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParameterI4uivNV);"))
  (define gl:-ext-api:program-env-parameters-i4uiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramEnvParametersI4uivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramEnvParametersI4uivNV);"))
  (define gl:-ext-api:get-program-local-parameter-iiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramLocalParameterIivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramLocalParameterIivNV);"))
  (define gl:-ext-api:get-program-local-parameter-iuiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramLocalParameterIuivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramLocalParameterIuivNV);"))
  (define gl:-ext-api:get-program-env-parameter-iiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramEnvParameterIivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramEnvParameterIivNV);"))
  (define gl:-ext-api:get-program-env-parameter-iuiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetProgramEnvParameterIuivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetProgramEnvParameterIuivNV);"))
  (define gl:-ext-api:program-buffer-parametersfv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramBufferParametersfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramBufferParametersfvNV);"))
  (define gl:-ext-api:program-buffer-parameters-iiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramBufferParametersIivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramBufferParametersIivNV);"))
  (define gl:-ext-api:program-buffer-parameters-iuiv-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramBufferParametersIuivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramBufferParametersIuivNV);"))
  (define gl:-ext-api:bind-buffer-range-nv
    (foreign-lambda*
      "_ALLEGRO_glBindBufferRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferRangeNV);"))
  (define gl:-ext-api:bind-buffer-offset-nv
    (foreign-lambda*
      "_ALLEGRO_glBindBufferOffsetNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferOffsetNV);"))
  (define gl:-ext-api:bind-buffer-base-nv
    (foreign-lambda*
      "_ALLEGRO_glBindBufferBaseNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferBaseNV);"))
  (define gl:-ext-api:transform-feedback-attribs-nv
    (foreign-lambda*
      "_ALLEGRO_glTransformFeedbackAttribsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TransformFeedbackAttribsNV);"))
  (define gl:-ext-api:transform-feedback-varyings-nv
    (foreign-lambda*
      "_ALLEGRO_glTransformFeedbackVaryingsNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TransformFeedbackVaryingsNV);"))
  (define gl:-ext-api:begin-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glBeginTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginTransformFeedbackNV);"))
  (define gl:-ext-api:end-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glEndTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndTransformFeedbackNV);"))
  (define gl:-ext-api:get-varying-location-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVaryingLocationNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVaryingLocationNV);"))
  (define gl:-ext-api:get-active-varying-nv
    (foreign-lambda*
      "_ALLEGRO_glGetActiveVaryingNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetActiveVaryingNV);"))
  (define gl:-ext-api:active-varying-nv
    (foreign-lambda*
      "_ALLEGRO_glActiveVaryingNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ActiveVaryingNV);"))
  (define gl:-ext-api:get-transform-feedback-varying-nv
    (foreign-lambda*
      "_ALLEGRO_glGetTransformFeedbackVaryingNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTransformFeedbackVaryingNV);"))
  (define gl:-ext-api:frame-terminator-gremedy
    (foreign-lambda*
      "_ALLEGRO_glFrameTerminatorGREMEDY_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FrameTerminatorGREMEDY);"))
  (define gl:-ext-api:begin-conditional-render-nv
    (foreign-lambda*
      "_ALLEGRO_glBeginConditionalRenderNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginConditionalRenderNV);"))
  (define gl:-ext-api:end-conditional-render-nv
    (foreign-lambda*
      "_ALLEGRO_glEndConditionalRenderNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndConditionalRenderNV);"))
  (define gl:-ext-api:begin-transform-feedback-ext
    (foreign-lambda*
      "_ALLEGRO_glBeginTransformFeedbackEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginTransformFeedbackEXT);"))
  (define gl:-ext-api:end-transform-feedback-ext
    (foreign-lambda*
      "_ALLEGRO_glEndTransformFeedbackEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndTransformFeedbackEXT);"))
  (define gl:-ext-api:bind-buffer-range-ext
    (foreign-lambda*
      "_ALLEGRO_glBindBufferRangeEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferRangeEXT);"))
  (define gl:-ext-api:bind-buffer-offset-ext
    (foreign-lambda*
      "_ALLEGRO_glBindBufferOffsetEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferOffsetEXT);"))
  (define gl:-ext-api:bind-buffer-base-ext
    (foreign-lambda*
      "_ALLEGRO_glBindBufferBaseEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindBufferBaseEXT);"))
  (define gl:-ext-api:transform-feedback-varyings-ext
    (foreign-lambda*
      "_ALLEGRO_glTransformFeedbackVaryingsEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TransformFeedbackVaryingsEXT);"))
  (define gl:-ext-api:get-transform-feedback-varying-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTransformFeedbackVaryingEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTransformFeedbackVaryingEXT);"))
  (define gl:-ext-api:client-attrib-default-ext
    (foreign-lambda*
      "_ALLEGRO_glClientAttribDefaultEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ClientAttribDefaultEXT);"))
  (define gl:-ext-api:push-client-attrib-default-ext
    (foreign-lambda*
      "_ALLEGRO_glPushClientAttribDefaultEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PushClientAttribDefaultEXT);"))
  (define gl:-ext-api:matrix-loadf-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixLoadfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixLoadfEXT);"))
  (define gl:-ext-api:matrix-loadd-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixLoaddEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixLoaddEXT);"))
  (define gl:-ext-api:matrix-multf-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixMultfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixMultfEXT);"))
  (define gl:-ext-api:matrix-multd-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixMultdEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixMultdEXT);"))
  (define gl:-ext-api:matrix-load-identity-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixLoadIdentityEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixLoadIdentityEXT);"))
  (define gl:-ext-api:matrix-rotatef-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixRotatefEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixRotatefEXT);"))
  (define gl:-ext-api:matrix-rotated-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixRotatedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixRotatedEXT);"))
  (define gl:-ext-api:matrix-scalef-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixScalefEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixScalefEXT);"))
  (define gl:-ext-api:matrix-scaled-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixScaledEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixScaledEXT);"))
  (define gl:-ext-api:matrix-translatef-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixTranslatefEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixTranslatefEXT);"))
  (define gl:-ext-api:matrix-translated-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixTranslatedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixTranslatedEXT);"))
  (define gl:-ext-api:matrix-frustum-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixFrustumEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixFrustumEXT);"))
  (define gl:-ext-api:matrix-ortho-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixOrthoEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixOrthoEXT);"))
  (define gl:-ext-api:matrix-pop-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixPopEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixPopEXT);"))
  (define gl:-ext-api:matrix-push-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixPushEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixPushEXT);"))
  (define gl:-ext-api:matrix-load-transposef-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixLoadTransposefEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixLoadTransposefEXT);"))
  (define gl:-ext-api:matrix-load-transposed-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixLoadTransposedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixLoadTransposedEXT);"))
  (define gl:-ext-api:matrix-mult-transposef-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixMultTransposefEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixMultTransposefEXT);"))
  (define gl:-ext-api:matrix-mult-transposed-ext
    (foreign-lambda*
      "_ALLEGRO_glMatrixMultTransposedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MatrixMultTransposedEXT);"))
  (define gl:-ext-api:texture-parameterf-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameterfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameterfEXT);"))
  (define gl:-ext-api:texture-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameterfvEXT);"))
  (define gl:-ext-api:texture-parameteri-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameteriEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameteriEXT);"))
  (define gl:-ext-api:texture-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameterivEXT);"))
  (define gl:-ext-api:texture-image1dext
    (foreign-lambda*
      "_ALLEGRO_glTextureImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureImage1DEXT);"))
  (define gl:-ext-api:texture-image2dext
    (foreign-lambda*
      "_ALLEGRO_glTextureImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureImage2DEXT);"))
  (define gl:-ext-api:texture-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glTextureSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureSubImage1DEXT);"))
  (define gl:-ext-api:texture-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glTextureSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureSubImage2DEXT);"))
  (define gl:-ext-api:copy-texture-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTextureImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTextureImage1DEXT);"))
  (define gl:-ext-api:copy-texture-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTextureImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTextureImage2DEXT);"))
  (define gl:-ext-api:copy-texture-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTextureSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTextureSubImage1DEXT);"))
  (define gl:-ext-api:copy-texture-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTextureSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTextureSubImage2DEXT);"))
  (define gl:-ext-api:get-texture-image-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureImageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureImageEXT);"))
  (define gl:-ext-api:get-texture-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureParameterfvEXT);"))
  (define gl:-ext-api:get-texture-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureParameterivEXT);"))
  (define gl:-ext-api:get-texture-level-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureLevelParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureLevelParameterfvEXT);"))
  (define gl:-ext-api:get-texture-level-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureLevelParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureLevelParameterivEXT);"))
  (define gl:-ext-api:texture-image3dext
    (foreign-lambda*
      "_ALLEGRO_glTextureImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureImage3DEXT);"))
  (define gl:-ext-api:texture-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glTextureSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureSubImage3DEXT);"))
  (define gl:-ext-api:copy-texture-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCopyTextureSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyTextureSubImage3DEXT);"))
  (define gl:-ext-api:multi-tex-parameterf-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameterfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameterfEXT);"))
  (define gl:-ext-api:multi-tex-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameterfvEXT);"))
  (define gl:-ext-api:multi-tex-parameteri-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameteriEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameteriEXT);"))
  (define gl:-ext-api:multi-tex-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameterivEXT);"))
  (define gl:-ext-api:multi-tex-image1dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexImage1DEXT);"))
  (define gl:-ext-api:multi-tex-image2dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexImage2DEXT);"))
  (define gl:-ext-api:multi-tex-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexSubImage1DEXT);"))
  (define gl:-ext-api:multi-tex-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexSubImage2DEXT);"))
  (define gl:-ext-api:copy-multi-tex-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyMultiTexImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyMultiTexImage1DEXT);"))
  (define gl:-ext-api:copy-multi-tex-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyMultiTexImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyMultiTexImage2DEXT);"))
  (define gl:-ext-api:copy-multi-tex-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCopyMultiTexSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyMultiTexSubImage1DEXT);"))
  (define gl:-ext-api:copy-multi-tex-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCopyMultiTexSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyMultiTexSubImage2DEXT);"))
  (define gl:-ext-api:get-multi-tex-image-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexImageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexImageEXT);"))
  (define gl:-ext-api:get-multi-tex-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexParameterfvEXT);"))
  (define gl:-ext-api:get-multi-tex-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexParameterivEXT);"))
  (define gl:-ext-api:get-multi-tex-level-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexLevelParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexLevelParameterfvEXT);"))
  (define gl:-ext-api:get-multi-tex-level-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexLevelParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexLevelParameterivEXT);"))
  (define gl:-ext-api:multi-tex-image3dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexImage3DEXT);"))
  (define gl:-ext-api:multi-tex-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexSubImage3DEXT);"))
  (define gl:-ext-api:copy-multi-tex-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCopyMultiTexSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CopyMultiTexSubImage3DEXT);"))
  (define gl:-ext-api:bind-multi-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glBindMultiTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindMultiTextureEXT);"))
  (define gl:-ext-api:enable-client-state-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glEnableClientStateIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableClientStateIndexedEXT);"))
  (define gl:-ext-api:disable-client-state-indexed-ext
    (foreign-lambda*
      "_ALLEGRO_glDisableClientStateIndexedEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableClientStateIndexedEXT);"))
  (define gl:-ext-api:multi-tex-coord-pointer-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexCoordPointerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexCoordPointerEXT);"))
  (define gl:-ext-api:multi-tex-envf-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexEnvfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexEnvfEXT);"))
  (define gl:-ext-api:multi-tex-envfv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexEnvfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexEnvfvEXT);"))
  (define gl:-ext-api:multi-tex-envi-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexEnviEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexEnviEXT);"))
  (define gl:-ext-api:multi-tex-enviv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexEnvivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexEnvivEXT);"))
  (define gl:-ext-api:multi-tex-gend-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGendEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGendEXT);"))
  (define gl:-ext-api:multi-tex-gendv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGendvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGendvEXT);"))
  (define gl:-ext-api:multi-tex-genf-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGenfEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGenfEXT);"))
  (define gl:-ext-api:multi-tex-genfv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGenfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGenfvEXT);"))
  (define gl:-ext-api:multi-tex-geni-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGeniEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGeniEXT);"))
  (define gl:-ext-api:multi-tex-geniv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexGenivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexGenivEXT);"))
  (define gl:-ext-api:get-multi-tex-envfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexEnvfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexEnvfvEXT);"))
  (define gl:-ext-api:get-multi-tex-enviv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexEnvivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexEnvivEXT);"))
  (define gl:-ext-api:get-multi-tex-gendv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexGendvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexGendvEXT);"))
  (define gl:-ext-api:get-multi-tex-genfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexGenfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexGenfvEXT);"))
  (define gl:-ext-api:get-multi-tex-geniv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexGenivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexGenivEXT);"))
  (define gl:-ext-api:get-float-indexedv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetFloatIndexedvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFloatIndexedvEXT);"))
  (define gl:-ext-api:get-double-indexedv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetDoubleIndexedvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetDoubleIndexedvEXT);"))
  (define gl:-ext-api:get-pointer-indexedv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetPointerIndexedvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPointerIndexedvEXT);"))
  (define gl:-ext-api:compressed-texture-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureImage3DEXT);"))
  (define gl:-ext-api:compressed-texture-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureImage2DEXT);"))
  (define gl:-ext-api:compressed-texture-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureImage1DEXT);"))
  (define gl:-ext-api:compressed-texture-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureSubImage3DEXT);"))
  (define gl:-ext-api:compressed-texture-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureSubImage2DEXT);"))
  (define gl:-ext-api:compressed-texture-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedTextureSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedTextureSubImage1DEXT);"))
  (define gl:-ext-api:get-compressed-texture-image-ext
    (foreign-lambda*
      "_ALLEGRO_glGetCompressedTextureImageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCompressedTextureImageEXT);"))
  (define gl:-ext-api:compressed-multi-tex-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexImage3DEXT);"))
  (define gl:-ext-api:compressed-multi-tex-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexImage2DEXT);"))
  (define gl:-ext-api:compressed-multi-tex-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexImage1DEXT);"))
  (define gl:-ext-api:compressed-multi-tex-sub-image3dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexSubImage3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexSubImage3DEXT);"))
  (define gl:-ext-api:compressed-multi-tex-sub-image2dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexSubImage2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexSubImage2DEXT);"))
  (define gl:-ext-api:compressed-multi-tex-sub-image1dext
    (foreign-lambda*
      "_ALLEGRO_glCompressedMultiTexSubImage1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CompressedMultiTexSubImage1DEXT);"))
  (define gl:-ext-api:get-compressed-multi-tex-image-ext
    (foreign-lambda*
      "_ALLEGRO_glGetCompressedMultiTexImageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetCompressedMultiTexImageEXT);"))
  (define gl:-ext-api:named-program-string-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramStringEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramStringEXT);"))
  (define gl:-ext-api:named-program-local-parameter4d-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameter4dEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameter4dEXT);"))
  (define gl:-ext-api:named-program-local-parameter4dv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameter4dvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameter4dvEXT);"))
  (define gl:-ext-api:named-program-local-parameter4f-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameter4fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameter4fEXT);"))
  (define gl:-ext-api:named-program-local-parameter4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameter4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameter4fvEXT);"))
  (define gl:-ext-api:get-named-program-local-parameterdv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramLocalParameterdvEXT);"))
  (define gl:-ext-api:get-named-program-local-parameterfv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramLocalParameterfvEXT);"))
  (define gl:-ext-api:get-named-programiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramivEXT);"))
  (define gl:-ext-api:get-named-program-string-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramStringEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramStringEXT);"))
  (define gl:-ext-api:named-program-local-parameters4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameters4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameters4fvEXT);"))
  (define gl:-ext-api:named-program-local-parameter-i4i-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameterI4iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameterI4iEXT);"))
  (define gl:-ext-api:named-program-local-parameter-i4iv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameterI4ivEXT);"))
  (define gl:-ext-api:named-program-local-parameters-i4iv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParametersI4ivEXT);"))
  (define gl:-ext-api:named-program-local-parameter-i4ui-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameterI4uiEXT);"))
  (define gl:-ext-api:named-program-local-parameter-i4uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParameterI4uivEXT);"))
  (define gl:-ext-api:named-program-local-parameters-i4uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedProgramLocalParametersI4uivEXT);"))
  (define gl:-ext-api:get-named-program-local-parameter-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramLocalParameterIivEXT);"))
  (define gl:-ext-api:get-named-program-local-parameter-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedProgramLocalParameterIuivEXT);"))
  (define gl:-ext-api:texture-parameter-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameterIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameterIivEXT);"))
  (define gl:-ext-api:texture-parameter-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureParameterIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureParameterIuivEXT);"))
  (define gl:-ext-api:get-texture-parameter-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureParameterIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureParameterIivEXT);"))
  (define gl:-ext-api:get-texture-parameter-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetTextureParameterIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTextureParameterIuivEXT);"))
  (define gl:-ext-api:multi-tex-parameter-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameterIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameterIivEXT);"))
  (define gl:-ext-api:multi-tex-parameter-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexParameterIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexParameterIuivEXT);"))
  (define gl:-ext-api:get-multi-tex-parameter-iiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexParameterIivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexParameterIivEXT);"))
  (define gl:-ext-api:get-multi-tex-parameter-iuiv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetMultiTexParameterIuivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultiTexParameterIuivEXT);"))
  (define gl:-ext-api:program-uniform1f-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1fEXT);"))
  (define gl:-ext-api:program-uniform2f-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2fEXT);"))
  (define gl:-ext-api:program-uniform3f-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3fEXT);"))
  (define gl:-ext-api:program-uniform4f-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4fEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4fEXT);"))
  (define gl:-ext-api:program-uniform1i-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1iEXT);"))
  (define gl:-ext-api:program-uniform2i-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2iEXT);"))
  (define gl:-ext-api:program-uniform3i-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3iEXT);"))
  (define gl:-ext-api:program-uniform4i-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4iEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4iEXT);"))
  (define gl:-ext-api:program-uniform1fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1fvEXT);"))
  (define gl:-ext-api:program-uniform2fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2fvEXT);"))
  (define gl:-ext-api:program-uniform3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3fvEXT);"))
  (define gl:-ext-api:program-uniform4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4fvEXT);"))
  (define gl:-ext-api:program-uniform1iv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1ivEXT);"))
  (define gl:-ext-api:program-uniform2iv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2ivEXT);"))
  (define gl:-ext-api:program-uniform3iv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3ivEXT);"))
  (define gl:-ext-api:program-uniform4iv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4ivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4ivEXT);"))
  (define gl:-ext-api:program-uniform-matrix2fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix2x3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2x3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2x3fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3x2fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3x2fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3x2fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix2x4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix2x4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix2x4fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4x2fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4x2fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4x2fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix3x4fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix3x4fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix3x4fvEXT);"))
  (define gl:-ext-api:program-uniform-matrix4x3fv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformMatrix4x3fvEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformMatrix4x3fvEXT);"))
  (define gl:-ext-api:program-uniform1ui-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1uiEXT);"))
  (define gl:-ext-api:program-uniform2ui-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2uiEXT);"))
  (define gl:-ext-api:program-uniform3ui-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3uiEXT);"))
  (define gl:-ext-api:program-uniform4ui-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4uiEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4uiEXT);"))
  (define gl:-ext-api:program-uniform1uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform1uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform1uivEXT);"))
  (define gl:-ext-api:program-uniform2uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform2uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform2uivEXT);"))
  (define gl:-ext-api:program-uniform3uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform3uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform3uivEXT);"))
  (define gl:-ext-api:program-uniform4uiv-ext
    (foreign-lambda*
      "_ALLEGRO_glProgramUniform4uivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniform4uivEXT);"))
  (define gl:-ext-api:named-buffer-data-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedBufferDataEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedBufferDataEXT);"))
  (define gl:-ext-api:named-buffer-sub-data-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedBufferSubDataEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedBufferSubDataEXT);"))
  (define gl:-ext-api:map-named-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glMapNamedBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapNamedBufferEXT);"))
  (define gl:-ext-api:unmap-named-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glUnmapNamedBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UnmapNamedBufferEXT);"))
  (define gl:-ext-api:get-named-buffer-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedBufferParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedBufferParameterivEXT);"))
  (define gl:-ext-api:get-named-buffer-pointerv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedBufferPointervEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedBufferPointervEXT);"))
  (define gl:-ext-api:get-named-buffer-sub-data-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedBufferSubDataEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedBufferSubDataEXT);"))
  (define gl:-ext-api:texture-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureBufferEXT);"))
  (define gl:-ext-api:multi-tex-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexBufferEXT);"))
  (define gl:-ext-api:named-renderbuffer-storage-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedRenderbufferStorageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedRenderbufferStorageEXT);"))
  (define gl:-ext-api:get-named-renderbuffer-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedRenderbufferParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedRenderbufferParameterivEXT);"))
  (define gl:-ext-api:check-named-framebuffer-status-ext
    (foreign-lambda*
      "_ALLEGRO_glCheckNamedFramebufferStatusEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CheckNamedFramebufferStatusEXT);"))
  (define gl:-ext-api:named-framebuffer-texture1dext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTexture1DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTexture1DEXT);"))
  (define gl:-ext-api:named-framebuffer-texture2dext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTexture2DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTexture2DEXT);"))
  (define gl:-ext-api:named-framebuffer-texture3dext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTexture3DEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTexture3DEXT);"))
  (define gl:-ext-api:named-framebuffer-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferRenderbufferEXT);"))
  (define gl:-ext-api:get-named-framebuffer-attachment-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedFramebufferAttachmentParameterivEXT);"))
  (define gl:-ext-api:generate-texture-mipmap-ext
    (foreign-lambda*
      "_ALLEGRO_glGenerateTextureMipmapEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenerateTextureMipmapEXT);"))
  (define gl:-ext-api:generate-multi-tex-mipmap-ext
    (foreign-lambda*
      "_ALLEGRO_glGenerateMultiTexMipmapEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenerateMultiTexMipmapEXT);"))
  (define gl:-ext-api:framebuffer-draw-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferDrawBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferDrawBufferEXT);"))
  (define gl:-ext-api:framebuffer-draw-buffers-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferDrawBuffersEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferDrawBuffersEXT);"))
  (define gl:-ext-api:framebuffer-read-buffer-ext
    (foreign-lambda*
      "_ALLEGRO_glFramebufferReadBufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FramebufferReadBufferEXT);"))
  (define gl:-ext-api:get-framebuffer-parameteriv-ext
    (foreign-lambda*
      "_ALLEGRO_glGetFramebufferParameterivEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetFramebufferParameterivEXT);"))
  (define gl:-ext-api:named-renderbuffer-storage-multisample-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedRenderbufferStorageMultisampleEXT);"))
  (define gl:-ext-api:named-renderbuffer-storage-multisample-coverage-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedRenderbufferStorageMultisampleCoverageEXT);"))
  (define gl:-ext-api:named-framebuffer-texture-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTextureEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTextureEXT);"))
  (define gl:-ext-api:named-framebuffer-texture-layer-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTextureLayerEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTextureLayerEXT);"))
  (define gl:-ext-api:named-framebuffer-texture-face-ext
    (foreign-lambda*
      "_ALLEGRO_glNamedFramebufferTextureFaceEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NamedFramebufferTextureFaceEXT);"))
  (define gl:-ext-api:texture-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glTextureRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureRenderbufferEXT);"))
  (define gl:-ext-api:multi-tex-renderbuffer-ext
    (foreign-lambda*
      "_ALLEGRO_glMultiTexRenderbufferEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MultiTexRenderbufferEXT);"))
  (define gl:-ext-api:get-multisamplefv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetMultisamplefvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetMultisamplefvNV);"))
  (define gl:-ext-api:sample-mask-indexed-nv
    (foreign-lambda*
      "_ALLEGRO_glSampleMaskIndexedNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SampleMaskIndexedNV);"))
  (define gl:-ext-api:tex-renderbuffer-nv
    (foreign-lambda*
      "_ALLEGRO_glTexRenderbufferNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexRenderbufferNV);"))
  (define gl:-ext-api:bind-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glBindTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindTransformFeedbackNV);"))
  (define gl:-ext-api:delete-transform-feedbacks-nv
    (foreign-lambda*
      "_ALLEGRO_glDeleteTransformFeedbacksNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeleteTransformFeedbacksNV);"))
  (define gl:-ext-api:gen-transform-feedbacks-nv
    (foreign-lambda*
      "_ALLEGRO_glGenTransformFeedbacksNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenTransformFeedbacksNV);"))
  (define gl:-ext-api:is-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glIsTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsTransformFeedbackNV);"))
  (define gl:-ext-api:pause-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glPauseTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->PauseTransformFeedbackNV);"))
  (define gl:-ext-api:resume-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glResumeTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ResumeTransformFeedbackNV);"))
  (define gl:-ext-api:draw-transform-feedback-nv
    (foreign-lambda*
      "_ALLEGRO_glDrawTransformFeedbackNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DrawTransformFeedbackNV);"))
  (define gl:-ext-api:get-perf-monitor-groups-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorGroupsAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorGroupsAMD);"))
  (define gl:-ext-api:get-perf-monitor-counters-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorCountersAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorCountersAMD);"))
  (define gl:-ext-api:get-perf-monitor-group-string-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorGroupStringAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorGroupStringAMD);"))
  (define gl:-ext-api:get-perf-monitor-counter-string-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorCounterStringAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorCounterStringAMD);"))
  (define gl:-ext-api:get-perf-monitor-counter-info-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorCounterInfoAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorCounterInfoAMD);"))
  (define gl:-ext-api:gen-perf-monitors-amd
    (foreign-lambda*
      "_ALLEGRO_glGenPerfMonitorsAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GenPerfMonitorsAMD);"))
  (define gl:-ext-api:delete-perf-monitors-amd
    (foreign-lambda*
      "_ALLEGRO_glDeletePerfMonitorsAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DeletePerfMonitorsAMD);"))
  (define gl:-ext-api:select-perf-monitor-counters-amd
    (foreign-lambda*
      "_ALLEGRO_glSelectPerfMonitorCountersAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SelectPerfMonitorCountersAMD);"))
  (define gl:-ext-api:begin-perf-monitor-amd
    (foreign-lambda*
      "_ALLEGRO_glBeginPerfMonitorAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginPerfMonitorAMD);"))
  (define gl:-ext-api:end-perf-monitor-amd
    (foreign-lambda*
      "_ALLEGRO_glEndPerfMonitorAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndPerfMonitorAMD);"))
  (define gl:-ext-api:get-perf-monitor-counter-data-amd
    (foreign-lambda*
      "_ALLEGRO_glGetPerfMonitorCounterDataAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetPerfMonitorCounterDataAMD);"))
  (define gl:-ext-api:tessellation-factor-amd
    (foreign-lambda*
      "_ALLEGRO_glTessellationFactorAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TessellationFactorAMD);"))
  (define gl:-ext-api:tessellation-mode-amd
    (foreign-lambda*
      "_ALLEGRO_glTessellationModeAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TessellationModeAMD);"))
  (define gl:-ext-api:provoking-vertex-ext
    (foreign-lambda*
      "_ALLEGRO_glProvokingVertexEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProvokingVertexEXT);"))
  (define gl:-ext-api:blend-func-indexed-amd
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncIndexedAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncIndexedAMD);"))
  (define gl:-ext-api:blend-func-separate-indexed-amd
    (foreign-lambda*
      "_ALLEGRO_glBlendFuncSeparateIndexedAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendFuncSeparateIndexedAMD);"))
  (define gl:-ext-api:blend-equation-indexed-amd
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationIndexedAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationIndexedAMD);"))
  (define gl:-ext-api:blend-equation-separate-indexed-amd
    (foreign-lambda*
      "_ALLEGRO_glBlendEquationSeparateIndexedAMD_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BlendEquationSeparateIndexedAMD);"))
  (define gl:-ext-api:texture-range-apple
    (foreign-lambda*
      "_ALLEGRO_glTextureRangeAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureRangeAPPLE);"))
  (define gl:-ext-api:get-tex-parameter-pointerv-apple
    (foreign-lambda*
      "_ALLEGRO_glGetTexParameterPointervAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetTexParameterPointervAPPLE);"))
  (define gl:-ext-api:enable-vertex-attrib-apple
    (foreign-lambda*
      "_ALLEGRO_glEnableVertexAttribAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EnableVertexAttribAPPLE);"))
  (define gl:-ext-api:disable-vertex-attrib-apple
    (foreign-lambda*
      "_ALLEGRO_glDisableVertexAttribAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->DisableVertexAttribAPPLE);"))
  (define gl:-ext-api:is-vertex-attrib-enabled-apple
    (foreign-lambda*
      "_ALLEGRO_glIsVertexAttribEnabledAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsVertexAttribEnabledAPPLE);"))
  (define gl:-ext-api:map-vertex-attrib1d-apple
    (foreign-lambda*
      "_ALLEGRO_glMapVertexAttrib1dAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapVertexAttrib1dAPPLE);"))
  (define gl:-ext-api:map-vertex-attrib1f-apple
    (foreign-lambda*
      "_ALLEGRO_glMapVertexAttrib1fAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapVertexAttrib1fAPPLE);"))
  (define gl:-ext-api:map-vertex-attrib2d-apple
    (foreign-lambda*
      "_ALLEGRO_glMapVertexAttrib2dAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapVertexAttrib2dAPPLE);"))
  (define gl:-ext-api:map-vertex-attrib2f-apple
    (foreign-lambda*
      "_ALLEGRO_glMapVertexAttrib2fAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MapVertexAttrib2fAPPLE);"))
  (define gl:-ext-api:object-purgeable-apple
    (foreign-lambda*
      "_ALLEGRO_glObjectPurgeableAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ObjectPurgeableAPPLE);"))
  (define gl:-ext-api:object-unpurgeable-apple
    (foreign-lambda*
      "_ALLEGRO_glObjectUnpurgeableAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ObjectUnpurgeableAPPLE);"))
  (define gl:-ext-api:get-object-parameteriv-apple
    (foreign-lambda*
      "_ALLEGRO_glGetObjectParameterivAPPLE_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetObjectParameterivAPPLE);"))
  (define gl:-ext-api:begin-video-capture-nv
    (foreign-lambda*
      "_ALLEGRO_glBeginVideoCaptureNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BeginVideoCaptureNV);"))
  (define gl:-ext-api:bind-video-capture-stream-buffer-nv
    (foreign-lambda*
      "_ALLEGRO_glBindVideoCaptureStreamBufferNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVideoCaptureStreamBufferNV);"))
  (define gl:-ext-api:bind-video-capture-stream-texture-nv
    (foreign-lambda*
      "_ALLEGRO_glBindVideoCaptureStreamTextureNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BindVideoCaptureStreamTextureNV);"))
  (define gl:-ext-api:end-video-capture-nv
    (foreign-lambda*
      "_ALLEGRO_glEndVideoCaptureNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EndVideoCaptureNV);"))
  (define gl:-ext-api:get-video-captureiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVideoCaptureivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVideoCaptureivNV);"))
  (define gl:-ext-api:get-video-capture-streamiv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVideoCaptureStreamivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVideoCaptureStreamivNV);"))
  (define gl:-ext-api:get-video-capture-streamfv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVideoCaptureStreamfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVideoCaptureStreamfvNV);"))
  (define gl:-ext-api:get-video-capture-streamdv-nv
    (foreign-lambda*
      "_ALLEGRO_glGetVideoCaptureStreamdvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetVideoCaptureStreamdvNV);"))
  (define gl:-ext-api:video-capture-nv
    (foreign-lambda*
      "_ALLEGRO_glVideoCaptureNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VideoCaptureNV);"))
  (define gl:-ext-api:video-capture-stream-parameteriv-nv
    (foreign-lambda*
      "_ALLEGRO_glVideoCaptureStreamParameterivNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VideoCaptureStreamParameterivNV);"))
  (define gl:-ext-api:video-capture-stream-parameterfv-nv
    (foreign-lambda*
      "_ALLEGRO_glVideoCaptureStreamParameterfvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VideoCaptureStreamParameterfvNV);"))
  (define gl:-ext-api:video-capture-stream-parameterdv-nv
    (foreign-lambda*
      "_ALLEGRO_glVideoCaptureStreamParameterdvNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VideoCaptureStreamParameterdvNV);"))
  (define gl:-ext-api:use-shader-program-ext
    (foreign-lambda*
      "_ALLEGRO_glUseShaderProgramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->UseShaderProgramEXT);"))
  (define gl:-ext-api:active-program-ext
    (foreign-lambda*
      "_ALLEGRO_glActiveProgramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ActiveProgramEXT);"))
  (define gl:-ext-api:create-shader-program-ext
    (foreign-lambda*
      "_ALLEGRO_glCreateShaderProgramEXT_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->CreateShaderProgramEXT);"))
  (define gl:-ext-api:make-buffer-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glMakeBufferResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MakeBufferResidentNV);"))
  (define gl:-ext-api:make-buffer-non-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glMakeBufferNonResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MakeBufferNonResidentNV);"))
  (define gl:-ext-api:is-buffer-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glIsBufferResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsBufferResidentNV);"))
  (define gl:-ext-api:make-named-buffer-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glMakeNamedBufferResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MakeNamedBufferResidentNV);"))
  (define gl:-ext-api:make-named-buffer-non-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glMakeNamedBufferNonResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->MakeNamedBufferNonResidentNV);"))
  (define gl:-ext-api:is-named-buffer-resident-nv
    (foreign-lambda*
      "_ALLEGRO_glIsNamedBufferResidentNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IsNamedBufferResidentNV);"))
  (define gl:-ext-api:get-buffer-parameterui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glGetBufferParameterui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetBufferParameterui64vNV);"))
  (define gl:-ext-api:get-named-buffer-parameterui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glGetNamedBufferParameterui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetNamedBufferParameterui64vNV);"))
  (define gl:-ext-api:get-integerui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glGetIntegerui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetIntegerui64vNV);"))
  (define gl:-ext-api:uniformui64nv
    (foreign-lambda*
      "_ALLEGRO_glUniformui64NV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniformui64NV);"))
  (define gl:-ext-api:uniformui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glUniformui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->Uniformui64vNV);"))
  (define gl:-ext-api:get-uniformui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glGetUniformui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetUniformui64vNV);"))
  (define gl:-ext-api:program-uniformui64nv
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformui64NV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformui64NV);"))
  (define gl:-ext-api:program-uniformui64v-nv
    (foreign-lambda*
      "_ALLEGRO_glProgramUniformui64vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ProgramUniformui64vNV);"))
  (define gl:-ext-api:buffer-address-range-nv
    (foreign-lambda*
      "_ALLEGRO_glBufferAddressRangeNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->BufferAddressRangeNV);"))
  (define gl:-ext-api:vertex-format-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexFormatNV);"))
  (define gl:-ext-api:normal-format-nv
    (foreign-lambda*
      "_ALLEGRO_glNormalFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->NormalFormatNV);"))
  (define gl:-ext-api:color-format-nv
    (foreign-lambda*
      "_ALLEGRO_glColorFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->ColorFormatNV);"))
  (define gl:-ext-api:index-format-nv
    (foreign-lambda*
      "_ALLEGRO_glIndexFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->IndexFormatNV);"))
  (define gl:-ext-api:tex-coord-format-nv
    (foreign-lambda*
      "_ALLEGRO_glTexCoordFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TexCoordFormatNV);"))
  (define gl:-ext-api:edge-flag-format-nv
    (foreign-lambda*
      "_ALLEGRO_glEdgeFlagFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->EdgeFlagFormatNV);"))
  (define gl:-ext-api:secondary-color-format-nv
    (foreign-lambda*
      "_ALLEGRO_glSecondaryColorFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->SecondaryColorFormatNV);"))
  (define gl:-ext-api:fog-coord-format-nv
    (foreign-lambda*
      "_ALLEGRO_glFogCoordFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->FogCoordFormatNV);"))
  (define gl:-ext-api:vertex-attrib-format-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribFormatNV);"))
  (define gl:-ext-api:vertex-attrib-iformat-nv
    (foreign-lambda*
      "_ALLEGRO_glVertexAttribIFormatNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->VertexAttribIFormatNV);"))
  (define gl:-ext-api:get-integerui64i-v-nv
    (foreign-lambda*
      "_ALLEGRO_glGetIntegerui64i_vNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->GetIntegerui64i_vNV);"))
  (define gl:-ext-api:texture-barrier-nv
    (foreign-lambda*
      "_ALLEGRO_glTextureBarrierNV_t"
      (((c-pointer (struct "ALLEGRO_OGL_EXT_API")) s))
      "return(s->TextureBarrierNV);"))
  (define make-allegro-ogl-ext-api
    (foreign-lambda*
      (c-pointer (struct "ALLEGRO_OGL_EXT_API"))
      (("_ALLEGRO_glBlendColor_t" BlendColor)
       ("_ALLEGRO_glBlendEquation_t" BlendEquation)
       ("_ALLEGRO_glDrawRangeElements_t" DrawRangeElements)
       ("_ALLEGRO_glColorTable_t" ColorTable)
       ("_ALLEGRO_glColorTableParameterfv_t" ColorTableParameterfv)
       ("_ALLEGRO_glColorTableParameteriv_t" ColorTableParameteriv)
       ("_ALLEGRO_glCopyColorTable_t" CopyColorTable)
       ("_ALLEGRO_glGetColorTable_t" GetColorTable)
       ("_ALLEGRO_glGetColorTableParameterfv_t" GetColorTableParameterfv)
       ("_ALLEGRO_glGetColorTableParameteriv_t" GetColorTableParameteriv)
       ("_ALLEGRO_glColorSubTable_t" ColorSubTable)
       ("_ALLEGRO_glCopyColorSubTable_t" CopyColorSubTable)
       ("_ALLEGRO_glTexImage3D_t" TexImage3D)
       ("_ALLEGRO_glTexSubImage3D_t" TexSubImage3D)
       ("_ALLEGRO_glCopyTexSubImage3D_t" CopyTexSubImage3D)
       ("_ALLEGRO_glConvolutionFilter1D_t" ConvolutionFilter1D)
       ("_ALLEGRO_glConvolutionFilter2D_t" ConvolutionFilter2D)
       ("_ALLEGRO_glConvolutionParameterf_t" ConvolutionParameterf)
       ("_ALLEGRO_glConvolutionParameterfv_t" ConvolutionParameterfv)
       ("_ALLEGRO_glConvolutionParameteri_t" ConvolutionParameteri)
       ("_ALLEGRO_glConvolutionParameteriv_t" ConvolutionParameteriv)
       ("_ALLEGRO_glCopyConvolutionFilter1D_t" CopyConvolutionFilter1D)
       ("_ALLEGRO_glCopyConvolutionFilter2D_t" CopyConvolutionFilter2D)
       ("_ALLEGRO_glGetConvolutionFilter_t" GetConvolutionFilter)
       ("_ALLEGRO_glGetConvolutionParameterfv_t" GetConvolutionParameterfv)
       ("_ALLEGRO_glGetConvolutionParameteriv_t" GetConvolutionParameteriv)
       ("_ALLEGRO_glGetSeparableFilter_t" GetSeparableFilter)
       ("_ALLEGRO_glSeparableFilter2D_t" SeparableFilter2D)
       ("_ALLEGRO_glGetHistogram_t" GetHistogram)
       ("_ALLEGRO_glGetHistogramParameterfv_t" GetHistogramParameterfv)
       ("_ALLEGRO_glGetHistogramParameteriv_t" GetHistogramParameteriv)
       ("_ALLEGRO_glGetMinmax_t" GetMinmax)
       ("_ALLEGRO_glGetMinmaxParameterfv_t" GetMinmaxParameterfv)
       ("_ALLEGRO_glGetMinmaxParameteriv_t" GetMinmaxParameteriv)
       ("_ALLEGRO_glHistogram_t" Histogram)
       ("_ALLEGRO_glMinmax_t" Minmax)
       ("_ALLEGRO_glResetHistogram_t" ResetHistogram)
       ("_ALLEGRO_glResetMinmax_t" ResetMinmax)
       ("_ALLEGRO_glActiveTexture_t" ActiveTexture)
       ("_ALLEGRO_glClientActiveTexture_t" ClientActiveTexture)
       ("_ALLEGRO_glMultiTexCoord1d_t" MultiTexCoord1d)
       ("_ALLEGRO_glMultiTexCoord1dv_t" MultiTexCoord1dv)
       ("_ALLEGRO_glMultiTexCoord1f_t" MultiTexCoord1f)
       ("_ALLEGRO_glMultiTexCoord1fv_t" MultiTexCoord1fv)
       ("_ALLEGRO_glMultiTexCoord1i_t" MultiTexCoord1i)
       ("_ALLEGRO_glMultiTexCoord1iv_t" MultiTexCoord1iv)
       ("_ALLEGRO_glMultiTexCoord1s_t" MultiTexCoord1s)
       ("_ALLEGRO_glMultiTexCoord1sv_t" MultiTexCoord1sv)
       ("_ALLEGRO_glMultiTexCoord2d_t" MultiTexCoord2d)
       ("_ALLEGRO_glMultiTexCoord2dv_t" MultiTexCoord2dv)
       ("_ALLEGRO_glMultiTexCoord2f_t" MultiTexCoord2f)
       ("_ALLEGRO_glMultiTexCoord2fv_t" MultiTexCoord2fv)
       ("_ALLEGRO_glMultiTexCoord2i_t" MultiTexCoord2i)
       ("_ALLEGRO_glMultiTexCoord2iv_t" MultiTexCoord2iv)
       ("_ALLEGRO_glMultiTexCoord2s_t" MultiTexCoord2s)
       ("_ALLEGRO_glMultiTexCoord2sv_t" MultiTexCoord2sv)
       ("_ALLEGRO_glMultiTexCoord3d_t" MultiTexCoord3d)
       ("_ALLEGRO_glMultiTexCoord3dv_t" MultiTexCoord3dv)
       ("_ALLEGRO_glMultiTexCoord3f_t" MultiTexCoord3f)
       ("_ALLEGRO_glMultiTexCoord3fv_t" MultiTexCoord3fv)
       ("_ALLEGRO_glMultiTexCoord3i_t" MultiTexCoord3i)
       ("_ALLEGRO_glMultiTexCoord3iv_t" MultiTexCoord3iv)
       ("_ALLEGRO_glMultiTexCoord3s_t" MultiTexCoord3s)
       ("_ALLEGRO_glMultiTexCoord3sv_t" MultiTexCoord3sv)
       ("_ALLEGRO_glMultiTexCoord4d_t" MultiTexCoord4d)
       ("_ALLEGRO_glMultiTexCoord4dv_t" MultiTexCoord4dv)
       ("_ALLEGRO_glMultiTexCoord4f_t" MultiTexCoord4f)
       ("_ALLEGRO_glMultiTexCoord4fv_t" MultiTexCoord4fv)
       ("_ALLEGRO_glMultiTexCoord4i_t" MultiTexCoord4i)
       ("_ALLEGRO_glMultiTexCoord4iv_t" MultiTexCoord4iv)
       ("_ALLEGRO_glMultiTexCoord4s_t" MultiTexCoord4s)
       ("_ALLEGRO_glMultiTexCoord4sv_t" MultiTexCoord4sv)
       ("_ALLEGRO_glLoadTransposeMatrixf_t" LoadTransposeMatrixf)
       ("_ALLEGRO_glLoadTransposeMatrixd_t" LoadTransposeMatrixd)
       ("_ALLEGRO_glMultTransposeMatrixf_t" MultTransposeMatrixf)
       ("_ALLEGRO_glMultTransposeMatrixd_t" MultTransposeMatrixd)
       ("_ALLEGRO_glSampleCoverage_t" SampleCoverage)
       ("_ALLEGRO_glCompressedTexImage3D_t" CompressedTexImage3D)
       ("_ALLEGRO_glCompressedTexImage2D_t" CompressedTexImage2D)
       ("_ALLEGRO_glCompressedTexImage1D_t" CompressedTexImage1D)
       ("_ALLEGRO_glCompressedTexSubImage3D_t" CompressedTexSubImage3D)
       ("_ALLEGRO_glCompressedTexSubImage2D_t" CompressedTexSubImage2D)
       ("_ALLEGRO_glCompressedTexSubImage1D_t" CompressedTexSubImage1D)
       ("_ALLEGRO_glGetCompressedTexImage_t" GetCompressedTexImage)
       ("_ALLEGRO_glBlendFuncSeparate_t" BlendFuncSeparate)
       ("_ALLEGRO_glFogCoordf_t" FogCoordf)
       ("_ALLEGRO_glFogCoordfv_t" FogCoordfv)
       ("_ALLEGRO_glFogCoordd_t" FogCoordd)
       ("_ALLEGRO_glFogCoorddv_t" FogCoorddv)
       ("_ALLEGRO_glFogCoordPointer_t" FogCoordPointer)
       ("_ALLEGRO_glMultiDrawArrays_t" MultiDrawArrays)
       ("_ALLEGRO_glMultiDrawElements_t" MultiDrawElements)
       ("_ALLEGRO_glPointParameterf_t" PointParameterf)
       ("_ALLEGRO_glPointParameterfv_t" PointParameterfv)
       ("_ALLEGRO_glPointParameteri_t" PointParameteri)
       ("_ALLEGRO_glPointParameteriv_t" PointParameteriv)
       ("_ALLEGRO_glSecondaryColor3b_t" SecondaryColor3b)
       ("_ALLEGRO_glSecondaryColor3bv_t" SecondaryColor3bv)
       ("_ALLEGRO_glSecondaryColor3d_t" SecondaryColor3d)
       ("_ALLEGRO_glSecondaryColor3dv_t" SecondaryColor3dv)
       ("_ALLEGRO_glSecondaryColor3f_t" SecondaryColor3f)
       ("_ALLEGRO_glSecondaryColor3fv_t" SecondaryColor3fv)
       ("_ALLEGRO_glSecondaryColor3i_t" SecondaryColor3i)
       ("_ALLEGRO_glSecondaryColor3iv_t" SecondaryColor3iv)
       ("_ALLEGRO_glSecondaryColor3s_t" SecondaryColor3s)
       ("_ALLEGRO_glSecondaryColor3sv_t" SecondaryColor3sv)
       ("_ALLEGRO_glSecondaryColor3ub_t" SecondaryColor3ub)
       ("_ALLEGRO_glSecondaryColor3ubv_t" SecondaryColor3ubv)
       ("_ALLEGRO_glSecondaryColor3ui_t" SecondaryColor3ui)
       ("_ALLEGRO_glSecondaryColor3uiv_t" SecondaryColor3uiv)
       ("_ALLEGRO_glSecondaryColor3us_t" SecondaryColor3us)
       ("_ALLEGRO_glSecondaryColor3usv_t" SecondaryColor3usv)
       ("_ALLEGRO_glSecondaryColorPointer_t" SecondaryColorPointer)
       ("_ALLEGRO_glWindowPos2d_t" WindowPos2d)
       ("_ALLEGRO_glWindowPos2dv_t" WindowPos2dv)
       ("_ALLEGRO_glWindowPos2f_t" WindowPos2f)
       ("_ALLEGRO_glWindowPos2fv_t" WindowPos2fv)
       ("_ALLEGRO_glWindowPos2i_t" WindowPos2i)
       ("_ALLEGRO_glWindowPos2iv_t" WindowPos2iv)
       ("_ALLEGRO_glWindowPos2s_t" WindowPos2s)
       ("_ALLEGRO_glWindowPos2sv_t" WindowPos2sv)
       ("_ALLEGRO_glWindowPos3d_t" WindowPos3d)
       ("_ALLEGRO_glWindowPos3dv_t" WindowPos3dv)
       ("_ALLEGRO_glWindowPos3f_t" WindowPos3f)
       ("_ALLEGRO_glWindowPos3fv_t" WindowPos3fv)
       ("_ALLEGRO_glWindowPos3i_t" WindowPos3i)
       ("_ALLEGRO_glWindowPos3iv_t" WindowPos3iv)
       ("_ALLEGRO_glWindowPos3s_t" WindowPos3s)
       ("_ALLEGRO_glWindowPos3sv_t" WindowPos3sv)
       ("_ALLEGRO_glBindBuffer_t" BindBuffer)
       ("_ALLEGRO_glDeleteBuffers_t" DeleteBuffers)
       ("_ALLEGRO_glGenBuffers_t" GenBuffers)
       ("_ALLEGRO_glIsBuffer_t" IsBuffer)
       ("_ALLEGRO_glBufferData_t" BufferData)
       ("_ALLEGRO_glBufferSubData_t" BufferSubData)
       ("_ALLEGRO_glGetBufferSubData_t" GetBufferSubData)
       ("_ALLEGRO_glMapBuffer_t" MapBuffer)
       ("_ALLEGRO_glUnmapBuffer_t" UnmapBuffer)
       ("_ALLEGRO_glGetBufferParameteriv_t" GetBufferParameteriv)
       ("_ALLEGRO_glGetBufferPointerv_t" GetBufferPointerv)
       ("_ALLEGRO_glGenQueries_t" GenQueries)
       ("_ALLEGRO_glDeleteQueries_t" DeleteQueries)
       ("_ALLEGRO_glIsQuery_t" IsQuery)
       ("_ALLEGRO_glBeginQuery_t" BeginQuery)
       ("_ALLEGRO_glEndQuery_t" EndQuery)
       ("_ALLEGRO_glGetQueryiv_t" GetQueryiv)
       ("_ALLEGRO_glGetQueryObjectiv_t" GetQueryObjectiv)
       ("_ALLEGRO_glGetQueryObjectuiv_t" GetQueryObjectuiv)
       ("_ALLEGRO_glBlendEquationSeparate_t" BlendEquationSeparate)
       ("_ALLEGRO_glCreateProgram_t" CreateProgram)
       ("_ALLEGRO_glCreateShader_t" CreateShader)
       ("_ALLEGRO_glDeleteProgram_t" DeleteProgram)
       ("_ALLEGRO_glDeleteShader_t" DeleteShader)
       ("_ALLEGRO_glAttachShader_t" AttachShader)
       ("_ALLEGRO_glDetachShader_t" DetachShader)
       ("_ALLEGRO_glShaderSource_t" ShaderSource)
       ("_ALLEGRO_glCompileShader_t" CompileShader)
       ("_ALLEGRO_glIsProgram_t" IsProgram)
       ("_ALLEGRO_glIsShader_t" IsShader)
       ("_ALLEGRO_glLinkProgram_t" LinkProgram)
       ("_ALLEGRO_glUseProgram_t" UseProgram)
       ("_ALLEGRO_glValidateProgram_t" ValidateProgram)
       ("_ALLEGRO_glUniform1f_t" Uniform1f)
       ("_ALLEGRO_glUniform2f_t" Uniform2f)
       ("_ALLEGRO_glUniform3f_t" Uniform3f)
       ("_ALLEGRO_glUniform4f_t" Uniform4f)
       ("_ALLEGRO_glUniform1i_t" Uniform1i)
       ("_ALLEGRO_glUniform2i_t" Uniform2i)
       ("_ALLEGRO_glUniform3i_t" Uniform3i)
       ("_ALLEGRO_glUniform4i_t" Uniform4i)
       ("_ALLEGRO_glUniform1fv_t" Uniform1fv)
       ("_ALLEGRO_glUniform2fv_t" Uniform2fv)
       ("_ALLEGRO_glUniform3fv_t" Uniform3fv)
       ("_ALLEGRO_glUniform4fv_t" Uniform4fv)
       ("_ALLEGRO_glUniform1iv_t" Uniform1iv)
       ("_ALLEGRO_glUniform2iv_t" Uniform2iv)
       ("_ALLEGRO_glUniform3iv_t" Uniform3iv)
       ("_ALLEGRO_glUniform4iv_t" Uniform4iv)
       ("_ALLEGRO_glUniformMatrix2fv_t" UniformMatrix2fv)
       ("_ALLEGRO_glUniformMatrix3fv_t" UniformMatrix3fv)
       ("_ALLEGRO_glUniformMatrix4fv_t" UniformMatrix4fv)
       ("_ALLEGRO_glGetShaderfv_t" GetShaderfv)
       ("_ALLEGRO_glGetShaderiv_t" GetShaderiv)
       ("_ALLEGRO_glGetProgramfv_t" GetProgramfv)
       ("_ALLEGRO_glGetProgramiv_t" GetProgramiv)
       ("_ALLEGRO_glGetShaderInfoLog_t" GetShaderInfoLog)
       ("_ALLEGRO_glGetProgramInfoLog_t" GetProgramInfoLog)
       ("_ALLEGRO_glGetAttachedShaders_t" GetAttachedShaders)
       ("_ALLEGRO_glGetUniformLocation_t" GetUniformLocation)
       ("_ALLEGRO_glGetActiveUniform_t" GetActiveUniform)
       ("_ALLEGRO_glGetUniformfv_t" GetUniformfv)
       ("_ALLEGRO_glGetUniformiv_t" GetUniformiv)
       ("_ALLEGRO_glGetShaderSource_t" GetShaderSource)
       ("_ALLEGRO_glVertexAttrib1f_t" VertexAttrib1f)
       ("_ALLEGRO_glVertexAttrib1s_t" VertexAttrib1s)
       ("_ALLEGRO_glVertexAttrib1d_t" VertexAttrib1d)
       ("_ALLEGRO_glVertexAttrib2f_t" VertexAttrib2f)
       ("_ALLEGRO_glVertexAttrib2s_t" VertexAttrib2s)
       ("_ALLEGRO_glVertexAttrib2d_t" VertexAttrib2d)
       ("_ALLEGRO_glVertexAttrib3f_t" VertexAttrib3f)
       ("_ALLEGRO_glVertexAttrib3s_t" VertexAttrib3s)
       ("_ALLEGRO_glVertexAttrib3d_t" VertexAttrib3d)
       ("_ALLEGRO_glVertexAttrib4f_t" VertexAttrib4f)
       ("_ALLEGRO_glVertexAttrib4s_t" VertexAttrib4s)
       ("_ALLEGRO_glVertexAttrib4d_t" VertexAttrib4d)
       ("_ALLEGRO_glVertexAttrib4Nub_t" VertexAttrib4Nub)
       ("_ALLEGRO_glVertexAttrib1fv_t" VertexAttrib1fv)
       ("_ALLEGRO_glVertexAttrib1sv_t" VertexAttrib1sv)
       ("_ALLEGRO_glVertexAttrib1dv_t" VertexAttrib1dv)
       ("_ALLEGRO_glVertexAttrib2fv_t" VertexAttrib2fv)
       ("_ALLEGRO_glVertexAttrib2sv_t" VertexAttrib2sv)
       ("_ALLEGRO_glVertexAttrib2dv_t" VertexAttrib2dv)
       ("_ALLEGRO_glVertexAttrib3fv_t" VertexAttrib3fv)
       ("_ALLEGRO_glVertexAttrib3sv_t" VertexAttrib3sv)
       ("_ALLEGRO_glVertexAttrib3dv_t" VertexAttrib3dv)
       ("_ALLEGRO_glVertexAttrib4fv_t" VertexAttrib4fv)
       ("_ALLEGRO_glVertexAttrib4sv_t" VertexAttrib4sv)
       ("_ALLEGRO_glVertexAttrib4dv_t" VertexAttrib4dv)
       ("_ALLEGRO_glVertexAttrib4iv_t" VertexAttrib4iv)
       ("_ALLEGRO_glVertexAttrib4bv_t" VertexAttrib4bv)
       ("_ALLEGRO_glVertexAttrib4ubv_t" VertexAttrib4ubv)
       ("_ALLEGRO_glVertexAttrib4usv_t" VertexAttrib4usv)
       ("_ALLEGRO_glVertexAttrib4uiv_t" VertexAttrib4uiv)
       ("_ALLEGRO_glVertexAttrib4Nbv_t" VertexAttrib4Nbv)
       ("_ALLEGRO_glVertexAttrib4Nsv_t" VertexAttrib4Nsv)
       ("_ALLEGRO_glVertexAttrib4Niv_t" VertexAttrib4Niv)
       ("_ALLEGRO_glVertexAttrib4Nubv_t" VertexAttrib4Nubv)
       ("_ALLEGRO_glVertexAttrib4Nusv_t" VertexAttrib4Nusv)
       ("_ALLEGRO_glVertexAttrib4Nuiv_t" VertexAttrib4Nuiv)
       ("_ALLEGRO_glVertexAttribPointer_t" VertexAttribPointer)
       ("_ALLEGRO_glEnableVertexAttribArray_t" EnableVertexAttribArray)
       ("_ALLEGRO_glDisableVertexAttribArray_t" DisableVertexAttribArray)
       ("_ALLEGRO_glBindAttribLocation_t" BindAttribLocation)
       ("_ALLEGRO_glGetActiveAttrib_t" GetActiveAttrib)
       ("_ALLEGRO_glGetAttribLocation_t" GetAttribLocation)
       ("_ALLEGRO_glGetVertexAttribdv_t" GetVertexAttribdv)
       ("_ALLEGRO_glGetVertexAttribfv_t" GetVertexAttribfv)
       ("_ALLEGRO_glGetVertexAttribiv_t" GetVertexAttribiv)
       ("_ALLEGRO_glGetVertexAttribPointerv_t" GetVertexAttribPointerv)
       ("_ALLEGRO_glDrawBuffers_t" DrawBuffers)
       ("_ALLEGRO_glStencilOpSeparate_t" StencilOpSeparate)
       ("_ALLEGRO_glStencilFuncSeparate_t" StencilFuncSeparate)
       ("_ALLEGRO_glStencilMaskSeparate_t" StencilMaskSeparate)
       ("_ALLEGRO_glUniformMatrix2x3fv_t" UniformMatrix2x3fv)
       ("_ALLEGRO_glUniformMatrix3x2fv_t" UniformMatrix3x2fv)
       ("_ALLEGRO_glUniformMatrix2x4fv_t" UniformMatrix2x4fv)
       ("_ALLEGRO_glUniformMatrix4x2fv_t" UniformMatrix4x2fv)
       ("_ALLEGRO_glUniformMatrix3x4fv_t" UniformMatrix3x4fv)
       ("_ALLEGRO_glUniformMatrix4x3fv_t" UniformMatrix4x3fv)
       ("_ALLEGRO_glColorMaski_t" ColorMaski)
       ("_ALLEGRO_glGetBooleani_v_t" GetBooleani_v)
       ("_ALLEGRO_glGetIntegeri_v_t" GetIntegeri_v)
       ("_ALLEGRO_glEnablei_t" Enablei)
       ("_ALLEGRO_glDisablei_t" Disablei)
       ("_ALLEGRO_glIsEnabledi_t" IsEnabledi)
       ("_ALLEGRO_glBeginTransformFeedback_t" BeginTransformFeedback)
       ("_ALLEGRO_glEndTransformFeedback_t" EndTransformFeedback)
       ("_ALLEGRO_glBindBufferRange_t" BindBufferRange)
       ("_ALLEGRO_glBindBufferBase_t" BindBufferBase)
       ("_ALLEGRO_glTransformFeedbackVaryings_t" TransformFeedbackVaryings)
       ("_ALLEGRO_glGetTransformFeedbackVarying_t" GetTransformFeedbackVarying)
       ("_ALLEGRO_glClampColor_t" ClampColor)
       ("_ALLEGRO_glBeginConditionalRender_t" BeginConditionalRender)
       ("_ALLEGRO_glEndConditionalRender_t" EndConditionalRender)
       ("_ALLEGRO_glVertexAttribI1i_t" VertexAttribI1i)
       ("_ALLEGRO_glVertexAttribI2i_t" VertexAttribI2i)
       ("_ALLEGRO_glVertexAttribI3i_t" VertexAttribI3i)
       ("_ALLEGRO_glVertexAttribI4i_t" VertexAttribI4i)
       ("_ALLEGRO_glVertexAttribI1ui_t" VertexAttribI1ui)
       ("_ALLEGRO_glVertexAttribI2ui_t" VertexAttribI2ui)
       ("_ALLEGRO_glVertexAttribI3ui_t" VertexAttribI3ui)
       ("_ALLEGRO_glVertexAttribI4ui_t" VertexAttribI4ui)
       ("_ALLEGRO_glVertexAttribI1iv_t" VertexAttribI1iv)
       ("_ALLEGRO_glVertexAttribI2iv_t" VertexAttribI2iv)
       ("_ALLEGRO_glVertexAttribI3iv_t" VertexAttribI3iv)
       ("_ALLEGRO_glVertexAttribI4iv_t" VertexAttribI4iv)
       ("_ALLEGRO_glVertexAttribI1uiv_t" VertexAttribI1uiv)
       ("_ALLEGRO_glVertexAttribI2uiv_t" VertexAttribI2uiv)
       ("_ALLEGRO_glVertexAttribI3uiv_t" VertexAttribI3uiv)
       ("_ALLEGRO_glVertexAttribI4uiv_t" VertexAttribI4uiv)
       ("_ALLEGRO_glVertexAttribI4bv_t" VertexAttribI4bv)
       ("_ALLEGRO_glVertexAttribI4sv_t" VertexAttribI4sv)
       ("_ALLEGRO_glVertexAttribI4ubv_t" VertexAttribI4ubv)
       ("_ALLEGRO_glVertexAttribI4usv_t" VertexAttribI4usv)
       ("_ALLEGRO_glVertexAttribIPointer_t" VertexAttribIPointer)
       ("_ALLEGRO_glGetVertexAttribIiv_t" GetVertexAttribIiv)
       ("_ALLEGRO_glGetVertexAttribIuiv_t" GetVertexAttribIuiv)
       ("_ALLEGRO_glGetUniformuiv_t" GetUniformuiv)
       ("_ALLEGRO_glBindFragDataLocation_t" BindFragDataLocation)
       ("_ALLEGRO_glGetFragDataLocation_t" GetFragDataLocation)
       ("_ALLEGRO_glUniform1ui_t" Uniform1ui)
       ("_ALLEGRO_glUniform2ui_t" Uniform2ui)
       ("_ALLEGRO_glUniform3ui_t" Uniform3ui)
       ("_ALLEGRO_glUniform4ui_t" Uniform4ui)
       ("_ALLEGRO_glUniform1uiv_t" Uniform1uiv)
       ("_ALLEGRO_glUniform2uiv_t" Uniform2uiv)
       ("_ALLEGRO_glUniform3uiv_t" Uniform3uiv)
       ("_ALLEGRO_glUniform4uiv_t" Uniform4uiv)
       ("_ALLEGRO_glTexParameterIiv_t" TexParameterIiv)
       ("_ALLEGRO_glTexParameterIuiv_t" TexParameterIuiv)
       ("_ALLEGRO_glGetTexParameterIiv_t" GetTexParameterIiv)
       ("_ALLEGRO_glGetTexParameterIuiv_t" GetTexParameterIuiv)
       ("_ALLEGRO_glClearBufferiv_t" ClearBufferiv)
       ("_ALLEGRO_glClearBufferuiv_t" ClearBufferuiv)
       ("_ALLEGRO_glClearBufferfv_t" ClearBufferfv)
       ("_ALLEGRO_glClearBufferfi_t" ClearBufferfi)
       ("_ALLEGRO_glGetStringi_t" GetStringi)
       ("_ALLEGRO_glDrawArraysInstanced_t" DrawArraysInstanced)
       ("_ALLEGRO_glDrawElementsInstanced_t" DrawElementsInstanced)
       ("_ALLEGRO_glTexBuffer_t" TexBuffer)
       ("_ALLEGRO_glPrimitiveRestartIndex_t" PrimitiveRestartIndex)
       ("_ALLEGRO_glGetInteger64i_v_t" GetInteger64i_v)
       ("_ALLEGRO_glGetBufferParameteri64v_t" GetBufferParameteri64v)
       ("_ALLEGRO_glProgramParameteri_t" ProgramParameteri)
       ("_ALLEGRO_glFramebufferTexture_t" FramebufferTexture)
       ("_ALLEGRO_glClearBufferData_t" ClearBufferData)
       ("_ALLEGRO_glClearBufferSubData_t" ClearBufferSubData)
       ("_ALLEGRO_glDispatchCompute_t" DispatchCompute)
       ("_ALLEGRO_glDispatchComputeIndirect_t" DispatchComputeIndirect)
       ("_ALLEGRO_glCopyImageSubData_t" CopyImageSubData)
       ("_ALLEGRO_glFramebufferParameteri_t" FramebufferParameteri)
       ("_ALLEGRO_glGetFramebufferParameteriv_t" GetFramebufferParameteriv)
       ("_ALLEGRO_glGetInternalformati64v_t" GetInternalformati64v)
       ("_ALLEGRO_glInvalidateTexSubImage_t" InvalidateTexSubImage)
       ("_ALLEGRO_glInvalidateTexImage_t" InvalidateTexImage)
       ("_ALLEGRO_glInvalidateBufferSubData_t" InvalidateBufferSubData)
       ("_ALLEGRO_glInvalidateBufferData_t" InvalidateBufferData)
       ("_ALLEGRO_glInvalidateFramebuffer_t" InvalidateFramebuffer)
       ("_ALLEGRO_glInvalidateSubFramebuffer_t" InvalidateSubFramebuffer)
       ("_ALLEGRO_glMultiDrawArraysIndirect_t" MultiDrawArraysIndirect)
       ("_ALLEGRO_glMultiDrawElementsIndirect_t" MultiDrawElementsIndirect)
       ("_ALLEGRO_glGetProgramInterfaceiv_t" GetProgramInterfaceiv)
       ("_ALLEGRO_glGetProgramResourceIndex_t" GetProgramResourceIndex)
       ("_ALLEGRO_glGetProgramResourceName_t" GetProgramResourceName)
       ("_ALLEGRO_glGetProgramResourceiv_t" GetProgramResourceiv)
       ("_ALLEGRO_glGetProgramResourceLocation_t" GetProgramResourceLocation)
       ("_ALLEGRO_glGetProgramResourceLocationIndex_t"
        GetProgramResourceLocationIndex)
       ("_ALLEGRO_glShaderStorageBlockBinding_t" ShaderStorageBlockBinding)
       ("_ALLEGRO_glTexBufferRange_t" TexBufferRange)
       ("_ALLEGRO_glTexStorage2DMultisample_t" TexStorage2DMultisample)
       ("_ALLEGRO_glTexStorage3DMultisample_t" TexStorage3DMultisample)
       ("_ALLEGRO_glTextureView_t" TextureView)
       ("_ALLEGRO_glBindVertexBuffer_t" BindVertexBuffer)
       ("_ALLEGRO_glVertexAttribFormat_t" VertexAttribFormat)
       ("_ALLEGRO_glVertexAttribIFormat_t" VertexAttribIFormat)
       ("_ALLEGRO_glVertexAttribLFormat_t" VertexAttribLFormat)
       ("_ALLEGRO_glVertexAttribBinding_t" VertexAttribBinding)
       ("_ALLEGRO_glVertexBindingDivisor_t" VertexBindingDivisor)
       ("_ALLEGRO_glDebugMessageControl_t" DebugMessageControl)
       ("_ALLEGRO_glDebugMessageInsert_t" DebugMessageInsert)
       ("_ALLEGRO_glDebugMessageCallback_t" DebugMessageCallback)
       ("_ALLEGRO_glGetDebugMessageLog_t" GetDebugMessageLog)
       ("_ALLEGRO_glPushDebugGroup_t" PushDebugGroup)
       ("_ALLEGRO_glPopDebugGroup_t" PopDebugGroup)
       ("_ALLEGRO_glObjectLabel_t" ObjectLabel)
       ("_ALLEGRO_glGetObjectLabel_t" GetObjectLabel)
       ("_ALLEGRO_glObjectPtrLabel_t" ObjectPtrLabel)
       ("_ALLEGRO_glGetObjectPtrLabel_t" GetObjectPtrLabel)
       ("_ALLEGRO_glActiveTextureARB_t" ActiveTextureARB)
       ("_ALLEGRO_glClientActiveTextureARB_t" ClientActiveTextureARB)
       ("_ALLEGRO_glMultiTexCoord1dARB_t" MultiTexCoord1dARB)
       ("_ALLEGRO_glMultiTexCoord1dvARB_t" MultiTexCoord1dvARB)
       ("_ALLEGRO_glMultiTexCoord1fARB_t" MultiTexCoord1fARB)
       ("_ALLEGRO_glMultiTexCoord1fvARB_t" MultiTexCoord1fvARB)
       ("_ALLEGRO_glMultiTexCoord1iARB_t" MultiTexCoord1iARB)
       ("_ALLEGRO_glMultiTexCoord1ivARB_t" MultiTexCoord1ivARB)
       ("_ALLEGRO_glMultiTexCoord1sARB_t" MultiTexCoord1sARB)
       ("_ALLEGRO_glMultiTexCoord1svARB_t" MultiTexCoord1svARB)
       ("_ALLEGRO_glMultiTexCoord2dARB_t" MultiTexCoord2dARB)
       ("_ALLEGRO_glMultiTexCoord2dvARB_t" MultiTexCoord2dvARB)
       ("_ALLEGRO_glMultiTexCoord2fARB_t" MultiTexCoord2fARB)
       ("_ALLEGRO_glMultiTexCoord2fvARB_t" MultiTexCoord2fvARB)
       ("_ALLEGRO_glMultiTexCoord2iARB_t" MultiTexCoord2iARB)
       ("_ALLEGRO_glMultiTexCoord2ivARB_t" MultiTexCoord2ivARB)
       ("_ALLEGRO_glMultiTexCoord2sARB_t" MultiTexCoord2sARB)
       ("_ALLEGRO_glMultiTexCoord2svARB_t" MultiTexCoord2svARB)
       ("_ALLEGRO_glMultiTexCoord3dARB_t" MultiTexCoord3dARB)
       ("_ALLEGRO_glMultiTexCoord3dvARB_t" MultiTexCoord3dvARB)
       ("_ALLEGRO_glMultiTexCoord3fARB_t" MultiTexCoord3fARB)
       ("_ALLEGRO_glMultiTexCoord3fvARB_t" MultiTexCoord3fvARB)
       ("_ALLEGRO_glMultiTexCoord3iARB_t" MultiTexCoord3iARB)
       ("_ALLEGRO_glMultiTexCoord3ivARB_t" MultiTexCoord3ivARB)
       ("_ALLEGRO_glMultiTexCoord3sARB_t" MultiTexCoord3sARB)
       ("_ALLEGRO_glMultiTexCoord3svARB_t" MultiTexCoord3svARB)
       ("_ALLEGRO_glMultiTexCoord4dARB_t" MultiTexCoord4dARB)
       ("_ALLEGRO_glMultiTexCoord4dvARB_t" MultiTexCoord4dvARB)
       ("_ALLEGRO_glMultiTexCoord4fARB_t" MultiTexCoord4fARB)
       ("_ALLEGRO_glMultiTexCoord4fvARB_t" MultiTexCoord4fvARB)
       ("_ALLEGRO_glMultiTexCoord4iARB_t" MultiTexCoord4iARB)
       ("_ALLEGRO_glMultiTexCoord4ivARB_t" MultiTexCoord4ivARB)
       ("_ALLEGRO_glMultiTexCoord4sARB_t" MultiTexCoord4sARB)
       ("_ALLEGRO_glMultiTexCoord4svARB_t" MultiTexCoord4svARB)
       ("_ALLEGRO_glLoadTransposeMatrixfARB_t" LoadTransposeMatrixfARB)
       ("_ALLEGRO_glLoadTransposeMatrixdARB_t" LoadTransposeMatrixdARB)
       ("_ALLEGRO_glMultTransposeMatrixfARB_t" MultTransposeMatrixfARB)
       ("_ALLEGRO_glMultTransposeMatrixdARB_t" MultTransposeMatrixdARB)
       ("_ALLEGRO_glSampleCoverageARB_t" SampleCoverageARB)
       ("_ALLEGRO_glCompressedTexImage3DARB_t" CompressedTexImage3DARB)
       ("_ALLEGRO_glCompressedTexImage2DARB_t" CompressedTexImage2DARB)
       ("_ALLEGRO_glCompressedTexImage1DARB_t" CompressedTexImage1DARB)
       ("_ALLEGRO_glCompressedTexSubImage3DARB_t" CompressedTexSubImage3DARB)
       ("_ALLEGRO_glCompressedTexSubImage2DARB_t" CompressedTexSubImage2DARB)
       ("_ALLEGRO_glCompressedTexSubImage1DARB_t" CompressedTexSubImage1DARB)
       ("_ALLEGRO_glGetCompressedTexImageARB_t" GetCompressedTexImageARB)
       ("_ALLEGRO_glPointParameterfARB_t" PointParameterfARB)
       ("_ALLEGRO_glPointParameterfvARB_t" PointParameterfvARB)
       ("_ALLEGRO_glWeightbvARB_t" WeightbvARB)
       ("_ALLEGRO_glWeightsvARB_t" WeightsvARB)
       ("_ALLEGRO_glWeightivARB_t" WeightivARB)
       ("_ALLEGRO_glWeightfvARB_t" WeightfvARB)
       ("_ALLEGRO_glWeightdvARB_t" WeightdvARB)
       ("_ALLEGRO_glWeightubvARB_t" WeightubvARB)
       ("_ALLEGRO_glWeightusvARB_t" WeightusvARB)
       ("_ALLEGRO_glWeightuivARB_t" WeightuivARB)
       ("_ALLEGRO_glWeightPointerARB_t" WeightPointerARB)
       ("_ALLEGRO_glVertexBlendARB_t" VertexBlendARB)
       ("_ALLEGRO_glCurrentPaletteMatrixARB_t" CurrentPaletteMatrixARB)
       ("_ALLEGRO_glMatrixIndexubvARB_t" MatrixIndexubvARB)
       ("_ALLEGRO_glMatrixIndexusvARB_t" MatrixIndexusvARB)
       ("_ALLEGRO_glMatrixIndexuivARB_t" MatrixIndexuivARB)
       ("_ALLEGRO_glMatrixIndexPointerARB_t" MatrixIndexPointerARB)
       ("_ALLEGRO_glWindowPos2dARB_t" WindowPos2dARB)
       ("_ALLEGRO_glWindowPos2dvARB_t" WindowPos2dvARB)
       ("_ALLEGRO_glWindowPos2fARB_t" WindowPos2fARB)
       ("_ALLEGRO_glWindowPos2fvARB_t" WindowPos2fvARB)
       ("_ALLEGRO_glWindowPos2iARB_t" WindowPos2iARB)
       ("_ALLEGRO_glWindowPos2ivARB_t" WindowPos2ivARB)
       ("_ALLEGRO_glWindowPos2sARB_t" WindowPos2sARB)
       ("_ALLEGRO_glWindowPos2svARB_t" WindowPos2svARB)
       ("_ALLEGRO_glWindowPos3dARB_t" WindowPos3dARB)
       ("_ALLEGRO_glWindowPos3dvARB_t" WindowPos3dvARB)
       ("_ALLEGRO_glWindowPos3fARB_t" WindowPos3fARB)
       ("_ALLEGRO_glWindowPos3fvARB_t" WindowPos3fvARB)
       ("_ALLEGRO_glWindowPos3iARB_t" WindowPos3iARB)
       ("_ALLEGRO_glWindowPos3ivARB_t" WindowPos3ivARB)
       ("_ALLEGRO_glWindowPos3sARB_t" WindowPos3sARB)
       ("_ALLEGRO_glWindowPos3svARB_t" WindowPos3svARB)
       ("_ALLEGRO_glVertexAttrib1dARB_t" VertexAttrib1dARB)
       ("_ALLEGRO_glVertexAttrib1dvARB_t" VertexAttrib1dvARB)
       ("_ALLEGRO_glVertexAttrib1fARB_t" VertexAttrib1fARB)
       ("_ALLEGRO_glVertexAttrib1fvARB_t" VertexAttrib1fvARB)
       ("_ALLEGRO_glVertexAttrib1sARB_t" VertexAttrib1sARB)
       ("_ALLEGRO_glVertexAttrib1svARB_t" VertexAttrib1svARB)
       ("_ALLEGRO_glVertexAttrib2dARB_t" VertexAttrib2dARB)
       ("_ALLEGRO_glVertexAttrib2dvARB_t" VertexAttrib2dvARB)
       ("_ALLEGRO_glVertexAttrib2fARB_t" VertexAttrib2fARB)
       ("_ALLEGRO_glVertexAttrib2fvARB_t" VertexAttrib2fvARB)
       ("_ALLEGRO_glVertexAttrib2sARB_t" VertexAttrib2sARB)
       ("_ALLEGRO_glVertexAttrib2svARB_t" VertexAttrib2svARB)
       ("_ALLEGRO_glVertexAttrib3dARB_t" VertexAttrib3dARB)
       ("_ALLEGRO_glVertexAttrib3dvARB_t" VertexAttrib3dvARB)
       ("_ALLEGRO_glVertexAttrib3fARB_t" VertexAttrib3fARB)
       ("_ALLEGRO_glVertexAttrib3fvARB_t" VertexAttrib3fvARB)
       ("_ALLEGRO_glVertexAttrib3sARB_t" VertexAttrib3sARB)
       ("_ALLEGRO_glVertexAttrib3svARB_t" VertexAttrib3svARB)
       ("_ALLEGRO_glVertexAttrib4NbvARB_t" VertexAttrib4NbvARB)
       ("_ALLEGRO_glVertexAttrib4NivARB_t" VertexAttrib4NivARB)
       ("_ALLEGRO_glVertexAttrib4NsvARB_t" VertexAttrib4NsvARB)
       ("_ALLEGRO_glVertexAttrib4NubARB_t" VertexAttrib4NubARB)
       ("_ALLEGRO_glVertexAttrib4NubvARB_t" VertexAttrib4NubvARB)
       ("_ALLEGRO_glVertexAttrib4NuivARB_t" VertexAttrib4NuivARB)
       ("_ALLEGRO_glVertexAttrib4NusvARB_t" VertexAttrib4NusvARB)
       ("_ALLEGRO_glVertexAttrib4bvARB_t" VertexAttrib4bvARB)
       ("_ALLEGRO_glVertexAttrib4dARB_t" VertexAttrib4dARB)
       ("_ALLEGRO_glVertexAttrib4dvARB_t" VertexAttrib4dvARB)
       ("_ALLEGRO_glVertexAttrib4fARB_t" VertexAttrib4fARB)
       ("_ALLEGRO_glVertexAttrib4fvARB_t" VertexAttrib4fvARB)
       ("_ALLEGRO_glVertexAttrib4ivARB_t" VertexAttrib4ivARB)
       ("_ALLEGRO_glVertexAttrib4sARB_t" VertexAttrib4sARB)
       ("_ALLEGRO_glVertexAttrib4svARB_t" VertexAttrib4svARB)
       ("_ALLEGRO_glVertexAttrib4ubvARB_t" VertexAttrib4ubvARB)
       ("_ALLEGRO_glVertexAttrib4uivARB_t" VertexAttrib4uivARB)
       ("_ALLEGRO_glVertexAttrib4usvARB_t" VertexAttrib4usvARB)
       ("_ALLEGRO_glVertexAttribPointerARB_t" VertexAttribPointerARB)
       ("_ALLEGRO_glEnableVertexAttribArrayARB_t" EnableVertexAttribArrayARB)
       ("_ALLEGRO_glDisableVertexAttribArrayARB_t" DisableVertexAttribArrayARB)
       ("_ALLEGRO_glProgramStringARB_t" ProgramStringARB)
       ("_ALLEGRO_glBindProgramARB_t" BindProgramARB)
       ("_ALLEGRO_glDeleteProgramsARB_t" DeleteProgramsARB)
       ("_ALLEGRO_glGenProgramsARB_t" GenProgramsARB)
       ("_ALLEGRO_glProgramEnvParameter4dARB_t" ProgramEnvParameter4dARB)
       ("_ALLEGRO_glProgramEnvParameter4dvARB_t" ProgramEnvParameter4dvARB)
       ("_ALLEGRO_glProgramEnvParameter4fARB_t" ProgramEnvParameter4fARB)
       ("_ALLEGRO_glProgramEnvParameter4fvARB_t" ProgramEnvParameter4fvARB)
       ("_ALLEGRO_glProgramLocalParameter4dARB_t" ProgramLocalParameter4dARB)
       ("_ALLEGRO_glProgramLocalParameter4dvARB_t" ProgramLocalParameter4dvARB)
       ("_ALLEGRO_glProgramLocalParameter4fARB_t" ProgramLocalParameter4fARB)
       ("_ALLEGRO_glProgramLocalParameter4fvARB_t" ProgramLocalParameter4fvARB)
       ("_ALLEGRO_glGetProgramEnvParameterdvARB_t" GetProgramEnvParameterdvARB)
       ("_ALLEGRO_glGetProgramEnvParameterfvARB_t" GetProgramEnvParameterfvARB)
       ("_ALLEGRO_glGetProgramLocalParameterdvARB_t"
        GetProgramLocalParameterdvARB)
       ("_ALLEGRO_glGetProgramLocalParameterfvARB_t"
        GetProgramLocalParameterfvARB)
       ("_ALLEGRO_glGetProgramivARB_t" GetProgramivARB)
       ("_ALLEGRO_glGetProgramStringARB_t" GetProgramStringARB)
       ("_ALLEGRO_glGetVertexAttribdvARB_t" GetVertexAttribdvARB)
       ("_ALLEGRO_glGetVertexAttribfvARB_t" GetVertexAttribfvARB)
       ("_ALLEGRO_glGetVertexAttribivARB_t" GetVertexAttribivARB)
       ("_ALLEGRO_glGetVertexAttribPointervARB_t" GetVertexAttribPointervARB)
       ("_ALLEGRO_glIsProgramARB_t" IsProgramARB)
       ("_ALLEGRO_glBindBufferARB_t" BindBufferARB)
       ("_ALLEGRO_glDeleteBuffersARB_t" DeleteBuffersARB)
       ("_ALLEGRO_glGenBuffersARB_t" GenBuffersARB)
       ("_ALLEGRO_glIsBufferARB_t" IsBufferARB)
       ("_ALLEGRO_glBufferDataARB_t" BufferDataARB)
       ("_ALLEGRO_glBufferSubDataARB_t" BufferSubDataARB)
       ("_ALLEGRO_glGetBufferSubDataARB_t" GetBufferSubDataARB)
       ("_ALLEGRO_glMapBufferARB_t" MapBufferARB)
       ("_ALLEGRO_glUnmapBufferARB_t" UnmapBufferARB)
       ("_ALLEGRO_glGetBufferParameterivARB_t" GetBufferParameterivARB)
       ("_ALLEGRO_glGetBufferPointervARB_t" GetBufferPointervARB)
       ("_ALLEGRO_glGenQueriesARB_t" GenQueriesARB)
       ("_ALLEGRO_glDeleteQueriesARB_t" DeleteQueriesARB)
       ("_ALLEGRO_glIsQueryARB_t" IsQueryARB)
       ("_ALLEGRO_glBeginQueryARB_t" BeginQueryARB)
       ("_ALLEGRO_glEndQueryARB_t" EndQueryARB)
       ("_ALLEGRO_glGetQueryivARB_t" GetQueryivARB)
       ("_ALLEGRO_glGetQueryObjectivARB_t" GetQueryObjectivARB)
       ("_ALLEGRO_glGetQueryObjectuivARB_t" GetQueryObjectuivARB)
       ("_ALLEGRO_glDeleteObjectARB_t" DeleteObjectARB)
       ("_ALLEGRO_glGetHandleARB_t" GetHandleARB)
       ("_ALLEGRO_glDetachObjectARB_t" DetachObjectARB)
       ("_ALLEGRO_glCreateShaderObjectARB_t" CreateShaderObjectARB)
       ("_ALLEGRO_glShaderSourceARB_t" ShaderSourceARB)
       ("_ALLEGRO_glCompileShaderARB_t" CompileShaderARB)
       ("_ALLEGRO_glCreateProgramObjectARB_t" CreateProgramObjectARB)
       ("_ALLEGRO_glAttachObjectARB_t" AttachObjectARB)
       ("_ALLEGRO_glLinkProgramARB_t" LinkProgramARB)
       ("_ALLEGRO_glUseProgramObjectARB_t" UseProgramObjectARB)
       ("_ALLEGRO_glValidateProgramARB_t" ValidateProgramARB)
       ("_ALLEGRO_glUniform1fARB_t" Uniform1fARB)
       ("_ALLEGRO_glUniform2fARB_t" Uniform2fARB)
       ("_ALLEGRO_glUniform3fARB_t" Uniform3fARB)
       ("_ALLEGRO_glUniform4fARB_t" Uniform4fARB)
       ("_ALLEGRO_glUniform1iARB_t" Uniform1iARB)
       ("_ALLEGRO_glUniform2iARB_t" Uniform2iARB)
       ("_ALLEGRO_glUniform3iARB_t" Uniform3iARB)
       ("_ALLEGRO_glUniform4iARB_t" Uniform4iARB)
       ("_ALLEGRO_glUniform1fvARB_t" Uniform1fvARB)
       ("_ALLEGRO_glUniform2fvARB_t" Uniform2fvARB)
       ("_ALLEGRO_glUniform3fvARB_t" Uniform3fvARB)
       ("_ALLEGRO_glUniform4fvARB_t" Uniform4fvARB)
       ("_ALLEGRO_glUniform1ivARB_t" Uniform1ivARB)
       ("_ALLEGRO_glUniform2ivARB_t" Uniform2ivARB)
       ("_ALLEGRO_glUniform3ivARB_t" Uniform3ivARB)
       ("_ALLEGRO_glUniform4ivARB_t" Uniform4ivARB)
       ("_ALLEGRO_glUniformMatrix2fvARB_t" UniformMatrix2fvARB)
       ("_ALLEGRO_glUniformMatrix3fvARB_t" UniformMatrix3fvARB)
       ("_ALLEGRO_glUniformMatrix4fvARB_t" UniformMatrix4fvARB)
       ("_ALLEGRO_glGetObjectParameterfvARB_t" GetObjectParameterfvARB)
       ("_ALLEGRO_glGetObjectParameterivARB_t" GetObjectParameterivARB)
       ("_ALLEGRO_glGetInfoLogARB_t" GetInfoLogARB)
       ("_ALLEGRO_glGetAttachedObjectsARB_t" GetAttachedObjectsARB)
       ("_ALLEGRO_glGetUniformLocationARB_t" GetUniformLocationARB)
       ("_ALLEGRO_glGetActiveUniformARB_t" GetActiveUniformARB)
       ("_ALLEGRO_glGetUniformfvARB_t" GetUniformfvARB)
       ("_ALLEGRO_glGetUniformivARB_t" GetUniformivARB)
       ("_ALLEGRO_glGetShaderSourceARB_t" GetShaderSourceARB)
       ("_ALLEGRO_glBindAttribLocationARB_t" BindAttribLocationARB)
       ("_ALLEGRO_glGetActiveAttribARB_t" GetActiveAttribARB)
       ("_ALLEGRO_glGetAttribLocationARB_t" GetAttribLocationARB)
       ("_ALLEGRO_glDrawBuffersARB_t" DrawBuffersARB)
       ("_ALLEGRO_glClampColorARB_t" ClampColorARB)
       ("_ALLEGRO_glDrawArraysInstancedARB_t" DrawArraysInstancedARB)
       ("_ALLEGRO_glDrawElementsInstancedARB_t" DrawElementsInstancedARB)
       ("_ALLEGRO_glIsRenderbuffer_t" IsRenderbuffer)
       ("_ALLEGRO_glBindRenderbuffer_t" BindRenderbuffer)
       ("_ALLEGRO_glDeleteRenderbuffers_t" DeleteRenderbuffers)
       ("_ALLEGRO_glGenRenderbuffers_t" GenRenderbuffers)
       ("_ALLEGRO_glRenderbufferStorage_t" RenderbufferStorage)
       ("_ALLEGRO_glGetRenderbufferParameteriv_t" GetRenderbufferParameteriv)
       ("_ALLEGRO_glIsFramebuffer_t" IsFramebuffer)
       ("_ALLEGRO_glBindFramebuffer_t" BindFramebuffer)
       ("_ALLEGRO_glDeleteFramebuffers_t" DeleteFramebuffers)
       ("_ALLEGRO_glGenFramebuffers_t" GenFramebuffers)
       ("_ALLEGRO_glCheckFramebufferStatus_t" CheckFramebufferStatus)
       ("_ALLEGRO_glFramebufferTexture1D_t" FramebufferTexture1D)
       ("_ALLEGRO_glFramebufferTexture2D_t" FramebufferTexture2D)
       ("_ALLEGRO_glFramebufferTexture3D_t" FramebufferTexture3D)
       ("_ALLEGRO_glFramebufferRenderbuffer_t" FramebufferRenderbuffer)
       ("_ALLEGRO_glGetFramebufferAttachmentParameteriv_t"
        GetFramebufferAttachmentParameteriv)
       ("_ALLEGRO_glGenerateMipmap_t" GenerateMipmap)
       ("_ALLEGRO_glBlitFramebuffer_t" BlitFramebuffer)
       ("_ALLEGRO_glRenderbufferStorageMultisample_t"
        RenderbufferStorageMultisample)
       ("_ALLEGRO_glFramebufferTextureLayer_t" FramebufferTextureLayer)
       ("_ALLEGRO_glProgramParameteriARB_t" ProgramParameteriARB)
       ("_ALLEGRO_glFramebufferTextureARB_t" FramebufferTextureARB)
       ("_ALLEGRO_glFramebufferTextureLayerARB_t" FramebufferTextureLayerARB)
       ("_ALLEGRO_glFramebufferTextureFaceARB_t" FramebufferTextureFaceARB)
       ("_ALLEGRO_glVertexAttribDivisor_t" VertexAttribDivisor)
       ("_ALLEGRO_glMapBufferRange_t" MapBufferRange)
       ("_ALLEGRO_glFlushMappedBufferRange_t" FlushMappedBufferRange)
       ("_ALLEGRO_glTexBufferARB_t" TexBufferARB)
       ("_ALLEGRO_glBindVertexArray_t" BindVertexArray)
       ("_ALLEGRO_glDeleteVertexArrays_t" DeleteVertexArrays)
       ("_ALLEGRO_glGenVertexArrays_t" GenVertexArrays)
       ("_ALLEGRO_glIsVertexArray_t" IsVertexArray)
       ("_ALLEGRO_glGetUniformIndices_t" GetUniformIndices)
       ("_ALLEGRO_glGetActiveUniformsiv_t" GetActiveUniformsiv)
       ("_ALLEGRO_glGetActiveUniformName_t" GetActiveUniformName)
       ("_ALLEGRO_glGetUniformBlockIndex_t" GetUniformBlockIndex)
       ("_ALLEGRO_glGetActiveUniformBlockiv_t" GetActiveUniformBlockiv)
       ("_ALLEGRO_glGetActiveUniformBlockName_t" GetActiveUniformBlockName)
       ("_ALLEGRO_glUniformBlockBinding_t" UniformBlockBinding)
       ("_ALLEGRO_glCopyBufferSubData_t" CopyBufferSubData)
       ("_ALLEGRO_glDrawElementsBaseVertex_t" DrawElementsBaseVertex)
       ("_ALLEGRO_glDrawRangeElementsBaseVertex_t" DrawRangeElementsBaseVertex)
       ("_ALLEGRO_glDrawElementsInstancedBaseVertex_t"
        DrawElementsInstancedBaseVertex)
       ("_ALLEGRO_glMultiDrawElementsBaseVertex_t" MultiDrawElementsBaseVertex)
       ("_ALLEGRO_glProvokingVertex_t" ProvokingVertex)
       ("_ALLEGRO_glFenceSync_t" FenceSync)
       ("_ALLEGRO_glIsSync_t" IsSync)
       ("_ALLEGRO_glDeleteSync_t" DeleteSync)
       ("_ALLEGRO_glClientWaitSync_t" ClientWaitSync)
       ("_ALLEGRO_glWaitSync_t" WaitSync)
       ("_ALLEGRO_glGetInteger64v_t" GetInteger64v)
       ("_ALLEGRO_glGetSynciv_t" GetSynciv)
       ("_ALLEGRO_glTexImage2DMultisample_t" TexImage2DMultisample)
       ("_ALLEGRO_glTexImage3DMultisample_t" TexImage3DMultisample)
       ("_ALLEGRO_glGetMultisamplefv_t" GetMultisamplefv)
       ("_ALLEGRO_glSampleMaski_t" SampleMaski)
       ("_ALLEGRO_glBlendEquationi_t" BlendEquationi)
       ("_ALLEGRO_glBlendEquationSeparatei_t" BlendEquationSeparatei)
       ("_ALLEGRO_glBlendFunci_t" BlendFunci)
       ("_ALLEGRO_glBlendFuncSeparatei_t" BlendFuncSeparatei)
       ("_ALLEGRO_glMinSampleShading_t" MinSampleShading)
       ("_ALLEGRO_glNamedStringARB_t" NamedStringARB)
       ("_ALLEGRO_glDeleteNamedStringARB_t" DeleteNamedStringARB)
       ("_ALLEGRO_glCompileShaderIncludeARB_t" CompileShaderIncludeARB)
       ("_ALLEGRO_glIsNamedStringARB_t" IsNamedStringARB)
       ("_ALLEGRO_glGetNamedStringARB_t" GetNamedStringARB)
       ("_ALLEGRO_glGetNamedStringivARB_t" GetNamedStringivARB)
       ("_ALLEGRO_glBindFragDataLocationIndexed_t" BindFragDataLocationIndexed)
       ("_ALLEGRO_glGetFragDataIndex_t" GetFragDataIndex)
       ("_ALLEGRO_glGenSamplers_t" GenSamplers)
       ("_ALLEGRO_glDeleteSamplers_t" DeleteSamplers)
       ("_ALLEGRO_glIsSampler_t" IsSampler)
       ("_ALLEGRO_glBindSampler_t" BindSampler)
       ("_ALLEGRO_glSamplerParameteri_t" SamplerParameteri)
       ("_ALLEGRO_glSamplerParameteriv_t" SamplerParameteriv)
       ("_ALLEGRO_glSamplerParameterf_t" SamplerParameterf)
       ("_ALLEGRO_glSamplerParameterfv_t" SamplerParameterfv)
       ("_ALLEGRO_glSamplerParameterIiv_t" SamplerParameterIiv)
       ("_ALLEGRO_glSamplerParameterIuiv_t" SamplerParameterIuiv)
       ("_ALLEGRO_glGetSamplerParameteriv_t" GetSamplerParameteriv)
       ("_ALLEGRO_glGetSamplerParameterIiv_t" GetSamplerParameterIiv)
       ("_ALLEGRO_glGetSamplerParameterfv_t" GetSamplerParameterfv)
       ("_ALLEGRO_glGetSamplerParameterIfv_t" GetSamplerParameterIfv)
       ("_ALLEGRO_glQueryCounter_t" QueryCounter)
       ("_ALLEGRO_glGetQueryObjecti64v_t" GetQueryObjecti64v)
       ("_ALLEGRO_glGetQueryObjectui64v_t" GetQueryObjectui64v)
       ("_ALLEGRO_glVertexP2ui_t" VertexP2ui)
       ("_ALLEGRO_glVertexP2uiv_t" VertexP2uiv)
       ("_ALLEGRO_glVertexP3ui_t" VertexP3ui)
       ("_ALLEGRO_glVertexP3uiv_t" VertexP3uiv)
       ("_ALLEGRO_glVertexP4ui_t" VertexP4ui)
       ("_ALLEGRO_glVertexP4uiv_t" VertexP4uiv)
       ("_ALLEGRO_glTexCoordP1ui_t" TexCoordP1ui)
       ("_ALLEGRO_glTexCoordP1uiv_t" TexCoordP1uiv)
       ("_ALLEGRO_glTexCoordP2ui_t" TexCoordP2ui)
       ("_ALLEGRO_glTexCoordP2uiv_t" TexCoordP2uiv)
       ("_ALLEGRO_glTexCoordP3ui_t" TexCoordP3ui)
       ("_ALLEGRO_glTexCoordP3uiv_t" TexCoordP3uiv)
       ("_ALLEGRO_glTexCoordP4ui_t" TexCoordP4ui)
       ("_ALLEGRO_glTexCoordP4uiv_t" TexCoordP4uiv)
       ("_ALLEGRO_glMultiTexCoordP1ui_t" MultiTexCoordP1ui)
       ("_ALLEGRO_glMultiTexCoordP1uiv_t" MultiTexCoordP1uiv)
       ("_ALLEGRO_glMultiTexCoordP2ui_t" MultiTexCoordP2ui)
       ("_ALLEGRO_glMultiTexCoordP2uiv_t" MultiTexCoordP2uiv)
       ("_ALLEGRO_glMultiTexCoordP3ui_t" MultiTexCoordP3ui)
       ("_ALLEGRO_glMultiTexCoordP3uiv_t" MultiTexCoordP3uiv)
       ("_ALLEGRO_glMultiTexCoordP4ui_t" MultiTexCoordP4ui)
       ("_ALLEGRO_glMultiTexCoordP4uiv_t" MultiTexCoordP4uiv)
       ("_ALLEGRO_glNormalP3ui_t" NormalP3ui)
       ("_ALLEGRO_glNormalP3uiv_t" NormalP3uiv)
       ("_ALLEGRO_glColorP3ui_t" ColorP3ui)
       ("_ALLEGRO_glColorP3uiv_t" ColorP3uiv)
       ("_ALLEGRO_glColorP4ui_t" ColorP4ui)
       ("_ALLEGRO_glColorP4uiv_t" ColorP4uiv)
       ("_ALLEGRO_glSecondaryColorP3ui_t" SecondaryColorP3ui)
       ("_ALLEGRO_glSecondaryColorP3uiv_t" SecondaryColorP3uiv)
       ("_ALLEGRO_glVertexAttribP1ui_t" VertexAttribP1ui)
       ("_ALLEGRO_glVertexAttribP1uiv_t" VertexAttribP1uiv)
       ("_ALLEGRO_glVertexAttribP2ui_t" VertexAttribP2ui)
       ("_ALLEGRO_glVertexAttribP2uiv_t" VertexAttribP2uiv)
       ("_ALLEGRO_glVertexAttribP3ui_t" VertexAttribP3ui)
       ("_ALLEGRO_glVertexAttribP3uiv_t" VertexAttribP3uiv)
       ("_ALLEGRO_glVertexAttribP4ui_t" VertexAttribP4ui)
       ("_ALLEGRO_glVertexAttribP4uiv_t" VertexAttribP4uiv)
       ("_ALLEGRO_glDrawArraysIndirect_t" DrawArraysIndirect)
       ("_ALLEGRO_glDrawElementsIndirect_t" DrawElementsIndirect)
       ("_ALLEGRO_glUniform1d_t" Uniform1d)
       ("_ALLEGRO_glUniform2d_t" Uniform2d)
       ("_ALLEGRO_glUniform3d_t" Uniform3d)
       ("_ALLEGRO_glUniform4d_t" Uniform4d)
       ("_ALLEGRO_glUniform1dv_t" Uniform1dv)
       ("_ALLEGRO_glUniform2dv_t" Uniform2dv)
       ("_ALLEGRO_glUniform3dv_t" Uniform3dv)
       ("_ALLEGRO_glUniform4dv_t" Uniform4dv)
       ("_ALLEGRO_glUniformMatrix2dv_t" UniformMatrix2dv)
       ("_ALLEGRO_glUniformMatrix3dv_t" UniformMatrix3dv)
       ("_ALLEGRO_glUniformMatrix4dv_t" UniformMatrix4dv)
       ("_ALLEGRO_glUniformMatrix2x3dv_t" UniformMatrix2x3dv)
       ("_ALLEGRO_glUniformMatrix2x4dv_t" UniformMatrix2x4dv)
       ("_ALLEGRO_glUniformMatrix3x2dv_t" UniformMatrix3x2dv)
       ("_ALLEGRO_glUniformMatrix3x4dv_t" UniformMatrix3x4dv)
       ("_ALLEGRO_glUniformMatrix4x2dv_t" UniformMatrix4x2dv)
       ("_ALLEGRO_glUniformMatrix4x3dv_t" UniformMatrix4x3dv)
       ("_ALLEGRO_glGetUniformdv_t" GetUniformdv)
       ("_ALLEGRO_glProgramUniform1dEXT_t" ProgramUniform1dEXT)
       ("_ALLEGRO_glProgramUniform2dEXT_t" ProgramUniform2dEXT)
       ("_ALLEGRO_glProgramUniform3dEXT_t" ProgramUniform3dEXT)
       ("_ALLEGRO_glProgramUniform4dEXT_t" ProgramUniform4dEXT)
       ("_ALLEGRO_glProgramUniform1dvEXT_t" ProgramUniform1dvEXT)
       ("_ALLEGRO_glProgramUniform2dvEXT_t" ProgramUniform2dvEXT)
       ("_ALLEGRO_glProgramUniform3dvEXT_t" ProgramUniform3dvEXT)
       ("_ALLEGRO_glProgramUniform4dvEXT_t" ProgramUniform4dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix2dvEXT_t" ProgramUniformMatrix2dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3dvEXT_t" ProgramUniformMatrix3dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4dvEXT_t" ProgramUniformMatrix4dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix2x3dvEXT_t"
        ProgramUniformMatrix2x3dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix2x4dvEXT_t"
        ProgramUniformMatrix2x4dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3x2dvEXT_t"
        ProgramUniformMatrix3x2dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3x4dvEXT_t"
        ProgramUniformMatrix3x4dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4x2dvEXT_t"
        ProgramUniformMatrix4x2dvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4x3dvEXT_t"
        ProgramUniformMatrix4x3dvEXT)
       ("_ALLEGRO_glGetSubroutineUniformLocation_t"
        GetSubroutineUniformLocation)
       ("_ALLEGRO_glGetSubroutineIndex_t" GetSubroutineIndex)
       ("_ALLEGRO_glGetActiveSubroutineUniformiv_t"
        GetActiveSubroutineUniformiv)
       ("_ALLEGRO_glGetActiveSubroutineUniformName_t"
        GetActiveSubroutineUniformName)
       ("_ALLEGRO_glGetActiveSubroutineName_t" GetActiveSubroutineName)
       ("_ALLEGRO_glUniformSubroutinesuiv_t" UniformSubroutinesuiv)
       ("_ALLEGRO_glGetUniformSubroutineuiv_t" GetUniformSubroutineuiv)
       ("_ALLEGRO_glGetProgramStageiv_t" GetProgramStageiv)
       ("_ALLEGRO_glPatchParameteri_t" PatchParameteri)
       ("_ALLEGRO_glPatchParameterfv_t" PatchParameterfv)
       ("_ALLEGRO_glBindTransformFeedback_t" BindTransformFeedback)
       ("_ALLEGRO_glDeleteTransformFeedbacks_t" DeleteTransformFeedbacks)
       ("_ALLEGRO_glGenTransformFeedbacks_t" GenTransformFeedbacks)
       ("_ALLEGRO_glIsTransformFeedback_t" IsTransformFeedback)
       ("_ALLEGRO_glPauseTransformFeedback_t" PauseTransformFeedback)
       ("_ALLEGRO_glResumeTransformFeedback_t" ResumeTransformFeedback)
       ("_ALLEGRO_glDrawTransformFeedback_t" DrawTransformFeedback)
       ("_ALLEGRO_glDrawTransformFeedbackStream_t" DrawTransformFeedbackStream)
       ("_ALLEGRO_glBeginQueryIndexed_t" BeginQueryIndexed)
       ("_ALLEGRO_glEndQueryIndexed_t" EndQueryIndexed)
       ("_ALLEGRO_glGetQueryIndexediv_t" GetQueryIndexediv)
       ("_ALLEGRO_glBlendColorEXT_t" BlendColorEXT)
       ("_ALLEGRO_glPolygonOffsetEXT_t" PolygonOffsetEXT)
       ("_ALLEGRO_glTexImage3DEXT_t" TexImage3DEXT)
       ("_ALLEGRO_glTexSubImage3DEXT_t" TexSubImage3DEXT)
       ("_ALLEGRO_glGetTexFilterFuncSGIS_t" GetTexFilterFuncSGIS)
       ("_ALLEGRO_glTexFilterFuncSGIS_t" TexFilterFuncSGIS)
       ("_ALLEGRO_glTexSubImage1DEXT_t" TexSubImage1DEXT)
       ("_ALLEGRO_glTexSubImage2DEXT_t" TexSubImage2DEXT)
       ("_ALLEGRO_glCopyTexImage1DEXT_t" CopyTexImage1DEXT)
       ("_ALLEGRO_glCopyTexImage2DEXT_t" CopyTexImage2DEXT)
       ("_ALLEGRO_glCopyTexSubImage1DEXT_t" CopyTexSubImage1DEXT)
       ("_ALLEGRO_glCopyTexSubImage2DEXT_t" CopyTexSubImage2DEXT)
       ("_ALLEGRO_glCopyTexSubImage3DEXT_t" CopyTexSubImage3DEXT)
       ("_ALLEGRO_glGetHistogramEXT_t" GetHistogramEXT)
       ("_ALLEGRO_glGetHistogramParameterfvEXT_t" GetHistogramParameterfvEXT)
       ("_ALLEGRO_glGetHistogramParameterivEXT_t" GetHistogramParameterivEXT)
       ("_ALLEGRO_glGetMinmaxEXT_t" GetMinmaxEXT)
       ("_ALLEGRO_glGetMinmaxParameterfvEXT_t" GetMinmaxParameterfvEXT)
       ("_ALLEGRO_glGetMinmaxParameterivEXT_t" GetMinmaxParameterivEXT)
       ("_ALLEGRO_glHistogramEXT_t" HistogramEXT)
       ("_ALLEGRO_glMinmaxEXT_t" MinmaxEXT)
       ("_ALLEGRO_glResetHistogramEXT_t" ResetHistogramEXT)
       ("_ALLEGRO_glResetMinmaxEXT_t" ResetMinmaxEXT)
       ("_ALLEGRO_glConvolutionFilter1DEXT_t" ConvolutionFilter1DEXT)
       ("_ALLEGRO_glConvolutionFilter2DEXT_t" ConvolutionFilter2DEXT)
       ("_ALLEGRO_glConvolutionParameterfEXT_t" ConvolutionParameterfEXT)
       ("_ALLEGRO_glConvolutionParameterfvEXT_t" ConvolutionParameterfvEXT)
       ("_ALLEGRO_glConvolutionParameteriEXT_t" ConvolutionParameteriEXT)
       ("_ALLEGRO_glConvolutionParameterivEXT_t" ConvolutionParameterivEXT)
       ("_ALLEGRO_glCopyConvolutionFilter1DEXT_t" CopyConvolutionFilter1DEXT)
       ("_ALLEGRO_glCopyConvolutionFilter2DEXT_t" CopyConvolutionFilter2DEXT)
       ("_ALLEGRO_glGetConvolutionFilterEXT_t" GetConvolutionFilterEXT)
       ("_ALLEGRO_glGetConvolutionParameterfvEXT_t"
        GetConvolutionParameterfvEXT)
       ("_ALLEGRO_glGetConvolutionParameterivEXT_t"
        GetConvolutionParameterivEXT)
       ("_ALLEGRO_glGetSeparableFilterEXT_t" GetSeparableFilterEXT)
       ("_ALLEGRO_glSeparableFilter2DEXT_t" SeparableFilter2DEXT)
       ("_ALLEGRO_glColorTableSGI_t" ColorTableSGI)
       ("_ALLEGRO_glColorTableParameterfvSGI_t" ColorTableParameterfvSGI)
       ("_ALLEGRO_glColorTableParameterivSGI_t" ColorTableParameterivSGI)
       ("_ALLEGRO_glCopyColorTableSGI_t" CopyColorTableSGI)
       ("_ALLEGRO_glGetColorTableSGI_t" GetColorTableSGI)
       ("_ALLEGRO_glGetColorTableParameterfvSGI_t" GetColorTableParameterfvSGI)
       ("_ALLEGRO_glGetColorTableParameterivSGI_t" GetColorTableParameterivSGI)
       ("_ALLEGRO_glPixelTexGenSGIX_t" PixelTexGenSGIX)
       ("_ALLEGRO_glPixelTexGenParameteriSGIS_t" PixelTexGenParameteriSGIS)
       ("_ALLEGRO_glPixelTexGenParameterivSGIS_t" PixelTexGenParameterivSGIS)
       ("_ALLEGRO_glPixelTexGenParameterfSGIS_t" PixelTexGenParameterfSGIS)
       ("_ALLEGRO_glPixelTexGenParameterfvSGIS_t" PixelTexGenParameterfvSGIS)
       ("_ALLEGRO_glGetPixelTexGenParameterivSGIS_t"
        GetPixelTexGenParameterivSGIS)
       ("_ALLEGRO_glGetPixelTexGenParameterfvSGIS_t"
        GetPixelTexGenParameterfvSGIS)
       ("_ALLEGRO_glTexImage4DSGIS_t" TexImage4DSGIS)
       ("_ALLEGRO_glTexSubImage4DSGIS_t" TexSubImage4DSGIS)
       ("_ALLEGRO_glAreTexturesResidentEXT_t" AreTexturesResidentEXT)
       ("_ALLEGRO_glBindTextureEXT_t" BindTextureEXT)
       ("_ALLEGRO_glDeleteTexturesEXT_t" DeleteTexturesEXT)
       ("_ALLEGRO_glGenTexturesEXT_t" GenTexturesEXT)
       ("_ALLEGRO_glIsTextureEXT_t" IsTextureEXT)
       ("_ALLEGRO_glPrioritizeTexturesEXT_t" PrioritizeTexturesEXT)
       ("_ALLEGRO_glDetailTexFuncSGIS_t" DetailTexFuncSGIS)
       ("_ALLEGRO_glGetDetailTexFuncSGIS_t" GetDetailTexFuncSGIS)
       ("_ALLEGRO_glSharpenTexFuncSGIS_t" SharpenTexFuncSGIS)
       ("_ALLEGRO_glGetSharpenTexFuncSGIS_t" GetSharpenTexFuncSGIS)
       ("_ALLEGRO_glSampleMaskSGIS_t" SampleMaskSGIS)
       ("_ALLEGRO_glSamplePatternSGIS_t" SamplePatternSGIS)
       ("_ALLEGRO_glArrayElementEXT_t" ArrayElementEXT)
       ("_ALLEGRO_glColorPointerEXT_t" ColorPointerEXT)
       ("_ALLEGRO_glDrawArraysEXT_t" DrawArraysEXT)
       ("_ALLEGRO_glEdgeFlagPointerEXT_t" EdgeFlagPointerEXT)
       ("_ALLEGRO_glGetPointervEXT_t" GetPointervEXT)
       ("_ALLEGRO_glIndexPointerEXT_t" IndexPointerEXT)
       ("_ALLEGRO_glNormalPointerEXT_t" NormalPointerEXT)
       ("_ALLEGRO_glTexCoordPointerEXT_t" TexCoordPointerEXT)
       ("_ALLEGRO_glVertexPointerEXT_t" VertexPointerEXT)
       ("_ALLEGRO_glBlendEquationEXT_t" BlendEquationEXT)
       ("_ALLEGRO_glSpriteParameterfSGIX_t" SpriteParameterfSGIX)
       ("_ALLEGRO_glSpriteParameterfvSGIX_t" SpriteParameterfvSGIX)
       ("_ALLEGRO_glSpriteParameteriSGIX_t" SpriteParameteriSGIX)
       ("_ALLEGRO_glSpriteParameterivSGIX_t" SpriteParameterivSGIX)
       ("_ALLEGRO_glPointParameterfEXT_t" PointParameterfEXT)
       ("_ALLEGRO_glPointParameterfvEXT_t" PointParameterfvEXT)
       ("_ALLEGRO_glPointParameterfSGIS_t" PointParameterfSGIS)
       ("_ALLEGRO_glPointParameterfvSGIS_t" PointParameterfvSGIS)
       ("_ALLEGRO_glGetInstrumentsSGIX_t" GetInstrumentsSGIX)
       ("_ALLEGRO_glInstrumentsBufferSGIX_t" InstrumentsBufferSGIX)
       ("_ALLEGRO_glPollInstrumentsSGIX_t" PollInstrumentsSGIX)
       ("_ALLEGRO_glReadInstrumentsSGIX_t" ReadInstrumentsSGIX)
       ("_ALLEGRO_glStartInstrumentsSGIX_t" StartInstrumentsSGIX)
       ("_ALLEGRO_glStopInstrumentsSGIX_t" StopInstrumentsSGIX)
       ("_ALLEGRO_glFrameZoomSGIX_t" FrameZoomSGIX)
       ("_ALLEGRO_glTagSampleBufferSGIX_t" TagSampleBufferSGIX)
       ("_ALLEGRO_glDeformationMap3dSGIX_t" DeformationMap3dSGIX)
       ("_ALLEGRO_glDeformationMap3fSGIX_t" DeformationMap3fSGIX)
       ("_ALLEGRO_glDeformSGIX_t" DeformSGIX)
       ("_ALLEGRO_glLoadIdentityDeformationMapSGIX_t"
        LoadIdentityDeformationMapSGIX)
       ("_ALLEGRO_glReferencePlaneSGIX_t" ReferencePlaneSGIX)
       ("_ALLEGRO_glFlushRasterSGIX_t" FlushRasterSGIX)
       ("_ALLEGRO_glFogFuncSGIS_t" FogFuncSGIS)
       ("_ALLEGRO_glGetFogFuncSGIS_t" GetFogFuncSGIS)
       ("_ALLEGRO_glImageTransformParameteriHP_t" ImageTransformParameteriHP)
       ("_ALLEGRO_glImageTransformParameterfHP_t" ImageTransformParameterfHP)
       ("_ALLEGRO_glImageTransformParameterivHP_t" ImageTransformParameterivHP)
       ("_ALLEGRO_glImageTransformParameterfvHP_t" ImageTransformParameterfvHP)
       ("_ALLEGRO_glGetImageTransformParameterivHP_t"
        GetImageTransformParameterivHP)
       ("_ALLEGRO_glGetImageTransformParameterfvHP_t"
        GetImageTransformParameterfvHP)
       ("_ALLEGRO_glCopyColorSubTableEXT_t" CopyColorSubTableEXT)
       ("_ALLEGRO_glHintPGI_t" HintPGI)
       ("_ALLEGRO_glColorTableEXT_t" ColorTableEXT)
       ("_ALLEGRO_glGetColorTableEXT_t" GetColorTableEXT)
       ("_ALLEGRO_glGetColorTableParameterivEXT_t" GetColorTableParameterivEXT)
       ("_ALLEGRO_glGetColorTableParameterfvEXT_t" GetColorTableParameterfvEXT)
       ("_ALLEGRO_glGetListParameterfvSGIX_t" GetListParameterfvSGIX)
       ("_ALLEGRO_glGetListParameterivSGIX_t" GetListParameterivSGIX)
       ("_ALLEGRO_glListParameterfSGIX_t" ListParameterfSGIX)
       ("_ALLEGRO_glListParameterfvSGIX_t" ListParameterfvSGIX)
       ("_ALLEGRO_glListParameteriSGIX_t" ListParameteriSGIX)
       ("_ALLEGRO_glListParameterivSGIX_t" ListParameterivSGIX)
       ("_ALLEGRO_glIndexMaterialEXT_t" IndexMaterialEXT)
       ("_ALLEGRO_glIndexFuncEXT_t" IndexFuncEXT)
       ("_ALLEGRO_glLockArraysEXT_t" LockArraysEXT)
       ("_ALLEGRO_glUnlockArraysEXT_t" UnlockArraysEXT)
       ("_ALLEGRO_glCullParameterdvEXT_t" CullParameterdvEXT)
       ("_ALLEGRO_glCullParameterfvEXT_t" CullParameterfvEXT)
       ("_ALLEGRO_glFragmentColorMaterialSGIX_t" FragmentColorMaterialSGIX)
       ("_ALLEGRO_glFragmentLightfSGIX_t" FragmentLightfSGIX)
       ("_ALLEGRO_glFragmentLightfvSGIX_t" FragmentLightfvSGIX)
       ("_ALLEGRO_glFragmentLightiSGIX_t" FragmentLightiSGIX)
       ("_ALLEGRO_glFragmentLightivSGIX_t" FragmentLightivSGIX)
       ("_ALLEGRO_glFragmentLightModelfSGIX_t" FragmentLightModelfSGIX)
       ("_ALLEGRO_glFragmentLightModelfvSGIX_t" FragmentLightModelfvSGIX)
       ("_ALLEGRO_glFragmentLightModeliSGIX_t" FragmentLightModeliSGIX)
       ("_ALLEGRO_glFragmentLightModelivSGIX_t" FragmentLightModelivSGIX)
       ("_ALLEGRO_glFragmentMaterialfSGIX_t" FragmentMaterialfSGIX)
       ("_ALLEGRO_glFragmentMaterialfvSGIX_t" FragmentMaterialfvSGIX)
       ("_ALLEGRO_glFragmentMaterialiSGIX_t" FragmentMaterialiSGIX)
       ("_ALLEGRO_glFragmentMaterialivSGIX_t" FragmentMaterialivSGIX)
       ("_ALLEGRO_glGetFragmentLightfvSGIX_t" GetFragmentLightfvSGIX)
       ("_ALLEGRO_glGetFragmentLightivSGIX_t" GetFragmentLightivSGIX)
       ("_ALLEGRO_glGetFragmentMaterialfvSGIX_t" GetFragmentMaterialfvSGIX)
       ("_ALLEGRO_glGetFragmentMaterialivSGIX_t" GetFragmentMaterialivSGIX)
       ("_ALLEGRO_glLightEnviSGIX_t" LightEnviSGIX)
       ("_ALLEGRO_glDrawRangeElementsEXT_t" DrawRangeElementsEXT)
       ("_ALLEGRO_glApplyTextureEXT_t" ApplyTextureEXT)
       ("_ALLEGRO_glTextureLightEXT_t" TextureLightEXT)
       ("_ALLEGRO_glTextureMaterialEXT_t" TextureMaterialEXT)
       ("_ALLEGRO_glAsyncMarkerSGIX_t" AsyncMarkerSGIX)
       ("_ALLEGRO_glFinishAsyncSGIX_t" FinishAsyncSGIX)
       ("_ALLEGRO_glPollAsyncSGIX_t" PollAsyncSGIX)
       ("_ALLEGRO_glGenAsyncMarkersSGIX_t" GenAsyncMarkersSGIX)
       ("_ALLEGRO_glDeleteAsyncMarkersSGIX_t" DeleteAsyncMarkersSGIX)
       ("_ALLEGRO_glIsAsyncMarkerSGIX_t" IsAsyncMarkerSGIX)
       ("_ALLEGRO_glVertexPointervINTEL_t" VertexPointervINTEL)
       ("_ALLEGRO_glNormalPointervINTEL_t" NormalPointervINTEL)
       ("_ALLEGRO_glColorPointervINTEL_t" ColorPointervINTEL)
       ("_ALLEGRO_glTexCoordPointervINTEL_t" TexCoordPointervINTEL)
       ("_ALLEGRO_glPixelTransformParameteriEXT_t" PixelTransformParameteriEXT)
       ("_ALLEGRO_glPixelTransformParameterfEXT_t" PixelTransformParameterfEXT)
       ("_ALLEGRO_glPixelTransformParameterivEXT_t"
        PixelTransformParameterivEXT)
       ("_ALLEGRO_glPixelTransformParameterfvEXT_t"
        PixelTransformParameterfvEXT)
       ("_ALLEGRO_glSecondaryColor3bEXT_t" SecondaryColor3bEXT)
       ("_ALLEGRO_glSecondaryColor3bvEXT_t" SecondaryColor3bvEXT)
       ("_ALLEGRO_glSecondaryColor3dEXT_t" SecondaryColor3dEXT)
       ("_ALLEGRO_glSecondaryColor3dvEXT_t" SecondaryColor3dvEXT)
       ("_ALLEGRO_glSecondaryColor3fEXT_t" SecondaryColor3fEXT)
       ("_ALLEGRO_glSecondaryColor3fvEXT_t" SecondaryColor3fvEXT)
       ("_ALLEGRO_glSecondaryColor3iEXT_t" SecondaryColor3iEXT)
       ("_ALLEGRO_glSecondaryColor3ivEXT_t" SecondaryColor3ivEXT)
       ("_ALLEGRO_glSecondaryColor3sEXT_t" SecondaryColor3sEXT)
       ("_ALLEGRO_glSecondaryColor3svEXT_t" SecondaryColor3svEXT)
       ("_ALLEGRO_glSecondaryColor3ubEXT_t" SecondaryColor3ubEXT)
       ("_ALLEGRO_glSecondaryColor3ubvEXT_t" SecondaryColor3ubvEXT)
       ("_ALLEGRO_glSecondaryColor3uiEXT_t" SecondaryColor3uiEXT)
       ("_ALLEGRO_glSecondaryColor3uivEXT_t" SecondaryColor3uivEXT)
       ("_ALLEGRO_glSecondaryColor3usEXT_t" SecondaryColor3usEXT)
       ("_ALLEGRO_glSecondaryColor3usvEXT_t" SecondaryColor3usvEXT)
       ("_ALLEGRO_glSecondaryColorPointerEXT_t" SecondaryColorPointerEXT)
       ("_ALLEGRO_glTextureNormalEXT_t" TextureNormalEXT)
       ("_ALLEGRO_glMultiDrawArraysEXT_t" MultiDrawArraysEXT)
       ("_ALLEGRO_glMultiDrawElementsEXT_t" MultiDrawElementsEXT)
       ("_ALLEGRO_glFogCoordfEXT_t" FogCoordfEXT)
       ("_ALLEGRO_glFogCoordfvEXT_t" FogCoordfvEXT)
       ("_ALLEGRO_glFogCoorddEXT_t" FogCoorddEXT)
       ("_ALLEGRO_glFogCoorddvEXT_t" FogCoorddvEXT)
       ("_ALLEGRO_glFogCoordPointerEXT_t" FogCoordPointerEXT)
       ("_ALLEGRO_glTangent3bEXT_t" Tangent3bEXT)
       ("_ALLEGRO_glTangent3bvEXT_t" Tangent3bvEXT)
       ("_ALLEGRO_glTangent3dEXT_t" Tangent3dEXT)
       ("_ALLEGRO_glTangent3dvEXT_t" Tangent3dvEXT)
       ("_ALLEGRO_glTangent3fEXT_t" Tangent3fEXT)
       ("_ALLEGRO_glTangent3fvEXT_t" Tangent3fvEXT)
       ("_ALLEGRO_glTangent3iEXT_t" Tangent3iEXT)
       ("_ALLEGRO_glTangent3ivEXT_t" Tangent3ivEXT)
       ("_ALLEGRO_glTangent3sEXT_t" Tangent3sEXT)
       ("_ALLEGRO_glTangent3svEXT_t" Tangent3svEXT)
       ("_ALLEGRO_glBinormal3bEXT_t" Binormal3bEXT)
       ("_ALLEGRO_glBinormal3bvEXT_t" Binormal3bvEXT)
       ("_ALLEGRO_glBinormal3dEXT_t" Binormal3dEXT)
       ("_ALLEGRO_glBinormal3dvEXT_t" Binormal3dvEXT)
       ("_ALLEGRO_glBinormal3fEXT_t" Binormal3fEXT)
       ("_ALLEGRO_glBinormal3fvEXT_t" Binormal3fvEXT)
       ("_ALLEGRO_glBinormal3iEXT_t" Binormal3iEXT)
       ("_ALLEGRO_glBinormal3ivEXT_t" Binormal3ivEXT)
       ("_ALLEGRO_glBinormal3sEXT_t" Binormal3sEXT)
       ("_ALLEGRO_glBinormal3svEXT_t" Binormal3svEXT)
       ("_ALLEGRO_glTangentPointerEXT_t" TangentPointerEXT)
       ("_ALLEGRO_glBinormalPointerEXT_t" BinormalPointerEXT)
       ("_ALLEGRO_glFinishTextureSUNX_t" FinishTextureSUNX)
       ("_ALLEGRO_glGlobalAlphaFactorbSUN_t" GlobalAlphaFactorbSUN)
       ("_ALLEGRO_glGlobalAlphaFactorsSUN_t" GlobalAlphaFactorsSUN)
       ("_ALLEGRO_glGlobalAlphaFactoriSUN_t" GlobalAlphaFactoriSUN)
       ("_ALLEGRO_glGlobalAlphaFactorfSUN_t" GlobalAlphaFactorfSUN)
       ("_ALLEGRO_glGlobalAlphaFactordSUN_t" GlobalAlphaFactordSUN)
       ("_ALLEGRO_glGlobalAlphaFactorubSUN_t" GlobalAlphaFactorubSUN)
       ("_ALLEGRO_glGlobalAlphaFactorusSUN_t" GlobalAlphaFactorusSUN)
       ("_ALLEGRO_glGlobalAlphaFactoruiSUN_t" GlobalAlphaFactoruiSUN)
       ("_ALLEGRO_glReplacementCodeuiSUN_t" ReplacementCodeuiSUN)
       ("_ALLEGRO_glReplacementCodeusSUN_t" ReplacementCodeusSUN)
       ("_ALLEGRO_glReplacementCodeubSUN_t" ReplacementCodeubSUN)
       ("_ALLEGRO_glReplacementCodeuivSUN_t" ReplacementCodeuivSUN)
       ("_ALLEGRO_glReplacementCodeusvSUN_t" ReplacementCodeusvSUN)
       ("_ALLEGRO_glReplacementCodeubvSUN_t" ReplacementCodeubvSUN)
       ("_ALLEGRO_glReplacementCodePointerSUN_t" ReplacementCodePointerSUN)
       ("_ALLEGRO_glColor4ubVertex2fSUN_t" Color4ubVertex2fSUN)
       ("_ALLEGRO_glColor4ubVertex2fvSUN_t" Color4ubVertex2fvSUN)
       ("_ALLEGRO_glColor4ubVertex3fSUN_t" Color4ubVertex3fSUN)
       ("_ALLEGRO_glColor4ubVertex3fvSUN_t" Color4ubVertex3fvSUN)
       ("_ALLEGRO_glColor3fVertex3fSUN_t" Color3fVertex3fSUN)
       ("_ALLEGRO_glColor3fVertex3fvSUN_t" Color3fVertex3fvSUN)
       ("_ALLEGRO_glNormal3fVertex3fSUN_t" Normal3fVertex3fSUN)
       ("_ALLEGRO_glNormal3fVertex3fvSUN_t" Normal3fVertex3fvSUN)
       ("_ALLEGRO_glColor4fNormal3fVertex3fSUN_t" Color4fNormal3fVertex3fSUN)
       ("_ALLEGRO_glColor4fNormal3fVertex3fvSUN_t" Color4fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glTexCoord2fVertex3fSUN_t" TexCoord2fVertex3fSUN)
       ("_ALLEGRO_glTexCoord2fVertex3fvSUN_t" TexCoord2fVertex3fvSUN)
       ("_ALLEGRO_glTexCoord4fVertex4fSUN_t" TexCoord4fVertex4fSUN)
       ("_ALLEGRO_glTexCoord4fVertex4fvSUN_t" TexCoord4fVertex4fvSUN)
       ("_ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t"
        TexCoord2fColor4ubVertex3fSUN)
       ("_ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t"
        TexCoord2fColor4ubVertex3fvSUN)
       ("_ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t"
        TexCoord2fColor3fVertex3fSUN)
       ("_ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t"
        TexCoord2fColor3fVertex3fvSUN)
       ("_ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t"
        TexCoord2fNormal3fVertex3fSUN)
       ("_ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t"
        TexCoord2fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t"
        TexCoord2fColor4fNormal3fVertex3fSUN)
       ("_ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t"
        TexCoord2fColor4fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t"
        TexCoord4fColor4fNormal3fVertex4fSUN)
       ("_ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t"
        TexCoord4fColor4fNormal3fVertex4fvSUN)
       ("_ALLEGRO_glReplacementCodeuiVertex3fSUN_t"
        ReplacementCodeuiVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiVertex3fvSUN_t"
        ReplacementCodeuiVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t"
        ReplacementCodeuiColor4ubVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t"
        ReplacementCodeuiColor4ubVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t"
        ReplacementCodeuiColor3fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t"
        ReplacementCodeuiColor3fVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t"
        ReplacementCodeuiNormal3fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t"
        ReplacementCodeuiNormal3fVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t"
        ReplacementCodeuiColor4fNormal3fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t"
        ReplacementCodeuiColor4fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t"
        ReplacementCodeuiTexCoord2fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t"
        ReplacementCodeuiTexCoord2fVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t"
        ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t"
        ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t"
        ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
       ("_ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t"
        ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
       ("_ALLEGRO_glBlendFuncSeparateEXT_t" BlendFuncSeparateEXT)
       ("_ALLEGRO_glBlendFuncSeparateINGR_t" BlendFuncSeparateINGR)
       ("_ALLEGRO_glVertexWeightfEXT_t" VertexWeightfEXT)
       ("_ALLEGRO_glVertexWeightfvEXT_t" VertexWeightfvEXT)
       ("_ALLEGRO_glVertexWeightPointerEXT_t" VertexWeightPointerEXT)
       ("_ALLEGRO_glFlushVertexArrayRangeNV_t" FlushVertexArrayRangeNV)
       ("_ALLEGRO_glVertexArrayRangeNV_t" VertexArrayRangeNV)
       ("_ALLEGRO_glCombinerParameterfvNV_t" CombinerParameterfvNV)
       ("_ALLEGRO_glCombinerParameterfNV_t" CombinerParameterfNV)
       ("_ALLEGRO_glCombinerParameterivNV_t" CombinerParameterivNV)
       ("_ALLEGRO_glCombinerParameteriNV_t" CombinerParameteriNV)
       ("_ALLEGRO_glCombinerInputNV_t" CombinerInputNV)
       ("_ALLEGRO_glCombinerOutputNV_t" CombinerOutputNV)
       ("_ALLEGRO_glFinalCombinerInputNV_t" FinalCombinerInputNV)
       ("_ALLEGRO_glGetCombinerInputParameterfvNV_t"
        GetCombinerInputParameterfvNV)
       ("_ALLEGRO_glGetCombinerInputParameterivNV_t"
        GetCombinerInputParameterivNV)
       ("_ALLEGRO_glGetCombinerOutputParameterfvNV_t"
        GetCombinerOutputParameterfvNV)
       ("_ALLEGRO_glGetCombinerOutputParameterivNV_t"
        GetCombinerOutputParameterivNV)
       ("_ALLEGRO_glGetFinalCombinerInputParameterfvNV_t"
        GetFinalCombinerInputParameterfvNV)
       ("_ALLEGRO_glGetFinalCombinerInputParameterivNV_t"
        GetFinalCombinerInputParameterivNV)
       ("_ALLEGRO_glResizeBuffersMESA_t" ResizeBuffersMESA)
       ("_ALLEGRO_glWindowPos2dMESA_t" WindowPos2dMESA)
       ("_ALLEGRO_glWindowPos2dvMESA_t" WindowPos2dvMESA)
       ("_ALLEGRO_glWindowPos2fMESA_t" WindowPos2fMESA)
       ("_ALLEGRO_glWindowPos2fvMESA_t" WindowPos2fvMESA)
       ("_ALLEGRO_glWindowPos2iMESA_t" WindowPos2iMESA)
       ("_ALLEGRO_glWindowPos2ivMESA_t" WindowPos2ivMESA)
       ("_ALLEGRO_glWindowPos2sMESA_t" WindowPos2sMESA)
       ("_ALLEGRO_glWindowPos2svMESA_t" WindowPos2svMESA)
       ("_ALLEGRO_glWindowPos3dMESA_t" WindowPos3dMESA)
       ("_ALLEGRO_glWindowPos3dvMESA_t" WindowPos3dvMESA)
       ("_ALLEGRO_glWindowPos3fMESA_t" WindowPos3fMESA)
       ("_ALLEGRO_glWindowPos3fvMESA_t" WindowPos3fvMESA)
       ("_ALLEGRO_glWindowPos3iMESA_t" WindowPos3iMESA)
       ("_ALLEGRO_glWindowPos3ivMESA_t" WindowPos3ivMESA)
       ("_ALLEGRO_glWindowPos3sMESA_t" WindowPos3sMESA)
       ("_ALLEGRO_glWindowPos3svMESA_t" WindowPos3svMESA)
       ("_ALLEGRO_glWindowPos4dMESA_t" WindowPos4dMESA)
       ("_ALLEGRO_glWindowPos4dvMESA_t" WindowPos4dvMESA)
       ("_ALLEGRO_glWindowPos4fMESA_t" WindowPos4fMESA)
       ("_ALLEGRO_glWindowPos4fvMESA_t" WindowPos4fvMESA)
       ("_ALLEGRO_glWindowPos4iMESA_t" WindowPos4iMESA)
       ("_ALLEGRO_glWindowPos4ivMESA_t" WindowPos4ivMESA)
       ("_ALLEGRO_glWindowPos4sMESA_t" WindowPos4sMESA)
       ("_ALLEGRO_glWindowPos4svMESA_t" WindowPos4svMESA)
       ("_ALLEGRO_glMultiModeDrawArraysIBM_t" MultiModeDrawArraysIBM)
       ("_ALLEGRO_glMultiModeDrawElementsIBM_t" MultiModeDrawElementsIBM)
       ("_ALLEGRO_glTbufferMask3DFX_t" TbufferMask3DFX)
       ("_ALLEGRO_glSampleMaskEXT_t" SampleMaskEXT)
       ("_ALLEGRO_glSamplePatternEXT_t" SamplePatternEXT)
       ("_ALLEGRO_glTextureColorMaskSGIS_t" TextureColorMaskSGIS)
       ("_ALLEGRO_glIglooInterfaceSGIX_t" IglooInterfaceSGIX)
       ("_ALLEGRO_glDeleteFencesNV_t" DeleteFencesNV)
       ("_ALLEGRO_glGenFencesNV_t" GenFencesNV)
       ("_ALLEGRO_glIsFenceNV_t" IsFenceNV)
       ("_ALLEGRO_glTestFenceNV_t" TestFenceNV)
       ("_ALLEGRO_glGetFenceivNV_t" GetFenceivNV)
       ("_ALLEGRO_glFinishFenceNV_t" FinishFenceNV)
       ("_ALLEGRO_glSetFenceNV_t" SetFenceNV)
       ("_ALLEGRO_glMapControlPointsNV_t" MapControlPointsNV)
       ("_ALLEGRO_glMapParameterivNV_t" MapParameterivNV)
       ("_ALLEGRO_glMapParameterfvNV_t" MapParameterfvNV)
       ("_ALLEGRO_glGetMapControlPointsNV_t" GetMapControlPointsNV)
       ("_ALLEGRO_glGetMapParameterivNV_t" GetMapParameterivNV)
       ("_ALLEGRO_glGetMapParameterfvNV_t" GetMapParameterfvNV)
       ("_ALLEGRO_glGetMapAttribParameterivNV_t" GetMapAttribParameterivNV)
       ("_ALLEGRO_glGetMapAttribParameterfvNV_t" GetMapAttribParameterfvNV)
       ("_ALLEGRO_glEvalMapsNV_t" EvalMapsNV)
       ("_ALLEGRO_glCombinerStageParameterfvNV_t" CombinerStageParameterfvNV)
       ("_ALLEGRO_glGetCombinerStageParameterfvNV_t"
        GetCombinerStageParameterfvNV)
       ("_ALLEGRO_glAreProgramsResidentNV_t" AreProgramsResidentNV)
       ("_ALLEGRO_glBindProgramNV_t" BindProgramNV)
       ("_ALLEGRO_glDeleteProgramsNV_t" DeleteProgramsNV)
       ("_ALLEGRO_glExecuteProgramNV_t" ExecuteProgramNV)
       ("_ALLEGRO_glGenProgramsNV_t" GenProgramsNV)
       ("_ALLEGRO_glGetProgramParameterdvNV_t" GetProgramParameterdvNV)
       ("_ALLEGRO_glGetProgramParameterfvNV_t" GetProgramParameterfvNV)
       ("_ALLEGRO_glGetProgramivNV_t" GetProgramivNV)
       ("_ALLEGRO_glGetProgramStringNV_t" GetProgramStringNV)
       ("_ALLEGRO_glGetTrackMatrixivNV_t" GetTrackMatrixivNV)
       ("_ALLEGRO_glGetVertexAttribdvNV_t" GetVertexAttribdvNV)
       ("_ALLEGRO_glGetVertexAttribfvNV_t" GetVertexAttribfvNV)
       ("_ALLEGRO_glGetVertexAttribivNV_t" GetVertexAttribivNV)
       ("_ALLEGRO_glGetVertexAttribPointervNV_t" GetVertexAttribPointervNV)
       ("_ALLEGRO_glIsProgramNV_t" IsProgramNV)
       ("_ALLEGRO_glLoadProgramNV_t" LoadProgramNV)
       ("_ALLEGRO_glProgramParameter4dNV_t" ProgramParameter4dNV)
       ("_ALLEGRO_glProgramParameter4dvNV_t" ProgramParameter4dvNV)
       ("_ALLEGRO_glProgramParameter4fNV_t" ProgramParameter4fNV)
       ("_ALLEGRO_glProgramParameter4fvNV_t" ProgramParameter4fvNV)
       ("_ALLEGRO_glProgramParameters4dvNV_t" ProgramParameters4dvNV)
       ("_ALLEGRO_glProgramParameters4fvNV_t" ProgramParameters4fvNV)
       ("_ALLEGRO_glRequestResidentProgramsNV_t" RequestResidentProgramsNV)
       ("_ALLEGRO_glTrackMatrixNV_t" TrackMatrixNV)
       ("_ALLEGRO_glVertexAttribPointerNV_t" VertexAttribPointerNV)
       ("_ALLEGRO_glVertexAttrib1dNV_t" VertexAttrib1dNV)
       ("_ALLEGRO_glVertexAttrib1dvNV_t" VertexAttrib1dvNV)
       ("_ALLEGRO_glVertexAttrib1fNV_t" VertexAttrib1fNV)
       ("_ALLEGRO_glVertexAttrib1fvNV_t" VertexAttrib1fvNV)
       ("_ALLEGRO_glVertexAttrib1sNV_t" VertexAttrib1sNV)
       ("_ALLEGRO_glVertexAttrib1svNV_t" VertexAttrib1svNV)
       ("_ALLEGRO_glVertexAttrib2dNV_t" VertexAttrib2dNV)
       ("_ALLEGRO_glVertexAttrib2dvNV_t" VertexAttrib2dvNV)
       ("_ALLEGRO_glVertexAttrib2fNV_t" VertexAttrib2fNV)
       ("_ALLEGRO_glVertexAttrib2fvNV_t" VertexAttrib2fvNV)
       ("_ALLEGRO_glVertexAttrib2sNV_t" VertexAttrib2sNV)
       ("_ALLEGRO_glVertexAttrib2svNV_t" VertexAttrib2svNV)
       ("_ALLEGRO_glVertexAttrib3dNV_t" VertexAttrib3dNV)
       ("_ALLEGRO_glVertexAttrib3dvNV_t" VertexAttrib3dvNV)
       ("_ALLEGRO_glVertexAttrib3fNV_t" VertexAttrib3fNV)
       ("_ALLEGRO_glVertexAttrib3fvNV_t" VertexAttrib3fvNV)
       ("_ALLEGRO_glVertexAttrib3sNV_t" VertexAttrib3sNV)
       ("_ALLEGRO_glVertexAttrib3svNV_t" VertexAttrib3svNV)
       ("_ALLEGRO_glVertexAttrib4dNV_t" VertexAttrib4dNV)
       ("_ALLEGRO_glVertexAttrib4dvNV_t" VertexAttrib4dvNV)
       ("_ALLEGRO_glVertexAttrib4fNV_t" VertexAttrib4fNV)
       ("_ALLEGRO_glVertexAttrib4fvNV_t" VertexAttrib4fvNV)
       ("_ALLEGRO_glVertexAttrib4sNV_t" VertexAttrib4sNV)
       ("_ALLEGRO_glVertexAttrib4svNV_t" VertexAttrib4svNV)
       ("_ALLEGRO_glVertexAttrib4ubNV_t" VertexAttrib4ubNV)
       ("_ALLEGRO_glVertexAttrib4ubvNV_t" VertexAttrib4ubvNV)
       ("_ALLEGRO_glVertexAttribs1dvNV_t" VertexAttribs1dvNV)
       ("_ALLEGRO_glVertexAttribs1fvNV_t" VertexAttribs1fvNV)
       ("_ALLEGRO_glVertexAttribs1svNV_t" VertexAttribs1svNV)
       ("_ALLEGRO_glVertexAttribs2dvNV_t" VertexAttribs2dvNV)
       ("_ALLEGRO_glVertexAttribs2fvNV_t" VertexAttribs2fvNV)
       ("_ALLEGRO_glVertexAttribs2svNV_t" VertexAttribs2svNV)
       ("_ALLEGRO_glVertexAttribs3dvNV_t" VertexAttribs3dvNV)
       ("_ALLEGRO_glVertexAttribs3fvNV_t" VertexAttribs3fvNV)
       ("_ALLEGRO_glVertexAttribs3svNV_t" VertexAttribs3svNV)
       ("_ALLEGRO_glVertexAttribs4dvNV_t" VertexAttribs4dvNV)
       ("_ALLEGRO_glVertexAttribs4fvNV_t" VertexAttribs4fvNV)
       ("_ALLEGRO_glVertexAttribs4svNV_t" VertexAttribs4svNV)
       ("_ALLEGRO_glVertexAttribs4ubvNV_t" VertexAttribs4ubvNV)
       ("_ALLEGRO_glTexBumpParameterivATI_t" TexBumpParameterivATI)
       ("_ALLEGRO_glTexBumpParameterfvATI_t" TexBumpParameterfvATI)
       ("_ALLEGRO_glGetTexBumpParameterivATI_t" GetTexBumpParameterivATI)
       ("_ALLEGRO_glGetTexBumpParameterfvATI_t" GetTexBumpParameterfvATI)
       ("_ALLEGRO_glGenFragmentShadersATI_t" GenFragmentShadersATI)
       ("_ALLEGRO_glBindFragmentShaderATI_t" BindFragmentShaderATI)
       ("_ALLEGRO_glDeleteFragmentShaderATI_t" DeleteFragmentShaderATI)
       ("_ALLEGRO_glBeginFragmentShaderATI_t" BeginFragmentShaderATI)
       ("_ALLEGRO_glEndFragmentShaderATI_t" EndFragmentShaderATI)
       ("_ALLEGRO_glPassTexCoordATI_t" PassTexCoordATI)
       ("_ALLEGRO_glSampleMapATI_t" SampleMapATI)
       ("_ALLEGRO_glColorFragmentOp1ATI_t" ColorFragmentOp1ATI)
       ("_ALLEGRO_glColorFragmentOp2ATI_t" ColorFragmentOp2ATI)
       ("_ALLEGRO_glColorFragmentOp3ATI_t" ColorFragmentOp3ATI)
       ("_ALLEGRO_glAlphaFragmentOp1ATI_t" AlphaFragmentOp1ATI)
       ("_ALLEGRO_glAlphaFragmentOp2ATI_t" AlphaFragmentOp2ATI)
       ("_ALLEGRO_glAlphaFragmentOp3ATI_t" AlphaFragmentOp3ATI)
       ("_ALLEGRO_glSetFragmentShaderConstantATI_t"
        SetFragmentShaderConstantATI)
       ("_ALLEGRO_glPNTrianglesiATI_t" PNTrianglesiATI)
       ("_ALLEGRO_glPNTrianglesfATI_t" PNTrianglesfATI)
       ("_ALLEGRO_glNewObjectBufferATI_t" NewObjectBufferATI)
       ("_ALLEGRO_glIsObjectBufferATI_t" IsObjectBufferATI)
       ("_ALLEGRO_glUpdateObjectBufferATI_t" UpdateObjectBufferATI)
       ("_ALLEGRO_glGetObjectBufferfvATI_t" GetObjectBufferfvATI)
       ("_ALLEGRO_glGetObjectBufferivATI_t" GetObjectBufferivATI)
       ("_ALLEGRO_glFreeObjectBufferATI_t" FreeObjectBufferATI)
       ("_ALLEGRO_glArrayObjectATI_t" ArrayObjectATI)
       ("_ALLEGRO_glGetArrayObjectfvATI_t" GetArrayObjectfvATI)
       ("_ALLEGRO_glGetArrayObjectivATI_t" GetArrayObjectivATI)
       ("_ALLEGRO_glVariantArrayObjectATI_t" VariantArrayObjectATI)
       ("_ALLEGRO_glGetVariantArrayObjectfvATI_t" GetVariantArrayObjectfvATI)
       ("_ALLEGRO_glGetVariantArrayObjectivATI_t" GetVariantArrayObjectivATI)
       ("_ALLEGRO_glBeginVertexShaderEXT_t" BeginVertexShaderEXT)
       ("_ALLEGRO_glEndVertexShaderEXT_t" EndVertexShaderEXT)
       ("_ALLEGRO_glBindVertexShaderEXT_t" BindVertexShaderEXT)
       ("_ALLEGRO_glGenVertexShadersEXT_t" GenVertexShadersEXT)
       ("_ALLEGRO_glDeleteVertexShaderEXT_t" DeleteVertexShaderEXT)
       ("_ALLEGRO_glShaderOp1EXT_t" ShaderOp1EXT)
       ("_ALLEGRO_glShaderOp2EXT_t" ShaderOp2EXT)
       ("_ALLEGRO_glShaderOp3EXT_t" ShaderOp3EXT)
       ("_ALLEGRO_glSwizzleEXT_t" SwizzleEXT)
       ("_ALLEGRO_glWriteMaskEXT_t" WriteMaskEXT)
       ("_ALLEGRO_glInsertComponentEXT_t" InsertComponentEXT)
       ("_ALLEGRO_glExtractComponentEXT_t" ExtractComponentEXT)
       ("_ALLEGRO_glGenSymbolsEXT_t" GenSymbolsEXT)
       ("_ALLEGRO_glSetInvariantEXT_t" SetInvariantEXT)
       ("_ALLEGRO_glSetLocalConstantEXT_t" SetLocalConstantEXT)
       ("_ALLEGRO_glVariantbvEXT_t" VariantbvEXT)
       ("_ALLEGRO_glVariantsvEXT_t" VariantsvEXT)
       ("_ALLEGRO_glVariantivEXT_t" VariantivEXT)
       ("_ALLEGRO_glVariantfvEXT_t" VariantfvEXT)
       ("_ALLEGRO_glVariantdvEXT_t" VariantdvEXT)
       ("_ALLEGRO_glVariantubvEXT_t" VariantubvEXT)
       ("_ALLEGRO_glVariantusvEXT_t" VariantusvEXT)
       ("_ALLEGRO_glVariantuivEXT_t" VariantuivEXT)
       ("_ALLEGRO_glVariantPointerEXT_t" VariantPointerEXT)
       ("_ALLEGRO_glEnableVariantClientStateEXT_t" EnableVariantClientStateEXT)
       ("_ALLEGRO_glDisableVariantClientStateEXT_t"
        DisableVariantClientStateEXT)
       ("_ALLEGRO_glBindLightParameterEXT_t" BindLightParameterEXT)
       ("_ALLEGRO_glBindMaterialParameterEXT_t" BindMaterialParameterEXT)
       ("_ALLEGRO_glBindTexGenParameterEXT_t" BindTexGenParameterEXT)
       ("_ALLEGRO_glBindTextureUnitParameterEXT_t" BindTextureUnitParameterEXT)
       ("_ALLEGRO_glBindParameterEXT_t" BindParameterEXT)
       ("_ALLEGRO_glIsVariantEnabledEXT_t" IsVariantEnabledEXT)
       ("_ALLEGRO_glGetVariantBooleanvEXT_t" GetVariantBooleanvEXT)
       ("_ALLEGRO_glGetVariantIntegervEXT_t" GetVariantIntegervEXT)
       ("_ALLEGRO_glGetVariantFloatvEXT_t" GetVariantFloatvEXT)
       ("_ALLEGRO_glGetVariantPointervEXT_t" GetVariantPointervEXT)
       ("_ALLEGRO_glGetInvariantBooleanvEXT_t" GetInvariantBooleanvEXT)
       ("_ALLEGRO_glGetInvariantIntegervEXT_t" GetInvariantIntegervEXT)
       ("_ALLEGRO_glGetInvariantFloatvEXT_t" GetInvariantFloatvEXT)
       ("_ALLEGRO_glGetLocalConstantBooleanvEXT_t" GetLocalConstantBooleanvEXT)
       ("_ALLEGRO_glGetLocalConstantIntegervEXT_t" GetLocalConstantIntegervEXT)
       ("_ALLEGRO_glGetLocalConstantFloatvEXT_t" GetLocalConstantFloatvEXT)
       ("_ALLEGRO_glVertexStream1sATI_t" VertexStream1sATI)
       ("_ALLEGRO_glVertexStream1svATI_t" VertexStream1svATI)
       ("_ALLEGRO_glVertexStream1iATI_t" VertexStream1iATI)
       ("_ALLEGRO_glVertexStream1ivATI_t" VertexStream1ivATI)
       ("_ALLEGRO_glVertexStream1fATI_t" VertexStream1fATI)
       ("_ALLEGRO_glVertexStream1fvATI_t" VertexStream1fvATI)
       ("_ALLEGRO_glVertexStream1dATI_t" VertexStream1dATI)
       ("_ALLEGRO_glVertexStream1dvATI_t" VertexStream1dvATI)
       ("_ALLEGRO_glVertexStream2sATI_t" VertexStream2sATI)
       ("_ALLEGRO_glVertexStream2svATI_t" VertexStream2svATI)
       ("_ALLEGRO_glVertexStream2iATI_t" VertexStream2iATI)
       ("_ALLEGRO_glVertexStream2ivATI_t" VertexStream2ivATI)
       ("_ALLEGRO_glVertexStream2fATI_t" VertexStream2fATI)
       ("_ALLEGRO_glVertexStream2fvATI_t" VertexStream2fvATI)
       ("_ALLEGRO_glVertexStream2dATI_t" VertexStream2dATI)
       ("_ALLEGRO_glVertexStream2dvATI_t" VertexStream2dvATI)
       ("_ALLEGRO_glVertexStream3sATI_t" VertexStream3sATI)
       ("_ALLEGRO_glVertexStream3svATI_t" VertexStream3svATI)
       ("_ALLEGRO_glVertexStream3iATI_t" VertexStream3iATI)
       ("_ALLEGRO_glVertexStream3ivATI_t" VertexStream3ivATI)
       ("_ALLEGRO_glVertexStream3fATI_t" VertexStream3fATI)
       ("_ALLEGRO_glVertexStream3fvATI_t" VertexStream3fvATI)
       ("_ALLEGRO_glVertexStream3dATI_t" VertexStream3dATI)
       ("_ALLEGRO_glVertexStream3dvATI_t" VertexStream3dvATI)
       ("_ALLEGRO_glVertexStream4sATI_t" VertexStream4sATI)
       ("_ALLEGRO_glVertexStream4svATI_t" VertexStream4svATI)
       ("_ALLEGRO_glVertexStream4iATI_t" VertexStream4iATI)
       ("_ALLEGRO_glVertexStream4ivATI_t" VertexStream4ivATI)
       ("_ALLEGRO_glVertexStream4fATI_t" VertexStream4fATI)
       ("_ALLEGRO_glVertexStream4fvATI_t" VertexStream4fvATI)
       ("_ALLEGRO_glVertexStream4dATI_t" VertexStream4dATI)
       ("_ALLEGRO_glVertexStream4dvATI_t" VertexStream4dvATI)
       ("_ALLEGRO_glNormalStream3bATI_t" NormalStream3bATI)
       ("_ALLEGRO_glNormalStream3bvATI_t" NormalStream3bvATI)
       ("_ALLEGRO_glNormalStream3sATI_t" NormalStream3sATI)
       ("_ALLEGRO_glNormalStream3svATI_t" NormalStream3svATI)
       ("_ALLEGRO_glNormalStream3iATI_t" NormalStream3iATI)
       ("_ALLEGRO_glNormalStream3ivATI_t" NormalStream3ivATI)
       ("_ALLEGRO_glNormalStream3fATI_t" NormalStream3fATI)
       ("_ALLEGRO_glNormalStream3fvATI_t" NormalStream3fvATI)
       ("_ALLEGRO_glNormalStream3dATI_t" NormalStream3dATI)
       ("_ALLEGRO_glNormalStream3dvATI_t" NormalStream3dvATI)
       ("_ALLEGRO_glClientActiveVertexStreamATI_t" ClientActiveVertexStreamATI)
       ("_ALLEGRO_glVertexBlendEnviATI_t" VertexBlendEnviATI)
       ("_ALLEGRO_glVertexBlendEnvfATI_t" VertexBlendEnvfATI)
       ("_ALLEGRO_glElementPointerATI_t" ElementPointerATI)
       ("_ALLEGRO_glDrawElementArrayATI_t" DrawElementArrayATI)
       ("_ALLEGRO_glDrawRangeElementArrayATI_t" DrawRangeElementArrayATI)
       ("_ALLEGRO_glDrawMeshArraysSUN_t" DrawMeshArraysSUN)
       ("_ALLEGRO_glGenOcclusionQueriesNV_t" GenOcclusionQueriesNV)
       ("_ALLEGRO_glDeleteOcclusionQueriesNV_t" DeleteOcclusionQueriesNV)
       ("_ALLEGRO_glIsOcclusionQueryNV_t" IsOcclusionQueryNV)
       ("_ALLEGRO_glBeginOcclusionQueryNV_t" BeginOcclusionQueryNV)
       ("_ALLEGRO_glEndOcclusionQueryNV_t" EndOcclusionQueryNV)
       ("_ALLEGRO_glGetOcclusionQueryivNV_t" GetOcclusionQueryivNV)
       ("_ALLEGRO_glGetOcclusionQueryuivNV_t" GetOcclusionQueryuivNV)
       ("_ALLEGRO_glPointParameteriNV_t" PointParameteriNV)
       ("_ALLEGRO_glPointParameterivNV_t" PointParameterivNV)
       ("_ALLEGRO_glActiveStencilFaceEXT_t" ActiveStencilFaceEXT)
       ("_ALLEGRO_glElementPointerAPPLE_t" ElementPointerAPPLE)
       ("_ALLEGRO_glDrawElementArrayAPPLE_t" DrawElementArrayAPPLE)
       ("_ALLEGRO_glDrawRangeElementArrayAPPLE_t" DrawRangeElementArrayAPPLE)
       ("_ALLEGRO_glMultiDrawElementArrayAPPLE_t" MultiDrawElementArrayAPPLE)
       ("_ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t"
        MultiDrawRangeElementArrayAPPLE)
       ("_ALLEGRO_glGenFencesAPPLE_t" GenFencesAPPLE)
       ("_ALLEGRO_glDeleteFencesAPPLE_t" DeleteFencesAPPLE)
       ("_ALLEGRO_glSetFenceAPPLE_t" SetFenceAPPLE)
       ("_ALLEGRO_glIsFenceAPPLE_t" IsFenceAPPLE)
       ("_ALLEGRO_glTestFenceAPPLE_t" TestFenceAPPLE)
       ("_ALLEGRO_glFinishFenceAPPLE_t" FinishFenceAPPLE)
       ("_ALLEGRO_glTestObjectAPPLE_t" TestObjectAPPLE)
       ("_ALLEGRO_glFinishObjectAPPLE_t" FinishObjectAPPLE)
       ("_ALLEGRO_glBindVertexArrayAPPLE_t" BindVertexArrayAPPLE)
       ("_ALLEGRO_glDeleteVertexArraysAPPLE_t" DeleteVertexArraysAPPLE)
       ("_ALLEGRO_glGenVertexArraysAPPLE_t" GenVertexArraysAPPLE)
       ("_ALLEGRO_glIsVertexArrayAPPLE_t" IsVertexArrayAPPLE)
       ("_ALLEGRO_glVertexArrayRangeAPPLE_t" VertexArrayRangeAPPLE)
       ("_ALLEGRO_glFlushVertexArrayRangeAPPLE_t" FlushVertexArrayRangeAPPLE)
       ("_ALLEGRO_glVertexArrayParameteriAPPLE_t" VertexArrayParameteriAPPLE)
       ("_ALLEGRO_glDrawBuffersATI_t" DrawBuffersATI)
       ("_ALLEGRO_glProgramNamedParameter4fNV_t" ProgramNamedParameter4fNV)
       ("_ALLEGRO_glProgramNamedParameter4dNV_t" ProgramNamedParameter4dNV)
       ("_ALLEGRO_glProgramNamedParameter4fvNV_t" ProgramNamedParameter4fvNV)
       ("_ALLEGRO_glProgramNamedParameter4dvNV_t" ProgramNamedParameter4dvNV)
       ("_ALLEGRO_glGetProgramNamedParameterfvNV_t"
        GetProgramNamedParameterfvNV)
       ("_ALLEGRO_glGetProgramNamedParameterdvNV_t"
        GetProgramNamedParameterdvNV)
       ("_ALLEGRO_glVertex2hNV_t" Vertex2hNV)
       ("_ALLEGRO_glVertex2hvNV_t" Vertex2hvNV)
       ("_ALLEGRO_glVertex3hNV_t" Vertex3hNV)
       ("_ALLEGRO_glVertex3hvNV_t" Vertex3hvNV)
       ("_ALLEGRO_glVertex4hNV_t" Vertex4hNV)
       ("_ALLEGRO_glVertex4hvNV_t" Vertex4hvNV)
       ("_ALLEGRO_glNormal3hNV_t" Normal3hNV)
       ("_ALLEGRO_glNormal3hvNV_t" Normal3hvNV)
       ("_ALLEGRO_glColor3hNV_t" Color3hNV)
       ("_ALLEGRO_glColor3hvNV_t" Color3hvNV)
       ("_ALLEGRO_glColor4hNV_t" Color4hNV)
       ("_ALLEGRO_glColor4hvNV_t" Color4hvNV)
       ("_ALLEGRO_glTexCoord1hNV_t" TexCoord1hNV)
       ("_ALLEGRO_glTexCoord1hvNV_t" TexCoord1hvNV)
       ("_ALLEGRO_glTexCoord2hNV_t" TexCoord2hNV)
       ("_ALLEGRO_glTexCoord2hvNV_t" TexCoord2hvNV)
       ("_ALLEGRO_glTexCoord3hNV_t" TexCoord3hNV)
       ("_ALLEGRO_glTexCoord3hvNV_t" TexCoord3hvNV)
       ("_ALLEGRO_glTexCoord4hNV_t" TexCoord4hNV)
       ("_ALLEGRO_glTexCoord4hvNV_t" TexCoord4hvNV)
       ("_ALLEGRO_glMultiTexCoord1hNV_t" MultiTexCoord1hNV)
       ("_ALLEGRO_glMultiTexCoord1hvNV_t" MultiTexCoord1hvNV)
       ("_ALLEGRO_glMultiTexCoord2hNV_t" MultiTexCoord2hNV)
       ("_ALLEGRO_glMultiTexCoord2hvNV_t" MultiTexCoord2hvNV)
       ("_ALLEGRO_glMultiTexCoord3hNV_t" MultiTexCoord3hNV)
       ("_ALLEGRO_glMultiTexCoord3hvNV_t" MultiTexCoord3hvNV)
       ("_ALLEGRO_glMultiTexCoord4hNV_t" MultiTexCoord4hNV)
       ("_ALLEGRO_glMultiTexCoord4hvNV_t" MultiTexCoord4hvNV)
       ("_ALLEGRO_glFogCoordhNV_t" FogCoordhNV)
       ("_ALLEGRO_glFogCoordhvNV_t" FogCoordhvNV)
       ("_ALLEGRO_glSecondaryColor3hNV_t" SecondaryColor3hNV)
       ("_ALLEGRO_glSecondaryColor3hvNV_t" SecondaryColor3hvNV)
       ("_ALLEGRO_glVertexWeighthNV_t" VertexWeighthNV)
       ("_ALLEGRO_glVertexWeighthvNV_t" VertexWeighthvNV)
       ("_ALLEGRO_glVertexAttrib1hNV_t" VertexAttrib1hNV)
       ("_ALLEGRO_glVertexAttrib1hvNV_t" VertexAttrib1hvNV)
       ("_ALLEGRO_glVertexAttrib2hNV_t" VertexAttrib2hNV)
       ("_ALLEGRO_glVertexAttrib2hvNV_t" VertexAttrib2hvNV)
       ("_ALLEGRO_glVertexAttrib3hNV_t" VertexAttrib3hNV)
       ("_ALLEGRO_glVertexAttrib3hvNV_t" VertexAttrib3hvNV)
       ("_ALLEGRO_glVertexAttrib4hNV_t" VertexAttrib4hNV)
       ("_ALLEGRO_glVertexAttrib4hvNV_t" VertexAttrib4hvNV)
       ("_ALLEGRO_glVertexAttribs1hvNV_t" VertexAttribs1hvNV)
       ("_ALLEGRO_glVertexAttribs2hvNV_t" VertexAttribs2hvNV)
       ("_ALLEGRO_glVertexAttribs3hvNV_t" VertexAttribs3hvNV)
       ("_ALLEGRO_glVertexAttribs4hvNV_t" VertexAttribs4hvNV)
       ("_ALLEGRO_glPixelDataRangeNV_t" PixelDataRangeNV)
       ("_ALLEGRO_glFlushPixelDataRangeNV_t" FlushPixelDataRangeNV)
       ("_ALLEGRO_glPrimitiveRestartNV_t" PrimitiveRestartNV)
       ("_ALLEGRO_glPrimitiveRestartIndexNV_t" PrimitiveRestartIndexNV)
       ("_ALLEGRO_glMapObjectBufferATI_t" MapObjectBufferATI)
       ("_ALLEGRO_glUnmapObjectBufferATI_t" UnmapObjectBufferATI)
       ("_ALLEGRO_glVertexAttribArrayObjectATI_t" VertexAttribArrayObjectATI)
       ("_ALLEGRO_glGetVertexAttribArrayObjectfvATI_t"
        GetVertexAttribArrayObjectfvATI)
       ("_ALLEGRO_glGetVertexAttribArrayObjectivATI_t"
        GetVertexAttribArrayObjectivATI)
       ("_ALLEGRO_glVertex2bOES_t" Vertex2bOES)
       ("_ALLEGRO_glVertex3bOES_t" Vertex3bOES)
       ("_ALLEGRO_glVertex4bOES_t" Vertex4bOES)
       ("_ALLEGRO_glVertex2bvOES_t" Vertex2bvOES)
       ("_ALLEGRO_glVertex3bvOES_t" Vertex3bvOES)
       ("_ALLEGRO_glVertex4bvOES_t" Vertex4bvOES)
       ("_ALLEGRO_glTexCoord1bOES_t" TexCoord1bOES)
       ("_ALLEGRO_glTexCoord2bOES_t" TexCoord2bOES)
       ("_ALLEGRO_glTexCoord3bOES_t" TexCoord3bOES)
       ("_ALLEGRO_glTexCoord4bOES_t" TexCoord4bOES)
       ("_ALLEGRO_glTexCoord1bvOES_t" TexCoord1bvOES)
       ("_ALLEGRO_glTexCoord2bvOES_t" TexCoord2bvOES)
       ("_ALLEGRO_glTexCoord3bvOES_t" TexCoord3bvOES)
       ("_ALLEGRO_glTexCoord4bvOES_t" TexCoord4bvOES)
       ("_ALLEGRO_glMultiTexCoord1bOES_t" MultiTexCoord1bOES)
       ("_ALLEGRO_glMultiTexCoord2bOES_t" MultiTexCoord2bOES)
       ("_ALLEGRO_glMultiTexCoord3bOES_t" MultiTexCoord3bOES)
       ("_ALLEGRO_glMultiTexCoord4bOES_t" MultiTexCoord4bOES)
       ("_ALLEGRO_glMultiTexCoord1bvOES_t" MultiTexCoord1bvOES)
       ("_ALLEGRO_glMultiTexCoord2bvOES_t" MultiTexCoord2bvOES)
       ("_ALLEGRO_glMultiTexCoord3bvOES_t" MultiTexCoord3bvOES)
       ("_ALLEGRO_glMultiTexCoord4bvOES_t" MultiTexCoord4bvOES)
       ("_ALLEGRO_glVertex2xOES_t" Vertex2xOES)
       ("_ALLEGRO_glVertex3xOES_t" Vertex3xOES)
       ("_ALLEGRO_glVertex4xOES_t" Vertex4xOES)
       ("_ALLEGRO_glVertex2xvOES_t" Vertex2xvOES)
       ("_ALLEGRO_glVertex3xvOES_t" Vertex3xvOES)
       ("_ALLEGRO_glVertex4xvOES_t" Vertex4xvOES)
       ("_ALLEGRO_glNormal3xOES_t" Normal3xOES)
       ("_ALLEGRO_glNormal3xvOES_t" Normal3xvOES)
       ("_ALLEGRO_glTexCoord1xOES_t" TexCoord1xOES)
       ("_ALLEGRO_glTexCoord2xOES_t" TexCoord2xOES)
       ("_ALLEGRO_glTexCoord3xOES_t" TexCoord3xOES)
       ("_ALLEGRO_glTexCoord4xOES_t" TexCoord4xOES)
       ("_ALLEGRO_glTexCoord1xvOES_t" TexCoord1xvOES)
       ("_ALLEGRO_glTexCoord2xvOES_t" TexCoord2xvOES)
       ("_ALLEGRO_glTexCoord3xvOES_t" TexCoord3xvOES)
       ("_ALLEGRO_glTexCoord4xvOES_t" TexCoord4xvOES)
       ("_ALLEGRO_glMultiTexCoord1xOES_t" MultiTexCoord1xOES)
       ("_ALLEGRO_glMultiTexCoord2xOES_t" MultiTexCoord2xOES)
       ("_ALLEGRO_glMultiTexCoord3xOES_t" MultiTexCoord3xOES)
       ("_ALLEGRO_glMultiTexCoord4xOES_t" MultiTexCoord4xOES)
       ("_ALLEGRO_glMultiTexCoord1xvOES_t" MultiTexCoord1xvOES)
       ("_ALLEGRO_glMultiTexCoord2xvOES_t" MultiTexCoord2xvOES)
       ("_ALLEGRO_glMultiTexCoord3xvOES_t" MultiTexCoord3xvOES)
       ("_ALLEGRO_glMultiTexCoord4xvOES_t" MultiTexCoord4xvOES)
       ("_ALLEGRO_glColor3xOES_t" Color3xOES)
       ("_ALLEGRO_glColor4xOES_t" Color4xOES)
       ("_ALLEGRO_glColor3xvOES_t" Color3xvOES)
       ("_ALLEGRO_glColor4xvOES_t" Color4xvOES)
       ("_ALLEGRO_glIndexxOES_t" IndexxOES)
       ("_ALLEGRO_glIndexxvOES_t" IndexxvOES)
       ("_ALLEGRO_glRectxOES_t" RectxOES)
       ("_ALLEGRO_glDepthRangexOES_t" DepthRangexOES)
       ("_ALLEGRO_glRotatexOES_t" RotatexOES)
       ("_ALLEGRO_glScalexOES_t" ScalexOES)
       ("_ALLEGRO_glTranslatexOES_t" TranslatexOES)
       ("_ALLEGRO_glFrustumxOES_t" FrustumxOES)
       ("_ALLEGRO_glOrthoxOES_t" OrthoxOES)
       ("_ALLEGRO_glTexGenxOES_t" TexGenxOES)
       ("_ALLEGRO_glTexGenxvOES_t" TexGenxvOES)
       ("_ALLEGRO_glGetTexGenxvOES_t" GetTexGenxvOES)
       ("_ALLEGRO_glClipPlanexOES_t" ClipPlanexOES)
       ("_ALLEGRO_glGetClipPlanexOES_t" GetClipPlanexOES)
       ("_ALLEGRO_glRasterPos2xOES_t" RasterPos2xOES)
       ("_ALLEGRO_glRasterPos3xOES_t" RasterPos3xOES)
       ("_ALLEGRO_glRasterPos4xOES_t" RasterPos4xOES)
       ("_ALLEGRO_glRasterPos2xvOES_t" RasterPos2xvOES)
       ("_ALLEGRO_glRasterPos3xvOES_t" RasterPos3xvOES)
       ("_ALLEGRO_glRasterPos4xvOES_t" RasterPos4xvOES)
       ("_ALLEGRO_glMaterialxOES_t" MaterialxOES)
       ("_ALLEGRO_glMaterialxvOES_t" MaterialxvOES)
       ("_ALLEGRO_glGetMaterialxOES_t" GetMaterialxOES)
       ("_ALLEGRO_glLightxOES_t" LightxOES)
       ("_ALLEGRO_glLightxvOES_t" LightxvOES)
       ("_ALLEGRO_glGetLightxOES_t" GetLightxOES)
       ("_ALLEGRO_glLightModelxOES_t" LightModelxOES)
       ("_ALLEGRO_glLightModelxvOES_t" LightModelxvOES)
       ("_ALLEGRO_glPointSizexOES_t" PointSizexOES)
       ("_ALLEGRO_glLineWidthxOES_t" LineWidthxOES)
       ("_ALLEGRO_glPolygonOffsetxOES_t" PolygonOffsetxOES)
       ("_ALLEGRO_glPixelStorex_t" PixelStorex)
       ("_ALLEGRO_glPixelTransferxOES_t" PixelTransferxOES)
       ("_ALLEGRO_glPixelMapx_t" PixelMapx)
       ("_ALLEGRO_glGetPixelMapxv_t" GetPixelMapxv)
       ("_ALLEGRO_glConvolutionParameterxOES_t" ConvolutionParameterxOES)
       ("_ALLEGRO_glConvolutionParameterxvOES_t" ConvolutionParameterxvOES)
       ("_ALLEGRO_glGetConvolutionParameterxvOES_t"
        GetConvolutionParameterxvOES)
       ("_ALLEGRO_glGetHistogramParameterxvOES_t" GetHistogramParameterxvOES)
       ("_ALLEGRO_glPixelZoomxOES_t" PixelZoomxOES)
       ("_ALLEGRO_glBitmapxOES_t" BitmapxOES)
       ("_ALLEGRO_glTexParameterxOES_t" TexParameterxOES)
       ("_ALLEGRO_glTexParameterxvOES_t" TexParameterxvOES)
       ("_ALLEGRO_glGetTexParameterxvOES_t" GetTexParameterxvOES)
       ("_ALLEGRO_glGetTexLevelParameterxvOES_t" GetTexLevelParameterxvOES)
       ("_ALLEGRO_glPrioritizeTexturesxOES_t" PrioritizeTexturesxOES)
       ("_ALLEGRO_glTexEnvxOES_t" TexEnvxOES)
       ("_ALLEGRO_glTexEnvxvOES_t" TexEnvxvOES)
       ("_ALLEGRO_glGetTexEnvxvOES_t" GetTexEnvxvOES)
       ("_ALLEGRO_glFogxOES_t" FogxOES)
       ("_ALLEGRO_glFogxvOES_t" FogxvOES)
       ("_ALLEGRO_glSampleCoverageOES_t" SampleCoverageOES)
       ("_ALLEGRO_glAlphaFuncxOES_t" AlphaFuncxOES)
       ("_ALLEGRO_glBlendColorxOES_t" BlendColorxOES)
       ("_ALLEGRO_glClearColorxOES_t" ClearColorxOES)
       ("_ALLEGRO_glClearDepthxOES_t" ClearDepthxOES)
       ("_ALLEGRO_glClearAccumxOES_t" ClearAccumxOES)
       ("_ALLEGRO_glAccumxOES_t" AccumxOES)
       ("_ALLEGRO_glMap1xOES_t" Map1xOES)
       ("_ALLEGRO_glMap2xOES_t" Map2xOES)
       ("_ALLEGRO_glMapGrid1xOES_t" MapGrid1xOES)
       ("_ALLEGRO_glMapGrid2xOES_t" MapGrid2xOES)
       ("_ALLEGRO_glGetMapxvOES_t" GetMapxvOES)
       ("_ALLEGRO_glEvalCoord1xOES_t" EvalCoord1xOES)
       ("_ALLEGRO_glEvalCoord2xOES_t" EvalCoord2xOES)
       ("_ALLEGRO_glEvalCoord1xvOES_t" EvalCoord1xvOES)
       ("_ALLEGRO_glEvalCoord2xvOES_t" EvalCoord2xvOES)
       ("_ALLEGRO_glFeedbackBufferxOES_t" FeedbackBufferxOES)
       ("_ALLEGRO_glPassThroughxOES_t" PassThroughxOES)
       ("_ALLEGRO_glGetFixedvOES_t" GetFixedvOES)
       ("_ALLEGRO_glDepthRangefOES_t" DepthRangefOES)
       ("_ALLEGRO_glFrustumfOES_t" FrustumfOES)
       ("_ALLEGRO_glOrthofOES_t" OrthofOES)
       ("_ALLEGRO_glClipPlanefOES_t" ClipPlanefOES)
       ("_ALLEGRO_glGetClipPlanefOES_t" GetClipPlanefOES)
       ("_ALLEGRO_glClearDepthfOES_t" ClearDepthfOES)
       ("_ALLEGRO_glDepthBoundsEXT_t" DepthBoundsEXT)
       ("_ALLEGRO_glBlendEquationSeparateEXT_t" BlendEquationSeparateEXT)
       ("_ALLEGRO_glIsRenderbufferEXT_t" IsRenderbufferEXT)
       ("_ALLEGRO_glBindRenderbufferEXT_t" BindRenderbufferEXT)
       ("_ALLEGRO_glDeleteRenderbuffersEXT_t" DeleteRenderbuffersEXT)
       ("_ALLEGRO_glGenRenderbuffersEXT_t" GenRenderbuffersEXT)
       ("_ALLEGRO_glRenderbufferStorageEXT_t" RenderbufferStorageEXT)
       ("_ALLEGRO_glGetRenderbufferParameterivEXT_t"
        GetRenderbufferParameterivEXT)
       ("_ALLEGRO_glIsFramebufferEXT_t" IsFramebufferEXT)
       ("_ALLEGRO_glBindFramebufferEXT_t" BindFramebufferEXT)
       ("_ALLEGRO_glDeleteFramebuffersEXT_t" DeleteFramebuffersEXT)
       ("_ALLEGRO_glGenFramebuffersEXT_t" GenFramebuffersEXT)
       ("_ALLEGRO_glCheckFramebufferStatusEXT_t" CheckFramebufferStatusEXT)
       ("_ALLEGRO_glFramebufferTexture1DEXT_t" FramebufferTexture1DEXT)
       ("_ALLEGRO_glFramebufferTexture2DEXT_t" FramebufferTexture2DEXT)
       ("_ALLEGRO_glFramebufferTexture3DEXT_t" FramebufferTexture3DEXT)
       ("_ALLEGRO_glFramebufferRenderbufferEXT_t" FramebufferRenderbufferEXT)
       ("_ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t"
        GetFramebufferAttachmentParameterivEXT)
       ("_ALLEGRO_glGenerateMipmapEXT_t" GenerateMipmapEXT)
       ("_ALLEGRO_glStringMarkerGREMEDY_t" StringMarkerGREMEDY)
       ("_ALLEGRO_glStencilClearTagEXT_t" StencilClearTagEXT)
       ("_ALLEGRO_glBlitFramebufferEXT_t" BlitFramebufferEXT)
       ("_ALLEGRO_glRenderbufferStorageMultisampleEXT_t"
        RenderbufferStorageMultisampleEXT)
       ("_ALLEGRO_glGetQueryObjecti64vEXT_t" GetQueryObjecti64vEXT)
       ("_ALLEGRO_glGetQueryObjectui64vEXT_t" GetQueryObjectui64vEXT)
       ("_ALLEGRO_glProgramEnvParameters4fvEXT_t" ProgramEnvParameters4fvEXT)
       ("_ALLEGRO_glProgramLocalParameters4fvEXT_t"
        ProgramLocalParameters4fvEXT)
       ("_ALLEGRO_glBufferParameteriAPPLE_t" BufferParameteriAPPLE)
       ("_ALLEGRO_glFlushMappedBufferRangeAPPLE_t" FlushMappedBufferRangeAPPLE)
       ("_ALLEGRO_glUniformBufferEXT_t" UniformBufferEXT)
       ("_ALLEGRO_glGetUniformBufferSizeEXT_t" GetUniformBufferSizeEXT)
       ("_ALLEGRO_glGetUniformOffsetEXT_t" GetUniformOffsetEXT)
       ("_ALLEGRO_glColorMaskIndexedEXT_t" ColorMaskIndexedEXT)
       ("_ALLEGRO_glGetBooleanIndexedvEXT_t" GetBooleanIndexedvEXT)
       ("_ALLEGRO_glGetIntegerIndexedvEXT_t" GetIntegerIndexedvEXT)
       ("_ALLEGRO_glEnableIndexedEXT_t" EnableIndexedEXT)
       ("_ALLEGRO_glDisableIndexedEXT_t" DisableIndexedEXT)
       ("_ALLEGRO_glIsEnabledIndexedEXT_t" IsEnabledIndexedEXT)
       ("_ALLEGRO_glDrawArraysInstancedEXT_t" DrawArraysInstancedEXT)
       ("_ALLEGRO_glDrawElementsInstancedEXT_t" DrawElementsInstancedEXT)
       ("_ALLEGRO_glProgramParameteriEXT_t" ProgramParameteriEXT)
       ("_ALLEGRO_glFramebufferTextureEXT_t" FramebufferTextureEXT)
       ("_ALLEGRO_glFramebufferTextureFaceEXT_t" FramebufferTextureFaceEXT)
       ("_ALLEGRO_glVertexAttribI1iEXT_t" VertexAttribI1iEXT)
       ("_ALLEGRO_glVertexAttribI2iEXT_t" VertexAttribI2iEXT)
       ("_ALLEGRO_glVertexAttribI3iEXT_t" VertexAttribI3iEXT)
       ("_ALLEGRO_glVertexAttribI4iEXT_t" VertexAttribI4iEXT)
       ("_ALLEGRO_glVertexAttribI1uiEXT_t" VertexAttribI1uiEXT)
       ("_ALLEGRO_glVertexAttribI2uiEXT_t" VertexAttribI2uiEXT)
       ("_ALLEGRO_glVertexAttribI3uiEXT_t" VertexAttribI3uiEXT)
       ("_ALLEGRO_glVertexAttribI4uiEXT_t" VertexAttribI4uiEXT)
       ("_ALLEGRO_glVertexAttribI1ivEXT_t" VertexAttribI1ivEXT)
       ("_ALLEGRO_glVertexAttribI2ivEXT_t" VertexAttribI2ivEXT)
       ("_ALLEGRO_glVertexAttribI3ivEXT_t" VertexAttribI3ivEXT)
       ("_ALLEGRO_glVertexAttribI4ivEXT_t" VertexAttribI4ivEXT)
       ("_ALLEGRO_glVertexAttribI1uivEXT_t" VertexAttribI1uivEXT)
       ("_ALLEGRO_glVertexAttribI2uivEXT_t" VertexAttribI2uivEXT)
       ("_ALLEGRO_glVertexAttribI3uivEXT_t" VertexAttribI3uivEXT)
       ("_ALLEGRO_glVertexAttribI4uivEXT_t" VertexAttribI4uivEXT)
       ("_ALLEGRO_glVertexAttribI4bvEXT_t" VertexAttribI4bvEXT)
       ("_ALLEGRO_glVertexAttribI4svEXT_t" VertexAttribI4svEXT)
       ("_ALLEGRO_glVertexAttribI4ubvEXT_t" VertexAttribI4ubvEXT)
       ("_ALLEGRO_glVertexAttribI4usvEXT_t" VertexAttribI4usvEXT)
       ("_ALLEGRO_glVertexAttribIPointerEXT_t" VertexAttribIPointerEXT)
       ("_ALLEGRO_glGetVertexAttribIivEXT_t" GetVertexAttribIivEXT)
       ("_ALLEGRO_glGetVertexAttribIuivEXT_t" GetVertexAttribIuivEXT)
       ("_ALLEGRO_glUniform1uiEXT_t" Uniform1uiEXT)
       ("_ALLEGRO_glUniform2uiEXT_t" Uniform2uiEXT)
       ("_ALLEGRO_glUniform3uiEXT_t" Uniform3uiEXT)
       ("_ALLEGRO_glUniform4uiEXT_t" Uniform4uiEXT)
       ("_ALLEGRO_glUniform1uivEXT_t" Uniform1uivEXT)
       ("_ALLEGRO_glUniform2uivEXT_t" Uniform2uivEXT)
       ("_ALLEGRO_glUniform3uivEXT_t" Uniform3uivEXT)
       ("_ALLEGRO_glUniform4uivEXT_t" Uniform4uivEXT)
       ("_ALLEGRO_glGetUniformuivEXT_t" GetUniformuivEXT)
       ("_ALLEGRO_glBindFragDataLocationEXT_t" BindFragDataLocationEXT)
       ("_ALLEGRO_glGetFragDataLocationEXT_t" GetFragDataLocationEXT)
       ("_ALLEGRO_glFramebufferTextureLayerEXT_t" FramebufferTextureLayerEXT)
       ("_ALLEGRO_glTexBufferEXT_t" TexBufferEXT)
       ("_ALLEGRO_glDepthRangedNV_t" DepthRangedNV)
       ("_ALLEGRO_glClearDepthdNV_t" ClearDepthdNV)
       ("_ALLEGRO_glDepthBoundsdNV_t" DepthBoundsdNV)
       ("_ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t"
        RenderbufferStorageMultsampleCoverageNV)
       ("_ALLEGRO_glProgramVertexLimitNV_t" ProgramVertexLimitNV)
       ("_ALLEGRO_glProgramLocalParameterI4iNV_t" ProgramLocalParameterI4iNV)
       ("_ALLEGRO_glProgramLocalParameterI4ivNV_t" ProgramLocalParameterI4ivNV)
       ("_ALLEGRO_glProgramLocalParametersI4ivNV_t"
        ProgramLocalParametersI4ivNV)
       ("_ALLEGRO_glProgramLocalParameterI4uiNV_t" ProgramLocalParameterI4uiNV)
       ("_ALLEGRO_glProgramLocalParameterI4uivNV_t"
        ProgramLocalParameterI4uivNV)
       ("_ALLEGRO_glProgramLocalParametersI4uivNV_t"
        ProgramLocalParametersI4uivNV)
       ("_ALLEGRO_glProgramEnvParameterI4iNV_t" ProgramEnvParameterI4iNV)
       ("_ALLEGRO_glProgramEnvParameterI4ivNV_t" ProgramEnvParameterI4ivNV)
       ("_ALLEGRO_glProgramEnvParametersI4ivNV_t" ProgramEnvParametersI4ivNV)
       ("_ALLEGRO_glProgramEnvParameterI4uiNV_t" ProgramEnvParameterI4uiNV)
       ("_ALLEGRO_glProgramEnvParameterI4uivNV_t" ProgramEnvParameterI4uivNV)
       ("_ALLEGRO_glProgramEnvParametersI4uivNV_t" ProgramEnvParametersI4uivNV)
       ("_ALLEGRO_glGetProgramLocalParameterIivNV_t"
        GetProgramLocalParameterIivNV)
       ("_ALLEGRO_glGetProgramLocalParameterIuivNV_t"
        GetProgramLocalParameterIuivNV)
       ("_ALLEGRO_glGetProgramEnvParameterIivNV_t" GetProgramEnvParameterIivNV)
       ("_ALLEGRO_glGetProgramEnvParameterIuivNV_t"
        GetProgramEnvParameterIuivNV)
       ("_ALLEGRO_glProgramBufferParametersfvNV_t" ProgramBufferParametersfvNV)
       ("_ALLEGRO_glProgramBufferParametersIivNV_t"
        ProgramBufferParametersIivNV)
       ("_ALLEGRO_glProgramBufferParametersIuivNV_t"
        ProgramBufferParametersIuivNV)
       ("_ALLEGRO_glBindBufferRangeNV_t" BindBufferRangeNV)
       ("_ALLEGRO_glBindBufferOffsetNV_t" BindBufferOffsetNV)
       ("_ALLEGRO_glBindBufferBaseNV_t" BindBufferBaseNV)
       ("_ALLEGRO_glTransformFeedbackAttribsNV_t" TransformFeedbackAttribsNV)
       ("_ALLEGRO_glTransformFeedbackVaryingsNV_t" TransformFeedbackVaryingsNV)
       ("_ALLEGRO_glBeginTransformFeedbackNV_t" BeginTransformFeedbackNV)
       ("_ALLEGRO_glEndTransformFeedbackNV_t" EndTransformFeedbackNV)
       ("_ALLEGRO_glGetVaryingLocationNV_t" GetVaryingLocationNV)
       ("_ALLEGRO_glGetActiveVaryingNV_t" GetActiveVaryingNV)
       ("_ALLEGRO_glActiveVaryingNV_t" ActiveVaryingNV)
       ("_ALLEGRO_glGetTransformFeedbackVaryingNV_t"
        GetTransformFeedbackVaryingNV)
       ("_ALLEGRO_glFrameTerminatorGREMEDY_t" FrameTerminatorGREMEDY)
       ("_ALLEGRO_glBeginConditionalRenderNV_t" BeginConditionalRenderNV)
       ("_ALLEGRO_glEndConditionalRenderNV_t" EndConditionalRenderNV)
       ("_ALLEGRO_glBeginTransformFeedbackEXT_t" BeginTransformFeedbackEXT)
       ("_ALLEGRO_glEndTransformFeedbackEXT_t" EndTransformFeedbackEXT)
       ("_ALLEGRO_glBindBufferRangeEXT_t" BindBufferRangeEXT)
       ("_ALLEGRO_glBindBufferOffsetEXT_t" BindBufferOffsetEXT)
       ("_ALLEGRO_glBindBufferBaseEXT_t" BindBufferBaseEXT)
       ("_ALLEGRO_glTransformFeedbackVaryingsEXT_t"
        TransformFeedbackVaryingsEXT)
       ("_ALLEGRO_glGetTransformFeedbackVaryingEXT_t"
        GetTransformFeedbackVaryingEXT)
       ("_ALLEGRO_glClientAttribDefaultEXT_t" ClientAttribDefaultEXT)
       ("_ALLEGRO_glPushClientAttribDefaultEXT_t" PushClientAttribDefaultEXT)
       ("_ALLEGRO_glMatrixLoadfEXT_t" MatrixLoadfEXT)
       ("_ALLEGRO_glMatrixLoaddEXT_t" MatrixLoaddEXT)
       ("_ALLEGRO_glMatrixMultfEXT_t" MatrixMultfEXT)
       ("_ALLEGRO_glMatrixMultdEXT_t" MatrixMultdEXT)
       ("_ALLEGRO_glMatrixLoadIdentityEXT_t" MatrixLoadIdentityEXT)
       ("_ALLEGRO_glMatrixRotatefEXT_t" MatrixRotatefEXT)
       ("_ALLEGRO_glMatrixRotatedEXT_t" MatrixRotatedEXT)
       ("_ALLEGRO_glMatrixScalefEXT_t" MatrixScalefEXT)
       ("_ALLEGRO_glMatrixScaledEXT_t" MatrixScaledEXT)
       ("_ALLEGRO_glMatrixTranslatefEXT_t" MatrixTranslatefEXT)
       ("_ALLEGRO_glMatrixTranslatedEXT_t" MatrixTranslatedEXT)
       ("_ALLEGRO_glMatrixFrustumEXT_t" MatrixFrustumEXT)
       ("_ALLEGRO_glMatrixOrthoEXT_t" MatrixOrthoEXT)
       ("_ALLEGRO_glMatrixPopEXT_t" MatrixPopEXT)
       ("_ALLEGRO_glMatrixPushEXT_t" MatrixPushEXT)
       ("_ALLEGRO_glMatrixLoadTransposefEXT_t" MatrixLoadTransposefEXT)
       ("_ALLEGRO_glMatrixLoadTransposedEXT_t" MatrixLoadTransposedEXT)
       ("_ALLEGRO_glMatrixMultTransposefEXT_t" MatrixMultTransposefEXT)
       ("_ALLEGRO_glMatrixMultTransposedEXT_t" MatrixMultTransposedEXT)
       ("_ALLEGRO_glTextureParameterfEXT_t" TextureParameterfEXT)
       ("_ALLEGRO_glTextureParameterfvEXT_t" TextureParameterfvEXT)
       ("_ALLEGRO_glTextureParameteriEXT_t" TextureParameteriEXT)
       ("_ALLEGRO_glTextureParameterivEXT_t" TextureParameterivEXT)
       ("_ALLEGRO_glTextureImage1DEXT_t" TextureImage1DEXT)
       ("_ALLEGRO_glTextureImage2DEXT_t" TextureImage2DEXT)
       ("_ALLEGRO_glTextureSubImage1DEXT_t" TextureSubImage1DEXT)
       ("_ALLEGRO_glTextureSubImage2DEXT_t" TextureSubImage2DEXT)
       ("_ALLEGRO_glCopyTextureImage1DEXT_t" CopyTextureImage1DEXT)
       ("_ALLEGRO_glCopyTextureImage2DEXT_t" CopyTextureImage2DEXT)
       ("_ALLEGRO_glCopyTextureSubImage1DEXT_t" CopyTextureSubImage1DEXT)
       ("_ALLEGRO_glCopyTextureSubImage2DEXT_t" CopyTextureSubImage2DEXT)
       ("_ALLEGRO_glGetTextureImageEXT_t" GetTextureImageEXT)
       ("_ALLEGRO_glGetTextureParameterfvEXT_t" GetTextureParameterfvEXT)
       ("_ALLEGRO_glGetTextureParameterivEXT_t" GetTextureParameterivEXT)
       ("_ALLEGRO_glGetTextureLevelParameterfvEXT_t"
        GetTextureLevelParameterfvEXT)
       ("_ALLEGRO_glGetTextureLevelParameterivEXT_t"
        GetTextureLevelParameterivEXT)
       ("_ALLEGRO_glTextureImage3DEXT_t" TextureImage3DEXT)
       ("_ALLEGRO_glTextureSubImage3DEXT_t" TextureSubImage3DEXT)
       ("_ALLEGRO_glCopyTextureSubImage3DEXT_t" CopyTextureSubImage3DEXT)
       ("_ALLEGRO_glMultiTexParameterfEXT_t" MultiTexParameterfEXT)
       ("_ALLEGRO_glMultiTexParameterfvEXT_t" MultiTexParameterfvEXT)
       ("_ALLEGRO_glMultiTexParameteriEXT_t" MultiTexParameteriEXT)
       ("_ALLEGRO_glMultiTexParameterivEXT_t" MultiTexParameterivEXT)
       ("_ALLEGRO_glMultiTexImage1DEXT_t" MultiTexImage1DEXT)
       ("_ALLEGRO_glMultiTexImage2DEXT_t" MultiTexImage2DEXT)
       ("_ALLEGRO_glMultiTexSubImage1DEXT_t" MultiTexSubImage1DEXT)
       ("_ALLEGRO_glMultiTexSubImage2DEXT_t" MultiTexSubImage2DEXT)
       ("_ALLEGRO_glCopyMultiTexImage1DEXT_t" CopyMultiTexImage1DEXT)
       ("_ALLEGRO_glCopyMultiTexImage2DEXT_t" CopyMultiTexImage2DEXT)
       ("_ALLEGRO_glCopyMultiTexSubImage1DEXT_t" CopyMultiTexSubImage1DEXT)
       ("_ALLEGRO_glCopyMultiTexSubImage2DEXT_t" CopyMultiTexSubImage2DEXT)
       ("_ALLEGRO_glGetMultiTexImageEXT_t" GetMultiTexImageEXT)
       ("_ALLEGRO_glGetMultiTexParameterfvEXT_t" GetMultiTexParameterfvEXT)
       ("_ALLEGRO_glGetMultiTexParameterivEXT_t" GetMultiTexParameterivEXT)
       ("_ALLEGRO_glGetMultiTexLevelParameterfvEXT_t"
        GetMultiTexLevelParameterfvEXT)
       ("_ALLEGRO_glGetMultiTexLevelParameterivEXT_t"
        GetMultiTexLevelParameterivEXT)
       ("_ALLEGRO_glMultiTexImage3DEXT_t" MultiTexImage3DEXT)
       ("_ALLEGRO_glMultiTexSubImage3DEXT_t" MultiTexSubImage3DEXT)
       ("_ALLEGRO_glCopyMultiTexSubImage3DEXT_t" CopyMultiTexSubImage3DEXT)
       ("_ALLEGRO_glBindMultiTextureEXT_t" BindMultiTextureEXT)
       ("_ALLEGRO_glEnableClientStateIndexedEXT_t" EnableClientStateIndexedEXT)
       ("_ALLEGRO_glDisableClientStateIndexedEXT_t"
        DisableClientStateIndexedEXT)
       ("_ALLEGRO_glMultiTexCoordPointerEXT_t" MultiTexCoordPointerEXT)
       ("_ALLEGRO_glMultiTexEnvfEXT_t" MultiTexEnvfEXT)
       ("_ALLEGRO_glMultiTexEnvfvEXT_t" MultiTexEnvfvEXT)
       ("_ALLEGRO_glMultiTexEnviEXT_t" MultiTexEnviEXT)
       ("_ALLEGRO_glMultiTexEnvivEXT_t" MultiTexEnvivEXT)
       ("_ALLEGRO_glMultiTexGendEXT_t" MultiTexGendEXT)
       ("_ALLEGRO_glMultiTexGendvEXT_t" MultiTexGendvEXT)
       ("_ALLEGRO_glMultiTexGenfEXT_t" MultiTexGenfEXT)
       ("_ALLEGRO_glMultiTexGenfvEXT_t" MultiTexGenfvEXT)
       ("_ALLEGRO_glMultiTexGeniEXT_t" MultiTexGeniEXT)
       ("_ALLEGRO_glMultiTexGenivEXT_t" MultiTexGenivEXT)
       ("_ALLEGRO_glGetMultiTexEnvfvEXT_t" GetMultiTexEnvfvEXT)
       ("_ALLEGRO_glGetMultiTexEnvivEXT_t" GetMultiTexEnvivEXT)
       ("_ALLEGRO_glGetMultiTexGendvEXT_t" GetMultiTexGendvEXT)
       ("_ALLEGRO_glGetMultiTexGenfvEXT_t" GetMultiTexGenfvEXT)
       ("_ALLEGRO_glGetMultiTexGenivEXT_t" GetMultiTexGenivEXT)
       ("_ALLEGRO_glGetFloatIndexedvEXT_t" GetFloatIndexedvEXT)
       ("_ALLEGRO_glGetDoubleIndexedvEXT_t" GetDoubleIndexedvEXT)
       ("_ALLEGRO_glGetPointerIndexedvEXT_t" GetPointerIndexedvEXT)
       ("_ALLEGRO_glCompressedTextureImage3DEXT_t" CompressedTextureImage3DEXT)
       ("_ALLEGRO_glCompressedTextureImage2DEXT_t" CompressedTextureImage2DEXT)
       ("_ALLEGRO_glCompressedTextureImage1DEXT_t" CompressedTextureImage1DEXT)
       ("_ALLEGRO_glCompressedTextureSubImage3DEXT_t"
        CompressedTextureSubImage3DEXT)
       ("_ALLEGRO_glCompressedTextureSubImage2DEXT_t"
        CompressedTextureSubImage2DEXT)
       ("_ALLEGRO_glCompressedTextureSubImage1DEXT_t"
        CompressedTextureSubImage1DEXT)
       ("_ALLEGRO_glGetCompressedTextureImageEXT_t"
        GetCompressedTextureImageEXT)
       ("_ALLEGRO_glCompressedMultiTexImage3DEXT_t"
        CompressedMultiTexImage3DEXT)
       ("_ALLEGRO_glCompressedMultiTexImage2DEXT_t"
        CompressedMultiTexImage2DEXT)
       ("_ALLEGRO_glCompressedMultiTexImage1DEXT_t"
        CompressedMultiTexImage1DEXT)
       ("_ALLEGRO_glCompressedMultiTexSubImage3DEXT_t"
        CompressedMultiTexSubImage3DEXT)
       ("_ALLEGRO_glCompressedMultiTexSubImage2DEXT_t"
        CompressedMultiTexSubImage2DEXT)
       ("_ALLEGRO_glCompressedMultiTexSubImage1DEXT_t"
        CompressedMultiTexSubImage1DEXT)
       ("_ALLEGRO_glGetCompressedMultiTexImageEXT_t"
        GetCompressedMultiTexImageEXT)
       ("_ALLEGRO_glNamedProgramStringEXT_t" NamedProgramStringEXT)
       ("_ALLEGRO_glNamedProgramLocalParameter4dEXT_t"
        NamedProgramLocalParameter4dEXT)
       ("_ALLEGRO_glNamedProgramLocalParameter4dvEXT_t"
        NamedProgramLocalParameter4dvEXT)
       ("_ALLEGRO_glNamedProgramLocalParameter4fEXT_t"
        NamedProgramLocalParameter4fEXT)
       ("_ALLEGRO_glNamedProgramLocalParameter4fvEXT_t"
        NamedProgramLocalParameter4fvEXT)
       ("_ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t"
        GetNamedProgramLocalParameterdvEXT)
       ("_ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t"
        GetNamedProgramLocalParameterfvEXT)
       ("_ALLEGRO_glGetNamedProgramivEXT_t" GetNamedProgramivEXT)
       ("_ALLEGRO_glGetNamedProgramStringEXT_t" GetNamedProgramStringEXT)
       ("_ALLEGRO_glNamedProgramLocalParameters4fvEXT_t"
        NamedProgramLocalParameters4fvEXT)
       ("_ALLEGRO_glNamedProgramLocalParameterI4iEXT_t"
        NamedProgramLocalParameterI4iEXT)
       ("_ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t"
        NamedProgramLocalParameterI4ivEXT)
       ("_ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t"
        NamedProgramLocalParametersI4ivEXT)
       ("_ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t"
        NamedProgramLocalParameterI4uiEXT)
       ("_ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t"
        NamedProgramLocalParameterI4uivEXT)
       ("_ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t"
        NamedProgramLocalParametersI4uivEXT)
       ("_ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t"
        GetNamedProgramLocalParameterIivEXT)
       ("_ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t"
        GetNamedProgramLocalParameterIuivEXT)
       ("_ALLEGRO_glTextureParameterIivEXT_t" TextureParameterIivEXT)
       ("_ALLEGRO_glTextureParameterIuivEXT_t" TextureParameterIuivEXT)
       ("_ALLEGRO_glGetTextureParameterIivEXT_t" GetTextureParameterIivEXT)
       ("_ALLEGRO_glGetTextureParameterIuivEXT_t" GetTextureParameterIuivEXT)
       ("_ALLEGRO_glMultiTexParameterIivEXT_t" MultiTexParameterIivEXT)
       ("_ALLEGRO_glMultiTexParameterIuivEXT_t" MultiTexParameterIuivEXT)
       ("_ALLEGRO_glGetMultiTexParameterIivEXT_t" GetMultiTexParameterIivEXT)
       ("_ALLEGRO_glGetMultiTexParameterIuivEXT_t" GetMultiTexParameterIuivEXT)
       ("_ALLEGRO_glProgramUniform1fEXT_t" ProgramUniform1fEXT)
       ("_ALLEGRO_glProgramUniform2fEXT_t" ProgramUniform2fEXT)
       ("_ALLEGRO_glProgramUniform3fEXT_t" ProgramUniform3fEXT)
       ("_ALLEGRO_glProgramUniform4fEXT_t" ProgramUniform4fEXT)
       ("_ALLEGRO_glProgramUniform1iEXT_t" ProgramUniform1iEXT)
       ("_ALLEGRO_glProgramUniform2iEXT_t" ProgramUniform2iEXT)
       ("_ALLEGRO_glProgramUniform3iEXT_t" ProgramUniform3iEXT)
       ("_ALLEGRO_glProgramUniform4iEXT_t" ProgramUniform4iEXT)
       ("_ALLEGRO_glProgramUniform1fvEXT_t" ProgramUniform1fvEXT)
       ("_ALLEGRO_glProgramUniform2fvEXT_t" ProgramUniform2fvEXT)
       ("_ALLEGRO_glProgramUniform3fvEXT_t" ProgramUniform3fvEXT)
       ("_ALLEGRO_glProgramUniform4fvEXT_t" ProgramUniform4fvEXT)
       ("_ALLEGRO_glProgramUniform1ivEXT_t" ProgramUniform1ivEXT)
       ("_ALLEGRO_glProgramUniform2ivEXT_t" ProgramUniform2ivEXT)
       ("_ALLEGRO_glProgramUniform3ivEXT_t" ProgramUniform3ivEXT)
       ("_ALLEGRO_glProgramUniform4ivEXT_t" ProgramUniform4ivEXT)
       ("_ALLEGRO_glProgramUniformMatrix2fvEXT_t" ProgramUniformMatrix2fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3fvEXT_t" ProgramUniformMatrix3fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4fvEXT_t" ProgramUniformMatrix4fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix2x3fvEXT_t"
        ProgramUniformMatrix2x3fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3x2fvEXT_t"
        ProgramUniformMatrix3x2fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix2x4fvEXT_t"
        ProgramUniformMatrix2x4fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4x2fvEXT_t"
        ProgramUniformMatrix4x2fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix3x4fvEXT_t"
        ProgramUniformMatrix3x4fvEXT)
       ("_ALLEGRO_glProgramUniformMatrix4x3fvEXT_t"
        ProgramUniformMatrix4x3fvEXT)
       ("_ALLEGRO_glProgramUniform1uiEXT_t" ProgramUniform1uiEXT)
       ("_ALLEGRO_glProgramUniform2uiEXT_t" ProgramUniform2uiEXT)
       ("_ALLEGRO_glProgramUniform3uiEXT_t" ProgramUniform3uiEXT)
       ("_ALLEGRO_glProgramUniform4uiEXT_t" ProgramUniform4uiEXT)
       ("_ALLEGRO_glProgramUniform1uivEXT_t" ProgramUniform1uivEXT)
       ("_ALLEGRO_glProgramUniform2uivEXT_t" ProgramUniform2uivEXT)
       ("_ALLEGRO_glProgramUniform3uivEXT_t" ProgramUniform3uivEXT)
       ("_ALLEGRO_glProgramUniform4uivEXT_t" ProgramUniform4uivEXT)
       ("_ALLEGRO_glNamedBufferDataEXT_t" NamedBufferDataEXT)
       ("_ALLEGRO_glNamedBufferSubDataEXT_t" NamedBufferSubDataEXT)
       ("_ALLEGRO_glMapNamedBufferEXT_t" MapNamedBufferEXT)
       ("_ALLEGRO_glUnmapNamedBufferEXT_t" UnmapNamedBufferEXT)
       ("_ALLEGRO_glGetNamedBufferParameterivEXT_t"
        GetNamedBufferParameterivEXT)
       ("_ALLEGRO_glGetNamedBufferPointervEXT_t" GetNamedBufferPointervEXT)
       ("_ALLEGRO_glGetNamedBufferSubDataEXT_t" GetNamedBufferSubDataEXT)
       ("_ALLEGRO_glTextureBufferEXT_t" TextureBufferEXT)
       ("_ALLEGRO_glMultiTexBufferEXT_t" MultiTexBufferEXT)
       ("_ALLEGRO_glNamedRenderbufferStorageEXT_t" NamedRenderbufferStorageEXT)
       ("_ALLEGRO_glGetNamedRenderbufferParameterivEXT_t"
        GetNamedRenderbufferParameterivEXT)
       ("_ALLEGRO_glCheckNamedFramebufferStatusEXT_t"
        CheckNamedFramebufferStatusEXT)
       ("_ALLEGRO_glNamedFramebufferTexture1DEXT_t"
        NamedFramebufferTexture1DEXT)
       ("_ALLEGRO_glNamedFramebufferTexture2DEXT_t"
        NamedFramebufferTexture2DEXT)
       ("_ALLEGRO_glNamedFramebufferTexture3DEXT_t"
        NamedFramebufferTexture3DEXT)
       ("_ALLEGRO_glNamedFramebufferRenderbufferEXT_t"
        NamedFramebufferRenderbufferEXT)
       ("_ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t"
        GetNamedFramebufferAttachmentParameterivEXT)
       ("_ALLEGRO_glGenerateTextureMipmapEXT_t" GenerateTextureMipmapEXT)
       ("_ALLEGRO_glGenerateMultiTexMipmapEXT_t" GenerateMultiTexMipmapEXT)
       ("_ALLEGRO_glFramebufferDrawBufferEXT_t" FramebufferDrawBufferEXT)
       ("_ALLEGRO_glFramebufferDrawBuffersEXT_t" FramebufferDrawBuffersEXT)
       ("_ALLEGRO_glFramebufferReadBufferEXT_t" FramebufferReadBufferEXT)
       ("_ALLEGRO_glGetFramebufferParameterivEXT_t"
        GetFramebufferParameterivEXT)
       ("_ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t"
        NamedRenderbufferStorageMultisampleEXT)
       ("_ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t"
        NamedRenderbufferStorageMultisampleCoverageEXT)
       ("_ALLEGRO_glNamedFramebufferTextureEXT_t" NamedFramebufferTextureEXT)
       ("_ALLEGRO_glNamedFramebufferTextureLayerEXT_t"
        NamedFramebufferTextureLayerEXT)
       ("_ALLEGRO_glNamedFramebufferTextureFaceEXT_t"
        NamedFramebufferTextureFaceEXT)
       ("_ALLEGRO_glTextureRenderbufferEXT_t" TextureRenderbufferEXT)
       ("_ALLEGRO_glMultiTexRenderbufferEXT_t" MultiTexRenderbufferEXT)
       ("_ALLEGRO_glGetMultisamplefvNV_t" GetMultisamplefvNV)
       ("_ALLEGRO_glSampleMaskIndexedNV_t" SampleMaskIndexedNV)
       ("_ALLEGRO_glTexRenderbufferNV_t" TexRenderbufferNV)
       ("_ALLEGRO_glBindTransformFeedbackNV_t" BindTransformFeedbackNV)
       ("_ALLEGRO_glDeleteTransformFeedbacksNV_t" DeleteTransformFeedbacksNV)
       ("_ALLEGRO_glGenTransformFeedbacksNV_t" GenTransformFeedbacksNV)
       ("_ALLEGRO_glIsTransformFeedbackNV_t" IsTransformFeedbackNV)
       ("_ALLEGRO_glPauseTransformFeedbackNV_t" PauseTransformFeedbackNV)
       ("_ALLEGRO_glResumeTransformFeedbackNV_t" ResumeTransformFeedbackNV)
       ("_ALLEGRO_glDrawTransformFeedbackNV_t" DrawTransformFeedbackNV)
       ("_ALLEGRO_glGetPerfMonitorGroupsAMD_t" GetPerfMonitorGroupsAMD)
       ("_ALLEGRO_glGetPerfMonitorCountersAMD_t" GetPerfMonitorCountersAMD)
       ("_ALLEGRO_glGetPerfMonitorGroupStringAMD_t"
        GetPerfMonitorGroupStringAMD)
       ("_ALLEGRO_glGetPerfMonitorCounterStringAMD_t"
        GetPerfMonitorCounterStringAMD)
       ("_ALLEGRO_glGetPerfMonitorCounterInfoAMD_t"
        GetPerfMonitorCounterInfoAMD)
       ("_ALLEGRO_glGenPerfMonitorsAMD_t" GenPerfMonitorsAMD)
       ("_ALLEGRO_glDeletePerfMonitorsAMD_t" DeletePerfMonitorsAMD)
       ("_ALLEGRO_glSelectPerfMonitorCountersAMD_t"
        SelectPerfMonitorCountersAMD)
       ("_ALLEGRO_glBeginPerfMonitorAMD_t" BeginPerfMonitorAMD)
       ("_ALLEGRO_glEndPerfMonitorAMD_t" EndPerfMonitorAMD)
       ("_ALLEGRO_glGetPerfMonitorCounterDataAMD_t"
        GetPerfMonitorCounterDataAMD)
       ("_ALLEGRO_glTessellationFactorAMD_t" TessellationFactorAMD)
       ("_ALLEGRO_glTessellationModeAMD_t" TessellationModeAMD)
       ("_ALLEGRO_glProvokingVertexEXT_t" ProvokingVertexEXT)
       ("_ALLEGRO_glBlendFuncIndexedAMD_t" BlendFuncIndexedAMD)
       ("_ALLEGRO_glBlendFuncSeparateIndexedAMD_t" BlendFuncSeparateIndexedAMD)
       ("_ALLEGRO_glBlendEquationIndexedAMD_t" BlendEquationIndexedAMD)
       ("_ALLEGRO_glBlendEquationSeparateIndexedAMD_t"
        BlendEquationSeparateIndexedAMD)
       ("_ALLEGRO_glTextureRangeAPPLE_t" TextureRangeAPPLE)
       ("_ALLEGRO_glGetTexParameterPointervAPPLE_t"
        GetTexParameterPointervAPPLE)
       ("_ALLEGRO_glEnableVertexAttribAPPLE_t" EnableVertexAttribAPPLE)
       ("_ALLEGRO_glDisableVertexAttribAPPLE_t" DisableVertexAttribAPPLE)
       ("_ALLEGRO_glIsVertexAttribEnabledAPPLE_t" IsVertexAttribEnabledAPPLE)
       ("_ALLEGRO_glMapVertexAttrib1dAPPLE_t" MapVertexAttrib1dAPPLE)
       ("_ALLEGRO_glMapVertexAttrib1fAPPLE_t" MapVertexAttrib1fAPPLE)
       ("_ALLEGRO_glMapVertexAttrib2dAPPLE_t" MapVertexAttrib2dAPPLE)
       ("_ALLEGRO_glMapVertexAttrib2fAPPLE_t" MapVertexAttrib2fAPPLE)
       ("_ALLEGRO_glObjectPurgeableAPPLE_t" ObjectPurgeableAPPLE)
       ("_ALLEGRO_glObjectUnpurgeableAPPLE_t" ObjectUnpurgeableAPPLE)
       ("_ALLEGRO_glGetObjectParameterivAPPLE_t" GetObjectParameterivAPPLE)
       ("_ALLEGRO_glBeginVideoCaptureNV_t" BeginVideoCaptureNV)
       ("_ALLEGRO_glBindVideoCaptureStreamBufferNV_t"
        BindVideoCaptureStreamBufferNV)
       ("_ALLEGRO_glBindVideoCaptureStreamTextureNV_t"
        BindVideoCaptureStreamTextureNV)
       ("_ALLEGRO_glEndVideoCaptureNV_t" EndVideoCaptureNV)
       ("_ALLEGRO_glGetVideoCaptureivNV_t" GetVideoCaptureivNV)
       ("_ALLEGRO_glGetVideoCaptureStreamivNV_t" GetVideoCaptureStreamivNV)
       ("_ALLEGRO_glGetVideoCaptureStreamfvNV_t" GetVideoCaptureStreamfvNV)
       ("_ALLEGRO_glGetVideoCaptureStreamdvNV_t" GetVideoCaptureStreamdvNV)
       ("_ALLEGRO_glVideoCaptureNV_t" VideoCaptureNV)
       ("_ALLEGRO_glVideoCaptureStreamParameterivNV_t"
        VideoCaptureStreamParameterivNV)
       ("_ALLEGRO_glVideoCaptureStreamParameterfvNV_t"
        VideoCaptureStreamParameterfvNV)
       ("_ALLEGRO_glVideoCaptureStreamParameterdvNV_t"
        VideoCaptureStreamParameterdvNV)
       ("_ALLEGRO_glUseShaderProgramEXT_t" UseShaderProgramEXT)
       ("_ALLEGRO_glActiveProgramEXT_t" ActiveProgramEXT)
       ("_ALLEGRO_glCreateShaderProgramEXT_t" CreateShaderProgramEXT)
       ("_ALLEGRO_glMakeBufferResidentNV_t" MakeBufferResidentNV)
       ("_ALLEGRO_glMakeBufferNonResidentNV_t" MakeBufferNonResidentNV)
       ("_ALLEGRO_glIsBufferResidentNV_t" IsBufferResidentNV)
       ("_ALLEGRO_glMakeNamedBufferResidentNV_t" MakeNamedBufferResidentNV)
       ("_ALLEGRO_glMakeNamedBufferNonResidentNV_t"
        MakeNamedBufferNonResidentNV)
       ("_ALLEGRO_glIsNamedBufferResidentNV_t" IsNamedBufferResidentNV)
       ("_ALLEGRO_glGetBufferParameterui64vNV_t" GetBufferParameterui64vNV)
       ("_ALLEGRO_glGetNamedBufferParameterui64vNV_t"
        GetNamedBufferParameterui64vNV)
       ("_ALLEGRO_glGetIntegerui64vNV_t" GetIntegerui64vNV)
       ("_ALLEGRO_glUniformui64NV_t" Uniformui64NV)
       ("_ALLEGRO_glUniformui64vNV_t" Uniformui64vNV)
       ("_ALLEGRO_glGetUniformui64vNV_t" GetUniformui64vNV)
       ("_ALLEGRO_glProgramUniformui64NV_t" ProgramUniformui64NV)
       ("_ALLEGRO_glProgramUniformui64vNV_t" ProgramUniformui64vNV)
       ("_ALLEGRO_glBufferAddressRangeNV_t" BufferAddressRangeNV)
       ("_ALLEGRO_glVertexFormatNV_t" VertexFormatNV)
       ("_ALLEGRO_glNormalFormatNV_t" NormalFormatNV)
       ("_ALLEGRO_glColorFormatNV_t" ColorFormatNV)
       ("_ALLEGRO_glIndexFormatNV_t" IndexFormatNV)
       ("_ALLEGRO_glTexCoordFormatNV_t" TexCoordFormatNV)
       ("_ALLEGRO_glEdgeFlagFormatNV_t" EdgeFlagFormatNV)
       ("_ALLEGRO_glSecondaryColorFormatNV_t" SecondaryColorFormatNV)
       ("_ALLEGRO_glFogCoordFormatNV_t" FogCoordFormatNV)
       ("_ALLEGRO_glVertexAttribFormatNV_t" VertexAttribFormatNV)
       ("_ALLEGRO_glVertexAttribIFormatNV_t" VertexAttribIFormatNV)
       ("_ALLEGRO_glGetIntegerui64i_vNV_t" GetIntegerui64i_vNV)
       ("_ALLEGRO_glTextureBarrierNV_t" TextureBarrierNV))
      "struct ALLEGRO_OGL_EXT_API *tmp_ =  (struct ALLEGRO_OGL_EXT_API *)C_malloc(sizeof(struct ALLEGRO_OGL_EXT_API));\ntmp_->BlendColor = BlendColor;\ntmp_->BlendEquation = BlendEquation;\ntmp_->DrawRangeElements = DrawRangeElements;\ntmp_->ColorTable = ColorTable;\ntmp_->ColorTableParameterfv = ColorTableParameterfv;\ntmp_->ColorTableParameteriv = ColorTableParameteriv;\ntmp_->CopyColorTable = CopyColorTable;\ntmp_->GetColorTable = GetColorTable;\ntmp_->GetColorTableParameterfv = GetColorTableParameterfv;\ntmp_->GetColorTableParameteriv = GetColorTableParameteriv;\ntmp_->ColorSubTable = ColorSubTable;\ntmp_->CopyColorSubTable = CopyColorSubTable;\ntmp_->TexImage3D = TexImage3D;\ntmp_->TexSubImage3D = TexSubImage3D;\ntmp_->CopyTexSubImage3D = CopyTexSubImage3D;\ntmp_->ConvolutionFilter1D = ConvolutionFilter1D;\ntmp_->ConvolutionFilter2D = ConvolutionFilter2D;\ntmp_->ConvolutionParameterf = ConvolutionParameterf;\ntmp_->ConvolutionParameterfv = ConvolutionParameterfv;\ntmp_->ConvolutionParameteri = ConvolutionParameteri;\ntmp_->ConvolutionParameteriv = ConvolutionParameteriv;\ntmp_->CopyConvolutionFilter1D = CopyConvolutionFilter1D;\ntmp_->CopyConvolutionFilter2D = CopyConvolutionFilter2D;\ntmp_->GetConvolutionFilter = GetConvolutionFilter;\ntmp_->GetConvolutionParameterfv = GetConvolutionParameterfv;\ntmp_->GetConvolutionParameteriv = GetConvolutionParameteriv;\ntmp_->GetSeparableFilter = GetSeparableFilter;\ntmp_->SeparableFilter2D = SeparableFilter2D;\ntmp_->GetHistogram = GetHistogram;\ntmp_->GetHistogramParameterfv = GetHistogramParameterfv;\ntmp_->GetHistogramParameteriv = GetHistogramParameteriv;\ntmp_->GetMinmax = GetMinmax;\ntmp_->GetMinmaxParameterfv = GetMinmaxParameterfv;\ntmp_->GetMinmaxParameteriv = GetMinmaxParameteriv;\ntmp_->Histogram = Histogram;\ntmp_->Minmax = Minmax;\ntmp_->ResetHistogram = ResetHistogram;\ntmp_->ResetMinmax = ResetMinmax;\ntmp_->ActiveTexture = ActiveTexture;\ntmp_->ClientActiveTexture = ClientActiveTexture;\ntmp_->MultiTexCoord1d = MultiTexCoord1d;\ntmp_->MultiTexCoord1dv = MultiTexCoord1dv;\ntmp_->MultiTexCoord1f = MultiTexCoord1f;\ntmp_->MultiTexCoord1fv = MultiTexCoord1fv;\ntmp_->MultiTexCoord1i = MultiTexCoord1i;\ntmp_->MultiTexCoord1iv = MultiTexCoord1iv;\ntmp_->MultiTexCoord1s = MultiTexCoord1s;\ntmp_->MultiTexCoord1sv = MultiTexCoord1sv;\ntmp_->MultiTexCoord2d = MultiTexCoord2d;\ntmp_->MultiTexCoord2dv = MultiTexCoord2dv;\ntmp_->MultiTexCoord2f = MultiTexCoord2f;\ntmp_->MultiTexCoord2fv = MultiTexCoord2fv;\ntmp_->MultiTexCoord2i = MultiTexCoord2i;\ntmp_->MultiTexCoord2iv = MultiTexCoord2iv;\ntmp_->MultiTexCoord2s = MultiTexCoord2s;\ntmp_->MultiTexCoord2sv = MultiTexCoord2sv;\ntmp_->MultiTexCoord3d = MultiTexCoord3d;\ntmp_->MultiTexCoord3dv = MultiTexCoord3dv;\ntmp_->MultiTexCoord3f = MultiTexCoord3f;\ntmp_->MultiTexCoord3fv = MultiTexCoord3fv;\ntmp_->MultiTexCoord3i = MultiTexCoord3i;\ntmp_->MultiTexCoord3iv = MultiTexCoord3iv;\ntmp_->MultiTexCoord3s = MultiTexCoord3s;\ntmp_->MultiTexCoord3sv = MultiTexCoord3sv;\ntmp_->MultiTexCoord4d = MultiTexCoord4d;\ntmp_->MultiTexCoord4dv = MultiTexCoord4dv;\ntmp_->MultiTexCoord4f = MultiTexCoord4f;\ntmp_->MultiTexCoord4fv = MultiTexCoord4fv;\ntmp_->MultiTexCoord4i = MultiTexCoord4i;\ntmp_->MultiTexCoord4iv = MultiTexCoord4iv;\ntmp_->MultiTexCoord4s = MultiTexCoord4s;\ntmp_->MultiTexCoord4sv = MultiTexCoord4sv;\ntmp_->LoadTransposeMatrixf = LoadTransposeMatrixf;\ntmp_->LoadTransposeMatrixd = LoadTransposeMatrixd;\ntmp_->MultTransposeMatrixf = MultTransposeMatrixf;\ntmp_->MultTransposeMatrixd = MultTransposeMatrixd;\ntmp_->SampleCoverage = SampleCoverage;\ntmp_->CompressedTexImage3D = CompressedTexImage3D;\ntmp_->CompressedTexImage2D = CompressedTexImage2D;\ntmp_->CompressedTexImage1D = CompressedTexImage1D;\ntmp_->CompressedTexSubImage3D = CompressedTexSubImage3D;\ntmp_->CompressedTexSubImage2D = CompressedTexSubImage2D;\ntmp_->CompressedTexSubImage1D = CompressedTexSubImage1D;\ntmp_->GetCompressedTexImage = GetCompressedTexImage;\ntmp_->BlendFuncSeparate = BlendFuncSeparate;\ntmp_->FogCoordf = FogCoordf;\ntmp_->FogCoordfv = FogCoordfv;\ntmp_->FogCoordd = FogCoordd;\ntmp_->FogCoorddv = FogCoorddv;\ntmp_->FogCoordPointer = FogCoordPointer;\ntmp_->MultiDrawArrays = MultiDrawArrays;\ntmp_->MultiDrawElements = MultiDrawElements;\ntmp_->PointParameterf = PointParameterf;\ntmp_->PointParameterfv = PointParameterfv;\ntmp_->PointParameteri = PointParameteri;\ntmp_->PointParameteriv = PointParameteriv;\ntmp_->SecondaryColor3b = SecondaryColor3b;\ntmp_->SecondaryColor3bv = SecondaryColor3bv;\ntmp_->SecondaryColor3d = SecondaryColor3d;\ntmp_->SecondaryColor3dv = SecondaryColor3dv;\ntmp_->SecondaryColor3f = SecondaryColor3f;\ntmp_->SecondaryColor3fv = SecondaryColor3fv;\ntmp_->SecondaryColor3i = SecondaryColor3i;\ntmp_->SecondaryColor3iv = SecondaryColor3iv;\ntmp_->SecondaryColor3s = SecondaryColor3s;\ntmp_->SecondaryColor3sv = SecondaryColor3sv;\ntmp_->SecondaryColor3ub = SecondaryColor3ub;\ntmp_->SecondaryColor3ubv = SecondaryColor3ubv;\ntmp_->SecondaryColor3ui = SecondaryColor3ui;\ntmp_->SecondaryColor3uiv = SecondaryColor3uiv;\ntmp_->SecondaryColor3us = SecondaryColor3us;\ntmp_->SecondaryColor3usv = SecondaryColor3usv;\ntmp_->SecondaryColorPointer = SecondaryColorPointer;\ntmp_->WindowPos2d = WindowPos2d;\ntmp_->WindowPos2dv = WindowPos2dv;\ntmp_->WindowPos2f = WindowPos2f;\ntmp_->WindowPos2fv = WindowPos2fv;\ntmp_->WindowPos2i = WindowPos2i;\ntmp_->WindowPos2iv = WindowPos2iv;\ntmp_->WindowPos2s = WindowPos2s;\ntmp_->WindowPos2sv = WindowPos2sv;\ntmp_->WindowPos3d = WindowPos3d;\ntmp_->WindowPos3dv = WindowPos3dv;\ntmp_->WindowPos3f = WindowPos3f;\ntmp_->WindowPos3fv = WindowPos3fv;\ntmp_->WindowPos3i = WindowPos3i;\ntmp_->WindowPos3iv = WindowPos3iv;\ntmp_->WindowPos3s = WindowPos3s;\ntmp_->WindowPos3sv = WindowPos3sv;\ntmp_->BindBuffer = BindBuffer;\ntmp_->DeleteBuffers = DeleteBuffers;\ntmp_->GenBuffers = GenBuffers;\ntmp_->IsBuffer = IsBuffer;\ntmp_->BufferData = BufferData;\ntmp_->BufferSubData = BufferSubData;\ntmp_->GetBufferSubData = GetBufferSubData;\ntmp_->MapBuffer = MapBuffer;\ntmp_->UnmapBuffer = UnmapBuffer;\ntmp_->GetBufferParameteriv = GetBufferParameteriv;\ntmp_->GetBufferPointerv = GetBufferPointerv;\ntmp_->GenQueries = GenQueries;\ntmp_->DeleteQueries = DeleteQueries;\ntmp_->IsQuery = IsQuery;\ntmp_->BeginQuery = BeginQuery;\ntmp_->EndQuery = EndQuery;\ntmp_->GetQueryiv = GetQueryiv;\ntmp_->GetQueryObjectiv = GetQueryObjectiv;\ntmp_->GetQueryObjectuiv = GetQueryObjectuiv;\ntmp_->BlendEquationSeparate = BlendEquationSeparate;\ntmp_->CreateProgram = CreateProgram;\ntmp_->CreateShader = CreateShader;\ntmp_->DeleteProgram = DeleteProgram;\ntmp_->DeleteShader = DeleteShader;\ntmp_->AttachShader = AttachShader;\ntmp_->DetachShader = DetachShader;\ntmp_->ShaderSource = ShaderSource;\ntmp_->CompileShader = CompileShader;\ntmp_->IsProgram = IsProgram;\ntmp_->IsShader = IsShader;\ntmp_->LinkProgram = LinkProgram;\ntmp_->UseProgram = UseProgram;\ntmp_->ValidateProgram = ValidateProgram;\ntmp_->Uniform1f = Uniform1f;\ntmp_->Uniform2f = Uniform2f;\ntmp_->Uniform3f = Uniform3f;\ntmp_->Uniform4f = Uniform4f;\ntmp_->Uniform1i = Uniform1i;\ntmp_->Uniform2i = Uniform2i;\ntmp_->Uniform3i = Uniform3i;\ntmp_->Uniform4i = Uniform4i;\ntmp_->Uniform1fv = Uniform1fv;\ntmp_->Uniform2fv = Uniform2fv;\ntmp_->Uniform3fv = Uniform3fv;\ntmp_->Uniform4fv = Uniform4fv;\ntmp_->Uniform1iv = Uniform1iv;\ntmp_->Uniform2iv = Uniform2iv;\ntmp_->Uniform3iv = Uniform3iv;\ntmp_->Uniform4iv = Uniform4iv;\ntmp_->UniformMatrix2fv = UniformMatrix2fv;\ntmp_->UniformMatrix3fv = UniformMatrix3fv;\ntmp_->UniformMatrix4fv = UniformMatrix4fv;\ntmp_->GetShaderfv = GetShaderfv;\ntmp_->GetShaderiv = GetShaderiv;\ntmp_->GetProgramfv = GetProgramfv;\ntmp_->GetProgramiv = GetProgramiv;\ntmp_->GetShaderInfoLog = GetShaderInfoLog;\ntmp_->GetProgramInfoLog = GetProgramInfoLog;\ntmp_->GetAttachedShaders = GetAttachedShaders;\ntmp_->GetUniformLocation = GetUniformLocation;\ntmp_->GetActiveUniform = GetActiveUniform;\ntmp_->GetUniformfv = GetUniformfv;\ntmp_->GetUniformiv = GetUniformiv;\ntmp_->GetShaderSource = GetShaderSource;\ntmp_->VertexAttrib1f = VertexAttrib1f;\ntmp_->VertexAttrib1s = VertexAttrib1s;\ntmp_->VertexAttrib1d = VertexAttrib1d;\ntmp_->VertexAttrib2f = VertexAttrib2f;\ntmp_->VertexAttrib2s = VertexAttrib2s;\ntmp_->VertexAttrib2d = VertexAttrib2d;\ntmp_->VertexAttrib3f = VertexAttrib3f;\ntmp_->VertexAttrib3s = VertexAttrib3s;\ntmp_->VertexAttrib3d = VertexAttrib3d;\ntmp_->VertexAttrib4f = VertexAttrib4f;\ntmp_->VertexAttrib4s = VertexAttrib4s;\ntmp_->VertexAttrib4d = VertexAttrib4d;\ntmp_->VertexAttrib4Nub = VertexAttrib4Nub;\ntmp_->VertexAttrib1fv = VertexAttrib1fv;\ntmp_->VertexAttrib1sv = VertexAttrib1sv;\ntmp_->VertexAttrib1dv = VertexAttrib1dv;\ntmp_->VertexAttrib2fv = VertexAttrib2fv;\ntmp_->VertexAttrib2sv = VertexAttrib2sv;\ntmp_->VertexAttrib2dv = VertexAttrib2dv;\ntmp_->VertexAttrib3fv = VertexAttrib3fv;\ntmp_->VertexAttrib3sv = VertexAttrib3sv;\ntmp_->VertexAttrib3dv = VertexAttrib3dv;\ntmp_->VertexAttrib4fv = VertexAttrib4fv;\ntmp_->VertexAttrib4sv = VertexAttrib4sv;\ntmp_->VertexAttrib4dv = VertexAttrib4dv;\ntmp_->VertexAttrib4iv = VertexAttrib4iv;\ntmp_->VertexAttrib4bv = VertexAttrib4bv;\ntmp_->VertexAttrib4ubv = VertexAttrib4ubv;\ntmp_->VertexAttrib4usv = VertexAttrib4usv;\ntmp_->VertexAttrib4uiv = VertexAttrib4uiv;\ntmp_->VertexAttrib4Nbv = VertexAttrib4Nbv;\ntmp_->VertexAttrib4Nsv = VertexAttrib4Nsv;\ntmp_->VertexAttrib4Niv = VertexAttrib4Niv;\ntmp_->VertexAttrib4Nubv = VertexAttrib4Nubv;\ntmp_->VertexAttrib4Nusv = VertexAttrib4Nusv;\ntmp_->VertexAttrib4Nuiv = VertexAttrib4Nuiv;\ntmp_->VertexAttribPointer = VertexAttribPointer;\ntmp_->EnableVertexAttribArray = EnableVertexAttribArray;\ntmp_->DisableVertexAttribArray = DisableVertexAttribArray;\ntmp_->BindAttribLocation = BindAttribLocation;\ntmp_->GetActiveAttrib = GetActiveAttrib;\ntmp_->GetAttribLocation = GetAttribLocation;\ntmp_->GetVertexAttribdv = GetVertexAttribdv;\ntmp_->GetVertexAttribfv = GetVertexAttribfv;\ntmp_->GetVertexAttribiv = GetVertexAttribiv;\ntmp_->GetVertexAttribPointerv = GetVertexAttribPointerv;\ntmp_->DrawBuffers = DrawBuffers;\ntmp_->StencilOpSeparate = StencilOpSeparate;\ntmp_->StencilFuncSeparate = StencilFuncSeparate;\ntmp_->StencilMaskSeparate = StencilMaskSeparate;\ntmp_->UniformMatrix2x3fv = UniformMatrix2x3fv;\ntmp_->UniformMatrix3x2fv = UniformMatrix3x2fv;\ntmp_->UniformMatrix2x4fv = UniformMatrix2x4fv;\ntmp_->UniformMatrix4x2fv = UniformMatrix4x2fv;\ntmp_->UniformMatrix3x4fv = UniformMatrix3x4fv;\ntmp_->UniformMatrix4x3fv = UniformMatrix4x3fv;\ntmp_->ColorMaski = ColorMaski;\ntmp_->GetBooleani_v = GetBooleani_v;\ntmp_->GetIntegeri_v = GetIntegeri_v;\ntmp_->Enablei = Enablei;\ntmp_->Disablei = Disablei;\ntmp_->IsEnabledi = IsEnabledi;\ntmp_->BeginTransformFeedback = BeginTransformFeedback;\ntmp_->EndTransformFeedback = EndTransformFeedback;\ntmp_->BindBufferRange = BindBufferRange;\ntmp_->BindBufferBase = BindBufferBase;\ntmp_->TransformFeedbackVaryings = TransformFeedbackVaryings;\ntmp_->GetTransformFeedbackVarying = GetTransformFeedbackVarying;\ntmp_->ClampColor = ClampColor;\ntmp_->BeginConditionalRender = BeginConditionalRender;\ntmp_->EndConditionalRender = EndConditionalRender;\ntmp_->VertexAttribI1i = VertexAttribI1i;\ntmp_->VertexAttribI2i = VertexAttribI2i;\ntmp_->VertexAttribI3i = VertexAttribI3i;\ntmp_->VertexAttribI4i = VertexAttribI4i;\ntmp_->VertexAttribI1ui = VertexAttribI1ui;\ntmp_->VertexAttribI2ui = VertexAttribI2ui;\ntmp_->VertexAttribI3ui = VertexAttribI3ui;\ntmp_->VertexAttribI4ui = VertexAttribI4ui;\ntmp_->VertexAttribI1iv = VertexAttribI1iv;\ntmp_->VertexAttribI2iv = VertexAttribI2iv;\ntmp_->VertexAttribI3iv = VertexAttribI3iv;\ntmp_->VertexAttribI4iv = VertexAttribI4iv;\ntmp_->VertexAttribI1uiv = VertexAttribI1uiv;\ntmp_->VertexAttribI2uiv = VertexAttribI2uiv;\ntmp_->VertexAttribI3uiv = VertexAttribI3uiv;\ntmp_->VertexAttribI4uiv = VertexAttribI4uiv;\ntmp_->VertexAttribI4bv = VertexAttribI4bv;\ntmp_->VertexAttribI4sv = VertexAttribI4sv;\ntmp_->VertexAttribI4ubv = VertexAttribI4ubv;\ntmp_->VertexAttribI4usv = VertexAttribI4usv;\ntmp_->VertexAttribIPointer = VertexAttribIPointer;\ntmp_->GetVertexAttribIiv = GetVertexAttribIiv;\ntmp_->GetVertexAttribIuiv = GetVertexAttribIuiv;\ntmp_->GetUniformuiv = GetUniformuiv;\ntmp_->BindFragDataLocation = BindFragDataLocation;\ntmp_->GetFragDataLocation = GetFragDataLocation;\ntmp_->Uniform1ui = Uniform1ui;\ntmp_->Uniform2ui = Uniform2ui;\ntmp_->Uniform3ui = Uniform3ui;\ntmp_->Uniform4ui = Uniform4ui;\ntmp_->Uniform1uiv = Uniform1uiv;\ntmp_->Uniform2uiv = Uniform2uiv;\ntmp_->Uniform3uiv = Uniform3uiv;\ntmp_->Uniform4uiv = Uniform4uiv;\ntmp_->TexParameterIiv = TexParameterIiv;\ntmp_->TexParameterIuiv = TexParameterIuiv;\ntmp_->GetTexParameterIiv = GetTexParameterIiv;\ntmp_->GetTexParameterIuiv = GetTexParameterIuiv;\ntmp_->ClearBufferiv = ClearBufferiv;\ntmp_->ClearBufferuiv = ClearBufferuiv;\ntmp_->ClearBufferfv = ClearBufferfv;\ntmp_->ClearBufferfi = ClearBufferfi;\ntmp_->GetStringi = GetStringi;\ntmp_->DrawArraysInstanced = DrawArraysInstanced;\ntmp_->DrawElementsInstanced = DrawElementsInstanced;\ntmp_->TexBuffer = TexBuffer;\ntmp_->PrimitiveRestartIndex = PrimitiveRestartIndex;\ntmp_->GetInteger64i_v = GetInteger64i_v;\ntmp_->GetBufferParameteri64v = GetBufferParameteri64v;\ntmp_->ProgramParameteri = ProgramParameteri;\ntmp_->FramebufferTexture = FramebufferTexture;\ntmp_->ClearBufferData = ClearBufferData;\ntmp_->ClearBufferSubData = ClearBufferSubData;\ntmp_->DispatchCompute = DispatchCompute;\ntmp_->DispatchComputeIndirect = DispatchComputeIndirect;\ntmp_->CopyImageSubData = CopyImageSubData;\ntmp_->FramebufferParameteri = FramebufferParameteri;\ntmp_->GetFramebufferParameteriv = GetFramebufferParameteriv;\ntmp_->GetInternalformati64v = GetInternalformati64v;\ntmp_->InvalidateTexSubImage = InvalidateTexSubImage;\ntmp_->InvalidateTexImage = InvalidateTexImage;\ntmp_->InvalidateBufferSubData = InvalidateBufferSubData;\ntmp_->InvalidateBufferData = InvalidateBufferData;\ntmp_->InvalidateFramebuffer = InvalidateFramebuffer;\ntmp_->InvalidateSubFramebuffer = InvalidateSubFramebuffer;\ntmp_->MultiDrawArraysIndirect = MultiDrawArraysIndirect;\ntmp_->MultiDrawElementsIndirect = MultiDrawElementsIndirect;\ntmp_->GetProgramInterfaceiv = GetProgramInterfaceiv;\ntmp_->GetProgramResourceIndex = GetProgramResourceIndex;\ntmp_->GetProgramResourceName = GetProgramResourceName;\ntmp_->GetProgramResourceiv = GetProgramResourceiv;\ntmp_->GetProgramResourceLocation = GetProgramResourceLocation;\ntmp_->GetProgramResourceLocationIndex = GetProgramResourceLocationIndex;\ntmp_->ShaderStorageBlockBinding = ShaderStorageBlockBinding;\ntmp_->TexBufferRange = TexBufferRange;\ntmp_->TexStorage2DMultisample = TexStorage2DMultisample;\ntmp_->TexStorage3DMultisample = TexStorage3DMultisample;\ntmp_->TextureView = TextureView;\ntmp_->BindVertexBuffer = BindVertexBuffer;\ntmp_->VertexAttribFormat = VertexAttribFormat;\ntmp_->VertexAttribIFormat = VertexAttribIFormat;\ntmp_->VertexAttribLFormat = VertexAttribLFormat;\ntmp_->VertexAttribBinding = VertexAttribBinding;\ntmp_->VertexBindingDivisor = VertexBindingDivisor;\ntmp_->DebugMessageControl = DebugMessageControl;\ntmp_->DebugMessageInsert = DebugMessageInsert;\ntmp_->DebugMessageCallback = DebugMessageCallback;\ntmp_->GetDebugMessageLog = GetDebugMessageLog;\ntmp_->PushDebugGroup = PushDebugGroup;\ntmp_->PopDebugGroup = PopDebugGroup;\ntmp_->ObjectLabel = ObjectLabel;\ntmp_->GetObjectLabel = GetObjectLabel;\ntmp_->ObjectPtrLabel = ObjectPtrLabel;\ntmp_->GetObjectPtrLabel = GetObjectPtrLabel;\ntmp_->ActiveTextureARB = ActiveTextureARB;\ntmp_->ClientActiveTextureARB = ClientActiveTextureARB;\ntmp_->MultiTexCoord1dARB = MultiTexCoord1dARB;\ntmp_->MultiTexCoord1dvARB = MultiTexCoord1dvARB;\ntmp_->MultiTexCoord1fARB = MultiTexCoord1fARB;\ntmp_->MultiTexCoord1fvARB = MultiTexCoord1fvARB;\ntmp_->MultiTexCoord1iARB = MultiTexCoord1iARB;\ntmp_->MultiTexCoord1ivARB = MultiTexCoord1ivARB;\ntmp_->MultiTexCoord1sARB = MultiTexCoord1sARB;\ntmp_->MultiTexCoord1svARB = MultiTexCoord1svARB;\ntmp_->MultiTexCoord2dARB = MultiTexCoord2dARB;\ntmp_->MultiTexCoord2dvARB = MultiTexCoord2dvARB;\ntmp_->MultiTexCoord2fARB = MultiTexCoord2fARB;\ntmp_->MultiTexCoord2fvARB = MultiTexCoord2fvARB;\ntmp_->MultiTexCoord2iARB = MultiTexCoord2iARB;\ntmp_->MultiTexCoord2ivARB = MultiTexCoord2ivARB;\ntmp_->MultiTexCoord2sARB = MultiTexCoord2sARB;\ntmp_->MultiTexCoord2svARB = MultiTexCoord2svARB;\ntmp_->MultiTexCoord3dARB = MultiTexCoord3dARB;\ntmp_->MultiTexCoord3dvARB = MultiTexCoord3dvARB;\ntmp_->MultiTexCoord3fARB = MultiTexCoord3fARB;\ntmp_->MultiTexCoord3fvARB = MultiTexCoord3fvARB;\ntmp_->MultiTexCoord3iARB = MultiTexCoord3iARB;\ntmp_->MultiTexCoord3ivARB = MultiTexCoord3ivARB;\ntmp_->MultiTexCoord3sARB = MultiTexCoord3sARB;\ntmp_->MultiTexCoord3svARB = MultiTexCoord3svARB;\ntmp_->MultiTexCoord4dARB = MultiTexCoord4dARB;\ntmp_->MultiTexCoord4dvARB = MultiTexCoord4dvARB;\ntmp_->MultiTexCoord4fARB = MultiTexCoord4fARB;\ntmp_->MultiTexCoord4fvARB = MultiTexCoord4fvARB;\ntmp_->MultiTexCoord4iARB = MultiTexCoord4iARB;\ntmp_->MultiTexCoord4ivARB = MultiTexCoord4ivARB;\ntmp_->MultiTexCoord4sARB = MultiTexCoord4sARB;\ntmp_->MultiTexCoord4svARB = MultiTexCoord4svARB;\ntmp_->LoadTransposeMatrixfARB = LoadTransposeMatrixfARB;\ntmp_->LoadTransposeMatrixdARB = LoadTransposeMatrixdARB;\ntmp_->MultTransposeMatrixfARB = MultTransposeMatrixfARB;\ntmp_->MultTransposeMatrixdARB = MultTransposeMatrixdARB;\ntmp_->SampleCoverageARB = SampleCoverageARB;\ntmp_->CompressedTexImage3DARB = CompressedTexImage3DARB;\ntmp_->CompressedTexImage2DARB = CompressedTexImage2DARB;\ntmp_->CompressedTexImage1DARB = CompressedTexImage1DARB;\ntmp_->CompressedTexSubImage3DARB = CompressedTexSubImage3DARB;\ntmp_->CompressedTexSubImage2DARB = CompressedTexSubImage2DARB;\ntmp_->CompressedTexSubImage1DARB = CompressedTexSubImage1DARB;\ntmp_->GetCompressedTexImageARB = GetCompressedTexImageARB;\ntmp_->PointParameterfARB = PointParameterfARB;\ntmp_->PointParameterfvARB = PointParameterfvARB;\ntmp_->WeightbvARB = WeightbvARB;\ntmp_->WeightsvARB = WeightsvARB;\ntmp_->WeightivARB = WeightivARB;\ntmp_->WeightfvARB = WeightfvARB;\ntmp_->WeightdvARB = WeightdvARB;\ntmp_->WeightubvARB = WeightubvARB;\ntmp_->WeightusvARB = WeightusvARB;\ntmp_->WeightuivARB = WeightuivARB;\ntmp_->WeightPointerARB = WeightPointerARB;\ntmp_->VertexBlendARB = VertexBlendARB;\ntmp_->CurrentPaletteMatrixARB = CurrentPaletteMatrixARB;\ntmp_->MatrixIndexubvARB = MatrixIndexubvARB;\ntmp_->MatrixIndexusvARB = MatrixIndexusvARB;\ntmp_->MatrixIndexuivARB = MatrixIndexuivARB;\ntmp_->MatrixIndexPointerARB = MatrixIndexPointerARB;\ntmp_->WindowPos2dARB = WindowPos2dARB;\ntmp_->WindowPos2dvARB = WindowPos2dvARB;\ntmp_->WindowPos2fARB = WindowPos2fARB;\ntmp_->WindowPos2fvARB = WindowPos2fvARB;\ntmp_->WindowPos2iARB = WindowPos2iARB;\ntmp_->WindowPos2ivARB = WindowPos2ivARB;\ntmp_->WindowPos2sARB = WindowPos2sARB;\ntmp_->WindowPos2svARB = WindowPos2svARB;\ntmp_->WindowPos3dARB = WindowPos3dARB;\ntmp_->WindowPos3dvARB = WindowPos3dvARB;\ntmp_->WindowPos3fARB = WindowPos3fARB;\ntmp_->WindowPos3fvARB = WindowPos3fvARB;\ntmp_->WindowPos3iARB = WindowPos3iARB;\ntmp_->WindowPos3ivARB = WindowPos3ivARB;\ntmp_->WindowPos3sARB = WindowPos3sARB;\ntmp_->WindowPos3svARB = WindowPos3svARB;\ntmp_->VertexAttrib1dARB = VertexAttrib1dARB;\ntmp_->VertexAttrib1dvARB = VertexAttrib1dvARB;\ntmp_->VertexAttrib1fARB = VertexAttrib1fARB;\ntmp_->VertexAttrib1fvARB = VertexAttrib1fvARB;\ntmp_->VertexAttrib1sARB = VertexAttrib1sARB;\ntmp_->VertexAttrib1svARB = VertexAttrib1svARB;\ntmp_->VertexAttrib2dARB = VertexAttrib2dARB;\ntmp_->VertexAttrib2dvARB = VertexAttrib2dvARB;\ntmp_->VertexAttrib2fARB = VertexAttrib2fARB;\ntmp_->VertexAttrib2fvARB = VertexAttrib2fvARB;\ntmp_->VertexAttrib2sARB = VertexAttrib2sARB;\ntmp_->VertexAttrib2svARB = VertexAttrib2svARB;\ntmp_->VertexAttrib3dARB = VertexAttrib3dARB;\ntmp_->VertexAttrib3dvARB = VertexAttrib3dvARB;\ntmp_->VertexAttrib3fARB = VertexAttrib3fARB;\ntmp_->VertexAttrib3fvARB = VertexAttrib3fvARB;\ntmp_->VertexAttrib3sARB = VertexAttrib3sARB;\ntmp_->VertexAttrib3svARB = VertexAttrib3svARB;\ntmp_->VertexAttrib4NbvARB = VertexAttrib4NbvARB;\ntmp_->VertexAttrib4NivARB = VertexAttrib4NivARB;\ntmp_->VertexAttrib4NsvARB = VertexAttrib4NsvARB;\ntmp_->VertexAttrib4NubARB = VertexAttrib4NubARB;\ntmp_->VertexAttrib4NubvARB = VertexAttrib4NubvARB;\ntmp_->VertexAttrib4NuivARB = VertexAttrib4NuivARB;\ntmp_->VertexAttrib4NusvARB = VertexAttrib4NusvARB;\ntmp_->VertexAttrib4bvARB = VertexAttrib4bvARB;\ntmp_->VertexAttrib4dARB = VertexAttrib4dARB;\ntmp_->VertexAttrib4dvARB = VertexAttrib4dvARB;\ntmp_->VertexAttrib4fARB = VertexAttrib4fARB;\ntmp_->VertexAttrib4fvARB = VertexAttrib4fvARB;\ntmp_->VertexAttrib4ivARB = VertexAttrib4ivARB;\ntmp_->VertexAttrib4sARB = VertexAttrib4sARB;\ntmp_->VertexAttrib4svARB = VertexAttrib4svARB;\ntmp_->VertexAttrib4ubvARB = VertexAttrib4ubvARB;\ntmp_->VertexAttrib4uivARB = VertexAttrib4uivARB;\ntmp_->VertexAttrib4usvARB = VertexAttrib4usvARB;\ntmp_->VertexAttribPointerARB = VertexAttribPointerARB;\ntmp_->EnableVertexAttribArrayARB = EnableVertexAttribArrayARB;\ntmp_->DisableVertexAttribArrayARB = DisableVertexAttribArrayARB;\ntmp_->ProgramStringARB = ProgramStringARB;\ntmp_->BindProgramARB = BindProgramARB;\ntmp_->DeleteProgramsARB = DeleteProgramsARB;\ntmp_->GenProgramsARB = GenProgramsARB;\ntmp_->ProgramEnvParameter4dARB = ProgramEnvParameter4dARB;\ntmp_->ProgramEnvParameter4dvARB = ProgramEnvParameter4dvARB;\ntmp_->ProgramEnvParameter4fARB = ProgramEnvParameter4fARB;\ntmp_->ProgramEnvParameter4fvARB = ProgramEnvParameter4fvARB;\ntmp_->ProgramLocalParameter4dARB = ProgramLocalParameter4dARB;\ntmp_->ProgramLocalParameter4dvARB = ProgramLocalParameter4dvARB;\ntmp_->ProgramLocalParameter4fARB = ProgramLocalParameter4fARB;\ntmp_->ProgramLocalParameter4fvARB = ProgramLocalParameter4fvARB;\ntmp_->GetProgramEnvParameterdvARB = GetProgramEnvParameterdvARB;\ntmp_->GetProgramEnvParameterfvARB = GetProgramEnvParameterfvARB;\ntmp_->GetProgramLocalParameterdvARB = GetProgramLocalParameterdvARB;\ntmp_->GetProgramLocalParameterfvARB = GetProgramLocalParameterfvARB;\ntmp_->GetProgramivARB = GetProgramivARB;\ntmp_->GetProgramStringARB = GetProgramStringARB;\ntmp_->GetVertexAttribdvARB = GetVertexAttribdvARB;\ntmp_->GetVertexAttribfvARB = GetVertexAttribfvARB;\ntmp_->GetVertexAttribivARB = GetVertexAttribivARB;\ntmp_->GetVertexAttribPointervARB = GetVertexAttribPointervARB;\ntmp_->IsProgramARB = IsProgramARB;\ntmp_->BindBufferARB = BindBufferARB;\ntmp_->DeleteBuffersARB = DeleteBuffersARB;\ntmp_->GenBuffersARB = GenBuffersARB;\ntmp_->IsBufferARB = IsBufferARB;\ntmp_->BufferDataARB = BufferDataARB;\ntmp_->BufferSubDataARB = BufferSubDataARB;\ntmp_->GetBufferSubDataARB = GetBufferSubDataARB;\ntmp_->MapBufferARB = MapBufferARB;\ntmp_->UnmapBufferARB = UnmapBufferARB;\ntmp_->GetBufferParameterivARB = GetBufferParameterivARB;\ntmp_->GetBufferPointervARB = GetBufferPointervARB;\ntmp_->GenQueriesARB = GenQueriesARB;\ntmp_->DeleteQueriesARB = DeleteQueriesARB;\ntmp_->IsQueryARB = IsQueryARB;\ntmp_->BeginQueryARB = BeginQueryARB;\ntmp_->EndQueryARB = EndQueryARB;\ntmp_->GetQueryivARB = GetQueryivARB;\ntmp_->GetQueryObjectivARB = GetQueryObjectivARB;\ntmp_->GetQueryObjectuivARB = GetQueryObjectuivARB;\ntmp_->DeleteObjectARB = DeleteObjectARB;\ntmp_->GetHandleARB = GetHandleARB;\ntmp_->DetachObjectARB = DetachObjectARB;\ntmp_->CreateShaderObjectARB = CreateShaderObjectARB;\ntmp_->ShaderSourceARB = ShaderSourceARB;\ntmp_->CompileShaderARB = CompileShaderARB;\ntmp_->CreateProgramObjectARB = CreateProgramObjectARB;\ntmp_->AttachObjectARB = AttachObjectARB;\ntmp_->LinkProgramARB = LinkProgramARB;\ntmp_->UseProgramObjectARB = UseProgramObjectARB;\ntmp_->ValidateProgramARB = ValidateProgramARB;\ntmp_->Uniform1fARB = Uniform1fARB;\ntmp_->Uniform2fARB = Uniform2fARB;\ntmp_->Uniform3fARB = Uniform3fARB;\ntmp_->Uniform4fARB = Uniform4fARB;\ntmp_->Uniform1iARB = Uniform1iARB;\ntmp_->Uniform2iARB = Uniform2iARB;\ntmp_->Uniform3iARB = Uniform3iARB;\ntmp_->Uniform4iARB = Uniform4iARB;\ntmp_->Uniform1fvARB = Uniform1fvARB;\ntmp_->Uniform2fvARB = Uniform2fvARB;\ntmp_->Uniform3fvARB = Uniform3fvARB;\ntmp_->Uniform4fvARB = Uniform4fvARB;\ntmp_->Uniform1ivARB = Uniform1ivARB;\ntmp_->Uniform2ivARB = Uniform2ivARB;\ntmp_->Uniform3ivARB = Uniform3ivARB;\ntmp_->Uniform4ivARB = Uniform4ivARB;\ntmp_->UniformMatrix2fvARB = UniformMatrix2fvARB;\ntmp_->UniformMatrix3fvARB = UniformMatrix3fvARB;\ntmp_->UniformMatrix4fvARB = UniformMatrix4fvARB;\ntmp_->GetObjectParameterfvARB = GetObjectParameterfvARB;\ntmp_->GetObjectParameterivARB = GetObjectParameterivARB;\ntmp_->GetInfoLogARB = GetInfoLogARB;\ntmp_->GetAttachedObjectsARB = GetAttachedObjectsARB;\ntmp_->GetUniformLocationARB = GetUniformLocationARB;\ntmp_->GetActiveUniformARB = GetActiveUniformARB;\ntmp_->GetUniformfvARB = GetUniformfvARB;\ntmp_->GetUniformivARB = GetUniformivARB;\ntmp_->GetShaderSourceARB = GetShaderSourceARB;\ntmp_->BindAttribLocationARB = BindAttribLocationARB;\ntmp_->GetActiveAttribARB = GetActiveAttribARB;\ntmp_->GetAttribLocationARB = GetAttribLocationARB;\ntmp_->DrawBuffersARB = DrawBuffersARB;\ntmp_->ClampColorARB = ClampColorARB;\ntmp_->DrawArraysInstancedARB = DrawArraysInstancedARB;\ntmp_->DrawElementsInstancedARB = DrawElementsInstancedARB;\ntmp_->IsRenderbuffer = IsRenderbuffer;\ntmp_->BindRenderbuffer = BindRenderbuffer;\ntmp_->DeleteRenderbuffers = DeleteRenderbuffers;\ntmp_->GenRenderbuffers = GenRenderbuffers;\ntmp_->RenderbufferStorage = RenderbufferStorage;\ntmp_->GetRenderbufferParameteriv = GetRenderbufferParameteriv;\ntmp_->IsFramebuffer = IsFramebuffer;\ntmp_->BindFramebuffer = BindFramebuffer;\ntmp_->DeleteFramebuffers = DeleteFramebuffers;\ntmp_->GenFramebuffers = GenFramebuffers;\ntmp_->CheckFramebufferStatus = CheckFramebufferStatus;\ntmp_->FramebufferTexture1D = FramebufferTexture1D;\ntmp_->FramebufferTexture2D = FramebufferTexture2D;\ntmp_->FramebufferTexture3D = FramebufferTexture3D;\ntmp_->FramebufferRenderbuffer = FramebufferRenderbuffer;\ntmp_->GetFramebufferAttachmentParameteriv = GetFramebufferAttachmentParameteriv;\ntmp_->GenerateMipmap = GenerateMipmap;\ntmp_->BlitFramebuffer = BlitFramebuffer;\ntmp_->RenderbufferStorageMultisample = RenderbufferStorageMultisample;\ntmp_->FramebufferTextureLayer = FramebufferTextureLayer;\ntmp_->ProgramParameteriARB = ProgramParameteriARB;\ntmp_->FramebufferTextureARB = FramebufferTextureARB;\ntmp_->FramebufferTextureLayerARB = FramebufferTextureLayerARB;\ntmp_->FramebufferTextureFaceARB = FramebufferTextureFaceARB;\ntmp_->VertexAttribDivisor = VertexAttribDivisor;\ntmp_->MapBufferRange = MapBufferRange;\ntmp_->FlushMappedBufferRange = FlushMappedBufferRange;\ntmp_->TexBufferARB = TexBufferARB;\ntmp_->BindVertexArray = BindVertexArray;\ntmp_->DeleteVertexArrays = DeleteVertexArrays;\ntmp_->GenVertexArrays = GenVertexArrays;\ntmp_->IsVertexArray = IsVertexArray;\ntmp_->GetUniformIndices = GetUniformIndices;\ntmp_->GetActiveUniformsiv = GetActiveUniformsiv;\ntmp_->GetActiveUniformName = GetActiveUniformName;\ntmp_->GetUniformBlockIndex = GetUniformBlockIndex;\ntmp_->GetActiveUniformBlockiv = GetActiveUniformBlockiv;\ntmp_->GetActiveUniformBlockName = GetActiveUniformBlockName;\ntmp_->UniformBlockBinding = UniformBlockBinding;\ntmp_->CopyBufferSubData = CopyBufferSubData;\ntmp_->DrawElementsBaseVertex = DrawElementsBaseVertex;\ntmp_->DrawRangeElementsBaseVertex = DrawRangeElementsBaseVertex;\ntmp_->DrawElementsInstancedBaseVertex = DrawElementsInstancedBaseVertex;\ntmp_->MultiDrawElementsBaseVertex = MultiDrawElementsBaseVertex;\ntmp_->ProvokingVertex = ProvokingVertex;\ntmp_->FenceSync = FenceSync;\ntmp_->IsSync = IsSync;\ntmp_->DeleteSync = DeleteSync;\ntmp_->ClientWaitSync = ClientWaitSync;\ntmp_->WaitSync = WaitSync;\ntmp_->GetInteger64v = GetInteger64v;\ntmp_->GetSynciv = GetSynciv;\ntmp_->TexImage2DMultisample = TexImage2DMultisample;\ntmp_->TexImage3DMultisample = TexImage3DMultisample;\ntmp_->GetMultisamplefv = GetMultisamplefv;\ntmp_->SampleMaski = SampleMaski;\ntmp_->BlendEquationi = BlendEquationi;\ntmp_->BlendEquationSeparatei = BlendEquationSeparatei;\ntmp_->BlendFunci = BlendFunci;\ntmp_->BlendFuncSeparatei = BlendFuncSeparatei;\ntmp_->MinSampleShading = MinSampleShading;\ntmp_->NamedStringARB = NamedStringARB;\ntmp_->DeleteNamedStringARB = DeleteNamedStringARB;\ntmp_->CompileShaderIncludeARB = CompileShaderIncludeARB;\ntmp_->IsNamedStringARB = IsNamedStringARB;\ntmp_->GetNamedStringARB = GetNamedStringARB;\ntmp_->GetNamedStringivARB = GetNamedStringivARB;\ntmp_->BindFragDataLocationIndexed = BindFragDataLocationIndexed;\ntmp_->GetFragDataIndex = GetFragDataIndex;\ntmp_->GenSamplers = GenSamplers;\ntmp_->DeleteSamplers = DeleteSamplers;\ntmp_->IsSampler = IsSampler;\ntmp_->BindSampler = BindSampler;\ntmp_->SamplerParameteri = SamplerParameteri;\ntmp_->SamplerParameteriv = SamplerParameteriv;\ntmp_->SamplerParameterf = SamplerParameterf;\ntmp_->SamplerParameterfv = SamplerParameterfv;\ntmp_->SamplerParameterIiv = SamplerParameterIiv;\ntmp_->SamplerParameterIuiv = SamplerParameterIuiv;\ntmp_->GetSamplerParameteriv = GetSamplerParameteriv;\ntmp_->GetSamplerParameterIiv = GetSamplerParameterIiv;\ntmp_->GetSamplerParameterfv = GetSamplerParameterfv;\ntmp_->GetSamplerParameterIfv = GetSamplerParameterIfv;\ntmp_->QueryCounter = QueryCounter;\ntmp_->GetQueryObjecti64v = GetQueryObjecti64v;\ntmp_->GetQueryObjectui64v = GetQueryObjectui64v;\ntmp_->VertexP2ui = VertexP2ui;\ntmp_->VertexP2uiv = VertexP2uiv;\ntmp_->VertexP3ui = VertexP3ui;\ntmp_->VertexP3uiv = VertexP3uiv;\ntmp_->VertexP4ui = VertexP4ui;\ntmp_->VertexP4uiv = VertexP4uiv;\ntmp_->TexCoordP1ui = TexCoordP1ui;\ntmp_->TexCoordP1uiv = TexCoordP1uiv;\ntmp_->TexCoordP2ui = TexCoordP2ui;\ntmp_->TexCoordP2uiv = TexCoordP2uiv;\ntmp_->TexCoordP3ui = TexCoordP3ui;\ntmp_->TexCoordP3uiv = TexCoordP3uiv;\ntmp_->TexCoordP4ui = TexCoordP4ui;\ntmp_->TexCoordP4uiv = TexCoordP4uiv;\ntmp_->MultiTexCoordP1ui = MultiTexCoordP1ui;\ntmp_->MultiTexCoordP1uiv = MultiTexCoordP1uiv;\ntmp_->MultiTexCoordP2ui = MultiTexCoordP2ui;\ntmp_->MultiTexCoordP2uiv = MultiTexCoordP2uiv;\ntmp_->MultiTexCoordP3ui = MultiTexCoordP3ui;\ntmp_->MultiTexCoordP3uiv = MultiTexCoordP3uiv;\ntmp_->MultiTexCoordP4ui = MultiTexCoordP4ui;\ntmp_->MultiTexCoordP4uiv = MultiTexCoordP4uiv;\ntmp_->NormalP3ui = NormalP3ui;\ntmp_->NormalP3uiv = NormalP3uiv;\ntmp_->ColorP3ui = ColorP3ui;\ntmp_->ColorP3uiv = ColorP3uiv;\ntmp_->ColorP4ui = ColorP4ui;\ntmp_->ColorP4uiv = ColorP4uiv;\ntmp_->SecondaryColorP3ui = SecondaryColorP3ui;\ntmp_->SecondaryColorP3uiv = SecondaryColorP3uiv;\ntmp_->VertexAttribP1ui = VertexAttribP1ui;\ntmp_->VertexAttribP1uiv = VertexAttribP1uiv;\ntmp_->VertexAttribP2ui = VertexAttribP2ui;\ntmp_->VertexAttribP2uiv = VertexAttribP2uiv;\ntmp_->VertexAttribP3ui = VertexAttribP3ui;\ntmp_->VertexAttribP3uiv = VertexAttribP3uiv;\ntmp_->VertexAttribP4ui = VertexAttribP4ui;\ntmp_->VertexAttribP4uiv = VertexAttribP4uiv;\ntmp_->DrawArraysIndirect = DrawArraysIndirect;\ntmp_->DrawElementsIndirect = DrawElementsIndirect;\ntmp_->Uniform1d = Uniform1d;\ntmp_->Uniform2d = Uniform2d;\ntmp_->Uniform3d = Uniform3d;\ntmp_->Uniform4d = Uniform4d;\ntmp_->Uniform1dv = Uniform1dv;\ntmp_->Uniform2dv = Uniform2dv;\ntmp_->Uniform3dv = Uniform3dv;\ntmp_->Uniform4dv = Uniform4dv;\ntmp_->UniformMatrix2dv = UniformMatrix2dv;\ntmp_->UniformMatrix3dv = UniformMatrix3dv;\ntmp_->UniformMatrix4dv = UniformMatrix4dv;\ntmp_->UniformMatrix2x3dv = UniformMatrix2x3dv;\ntmp_->UniformMatrix2x4dv = UniformMatrix2x4dv;\ntmp_->UniformMatrix3x2dv = UniformMatrix3x2dv;\ntmp_->UniformMatrix3x4dv = UniformMatrix3x4dv;\ntmp_->UniformMatrix4x2dv = UniformMatrix4x2dv;\ntmp_->UniformMatrix4x3dv = UniformMatrix4x3dv;\ntmp_->GetUniformdv = GetUniformdv;\ntmp_->ProgramUniform1dEXT = ProgramUniform1dEXT;\ntmp_->ProgramUniform2dEXT = ProgramUniform2dEXT;\ntmp_->ProgramUniform3dEXT = ProgramUniform3dEXT;\ntmp_->ProgramUniform4dEXT = ProgramUniform4dEXT;\ntmp_->ProgramUniform1dvEXT = ProgramUniform1dvEXT;\ntmp_->ProgramUniform2dvEXT = ProgramUniform2dvEXT;\ntmp_->ProgramUniform3dvEXT = ProgramUniform3dvEXT;\ntmp_->ProgramUniform4dvEXT = ProgramUniform4dvEXT;\ntmp_->ProgramUniformMatrix2dvEXT = ProgramUniformMatrix2dvEXT;\ntmp_->ProgramUniformMatrix3dvEXT = ProgramUniformMatrix3dvEXT;\ntmp_->ProgramUniformMatrix4dvEXT = ProgramUniformMatrix4dvEXT;\ntmp_->ProgramUniformMatrix2x3dvEXT = ProgramUniformMatrix2x3dvEXT;\ntmp_->ProgramUniformMatrix2x4dvEXT = ProgramUniformMatrix2x4dvEXT;\ntmp_->ProgramUniformMatrix3x2dvEXT = ProgramUniformMatrix3x2dvEXT;\ntmp_->ProgramUniformMatrix3x4dvEXT = ProgramUniformMatrix3x4dvEXT;\ntmp_->ProgramUniformMatrix4x2dvEXT = ProgramUniformMatrix4x2dvEXT;\ntmp_->ProgramUniformMatrix4x3dvEXT = ProgramUniformMatrix4x3dvEXT;\ntmp_->GetSubroutineUniformLocation = GetSubroutineUniformLocation;\ntmp_->GetSubroutineIndex = GetSubroutineIndex;\ntmp_->GetActiveSubroutineUniformiv = GetActiveSubroutineUniformiv;\ntmp_->GetActiveSubroutineUniformName = GetActiveSubroutineUniformName;\ntmp_->GetActiveSubroutineName = GetActiveSubroutineName;\ntmp_->UniformSubroutinesuiv = UniformSubroutinesuiv;\ntmp_->GetUniformSubroutineuiv = GetUniformSubroutineuiv;\ntmp_->GetProgramStageiv = GetProgramStageiv;\ntmp_->PatchParameteri = PatchParameteri;\ntmp_->PatchParameterfv = PatchParameterfv;\ntmp_->BindTransformFeedback = BindTransformFeedback;\ntmp_->DeleteTransformFeedbacks = DeleteTransformFeedbacks;\ntmp_->GenTransformFeedbacks = GenTransformFeedbacks;\ntmp_->IsTransformFeedback = IsTransformFeedback;\ntmp_->PauseTransformFeedback = PauseTransformFeedback;\ntmp_->ResumeTransformFeedback = ResumeTransformFeedback;\ntmp_->DrawTransformFeedback = DrawTransformFeedback;\ntmp_->DrawTransformFeedbackStream = DrawTransformFeedbackStream;\ntmp_->BeginQueryIndexed = BeginQueryIndexed;\ntmp_->EndQueryIndexed = EndQueryIndexed;\ntmp_->GetQueryIndexediv = GetQueryIndexediv;\ntmp_->BlendColorEXT = BlendColorEXT;\ntmp_->PolygonOffsetEXT = PolygonOffsetEXT;\ntmp_->TexImage3DEXT = TexImage3DEXT;\ntmp_->TexSubImage3DEXT = TexSubImage3DEXT;\ntmp_->GetTexFilterFuncSGIS = GetTexFilterFuncSGIS;\ntmp_->TexFilterFuncSGIS = TexFilterFuncSGIS;\ntmp_->TexSubImage1DEXT = TexSubImage1DEXT;\ntmp_->TexSubImage2DEXT = TexSubImage2DEXT;\ntmp_->CopyTexImage1DEXT = CopyTexImage1DEXT;\ntmp_->CopyTexImage2DEXT = CopyTexImage2DEXT;\ntmp_->CopyTexSubImage1DEXT = CopyTexSubImage1DEXT;\ntmp_->CopyTexSubImage2DEXT = CopyTexSubImage2DEXT;\ntmp_->CopyTexSubImage3DEXT = CopyTexSubImage3DEXT;\ntmp_->GetHistogramEXT = GetHistogramEXT;\ntmp_->GetHistogramParameterfvEXT = GetHistogramParameterfvEXT;\ntmp_->GetHistogramParameterivEXT = GetHistogramParameterivEXT;\ntmp_->GetMinmaxEXT = GetMinmaxEXT;\ntmp_->GetMinmaxParameterfvEXT = GetMinmaxParameterfvEXT;\ntmp_->GetMinmaxParameterivEXT = GetMinmaxParameterivEXT;\ntmp_->HistogramEXT = HistogramEXT;\ntmp_->MinmaxEXT = MinmaxEXT;\ntmp_->ResetHistogramEXT = ResetHistogramEXT;\ntmp_->ResetMinmaxEXT = ResetMinmaxEXT;\ntmp_->ConvolutionFilter1DEXT = ConvolutionFilter1DEXT;\ntmp_->ConvolutionFilter2DEXT = ConvolutionFilter2DEXT;\ntmp_->ConvolutionParameterfEXT = ConvolutionParameterfEXT;\ntmp_->ConvolutionParameterfvEXT = ConvolutionParameterfvEXT;\ntmp_->ConvolutionParameteriEXT = ConvolutionParameteriEXT;\ntmp_->ConvolutionParameterivEXT = ConvolutionParameterivEXT;\ntmp_->CopyConvolutionFilter1DEXT = CopyConvolutionFilter1DEXT;\ntmp_->CopyConvolutionFilter2DEXT = CopyConvolutionFilter2DEXT;\ntmp_->GetConvolutionFilterEXT = GetConvolutionFilterEXT;\ntmp_->GetConvolutionParameterfvEXT = GetConvolutionParameterfvEXT;\ntmp_->GetConvolutionParameterivEXT = GetConvolutionParameterivEXT;\ntmp_->GetSeparableFilterEXT = GetSeparableFilterEXT;\ntmp_->SeparableFilter2DEXT = SeparableFilter2DEXT;\ntmp_->ColorTableSGI = ColorTableSGI;\ntmp_->ColorTableParameterfvSGI = ColorTableParameterfvSGI;\ntmp_->ColorTableParameterivSGI = ColorTableParameterivSGI;\ntmp_->CopyColorTableSGI = CopyColorTableSGI;\ntmp_->GetColorTableSGI = GetColorTableSGI;\ntmp_->GetColorTableParameterfvSGI = GetColorTableParameterfvSGI;\ntmp_->GetColorTableParameterivSGI = GetColorTableParameterivSGI;\ntmp_->PixelTexGenSGIX = PixelTexGenSGIX;\ntmp_->PixelTexGenParameteriSGIS = PixelTexGenParameteriSGIS;\ntmp_->PixelTexGenParameterivSGIS = PixelTexGenParameterivSGIS;\ntmp_->PixelTexGenParameterfSGIS = PixelTexGenParameterfSGIS;\ntmp_->PixelTexGenParameterfvSGIS = PixelTexGenParameterfvSGIS;\ntmp_->GetPixelTexGenParameterivSGIS = GetPixelTexGenParameterivSGIS;\ntmp_->GetPixelTexGenParameterfvSGIS = GetPixelTexGenParameterfvSGIS;\ntmp_->TexImage4DSGIS = TexImage4DSGIS;\ntmp_->TexSubImage4DSGIS = TexSubImage4DSGIS;\ntmp_->AreTexturesResidentEXT = AreTexturesResidentEXT;\ntmp_->BindTextureEXT = BindTextureEXT;\ntmp_->DeleteTexturesEXT = DeleteTexturesEXT;\ntmp_->GenTexturesEXT = GenTexturesEXT;\ntmp_->IsTextureEXT = IsTextureEXT;\ntmp_->PrioritizeTexturesEXT = PrioritizeTexturesEXT;\ntmp_->DetailTexFuncSGIS = DetailTexFuncSGIS;\ntmp_->GetDetailTexFuncSGIS = GetDetailTexFuncSGIS;\ntmp_->SharpenTexFuncSGIS = SharpenTexFuncSGIS;\ntmp_->GetSharpenTexFuncSGIS = GetSharpenTexFuncSGIS;\ntmp_->SampleMaskSGIS = SampleMaskSGIS;\ntmp_->SamplePatternSGIS = SamplePatternSGIS;\ntmp_->ArrayElementEXT = ArrayElementEXT;\ntmp_->ColorPointerEXT = ColorPointerEXT;\ntmp_->DrawArraysEXT = DrawArraysEXT;\ntmp_->EdgeFlagPointerEXT = EdgeFlagPointerEXT;\ntmp_->GetPointervEXT = GetPointervEXT;\ntmp_->IndexPointerEXT = IndexPointerEXT;\ntmp_->NormalPointerEXT = NormalPointerEXT;\ntmp_->TexCoordPointerEXT = TexCoordPointerEXT;\ntmp_->VertexPointerEXT = VertexPointerEXT;\ntmp_->BlendEquationEXT = BlendEquationEXT;\ntmp_->SpriteParameterfSGIX = SpriteParameterfSGIX;\ntmp_->SpriteParameterfvSGIX = SpriteParameterfvSGIX;\ntmp_->SpriteParameteriSGIX = SpriteParameteriSGIX;\ntmp_->SpriteParameterivSGIX = SpriteParameterivSGIX;\ntmp_->PointParameterfEXT = PointParameterfEXT;\ntmp_->PointParameterfvEXT = PointParameterfvEXT;\ntmp_->PointParameterfSGIS = PointParameterfSGIS;\ntmp_->PointParameterfvSGIS = PointParameterfvSGIS;\ntmp_->GetInstrumentsSGIX = GetInstrumentsSGIX;\ntmp_->InstrumentsBufferSGIX = InstrumentsBufferSGIX;\ntmp_->PollInstrumentsSGIX = PollInstrumentsSGIX;\ntmp_->ReadInstrumentsSGIX = ReadInstrumentsSGIX;\ntmp_->StartInstrumentsSGIX = StartInstrumentsSGIX;\ntmp_->StopInstrumentsSGIX = StopInstrumentsSGIX;\ntmp_->FrameZoomSGIX = FrameZoomSGIX;\ntmp_->TagSampleBufferSGIX = TagSampleBufferSGIX;\ntmp_->DeformationMap3dSGIX = DeformationMap3dSGIX;\ntmp_->DeformationMap3fSGIX = DeformationMap3fSGIX;\ntmp_->DeformSGIX = DeformSGIX;\ntmp_->LoadIdentityDeformationMapSGIX = LoadIdentityDeformationMapSGIX;\ntmp_->ReferencePlaneSGIX = ReferencePlaneSGIX;\ntmp_->FlushRasterSGIX = FlushRasterSGIX;\ntmp_->FogFuncSGIS = FogFuncSGIS;\ntmp_->GetFogFuncSGIS = GetFogFuncSGIS;\ntmp_->ImageTransformParameteriHP = ImageTransformParameteriHP;\ntmp_->ImageTransformParameterfHP = ImageTransformParameterfHP;\ntmp_->ImageTransformParameterivHP = ImageTransformParameterivHP;\ntmp_->ImageTransformParameterfvHP = ImageTransformParameterfvHP;\ntmp_->GetImageTransformParameterivHP = GetImageTransformParameterivHP;\ntmp_->GetImageTransformParameterfvHP = GetImageTransformParameterfvHP;\ntmp_->CopyColorSubTableEXT = CopyColorSubTableEXT;\ntmp_->HintPGI = HintPGI;\ntmp_->ColorTableEXT = ColorTableEXT;\ntmp_->GetColorTableEXT = GetColorTableEXT;\ntmp_->GetColorTableParameterivEXT = GetColorTableParameterivEXT;\ntmp_->GetColorTableParameterfvEXT = GetColorTableParameterfvEXT;\ntmp_->GetListParameterfvSGIX = GetListParameterfvSGIX;\ntmp_->GetListParameterivSGIX = GetListParameterivSGIX;\ntmp_->ListParameterfSGIX = ListParameterfSGIX;\ntmp_->ListParameterfvSGIX = ListParameterfvSGIX;\ntmp_->ListParameteriSGIX = ListParameteriSGIX;\ntmp_->ListParameterivSGIX = ListParameterivSGIX;\ntmp_->IndexMaterialEXT = IndexMaterialEXT;\ntmp_->IndexFuncEXT = IndexFuncEXT;\ntmp_->LockArraysEXT = LockArraysEXT;\ntmp_->UnlockArraysEXT = UnlockArraysEXT;\ntmp_->CullParameterdvEXT = CullParameterdvEXT;\ntmp_->CullParameterfvEXT = CullParameterfvEXT;\ntmp_->FragmentColorMaterialSGIX = FragmentColorMaterialSGIX;\ntmp_->FragmentLightfSGIX = FragmentLightfSGIX;\ntmp_->FragmentLightfvSGIX = FragmentLightfvSGIX;\ntmp_->FragmentLightiSGIX = FragmentLightiSGIX;\ntmp_->FragmentLightivSGIX = FragmentLightivSGIX;\ntmp_->FragmentLightModelfSGIX = FragmentLightModelfSGIX;\ntmp_->FragmentLightModelfvSGIX = FragmentLightModelfvSGIX;\ntmp_->FragmentLightModeliSGIX = FragmentLightModeliSGIX;\ntmp_->FragmentLightModelivSGIX = FragmentLightModelivSGIX;\ntmp_->FragmentMaterialfSGIX = FragmentMaterialfSGIX;\ntmp_->FragmentMaterialfvSGIX = FragmentMaterialfvSGIX;\ntmp_->FragmentMaterialiSGIX = FragmentMaterialiSGIX;\ntmp_->FragmentMaterialivSGIX = FragmentMaterialivSGIX;\ntmp_->GetFragmentLightfvSGIX = GetFragmentLightfvSGIX;\ntmp_->GetFragmentLightivSGIX = GetFragmentLightivSGIX;\ntmp_->GetFragmentMaterialfvSGIX = GetFragmentMaterialfvSGIX;\ntmp_->GetFragmentMaterialivSGIX = GetFragmentMaterialivSGIX;\ntmp_->LightEnviSGIX = LightEnviSGIX;\ntmp_->DrawRangeElementsEXT = DrawRangeElementsEXT;\ntmp_->ApplyTextureEXT = ApplyTextureEXT;\ntmp_->TextureLightEXT = TextureLightEXT;\ntmp_->TextureMaterialEXT = TextureMaterialEXT;\ntmp_->AsyncMarkerSGIX = AsyncMarkerSGIX;\ntmp_->FinishAsyncSGIX = FinishAsyncSGIX;\ntmp_->PollAsyncSGIX = PollAsyncSGIX;\ntmp_->GenAsyncMarkersSGIX = GenAsyncMarkersSGIX;\ntmp_->DeleteAsyncMarkersSGIX = DeleteAsyncMarkersSGIX;\ntmp_->IsAsyncMarkerSGIX = IsAsyncMarkerSGIX;\ntmp_->VertexPointervINTEL = VertexPointervINTEL;\ntmp_->NormalPointervINTEL = NormalPointervINTEL;\ntmp_->ColorPointervINTEL = ColorPointervINTEL;\ntmp_->TexCoordPointervINTEL = TexCoordPointervINTEL;\ntmp_->PixelTransformParameteriEXT = PixelTransformParameteriEXT;\ntmp_->PixelTransformParameterfEXT = PixelTransformParameterfEXT;\ntmp_->PixelTransformParameterivEXT = PixelTransformParameterivEXT;\ntmp_->PixelTransformParameterfvEXT = PixelTransformParameterfvEXT;\ntmp_->SecondaryColor3bEXT = SecondaryColor3bEXT;\ntmp_->SecondaryColor3bvEXT = SecondaryColor3bvEXT;\ntmp_->SecondaryColor3dEXT = SecondaryColor3dEXT;\ntmp_->SecondaryColor3dvEXT = SecondaryColor3dvEXT;\ntmp_->SecondaryColor3fEXT = SecondaryColor3fEXT;\ntmp_->SecondaryColor3fvEXT = SecondaryColor3fvEXT;\ntmp_->SecondaryColor3iEXT = SecondaryColor3iEXT;\ntmp_->SecondaryColor3ivEXT = SecondaryColor3ivEXT;\ntmp_->SecondaryColor3sEXT = SecondaryColor3sEXT;\ntmp_->SecondaryColor3svEXT = SecondaryColor3svEXT;\ntmp_->SecondaryColor3ubEXT = SecondaryColor3ubEXT;\ntmp_->SecondaryColor3ubvEXT = SecondaryColor3ubvEXT;\ntmp_->SecondaryColor3uiEXT = SecondaryColor3uiEXT;\ntmp_->SecondaryColor3uivEXT = SecondaryColor3uivEXT;\ntmp_->SecondaryColor3usEXT = SecondaryColor3usEXT;\ntmp_->SecondaryColor3usvEXT = SecondaryColor3usvEXT;\ntmp_->SecondaryColorPointerEXT = SecondaryColorPointerEXT;\ntmp_->TextureNormalEXT = TextureNormalEXT;\ntmp_->MultiDrawArraysEXT = MultiDrawArraysEXT;\ntmp_->MultiDrawElementsEXT = MultiDrawElementsEXT;\ntmp_->FogCoordfEXT = FogCoordfEXT;\ntmp_->FogCoordfvEXT = FogCoordfvEXT;\ntmp_->FogCoorddEXT = FogCoorddEXT;\ntmp_->FogCoorddvEXT = FogCoorddvEXT;\ntmp_->FogCoordPointerEXT = FogCoordPointerEXT;\ntmp_->Tangent3bEXT = Tangent3bEXT;\ntmp_->Tangent3bvEXT = Tangent3bvEXT;\ntmp_->Tangent3dEXT = Tangent3dEXT;\ntmp_->Tangent3dvEXT = Tangent3dvEXT;\ntmp_->Tangent3fEXT = Tangent3fEXT;\ntmp_->Tangent3fvEXT = Tangent3fvEXT;\ntmp_->Tangent3iEXT = Tangent3iEXT;\ntmp_->Tangent3ivEXT = Tangent3ivEXT;\ntmp_->Tangent3sEXT = Tangent3sEXT;\ntmp_->Tangent3svEXT = Tangent3svEXT;\ntmp_->Binormal3bEXT = Binormal3bEXT;\ntmp_->Binormal3bvEXT = Binormal3bvEXT;\ntmp_->Binormal3dEXT = Binormal3dEXT;\ntmp_->Binormal3dvEXT = Binormal3dvEXT;\ntmp_->Binormal3fEXT = Binormal3fEXT;\ntmp_->Binormal3fvEXT = Binormal3fvEXT;\ntmp_->Binormal3iEXT = Binormal3iEXT;\ntmp_->Binormal3ivEXT = Binormal3ivEXT;\ntmp_->Binormal3sEXT = Binormal3sEXT;\ntmp_->Binormal3svEXT = Binormal3svEXT;\ntmp_->TangentPointerEXT = TangentPointerEXT;\ntmp_->BinormalPointerEXT = BinormalPointerEXT;\ntmp_->FinishTextureSUNX = FinishTextureSUNX;\ntmp_->GlobalAlphaFactorbSUN = GlobalAlphaFactorbSUN;\ntmp_->GlobalAlphaFactorsSUN = GlobalAlphaFactorsSUN;\ntmp_->GlobalAlphaFactoriSUN = GlobalAlphaFactoriSUN;\ntmp_->GlobalAlphaFactorfSUN = GlobalAlphaFactorfSUN;\ntmp_->GlobalAlphaFactordSUN = GlobalAlphaFactordSUN;\ntmp_->GlobalAlphaFactorubSUN = GlobalAlphaFactorubSUN;\ntmp_->GlobalAlphaFactorusSUN = GlobalAlphaFactorusSUN;\ntmp_->GlobalAlphaFactoruiSUN = GlobalAlphaFactoruiSUN;\ntmp_->ReplacementCodeuiSUN = ReplacementCodeuiSUN;\ntmp_->ReplacementCodeusSUN = ReplacementCodeusSUN;\ntmp_->ReplacementCodeubSUN = ReplacementCodeubSUN;\ntmp_->ReplacementCodeuivSUN = ReplacementCodeuivSUN;\ntmp_->ReplacementCodeusvSUN = ReplacementCodeusvSUN;\ntmp_->ReplacementCodeubvSUN = ReplacementCodeubvSUN;\ntmp_->ReplacementCodePointerSUN = ReplacementCodePointerSUN;\ntmp_->Color4ubVertex2fSUN = Color4ubVertex2fSUN;\ntmp_->Color4ubVertex2fvSUN = Color4ubVertex2fvSUN;\ntmp_->Color4ubVertex3fSUN = Color4ubVertex3fSUN;\ntmp_->Color4ubVertex3fvSUN = Color4ubVertex3fvSUN;\ntmp_->Color3fVertex3fSUN = Color3fVertex3fSUN;\ntmp_->Color3fVertex3fvSUN = Color3fVertex3fvSUN;\ntmp_->Normal3fVertex3fSUN = Normal3fVertex3fSUN;\ntmp_->Normal3fVertex3fvSUN = Normal3fVertex3fvSUN;\ntmp_->Color4fNormal3fVertex3fSUN = Color4fNormal3fVertex3fSUN;\ntmp_->Color4fNormal3fVertex3fvSUN = Color4fNormal3fVertex3fvSUN;\ntmp_->TexCoord2fVertex3fSUN = TexCoord2fVertex3fSUN;\ntmp_->TexCoord2fVertex3fvSUN = TexCoord2fVertex3fvSUN;\ntmp_->TexCoord4fVertex4fSUN = TexCoord4fVertex4fSUN;\ntmp_->TexCoord4fVertex4fvSUN = TexCoord4fVertex4fvSUN;\ntmp_->TexCoord2fColor4ubVertex3fSUN = TexCoord2fColor4ubVertex3fSUN;\ntmp_->TexCoord2fColor4ubVertex3fvSUN = TexCoord2fColor4ubVertex3fvSUN;\ntmp_->TexCoord2fColor3fVertex3fSUN = TexCoord2fColor3fVertex3fSUN;\ntmp_->TexCoord2fColor3fVertex3fvSUN = TexCoord2fColor3fVertex3fvSUN;\ntmp_->TexCoord2fNormal3fVertex3fSUN = TexCoord2fNormal3fVertex3fSUN;\ntmp_->TexCoord2fNormal3fVertex3fvSUN = TexCoord2fNormal3fVertex3fvSUN;\ntmp_->TexCoord2fColor4fNormal3fVertex3fSUN = TexCoord2fColor4fNormal3fVertex3fSUN;\ntmp_->TexCoord2fColor4fNormal3fVertex3fvSUN = TexCoord2fColor4fNormal3fVertex3fvSUN;\ntmp_->TexCoord4fColor4fNormal3fVertex4fSUN = TexCoord4fColor4fNormal3fVertex4fSUN;\ntmp_->TexCoord4fColor4fNormal3fVertex4fvSUN = TexCoord4fColor4fNormal3fVertex4fvSUN;\ntmp_->ReplacementCodeuiVertex3fSUN = ReplacementCodeuiVertex3fSUN;\ntmp_->ReplacementCodeuiVertex3fvSUN = ReplacementCodeuiVertex3fvSUN;\ntmp_->ReplacementCodeuiColor4ubVertex3fSUN = ReplacementCodeuiColor4ubVertex3fSUN;\ntmp_->ReplacementCodeuiColor4ubVertex3fvSUN = ReplacementCodeuiColor4ubVertex3fvSUN;\ntmp_->ReplacementCodeuiColor3fVertex3fSUN = ReplacementCodeuiColor3fVertex3fSUN;\ntmp_->ReplacementCodeuiColor3fVertex3fvSUN = ReplacementCodeuiColor3fVertex3fvSUN;\ntmp_->ReplacementCodeuiNormal3fVertex3fSUN = ReplacementCodeuiNormal3fVertex3fSUN;\ntmp_->ReplacementCodeuiNormal3fVertex3fvSUN = ReplacementCodeuiNormal3fVertex3fvSUN;\ntmp_->ReplacementCodeuiColor4fNormal3fVertex3fSUN = ReplacementCodeuiColor4fNormal3fVertex3fSUN;\ntmp_->ReplacementCodeuiColor4fNormal3fVertex3fvSUN = ReplacementCodeuiColor4fNormal3fVertex3fvSUN;\ntmp_->ReplacementCodeuiTexCoord2fVertex3fSUN = ReplacementCodeuiTexCoord2fVertex3fSUN;\ntmp_->ReplacementCodeuiTexCoord2fVertex3fvSUN = ReplacementCodeuiTexCoord2fVertex3fvSUN;\ntmp_->ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;\ntmp_->ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;\ntmp_->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;\ntmp_->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;\ntmp_->BlendFuncSeparateEXT = BlendFuncSeparateEXT;\ntmp_->BlendFuncSeparateINGR = BlendFuncSeparateINGR;\ntmp_->VertexWeightfEXT = VertexWeightfEXT;\ntmp_->VertexWeightfvEXT = VertexWeightfvEXT;\ntmp_->VertexWeightPointerEXT = VertexWeightPointerEXT;\ntmp_->FlushVertexArrayRangeNV = FlushVertexArrayRangeNV;\ntmp_->VertexArrayRangeNV = VertexArrayRangeNV;\ntmp_->CombinerParameterfvNV = CombinerParameterfvNV;\ntmp_->CombinerParameterfNV = CombinerParameterfNV;\ntmp_->CombinerParameterivNV = CombinerParameterivNV;\ntmp_->CombinerParameteriNV = CombinerParameteriNV;\ntmp_->CombinerInputNV = CombinerInputNV;\ntmp_->CombinerOutputNV = CombinerOutputNV;\ntmp_->FinalCombinerInputNV = FinalCombinerInputNV;\ntmp_->GetCombinerInputParameterfvNV = GetCombinerInputParameterfvNV;\ntmp_->GetCombinerInputParameterivNV = GetCombinerInputParameterivNV;\ntmp_->GetCombinerOutputParameterfvNV = GetCombinerOutputParameterfvNV;\ntmp_->GetCombinerOutputParameterivNV = GetCombinerOutputParameterivNV;\ntmp_->GetFinalCombinerInputParameterfvNV = GetFinalCombinerInputParameterfvNV;\ntmp_->GetFinalCombinerInputParameterivNV = GetFinalCombinerInputParameterivNV;\ntmp_->ResizeBuffersMESA = ResizeBuffersMESA;\ntmp_->WindowPos2dMESA = WindowPos2dMESA;\ntmp_->WindowPos2dvMESA = WindowPos2dvMESA;\ntmp_->WindowPos2fMESA = WindowPos2fMESA;\ntmp_->WindowPos2fvMESA = WindowPos2fvMESA;\ntmp_->WindowPos2iMESA = WindowPos2iMESA;\ntmp_->WindowPos2ivMESA = WindowPos2ivMESA;\ntmp_->WindowPos2sMESA = WindowPos2sMESA;\ntmp_->WindowPos2svMESA = WindowPos2svMESA;\ntmp_->WindowPos3dMESA = WindowPos3dMESA;\ntmp_->WindowPos3dvMESA = WindowPos3dvMESA;\ntmp_->WindowPos3fMESA = WindowPos3fMESA;\ntmp_->WindowPos3fvMESA = WindowPos3fvMESA;\ntmp_->WindowPos3iMESA = WindowPos3iMESA;\ntmp_->WindowPos3ivMESA = WindowPos3ivMESA;\ntmp_->WindowPos3sMESA = WindowPos3sMESA;\ntmp_->WindowPos3svMESA = WindowPos3svMESA;\ntmp_->WindowPos4dMESA = WindowPos4dMESA;\ntmp_->WindowPos4dvMESA = WindowPos4dvMESA;\ntmp_->WindowPos4fMESA = WindowPos4fMESA;\ntmp_->WindowPos4fvMESA = WindowPos4fvMESA;\ntmp_->WindowPos4iMESA = WindowPos4iMESA;\ntmp_->WindowPos4ivMESA = WindowPos4ivMESA;\ntmp_->WindowPos4sMESA = WindowPos4sMESA;\ntmp_->WindowPos4svMESA = WindowPos4svMESA;\ntmp_->MultiModeDrawArraysIBM = MultiModeDrawArraysIBM;\ntmp_->MultiModeDrawElementsIBM = MultiModeDrawElementsIBM;\ntmp_->TbufferMask3DFX = TbufferMask3DFX;\ntmp_->SampleMaskEXT = SampleMaskEXT;\ntmp_->SamplePatternEXT = SamplePatternEXT;\ntmp_->TextureColorMaskSGIS = TextureColorMaskSGIS;\ntmp_->IglooInterfaceSGIX = IglooInterfaceSGIX;\ntmp_->DeleteFencesNV = DeleteFencesNV;\ntmp_->GenFencesNV = GenFencesNV;\ntmp_->IsFenceNV = IsFenceNV;\ntmp_->TestFenceNV = TestFenceNV;\ntmp_->GetFenceivNV = GetFenceivNV;\ntmp_->FinishFenceNV = FinishFenceNV;\ntmp_->SetFenceNV = SetFenceNV;\ntmp_->MapControlPointsNV = MapControlPointsNV;\ntmp_->MapParameterivNV = MapParameterivNV;\ntmp_->MapParameterfvNV = MapParameterfvNV;\ntmp_->GetMapControlPointsNV = GetMapControlPointsNV;\ntmp_->GetMapParameterivNV = GetMapParameterivNV;\ntmp_->GetMapParameterfvNV = GetMapParameterfvNV;\ntmp_->GetMapAttribParameterivNV = GetMapAttribParameterivNV;\ntmp_->GetMapAttribParameterfvNV = GetMapAttribParameterfvNV;\ntmp_->EvalMapsNV = EvalMapsNV;\ntmp_->CombinerStageParameterfvNV = CombinerStageParameterfvNV;\ntmp_->GetCombinerStageParameterfvNV = GetCombinerStageParameterfvNV;\ntmp_->AreProgramsResidentNV = AreProgramsResidentNV;\ntmp_->BindProgramNV = BindProgramNV;\ntmp_->DeleteProgramsNV = DeleteProgramsNV;\ntmp_->ExecuteProgramNV = ExecuteProgramNV;\ntmp_->GenProgramsNV = GenProgramsNV;\ntmp_->GetProgramParameterdvNV = GetProgramParameterdvNV;\ntmp_->GetProgramParameterfvNV = GetProgramParameterfvNV;\ntmp_->GetProgramivNV = GetProgramivNV;\ntmp_->GetProgramStringNV = GetProgramStringNV;\ntmp_->GetTrackMatrixivNV = GetTrackMatrixivNV;\ntmp_->GetVertexAttribdvNV = GetVertexAttribdvNV;\ntmp_->GetVertexAttribfvNV = GetVertexAttribfvNV;\ntmp_->GetVertexAttribivNV = GetVertexAttribivNV;\ntmp_->GetVertexAttribPointervNV = GetVertexAttribPointervNV;\ntmp_->IsProgramNV = IsProgramNV;\ntmp_->LoadProgramNV = LoadProgramNV;\ntmp_->ProgramParameter4dNV = ProgramParameter4dNV;\ntmp_->ProgramParameter4dvNV = ProgramParameter4dvNV;\ntmp_->ProgramParameter4fNV = ProgramParameter4fNV;\ntmp_->ProgramParameter4fvNV = ProgramParameter4fvNV;\ntmp_->ProgramParameters4dvNV = ProgramParameters4dvNV;\ntmp_->ProgramParameters4fvNV = ProgramParameters4fvNV;\ntmp_->RequestResidentProgramsNV = RequestResidentProgramsNV;\ntmp_->TrackMatrixNV = TrackMatrixNV;\ntmp_->VertexAttribPointerNV = VertexAttribPointerNV;\ntmp_->VertexAttrib1dNV = VertexAttrib1dNV;\ntmp_->VertexAttrib1dvNV = VertexAttrib1dvNV;\ntmp_->VertexAttrib1fNV = VertexAttrib1fNV;\ntmp_->VertexAttrib1fvNV = VertexAttrib1fvNV;\ntmp_->VertexAttrib1sNV = VertexAttrib1sNV;\ntmp_->VertexAttrib1svNV = VertexAttrib1svNV;\ntmp_->VertexAttrib2dNV = VertexAttrib2dNV;\ntmp_->VertexAttrib2dvNV = VertexAttrib2dvNV;\ntmp_->VertexAttrib2fNV = VertexAttrib2fNV;\ntmp_->VertexAttrib2fvNV = VertexAttrib2fvNV;\ntmp_->VertexAttrib2sNV = VertexAttrib2sNV;\ntmp_->VertexAttrib2svNV = VertexAttrib2svNV;\ntmp_->VertexAttrib3dNV = VertexAttrib3dNV;\ntmp_->VertexAttrib3dvNV = VertexAttrib3dvNV;\ntmp_->VertexAttrib3fNV = VertexAttrib3fNV;\ntmp_->VertexAttrib3fvNV = VertexAttrib3fvNV;\ntmp_->VertexAttrib3sNV = VertexAttrib3sNV;\ntmp_->VertexAttrib3svNV = VertexAttrib3svNV;\ntmp_->VertexAttrib4dNV = VertexAttrib4dNV;\ntmp_->VertexAttrib4dvNV = VertexAttrib4dvNV;\ntmp_->VertexAttrib4fNV = VertexAttrib4fNV;\ntmp_->VertexAttrib4fvNV = VertexAttrib4fvNV;\ntmp_->VertexAttrib4sNV = VertexAttrib4sNV;\ntmp_->VertexAttrib4svNV = VertexAttrib4svNV;\ntmp_->VertexAttrib4ubNV = VertexAttrib4ubNV;\ntmp_->VertexAttrib4ubvNV = VertexAttrib4ubvNV;\ntmp_->VertexAttribs1dvNV = VertexAttribs1dvNV;\ntmp_->VertexAttribs1fvNV = VertexAttribs1fvNV;\ntmp_->VertexAttribs1svNV = VertexAttribs1svNV;\ntmp_->VertexAttribs2dvNV = VertexAttribs2dvNV;\ntmp_->VertexAttribs2fvNV = VertexAttribs2fvNV;\ntmp_->VertexAttribs2svNV = VertexAttribs2svNV;\ntmp_->VertexAttribs3dvNV = VertexAttribs3dvNV;\ntmp_->VertexAttribs3fvNV = VertexAttribs3fvNV;\ntmp_->VertexAttribs3svNV = VertexAttribs3svNV;\ntmp_->VertexAttribs4dvNV = VertexAttribs4dvNV;\ntmp_->VertexAttribs4fvNV = VertexAttribs4fvNV;\ntmp_->VertexAttribs4svNV = VertexAttribs4svNV;\ntmp_->VertexAttribs4ubvNV = VertexAttribs4ubvNV;\ntmp_->TexBumpParameterivATI = TexBumpParameterivATI;\ntmp_->TexBumpParameterfvATI = TexBumpParameterfvATI;\ntmp_->GetTexBumpParameterivATI = GetTexBumpParameterivATI;\ntmp_->GetTexBumpParameterfvATI = GetTexBumpParameterfvATI;\ntmp_->GenFragmentShadersATI = GenFragmentShadersATI;\ntmp_->BindFragmentShaderATI = BindFragmentShaderATI;\ntmp_->DeleteFragmentShaderATI = DeleteFragmentShaderATI;\ntmp_->BeginFragmentShaderATI = BeginFragmentShaderATI;\ntmp_->EndFragmentShaderATI = EndFragmentShaderATI;\ntmp_->PassTexCoordATI = PassTexCoordATI;\ntmp_->SampleMapATI = SampleMapATI;\ntmp_->ColorFragmentOp1ATI = ColorFragmentOp1ATI;\ntmp_->ColorFragmentOp2ATI = ColorFragmentOp2ATI;\ntmp_->ColorFragmentOp3ATI = ColorFragmentOp3ATI;\ntmp_->AlphaFragmentOp1ATI = AlphaFragmentOp1ATI;\ntmp_->AlphaFragmentOp2ATI = AlphaFragmentOp2ATI;\ntmp_->AlphaFragmentOp3ATI = AlphaFragmentOp3ATI;\ntmp_->SetFragmentShaderConstantATI = SetFragmentShaderConstantATI;\ntmp_->PNTrianglesiATI = PNTrianglesiATI;\ntmp_->PNTrianglesfATI = PNTrianglesfATI;\ntmp_->NewObjectBufferATI = NewObjectBufferATI;\ntmp_->IsObjectBufferATI = IsObjectBufferATI;\ntmp_->UpdateObjectBufferATI = UpdateObjectBufferATI;\ntmp_->GetObjectBufferfvATI = GetObjectBufferfvATI;\ntmp_->GetObjectBufferivATI = GetObjectBufferivATI;\ntmp_->FreeObjectBufferATI = FreeObjectBufferATI;\ntmp_->ArrayObjectATI = ArrayObjectATI;\ntmp_->GetArrayObjectfvATI = GetArrayObjectfvATI;\ntmp_->GetArrayObjectivATI = GetArrayObjectivATI;\ntmp_->VariantArrayObjectATI = VariantArrayObjectATI;\ntmp_->GetVariantArrayObjectfvATI = GetVariantArrayObjectfvATI;\ntmp_->GetVariantArrayObjectivATI = GetVariantArrayObjectivATI;\ntmp_->BeginVertexShaderEXT = BeginVertexShaderEXT;\ntmp_->EndVertexShaderEXT = EndVertexShaderEXT;\ntmp_->BindVertexShaderEXT = BindVertexShaderEXT;\ntmp_->GenVertexShadersEXT = GenVertexShadersEXT;\ntmp_->DeleteVertexShaderEXT = DeleteVertexShaderEXT;\ntmp_->ShaderOp1EXT = ShaderOp1EXT;\ntmp_->ShaderOp2EXT = ShaderOp2EXT;\ntmp_->ShaderOp3EXT = ShaderOp3EXT;\ntmp_->SwizzleEXT = SwizzleEXT;\ntmp_->WriteMaskEXT = WriteMaskEXT;\ntmp_->InsertComponentEXT = InsertComponentEXT;\ntmp_->ExtractComponentEXT = ExtractComponentEXT;\ntmp_->GenSymbolsEXT = GenSymbolsEXT;\ntmp_->SetInvariantEXT = SetInvariantEXT;\ntmp_->SetLocalConstantEXT = SetLocalConstantEXT;\ntmp_->VariantbvEXT = VariantbvEXT;\ntmp_->VariantsvEXT = VariantsvEXT;\ntmp_->VariantivEXT = VariantivEXT;\ntmp_->VariantfvEXT = VariantfvEXT;\ntmp_->VariantdvEXT = VariantdvEXT;\ntmp_->VariantubvEXT = VariantubvEXT;\ntmp_->VariantusvEXT = VariantusvEXT;\ntmp_->VariantuivEXT = VariantuivEXT;\ntmp_->VariantPointerEXT = VariantPointerEXT;\ntmp_->EnableVariantClientStateEXT = EnableVariantClientStateEXT;\ntmp_->DisableVariantClientStateEXT = DisableVariantClientStateEXT;\ntmp_->BindLightParameterEXT = BindLightParameterEXT;\ntmp_->BindMaterialParameterEXT = BindMaterialParameterEXT;\ntmp_->BindTexGenParameterEXT = BindTexGenParameterEXT;\ntmp_->BindTextureUnitParameterEXT = BindTextureUnitParameterEXT;\ntmp_->BindParameterEXT = BindParameterEXT;\ntmp_->IsVariantEnabledEXT = IsVariantEnabledEXT;\ntmp_->GetVariantBooleanvEXT = GetVariantBooleanvEXT;\ntmp_->GetVariantIntegervEXT = GetVariantIntegervEXT;\ntmp_->GetVariantFloatvEXT = GetVariantFloatvEXT;\ntmp_->GetVariantPointervEXT = GetVariantPointervEXT;\ntmp_->GetInvariantBooleanvEXT = GetInvariantBooleanvEXT;\ntmp_->GetInvariantIntegervEXT = GetInvariantIntegervEXT;\ntmp_->GetInvariantFloatvEXT = GetInvariantFloatvEXT;\ntmp_->GetLocalConstantBooleanvEXT = GetLocalConstantBooleanvEXT;\ntmp_->GetLocalConstantIntegervEXT = GetLocalConstantIntegervEXT;\ntmp_->GetLocalConstantFloatvEXT = GetLocalConstantFloatvEXT;\ntmp_->VertexStream1sATI = VertexStream1sATI;\ntmp_->VertexStream1svATI = VertexStream1svATI;\ntmp_->VertexStream1iATI = VertexStream1iATI;\ntmp_->VertexStream1ivATI = VertexStream1ivATI;\ntmp_->VertexStream1fATI = VertexStream1fATI;\ntmp_->VertexStream1fvATI = VertexStream1fvATI;\ntmp_->VertexStream1dATI = VertexStream1dATI;\ntmp_->VertexStream1dvATI = VertexStream1dvATI;\ntmp_->VertexStream2sATI = VertexStream2sATI;\ntmp_->VertexStream2svATI = VertexStream2svATI;\ntmp_->VertexStream2iATI = VertexStream2iATI;\ntmp_->VertexStream2ivATI = VertexStream2ivATI;\ntmp_->VertexStream2fATI = VertexStream2fATI;\ntmp_->VertexStream2fvATI = VertexStream2fvATI;\ntmp_->VertexStream2dATI = VertexStream2dATI;\ntmp_->VertexStream2dvATI = VertexStream2dvATI;\ntmp_->VertexStream3sATI = VertexStream3sATI;\ntmp_->VertexStream3svATI = VertexStream3svATI;\ntmp_->VertexStream3iATI = VertexStream3iATI;\ntmp_->VertexStream3ivATI = VertexStream3ivATI;\ntmp_->VertexStream3fATI = VertexStream3fATI;\ntmp_->VertexStream3fvATI = VertexStream3fvATI;\ntmp_->VertexStream3dATI = VertexStream3dATI;\ntmp_->VertexStream3dvATI = VertexStream3dvATI;\ntmp_->VertexStream4sATI = VertexStream4sATI;\ntmp_->VertexStream4svATI = VertexStream4svATI;\ntmp_->VertexStream4iATI = VertexStream4iATI;\ntmp_->VertexStream4ivATI = VertexStream4ivATI;\ntmp_->VertexStream4fATI = VertexStream4fATI;\ntmp_->VertexStream4fvATI = VertexStream4fvATI;\ntmp_->VertexStream4dATI = VertexStream4dATI;\ntmp_->VertexStream4dvATI = VertexStream4dvATI;\ntmp_->NormalStream3bATI = NormalStream3bATI;\ntmp_->NormalStream3bvATI = NormalStream3bvATI;\ntmp_->NormalStream3sATI = NormalStream3sATI;\ntmp_->NormalStream3svATI = NormalStream3svATI;\ntmp_->NormalStream3iATI = NormalStream3iATI;\ntmp_->NormalStream3ivATI = NormalStream3ivATI;\ntmp_->NormalStream3fATI = NormalStream3fATI;\ntmp_->NormalStream3fvATI = NormalStream3fvATI;\ntmp_->NormalStream3dATI = NormalStream3dATI;\ntmp_->NormalStream3dvATI = NormalStream3dvATI;\ntmp_->ClientActiveVertexStreamATI = ClientActiveVertexStreamATI;\ntmp_->VertexBlendEnviATI = VertexBlendEnviATI;\ntmp_->VertexBlendEnvfATI = VertexBlendEnvfATI;\ntmp_->ElementPointerATI = ElementPointerATI;\ntmp_->DrawElementArrayATI = DrawElementArrayATI;\ntmp_->DrawRangeElementArrayATI = DrawRangeElementArrayATI;\ntmp_->DrawMeshArraysSUN = DrawMeshArraysSUN;\ntmp_->GenOcclusionQueriesNV = GenOcclusionQueriesNV;\ntmp_->DeleteOcclusionQueriesNV = DeleteOcclusionQueriesNV;\ntmp_->IsOcclusionQueryNV = IsOcclusionQueryNV;\ntmp_->BeginOcclusionQueryNV = BeginOcclusionQueryNV;\ntmp_->EndOcclusionQueryNV = EndOcclusionQueryNV;\ntmp_->GetOcclusionQueryivNV = GetOcclusionQueryivNV;\ntmp_->GetOcclusionQueryuivNV = GetOcclusionQueryuivNV;\ntmp_->PointParameteriNV = PointParameteriNV;\ntmp_->PointParameterivNV = PointParameterivNV;\ntmp_->ActiveStencilFaceEXT = ActiveStencilFaceEXT;\ntmp_->ElementPointerAPPLE = ElementPointerAPPLE;\ntmp_->DrawElementArrayAPPLE = DrawElementArrayAPPLE;\ntmp_->DrawRangeElementArrayAPPLE = DrawRangeElementArrayAPPLE;\ntmp_->MultiDrawElementArrayAPPLE = MultiDrawElementArrayAPPLE;\ntmp_->MultiDrawRangeElementArrayAPPLE = MultiDrawRangeElementArrayAPPLE;\ntmp_->GenFencesAPPLE = GenFencesAPPLE;\ntmp_->DeleteFencesAPPLE = DeleteFencesAPPLE;\ntmp_->SetFenceAPPLE = SetFenceAPPLE;\ntmp_->IsFenceAPPLE = IsFenceAPPLE;\ntmp_->TestFenceAPPLE = TestFenceAPPLE;\ntmp_->FinishFenceAPPLE = FinishFenceAPPLE;\ntmp_->TestObjectAPPLE = TestObjectAPPLE;\ntmp_->FinishObjectAPPLE = FinishObjectAPPLE;\ntmp_->BindVertexArrayAPPLE = BindVertexArrayAPPLE;\ntmp_->DeleteVertexArraysAPPLE = DeleteVertexArraysAPPLE;\ntmp_->GenVertexArraysAPPLE = GenVertexArraysAPPLE;\ntmp_->IsVertexArrayAPPLE = IsVertexArrayAPPLE;\ntmp_->VertexArrayRangeAPPLE = VertexArrayRangeAPPLE;\ntmp_->FlushVertexArrayRangeAPPLE = FlushVertexArrayRangeAPPLE;\ntmp_->VertexArrayParameteriAPPLE = VertexArrayParameteriAPPLE;\ntmp_->DrawBuffersATI = DrawBuffersATI;\ntmp_->ProgramNamedParameter4fNV = ProgramNamedParameter4fNV;\ntmp_->ProgramNamedParameter4dNV = ProgramNamedParameter4dNV;\ntmp_->ProgramNamedParameter4fvNV = ProgramNamedParameter4fvNV;\ntmp_->ProgramNamedParameter4dvNV = ProgramNamedParameter4dvNV;\ntmp_->GetProgramNamedParameterfvNV = GetProgramNamedParameterfvNV;\ntmp_->GetProgramNamedParameterdvNV = GetProgramNamedParameterdvNV;\ntmp_->Vertex2hNV = Vertex2hNV;\ntmp_->Vertex2hvNV = Vertex2hvNV;\ntmp_->Vertex3hNV = Vertex3hNV;\ntmp_->Vertex3hvNV = Vertex3hvNV;\ntmp_->Vertex4hNV = Vertex4hNV;\ntmp_->Vertex4hvNV = Vertex4hvNV;\ntmp_->Normal3hNV = Normal3hNV;\ntmp_->Normal3hvNV = Normal3hvNV;\ntmp_->Color3hNV = Color3hNV;\ntmp_->Color3hvNV = Color3hvNV;\ntmp_->Color4hNV = Color4hNV;\ntmp_->Color4hvNV = Color4hvNV;\ntmp_->TexCoord1hNV = TexCoord1hNV;\ntmp_->TexCoord1hvNV = TexCoord1hvNV;\ntmp_->TexCoord2hNV = TexCoord2hNV;\ntmp_->TexCoord2hvNV = TexCoord2hvNV;\ntmp_->TexCoord3hNV = TexCoord3hNV;\ntmp_->TexCoord3hvNV = TexCoord3hvNV;\ntmp_->TexCoord4hNV = TexCoord4hNV;\ntmp_->TexCoord4hvNV = TexCoord4hvNV;\ntmp_->MultiTexCoord1hNV = MultiTexCoord1hNV;\ntmp_->MultiTexCoord1hvNV = MultiTexCoord1hvNV;\ntmp_->MultiTexCoord2hNV = MultiTexCoord2hNV;\ntmp_->MultiTexCoord2hvNV = MultiTexCoord2hvNV;\ntmp_->MultiTexCoord3hNV = MultiTexCoord3hNV;\ntmp_->MultiTexCoord3hvNV = MultiTexCoord3hvNV;\ntmp_->MultiTexCoord4hNV = MultiTexCoord4hNV;\ntmp_->MultiTexCoord4hvNV = MultiTexCoord4hvNV;\ntmp_->FogCoordhNV = FogCoordhNV;\ntmp_->FogCoordhvNV = FogCoordhvNV;\ntmp_->SecondaryColor3hNV = SecondaryColor3hNV;\ntmp_->SecondaryColor3hvNV = SecondaryColor3hvNV;\ntmp_->VertexWeighthNV = VertexWeighthNV;\ntmp_->VertexWeighthvNV = VertexWeighthvNV;\ntmp_->VertexAttrib1hNV = VertexAttrib1hNV;\ntmp_->VertexAttrib1hvNV = VertexAttrib1hvNV;\ntmp_->VertexAttrib2hNV = VertexAttrib2hNV;\ntmp_->VertexAttrib2hvNV = VertexAttrib2hvNV;\ntmp_->VertexAttrib3hNV = VertexAttrib3hNV;\ntmp_->VertexAttrib3hvNV = VertexAttrib3hvNV;\ntmp_->VertexAttrib4hNV = VertexAttrib4hNV;\ntmp_->VertexAttrib4hvNV = VertexAttrib4hvNV;\ntmp_->VertexAttribs1hvNV = VertexAttribs1hvNV;\ntmp_->VertexAttribs2hvNV = VertexAttribs2hvNV;\ntmp_->VertexAttribs3hvNV = VertexAttribs3hvNV;\ntmp_->VertexAttribs4hvNV = VertexAttribs4hvNV;\ntmp_->PixelDataRangeNV = PixelDataRangeNV;\ntmp_->FlushPixelDataRangeNV = FlushPixelDataRangeNV;\ntmp_->PrimitiveRestartNV = PrimitiveRestartNV;\ntmp_->PrimitiveRestartIndexNV = PrimitiveRestartIndexNV;\ntmp_->MapObjectBufferATI = MapObjectBufferATI;\ntmp_->UnmapObjectBufferATI = UnmapObjectBufferATI;\ntmp_->VertexAttribArrayObjectATI = VertexAttribArrayObjectATI;\ntmp_->GetVertexAttribArrayObjectfvATI = GetVertexAttribArrayObjectfvATI;\ntmp_->GetVertexAttribArrayObjectivATI = GetVertexAttribArrayObjectivATI;\ntmp_->Vertex2bOES = Vertex2bOES;\ntmp_->Vertex3bOES = Vertex3bOES;\ntmp_->Vertex4bOES = Vertex4bOES;\ntmp_->Vertex2bvOES = Vertex2bvOES;\ntmp_->Vertex3bvOES = Vertex3bvOES;\ntmp_->Vertex4bvOES = Vertex4bvOES;\ntmp_->TexCoord1bOES = TexCoord1bOES;\ntmp_->TexCoord2bOES = TexCoord2bOES;\ntmp_->TexCoord3bOES = TexCoord3bOES;\ntmp_->TexCoord4bOES = TexCoord4bOES;\ntmp_->TexCoord1bvOES = TexCoord1bvOES;\ntmp_->TexCoord2bvOES = TexCoord2bvOES;\ntmp_->TexCoord3bvOES = TexCoord3bvOES;\ntmp_->TexCoord4bvOES = TexCoord4bvOES;\ntmp_->MultiTexCoord1bOES = MultiTexCoord1bOES;\ntmp_->MultiTexCoord2bOES = MultiTexCoord2bOES;\ntmp_->MultiTexCoord3bOES = MultiTexCoord3bOES;\ntmp_->MultiTexCoord4bOES = MultiTexCoord4bOES;\ntmp_->MultiTexCoord1bvOES = MultiTexCoord1bvOES;\ntmp_->MultiTexCoord2bvOES = MultiTexCoord2bvOES;\ntmp_->MultiTexCoord3bvOES = MultiTexCoord3bvOES;\ntmp_->MultiTexCoord4bvOES = MultiTexCoord4bvOES;\ntmp_->Vertex2xOES = Vertex2xOES;\ntmp_->Vertex3xOES = Vertex3xOES;\ntmp_->Vertex4xOES = Vertex4xOES;\ntmp_->Vertex2xvOES = Vertex2xvOES;\ntmp_->Vertex3xvOES = Vertex3xvOES;\ntmp_->Vertex4xvOES = Vertex4xvOES;\ntmp_->Normal3xOES = Normal3xOES;\ntmp_->Normal3xvOES = Normal3xvOES;\ntmp_->TexCoord1xOES = TexCoord1xOES;\ntmp_->TexCoord2xOES = TexCoord2xOES;\ntmp_->TexCoord3xOES = TexCoord3xOES;\ntmp_->TexCoord4xOES = TexCoord4xOES;\ntmp_->TexCoord1xvOES = TexCoord1xvOES;\ntmp_->TexCoord2xvOES = TexCoord2xvOES;\ntmp_->TexCoord3xvOES = TexCoord3xvOES;\ntmp_->TexCoord4xvOES = TexCoord4xvOES;\ntmp_->MultiTexCoord1xOES = MultiTexCoord1xOES;\ntmp_->MultiTexCoord2xOES = MultiTexCoord2xOES;\ntmp_->MultiTexCoord3xOES = MultiTexCoord3xOES;\ntmp_->MultiTexCoord4xOES = MultiTexCoord4xOES;\ntmp_->MultiTexCoord1xvOES = MultiTexCoord1xvOES;\ntmp_->MultiTexCoord2xvOES = MultiTexCoord2xvOES;\ntmp_->MultiTexCoord3xvOES = MultiTexCoord3xvOES;\ntmp_->MultiTexCoord4xvOES = MultiTexCoord4xvOES;\ntmp_->Color3xOES = Color3xOES;\ntmp_->Color4xOES = Color4xOES;\ntmp_->Color3xvOES = Color3xvOES;\ntmp_->Color4xvOES = Color4xvOES;\ntmp_->IndexxOES = IndexxOES;\ntmp_->IndexxvOES = IndexxvOES;\ntmp_->RectxOES = RectxOES;\ntmp_->DepthRangexOES = DepthRangexOES;\ntmp_->RotatexOES = RotatexOES;\ntmp_->ScalexOES = ScalexOES;\ntmp_->TranslatexOES = TranslatexOES;\ntmp_->FrustumxOES = FrustumxOES;\ntmp_->OrthoxOES = OrthoxOES;\ntmp_->TexGenxOES = TexGenxOES;\ntmp_->TexGenxvOES = TexGenxvOES;\ntmp_->GetTexGenxvOES = GetTexGenxvOES;\ntmp_->ClipPlanexOES = ClipPlanexOES;\ntmp_->GetClipPlanexOES = GetClipPlanexOES;\ntmp_->RasterPos2xOES = RasterPos2xOES;\ntmp_->RasterPos3xOES = RasterPos3xOES;\ntmp_->RasterPos4xOES = RasterPos4xOES;\ntmp_->RasterPos2xvOES = RasterPos2xvOES;\ntmp_->RasterPos3xvOES = RasterPos3xvOES;\ntmp_->RasterPos4xvOES = RasterPos4xvOES;\ntmp_->MaterialxOES = MaterialxOES;\ntmp_->MaterialxvOES = MaterialxvOES;\ntmp_->GetMaterialxOES = GetMaterialxOES;\ntmp_->LightxOES = LightxOES;\ntmp_->LightxvOES = LightxvOES;\ntmp_->GetLightxOES = GetLightxOES;\ntmp_->LightModelxOES = LightModelxOES;\ntmp_->LightModelxvOES = LightModelxvOES;\ntmp_->PointSizexOES = PointSizexOES;\ntmp_->LineWidthxOES = LineWidthxOES;\ntmp_->PolygonOffsetxOES = PolygonOffsetxOES;\ntmp_->PixelStorex = PixelStorex;\ntmp_->PixelTransferxOES = PixelTransferxOES;\ntmp_->PixelMapx = PixelMapx;\ntmp_->GetPixelMapxv = GetPixelMapxv;\ntmp_->ConvolutionParameterxOES = ConvolutionParameterxOES;\ntmp_->ConvolutionParameterxvOES = ConvolutionParameterxvOES;\ntmp_->GetConvolutionParameterxvOES = GetConvolutionParameterxvOES;\ntmp_->GetHistogramParameterxvOES = GetHistogramParameterxvOES;\ntmp_->PixelZoomxOES = PixelZoomxOES;\ntmp_->BitmapxOES = BitmapxOES;\ntmp_->TexParameterxOES = TexParameterxOES;\ntmp_->TexParameterxvOES = TexParameterxvOES;\ntmp_->GetTexParameterxvOES = GetTexParameterxvOES;\ntmp_->GetTexLevelParameterxvOES = GetTexLevelParameterxvOES;\ntmp_->PrioritizeTexturesxOES = PrioritizeTexturesxOES;\ntmp_->TexEnvxOES = TexEnvxOES;\ntmp_->TexEnvxvOES = TexEnvxvOES;\ntmp_->GetTexEnvxvOES = GetTexEnvxvOES;\ntmp_->FogxOES = FogxOES;\ntmp_->FogxvOES = FogxvOES;\ntmp_->SampleCoverageOES = SampleCoverageOES;\ntmp_->AlphaFuncxOES = AlphaFuncxOES;\ntmp_->BlendColorxOES = BlendColorxOES;\ntmp_->ClearColorxOES = ClearColorxOES;\ntmp_->ClearDepthxOES = ClearDepthxOES;\ntmp_->ClearAccumxOES = ClearAccumxOES;\ntmp_->AccumxOES = AccumxOES;\ntmp_->Map1xOES = Map1xOES;\ntmp_->Map2xOES = Map2xOES;\ntmp_->MapGrid1xOES = MapGrid1xOES;\ntmp_->MapGrid2xOES = MapGrid2xOES;\ntmp_->GetMapxvOES = GetMapxvOES;\ntmp_->EvalCoord1xOES = EvalCoord1xOES;\ntmp_->EvalCoord2xOES = EvalCoord2xOES;\ntmp_->EvalCoord1xvOES = EvalCoord1xvOES;\ntmp_->EvalCoord2xvOES = EvalCoord2xvOES;\ntmp_->FeedbackBufferxOES = FeedbackBufferxOES;\ntmp_->PassThroughxOES = PassThroughxOES;\ntmp_->GetFixedvOES = GetFixedvOES;\ntmp_->DepthRangefOES = DepthRangefOES;\ntmp_->FrustumfOES = FrustumfOES;\ntmp_->OrthofOES = OrthofOES;\ntmp_->ClipPlanefOES = ClipPlanefOES;\ntmp_->GetClipPlanefOES = GetClipPlanefOES;\ntmp_->ClearDepthfOES = ClearDepthfOES;\ntmp_->DepthBoundsEXT = DepthBoundsEXT;\ntmp_->BlendEquationSeparateEXT = BlendEquationSeparateEXT;\ntmp_->IsRenderbufferEXT = IsRenderbufferEXT;\ntmp_->BindRenderbufferEXT = BindRenderbufferEXT;\ntmp_->DeleteRenderbuffersEXT = DeleteRenderbuffersEXT;\ntmp_->GenRenderbuffersEXT = GenRenderbuffersEXT;\ntmp_->RenderbufferStorageEXT = RenderbufferStorageEXT;\ntmp_->GetRenderbufferParameterivEXT = GetRenderbufferParameterivEXT;\ntmp_->IsFramebufferEXT = IsFramebufferEXT;\ntmp_->BindFramebufferEXT = BindFramebufferEXT;\ntmp_->DeleteFramebuffersEXT = DeleteFramebuffersEXT;\ntmp_->GenFramebuffersEXT = GenFramebuffersEXT;\ntmp_->CheckFramebufferStatusEXT = CheckFramebufferStatusEXT;\ntmp_->FramebufferTexture1DEXT = FramebufferTexture1DEXT;\ntmp_->FramebufferTexture2DEXT = FramebufferTexture2DEXT;\ntmp_->FramebufferTexture3DEXT = FramebufferTexture3DEXT;\ntmp_->FramebufferRenderbufferEXT = FramebufferRenderbufferEXT;\ntmp_->GetFramebufferAttachmentParameterivEXT = GetFramebufferAttachmentParameterivEXT;\ntmp_->GenerateMipmapEXT = GenerateMipmapEXT;\ntmp_->StringMarkerGREMEDY = StringMarkerGREMEDY;\ntmp_->StencilClearTagEXT = StencilClearTagEXT;\ntmp_->BlitFramebufferEXT = BlitFramebufferEXT;\ntmp_->RenderbufferStorageMultisampleEXT = RenderbufferStorageMultisampleEXT;\ntmp_->GetQueryObjecti64vEXT = GetQueryObjecti64vEXT;\ntmp_->GetQueryObjectui64vEXT = GetQueryObjectui64vEXT;\ntmp_->ProgramEnvParameters4fvEXT = ProgramEnvParameters4fvEXT;\ntmp_->ProgramLocalParameters4fvEXT = ProgramLocalParameters4fvEXT;\ntmp_->BufferParameteriAPPLE = BufferParameteriAPPLE;\ntmp_->FlushMappedBufferRangeAPPLE = FlushMappedBufferRangeAPPLE;\ntmp_->UniformBufferEXT = UniformBufferEXT;\ntmp_->GetUniformBufferSizeEXT = GetUniformBufferSizeEXT;\ntmp_->GetUniformOffsetEXT = GetUniformOffsetEXT;\ntmp_->ColorMaskIndexedEXT = ColorMaskIndexedEXT;\ntmp_->GetBooleanIndexedvEXT = GetBooleanIndexedvEXT;\ntmp_->GetIntegerIndexedvEXT = GetIntegerIndexedvEXT;\ntmp_->EnableIndexedEXT = EnableIndexedEXT;\ntmp_->DisableIndexedEXT = DisableIndexedEXT;\ntmp_->IsEnabledIndexedEXT = IsEnabledIndexedEXT;\ntmp_->DrawArraysInstancedEXT = DrawArraysInstancedEXT;\ntmp_->DrawElementsInstancedEXT = DrawElementsInstancedEXT;\ntmp_->ProgramParameteriEXT = ProgramParameteriEXT;\ntmp_->FramebufferTextureEXT = FramebufferTextureEXT;\ntmp_->FramebufferTextureFaceEXT = FramebufferTextureFaceEXT;\ntmp_->VertexAttribI1iEXT = VertexAttribI1iEXT;\ntmp_->VertexAttribI2iEXT = VertexAttribI2iEXT;\ntmp_->VertexAttribI3iEXT = VertexAttribI3iEXT;\ntmp_->VertexAttribI4iEXT = VertexAttribI4iEXT;\ntmp_->VertexAttribI1uiEXT = VertexAttribI1uiEXT;\ntmp_->VertexAttribI2uiEXT = VertexAttribI2uiEXT;\ntmp_->VertexAttribI3uiEXT = VertexAttribI3uiEXT;\ntmp_->VertexAttribI4uiEXT = VertexAttribI4uiEXT;\ntmp_->VertexAttribI1ivEXT = VertexAttribI1ivEXT;\ntmp_->VertexAttribI2ivEXT = VertexAttribI2ivEXT;\ntmp_->VertexAttribI3ivEXT = VertexAttribI3ivEXT;\ntmp_->VertexAttribI4ivEXT = VertexAttribI4ivEXT;\ntmp_->VertexAttribI1uivEXT = VertexAttribI1uivEXT;\ntmp_->VertexAttribI2uivEXT = VertexAttribI2uivEXT;\ntmp_->VertexAttribI3uivEXT = VertexAttribI3uivEXT;\ntmp_->VertexAttribI4uivEXT = VertexAttribI4uivEXT;\ntmp_->VertexAttribI4bvEXT = VertexAttribI4bvEXT;\ntmp_->VertexAttribI4svEXT = VertexAttribI4svEXT;\ntmp_->VertexAttribI4ubvEXT = VertexAttribI4ubvEXT;\ntmp_->VertexAttribI4usvEXT = VertexAttribI4usvEXT;\ntmp_->VertexAttribIPointerEXT = VertexAttribIPointerEXT;\ntmp_->GetVertexAttribIivEXT = GetVertexAttribIivEXT;\ntmp_->GetVertexAttribIuivEXT = GetVertexAttribIuivEXT;\ntmp_->Uniform1uiEXT = Uniform1uiEXT;\ntmp_->Uniform2uiEXT = Uniform2uiEXT;\ntmp_->Uniform3uiEXT = Uniform3uiEXT;\ntmp_->Uniform4uiEXT = Uniform4uiEXT;\ntmp_->Uniform1uivEXT = Uniform1uivEXT;\ntmp_->Uniform2uivEXT = Uniform2uivEXT;\ntmp_->Uniform3uivEXT = Uniform3uivEXT;\ntmp_->Uniform4uivEXT = Uniform4uivEXT;\ntmp_->GetUniformuivEXT = GetUniformuivEXT;\ntmp_->BindFragDataLocationEXT = BindFragDataLocationEXT;\ntmp_->GetFragDataLocationEXT = GetFragDataLocationEXT;\ntmp_->FramebufferTextureLayerEXT = FramebufferTextureLayerEXT;\ntmp_->TexBufferEXT = TexBufferEXT;\ntmp_->DepthRangedNV = DepthRangedNV;\ntmp_->ClearDepthdNV = ClearDepthdNV;\ntmp_->DepthBoundsdNV = DepthBoundsdNV;\ntmp_->RenderbufferStorageMultsampleCoverageNV = RenderbufferStorageMultsampleCoverageNV;\ntmp_->ProgramVertexLimitNV = ProgramVertexLimitNV;\ntmp_->ProgramLocalParameterI4iNV = ProgramLocalParameterI4iNV;\ntmp_->ProgramLocalParameterI4ivNV = ProgramLocalParameterI4ivNV;\ntmp_->ProgramLocalParametersI4ivNV = ProgramLocalParametersI4ivNV;\ntmp_->ProgramLocalParameterI4uiNV = ProgramLocalParameterI4uiNV;\ntmp_->ProgramLocalParameterI4uivNV = ProgramLocalParameterI4uivNV;\ntmp_->ProgramLocalParametersI4uivNV = ProgramLocalParametersI4uivNV;\ntmp_->ProgramEnvParameterI4iNV = ProgramEnvParameterI4iNV;\ntmp_->ProgramEnvParameterI4ivNV = ProgramEnvParameterI4ivNV;\ntmp_->ProgramEnvParametersI4ivNV = ProgramEnvParametersI4ivNV;\ntmp_->ProgramEnvParameterI4uiNV = ProgramEnvParameterI4uiNV;\ntmp_->ProgramEnvParameterI4uivNV = ProgramEnvParameterI4uivNV;\ntmp_->ProgramEnvParametersI4uivNV = ProgramEnvParametersI4uivNV;\ntmp_->GetProgramLocalParameterIivNV = GetProgramLocalParameterIivNV;\ntmp_->GetProgramLocalParameterIuivNV = GetProgramLocalParameterIuivNV;\ntmp_->GetProgramEnvParameterIivNV = GetProgramEnvParameterIivNV;\ntmp_->GetProgramEnvParameterIuivNV = GetProgramEnvParameterIuivNV;\ntmp_->ProgramBufferParametersfvNV = ProgramBufferParametersfvNV;\ntmp_->ProgramBufferParametersIivNV = ProgramBufferParametersIivNV;\ntmp_->ProgramBufferParametersIuivNV = ProgramBufferParametersIuivNV;\ntmp_->BindBufferRangeNV = BindBufferRangeNV;\ntmp_->BindBufferOffsetNV = BindBufferOffsetNV;\ntmp_->BindBufferBaseNV = BindBufferBaseNV;\ntmp_->TransformFeedbackAttribsNV = TransformFeedbackAttribsNV;\ntmp_->TransformFeedbackVaryingsNV = TransformFeedbackVaryingsNV;\ntmp_->BeginTransformFeedbackNV = BeginTransformFeedbackNV;\ntmp_->EndTransformFeedbackNV = EndTransformFeedbackNV;\ntmp_->GetVaryingLocationNV = GetVaryingLocationNV;\ntmp_->GetActiveVaryingNV = GetActiveVaryingNV;\ntmp_->ActiveVaryingNV = ActiveVaryingNV;\ntmp_->GetTransformFeedbackVaryingNV = GetTransformFeedbackVaryingNV;\ntmp_->FrameTerminatorGREMEDY = FrameTerminatorGREMEDY;\ntmp_->BeginConditionalRenderNV = BeginConditionalRenderNV;\ntmp_->EndConditionalRenderNV = EndConditionalRenderNV;\ntmp_->BeginTransformFeedbackEXT = BeginTransformFeedbackEXT;\ntmp_->EndTransformFeedbackEXT = EndTransformFeedbackEXT;\ntmp_->BindBufferRangeEXT = BindBufferRangeEXT;\ntmp_->BindBufferOffsetEXT = BindBufferOffsetEXT;\ntmp_->BindBufferBaseEXT = BindBufferBaseEXT;\ntmp_->TransformFeedbackVaryingsEXT = TransformFeedbackVaryingsEXT;\ntmp_->GetTransformFeedbackVaryingEXT = GetTransformFeedbackVaryingEXT;\ntmp_->ClientAttribDefaultEXT = ClientAttribDefaultEXT;\ntmp_->PushClientAttribDefaultEXT = PushClientAttribDefaultEXT;\ntmp_->MatrixLoadfEXT = MatrixLoadfEXT;\ntmp_->MatrixLoaddEXT = MatrixLoaddEXT;\ntmp_->MatrixMultfEXT = MatrixMultfEXT;\ntmp_->MatrixMultdEXT = MatrixMultdEXT;\ntmp_->MatrixLoadIdentityEXT = MatrixLoadIdentityEXT;\ntmp_->MatrixRotatefEXT = MatrixRotatefEXT;\ntmp_->MatrixRotatedEXT = MatrixRotatedEXT;\ntmp_->MatrixScalefEXT = MatrixScalefEXT;\ntmp_->MatrixScaledEXT = MatrixScaledEXT;\ntmp_->MatrixTranslatefEXT = MatrixTranslatefEXT;\ntmp_->MatrixTranslatedEXT = MatrixTranslatedEXT;\ntmp_->MatrixFrustumEXT = MatrixFrustumEXT;\ntmp_->MatrixOrthoEXT = MatrixOrthoEXT;\ntmp_->MatrixPopEXT = MatrixPopEXT;\ntmp_->MatrixPushEXT = MatrixPushEXT;\ntmp_->MatrixLoadTransposefEXT = MatrixLoadTransposefEXT;\ntmp_->MatrixLoadTransposedEXT = MatrixLoadTransposedEXT;\ntmp_->MatrixMultTransposefEXT = MatrixMultTransposefEXT;\ntmp_->MatrixMultTransposedEXT = MatrixMultTransposedEXT;\ntmp_->TextureParameterfEXT = TextureParameterfEXT;\ntmp_->TextureParameterfvEXT = TextureParameterfvEXT;\ntmp_->TextureParameteriEXT = TextureParameteriEXT;\ntmp_->TextureParameterivEXT = TextureParameterivEXT;\ntmp_->TextureImage1DEXT = TextureImage1DEXT;\ntmp_->TextureImage2DEXT = TextureImage2DEXT;\ntmp_->TextureSubImage1DEXT = TextureSubImage1DEXT;\ntmp_->TextureSubImage2DEXT = TextureSubImage2DEXT;\ntmp_->CopyTextureImage1DEXT = CopyTextureImage1DEXT;\ntmp_->CopyTextureImage2DEXT = CopyTextureImage2DEXT;\ntmp_->CopyTextureSubImage1DEXT = CopyTextureSubImage1DEXT;\ntmp_->CopyTextureSubImage2DEXT = CopyTextureSubImage2DEXT;\ntmp_->GetTextureImageEXT = GetTextureImageEXT;\ntmp_->GetTextureParameterfvEXT = GetTextureParameterfvEXT;\ntmp_->GetTextureParameterivEXT = GetTextureParameterivEXT;\ntmp_->GetTextureLevelParameterfvEXT = GetTextureLevelParameterfvEXT;\ntmp_->GetTextureLevelParameterivEXT = GetTextureLevelParameterivEXT;\ntmp_->TextureImage3DEXT = TextureImage3DEXT;\ntmp_->TextureSubImage3DEXT = TextureSubImage3DEXT;\ntmp_->CopyTextureSubImage3DEXT = CopyTextureSubImage3DEXT;\ntmp_->MultiTexParameterfEXT = MultiTexParameterfEXT;\ntmp_->MultiTexParameterfvEXT = MultiTexParameterfvEXT;\ntmp_->MultiTexParameteriEXT = MultiTexParameteriEXT;\ntmp_->MultiTexParameterivEXT = MultiTexParameterivEXT;\ntmp_->MultiTexImage1DEXT = MultiTexImage1DEXT;\ntmp_->MultiTexImage2DEXT = MultiTexImage2DEXT;\ntmp_->MultiTexSubImage1DEXT = MultiTexSubImage1DEXT;\ntmp_->MultiTexSubImage2DEXT = MultiTexSubImage2DEXT;\ntmp_->CopyMultiTexImage1DEXT = CopyMultiTexImage1DEXT;\ntmp_->CopyMultiTexImage2DEXT = CopyMultiTexImage2DEXT;\ntmp_->CopyMultiTexSubImage1DEXT = CopyMultiTexSubImage1DEXT;\ntmp_->CopyMultiTexSubImage2DEXT = CopyMultiTexSubImage2DEXT;\ntmp_->GetMultiTexImageEXT = GetMultiTexImageEXT;\ntmp_->GetMultiTexParameterfvEXT = GetMultiTexParameterfvEXT;\ntmp_->GetMultiTexParameterivEXT = GetMultiTexParameterivEXT;\ntmp_->GetMultiTexLevelParameterfvEXT = GetMultiTexLevelParameterfvEXT;\ntmp_->GetMultiTexLevelParameterivEXT = GetMultiTexLevelParameterivEXT;\ntmp_->MultiTexImage3DEXT = MultiTexImage3DEXT;\ntmp_->MultiTexSubImage3DEXT = MultiTexSubImage3DEXT;\ntmp_->CopyMultiTexSubImage3DEXT = CopyMultiTexSubImage3DEXT;\ntmp_->BindMultiTextureEXT = BindMultiTextureEXT;\ntmp_->EnableClientStateIndexedEXT = EnableClientStateIndexedEXT;\ntmp_->DisableClientStateIndexedEXT = DisableClientStateIndexedEXT;\ntmp_->MultiTexCoordPointerEXT = MultiTexCoordPointerEXT;\ntmp_->MultiTexEnvfEXT = MultiTexEnvfEXT;\ntmp_->MultiTexEnvfvEXT = MultiTexEnvfvEXT;\ntmp_->MultiTexEnviEXT = MultiTexEnviEXT;\ntmp_->MultiTexEnvivEXT = MultiTexEnvivEXT;\ntmp_->MultiTexGendEXT = MultiTexGendEXT;\ntmp_->MultiTexGendvEXT = MultiTexGendvEXT;\ntmp_->MultiTexGenfEXT = MultiTexGenfEXT;\ntmp_->MultiTexGenfvEXT = MultiTexGenfvEXT;\ntmp_->MultiTexGeniEXT = MultiTexGeniEXT;\ntmp_->MultiTexGenivEXT = MultiTexGenivEXT;\ntmp_->GetMultiTexEnvfvEXT = GetMultiTexEnvfvEXT;\ntmp_->GetMultiTexEnvivEXT = GetMultiTexEnvivEXT;\ntmp_->GetMultiTexGendvEXT = GetMultiTexGendvEXT;\ntmp_->GetMultiTexGenfvEXT = GetMultiTexGenfvEXT;\ntmp_->GetMultiTexGenivEXT = GetMultiTexGenivEXT;\ntmp_->GetFloatIndexedvEXT = GetFloatIndexedvEXT;\ntmp_->GetDoubleIndexedvEXT = GetDoubleIndexedvEXT;\ntmp_->GetPointerIndexedvEXT = GetPointerIndexedvEXT;\ntmp_->CompressedTextureImage3DEXT = CompressedTextureImage3DEXT;\ntmp_->CompressedTextureImage2DEXT = CompressedTextureImage2DEXT;\ntmp_->CompressedTextureImage1DEXT = CompressedTextureImage1DEXT;\ntmp_->CompressedTextureSubImage3DEXT = CompressedTextureSubImage3DEXT;\ntmp_->CompressedTextureSubImage2DEXT = CompressedTextureSubImage2DEXT;\ntmp_->CompressedTextureSubImage1DEXT = CompressedTextureSubImage1DEXT;\ntmp_->GetCompressedTextureImageEXT = GetCompressedTextureImageEXT;\ntmp_->CompressedMultiTexImage3DEXT = CompressedMultiTexImage3DEXT;\ntmp_->CompressedMultiTexImage2DEXT = CompressedMultiTexImage2DEXT;\ntmp_->CompressedMultiTexImage1DEXT = CompressedMultiTexImage1DEXT;\ntmp_->CompressedMultiTexSubImage3DEXT = CompressedMultiTexSubImage3DEXT;\ntmp_->CompressedMultiTexSubImage2DEXT = CompressedMultiTexSubImage2DEXT;\ntmp_->CompressedMultiTexSubImage1DEXT = CompressedMultiTexSubImage1DEXT;\ntmp_->GetCompressedMultiTexImageEXT = GetCompressedMultiTexImageEXT;\ntmp_->NamedProgramStringEXT = NamedProgramStringEXT;\ntmp_->NamedProgramLocalParameter4dEXT = NamedProgramLocalParameter4dEXT;\ntmp_->NamedProgramLocalParameter4dvEXT = NamedProgramLocalParameter4dvEXT;\ntmp_->NamedProgramLocalParameter4fEXT = NamedProgramLocalParameter4fEXT;\ntmp_->NamedProgramLocalParameter4fvEXT = NamedProgramLocalParameter4fvEXT;\ntmp_->GetNamedProgramLocalParameterdvEXT = GetNamedProgramLocalParameterdvEXT;\ntmp_->GetNamedProgramLocalParameterfvEXT = GetNamedProgramLocalParameterfvEXT;\ntmp_->GetNamedProgramivEXT = GetNamedProgramivEXT;\ntmp_->GetNamedProgramStringEXT = GetNamedProgramStringEXT;\ntmp_->NamedProgramLocalParameters4fvEXT = NamedProgramLocalParameters4fvEXT;\ntmp_->NamedProgramLocalParameterI4iEXT = NamedProgramLocalParameterI4iEXT;\ntmp_->NamedProgramLocalParameterI4ivEXT = NamedProgramLocalParameterI4ivEXT;\ntmp_->NamedProgramLocalParametersI4ivEXT = NamedProgramLocalParametersI4ivEXT;\ntmp_->NamedProgramLocalParameterI4uiEXT = NamedProgramLocalParameterI4uiEXT;\ntmp_->NamedProgramLocalParameterI4uivEXT = NamedProgramLocalParameterI4uivEXT;\ntmp_->NamedProgramLocalParametersI4uivEXT = NamedProgramLocalParametersI4uivEXT;\ntmp_->GetNamedProgramLocalParameterIivEXT = GetNamedProgramLocalParameterIivEXT;\ntmp_->GetNamedProgramLocalParameterIuivEXT = GetNamedProgramLocalParameterIuivEXT;\ntmp_->TextureParameterIivEXT = TextureParameterIivEXT;\ntmp_->TextureParameterIuivEXT = TextureParameterIuivEXT;\ntmp_->GetTextureParameterIivEXT = GetTextureParameterIivEXT;\ntmp_->GetTextureParameterIuivEXT = GetTextureParameterIuivEXT;\ntmp_->MultiTexParameterIivEXT = MultiTexParameterIivEXT;\ntmp_->MultiTexParameterIuivEXT = MultiTexParameterIuivEXT;\ntmp_->GetMultiTexParameterIivEXT = GetMultiTexParameterIivEXT;\ntmp_->GetMultiTexParameterIuivEXT = GetMultiTexParameterIuivEXT;\ntmp_->ProgramUniform1fEXT = ProgramUniform1fEXT;\ntmp_->ProgramUniform2fEXT = ProgramUniform2fEXT;\ntmp_->ProgramUniform3fEXT = ProgramUniform3fEXT;\ntmp_->ProgramUniform4fEXT = ProgramUniform4fEXT;\ntmp_->ProgramUniform1iEXT = ProgramUniform1iEXT;\ntmp_->ProgramUniform2iEXT = ProgramUniform2iEXT;\ntmp_->ProgramUniform3iEXT = ProgramUniform3iEXT;\ntmp_->ProgramUniform4iEXT = ProgramUniform4iEXT;\ntmp_->ProgramUniform1fvEXT = ProgramUniform1fvEXT;\ntmp_->ProgramUniform2fvEXT = ProgramUniform2fvEXT;\ntmp_->ProgramUniform3fvEXT = ProgramUniform3fvEXT;\ntmp_->ProgramUniform4fvEXT = ProgramUniform4fvEXT;\ntmp_->ProgramUniform1ivEXT = ProgramUniform1ivEXT;\ntmp_->ProgramUniform2ivEXT = ProgramUniform2ivEXT;\ntmp_->ProgramUniform3ivEXT = ProgramUniform3ivEXT;\ntmp_->ProgramUniform4ivEXT = ProgramUniform4ivEXT;\ntmp_->ProgramUniformMatrix2fvEXT = ProgramUniformMatrix2fvEXT;\ntmp_->ProgramUniformMatrix3fvEXT = ProgramUniformMatrix3fvEXT;\ntmp_->ProgramUniformMatrix4fvEXT = ProgramUniformMatrix4fvEXT;\ntmp_->ProgramUniformMatrix2x3fvEXT = ProgramUniformMatrix2x3fvEXT;\ntmp_->ProgramUniformMatrix3x2fvEXT = ProgramUniformMatrix3x2fvEXT;\ntmp_->ProgramUniformMatrix2x4fvEXT = ProgramUniformMatrix2x4fvEXT;\ntmp_->ProgramUniformMatrix4x2fvEXT = ProgramUniformMatrix4x2fvEXT;\ntmp_->ProgramUniformMatrix3x4fvEXT = ProgramUniformMatrix3x4fvEXT;\ntmp_->ProgramUniformMatrix4x3fvEXT = ProgramUniformMatrix4x3fvEXT;\ntmp_->ProgramUniform1uiEXT = ProgramUniform1uiEXT;\ntmp_->ProgramUniform2uiEXT = ProgramUniform2uiEXT;\ntmp_->ProgramUniform3uiEXT = ProgramUniform3uiEXT;\ntmp_->ProgramUniform4uiEXT = ProgramUniform4uiEXT;\ntmp_->ProgramUniform1uivEXT = ProgramUniform1uivEXT;\ntmp_->ProgramUniform2uivEXT = ProgramUniform2uivEXT;\ntmp_->ProgramUniform3uivEXT = ProgramUniform3uivEXT;\ntmp_->ProgramUniform4uivEXT = ProgramUniform4uivEXT;\ntmp_->NamedBufferDataEXT = NamedBufferDataEXT;\ntmp_->NamedBufferSubDataEXT = NamedBufferSubDataEXT;\ntmp_->MapNamedBufferEXT = MapNamedBufferEXT;\ntmp_->UnmapNamedBufferEXT = UnmapNamedBufferEXT;\ntmp_->GetNamedBufferParameterivEXT = GetNamedBufferParameterivEXT;\ntmp_->GetNamedBufferPointervEXT = GetNamedBufferPointervEXT;\ntmp_->GetNamedBufferSubDataEXT = GetNamedBufferSubDataEXT;\ntmp_->TextureBufferEXT = TextureBufferEXT;\ntmp_->MultiTexBufferEXT = MultiTexBufferEXT;\ntmp_->NamedRenderbufferStorageEXT = NamedRenderbufferStorageEXT;\ntmp_->GetNamedRenderbufferParameterivEXT = GetNamedRenderbufferParameterivEXT;\ntmp_->CheckNamedFramebufferStatusEXT = CheckNamedFramebufferStatusEXT;\ntmp_->NamedFramebufferTexture1DEXT = NamedFramebufferTexture1DEXT;\ntmp_->NamedFramebufferTexture2DEXT = NamedFramebufferTexture2DEXT;\ntmp_->NamedFramebufferTexture3DEXT = NamedFramebufferTexture3DEXT;\ntmp_->NamedFramebufferRenderbufferEXT = NamedFramebufferRenderbufferEXT;\ntmp_->GetNamedFramebufferAttachmentParameterivEXT = GetNamedFramebufferAttachmentParameterivEXT;\ntmp_->GenerateTextureMipmapEXT = GenerateTextureMipmapEXT;\ntmp_->GenerateMultiTexMipmapEXT = GenerateMultiTexMipmapEXT;\ntmp_->FramebufferDrawBufferEXT = FramebufferDrawBufferEXT;\ntmp_->FramebufferDrawBuffersEXT = FramebufferDrawBuffersEXT;\ntmp_->FramebufferReadBufferEXT = FramebufferReadBufferEXT;\ntmp_->GetFramebufferParameterivEXT = GetFramebufferParameterivEXT;\ntmp_->NamedRenderbufferStorageMultisampleEXT = NamedRenderbufferStorageMultisampleEXT;\ntmp_->NamedRenderbufferStorageMultisampleCoverageEXT = NamedRenderbufferStorageMultisampleCoverageEXT;\ntmp_->NamedFramebufferTextureEXT = NamedFramebufferTextureEXT;\ntmp_->NamedFramebufferTextureLayerEXT = NamedFramebufferTextureLayerEXT;\ntmp_->NamedFramebufferTextureFaceEXT = NamedFramebufferTextureFaceEXT;\ntmp_->TextureRenderbufferEXT = TextureRenderbufferEXT;\ntmp_->MultiTexRenderbufferEXT = MultiTexRenderbufferEXT;\ntmp_->GetMultisamplefvNV = GetMultisamplefvNV;\ntmp_->SampleMaskIndexedNV = SampleMaskIndexedNV;\ntmp_->TexRenderbufferNV = TexRenderbufferNV;\ntmp_->BindTransformFeedbackNV = BindTransformFeedbackNV;\ntmp_->DeleteTransformFeedbacksNV = DeleteTransformFeedbacksNV;\ntmp_->GenTransformFeedbacksNV = GenTransformFeedbacksNV;\ntmp_->IsTransformFeedbackNV = IsTransformFeedbackNV;\ntmp_->PauseTransformFeedbackNV = PauseTransformFeedbackNV;\ntmp_->ResumeTransformFeedbackNV = ResumeTransformFeedbackNV;\ntmp_->DrawTransformFeedbackNV = DrawTransformFeedbackNV;\ntmp_->GetPerfMonitorGroupsAMD = GetPerfMonitorGroupsAMD;\ntmp_->GetPerfMonitorCountersAMD = GetPerfMonitorCountersAMD;\ntmp_->GetPerfMonitorGroupStringAMD = GetPerfMonitorGroupStringAMD;\ntmp_->GetPerfMonitorCounterStringAMD = GetPerfMonitorCounterStringAMD;\ntmp_->GetPerfMonitorCounterInfoAMD = GetPerfMonitorCounterInfoAMD;\ntmp_->GenPerfMonitorsAMD = GenPerfMonitorsAMD;\ntmp_->DeletePerfMonitorsAMD = DeletePerfMonitorsAMD;\ntmp_->SelectPerfMonitorCountersAMD = SelectPerfMonitorCountersAMD;\ntmp_->BeginPerfMonitorAMD = BeginPerfMonitorAMD;\ntmp_->EndPerfMonitorAMD = EndPerfMonitorAMD;\ntmp_->GetPerfMonitorCounterDataAMD = GetPerfMonitorCounterDataAMD;\ntmp_->TessellationFactorAMD = TessellationFactorAMD;\ntmp_->TessellationModeAMD = TessellationModeAMD;\ntmp_->ProvokingVertexEXT = ProvokingVertexEXT;\ntmp_->BlendFuncIndexedAMD = BlendFuncIndexedAMD;\ntmp_->BlendFuncSeparateIndexedAMD = BlendFuncSeparateIndexedAMD;\ntmp_->BlendEquationIndexedAMD = BlendEquationIndexedAMD;\ntmp_->BlendEquationSeparateIndexedAMD = BlendEquationSeparateIndexedAMD;\ntmp_->TextureRangeAPPLE = TextureRangeAPPLE;\ntmp_->GetTexParameterPointervAPPLE = GetTexParameterPointervAPPLE;\ntmp_->EnableVertexAttribAPPLE = EnableVertexAttribAPPLE;\ntmp_->DisableVertexAttribAPPLE = DisableVertexAttribAPPLE;\ntmp_->IsVertexAttribEnabledAPPLE = IsVertexAttribEnabledAPPLE;\ntmp_->MapVertexAttrib1dAPPLE = MapVertexAttrib1dAPPLE;\ntmp_->MapVertexAttrib1fAPPLE = MapVertexAttrib1fAPPLE;\ntmp_->MapVertexAttrib2dAPPLE = MapVertexAttrib2dAPPLE;\ntmp_->MapVertexAttrib2fAPPLE = MapVertexAttrib2fAPPLE;\ntmp_->ObjectPurgeableAPPLE = ObjectPurgeableAPPLE;\ntmp_->ObjectUnpurgeableAPPLE = ObjectUnpurgeableAPPLE;\ntmp_->GetObjectParameterivAPPLE = GetObjectParameterivAPPLE;\ntmp_->BeginVideoCaptureNV = BeginVideoCaptureNV;\ntmp_->BindVideoCaptureStreamBufferNV = BindVideoCaptureStreamBufferNV;\ntmp_->BindVideoCaptureStreamTextureNV = BindVideoCaptureStreamTextureNV;\ntmp_->EndVideoCaptureNV = EndVideoCaptureNV;\ntmp_->GetVideoCaptureivNV = GetVideoCaptureivNV;\ntmp_->GetVideoCaptureStreamivNV = GetVideoCaptureStreamivNV;\ntmp_->GetVideoCaptureStreamfvNV = GetVideoCaptureStreamfvNV;\ntmp_->GetVideoCaptureStreamdvNV = GetVideoCaptureStreamdvNV;\ntmp_->VideoCaptureNV = VideoCaptureNV;\ntmp_->VideoCaptureStreamParameterivNV = VideoCaptureStreamParameterivNV;\ntmp_->VideoCaptureStreamParameterfvNV = VideoCaptureStreamParameterfvNV;\ntmp_->VideoCaptureStreamParameterdvNV = VideoCaptureStreamParameterdvNV;\ntmp_->UseShaderProgramEXT = UseShaderProgramEXT;\ntmp_->ActiveProgramEXT = ActiveProgramEXT;\ntmp_->CreateShaderProgramEXT = CreateShaderProgramEXT;\ntmp_->MakeBufferResidentNV = MakeBufferResidentNV;\ntmp_->MakeBufferNonResidentNV = MakeBufferNonResidentNV;\ntmp_->IsBufferResidentNV = IsBufferResidentNV;\ntmp_->MakeNamedBufferResidentNV = MakeNamedBufferResidentNV;\ntmp_->MakeNamedBufferNonResidentNV = MakeNamedBufferNonResidentNV;\ntmp_->IsNamedBufferResidentNV = IsNamedBufferResidentNV;\ntmp_->GetBufferParameterui64vNV = GetBufferParameterui64vNV;\ntmp_->GetNamedBufferParameterui64vNV = GetNamedBufferParameterui64vNV;\ntmp_->GetIntegerui64vNV = GetIntegerui64vNV;\ntmp_->Uniformui64NV = Uniformui64NV;\ntmp_->Uniformui64vNV = Uniformui64vNV;\ntmp_->GetUniformui64vNV = GetUniformui64vNV;\ntmp_->ProgramUniformui64NV = ProgramUniformui64NV;\ntmp_->ProgramUniformui64vNV = ProgramUniformui64vNV;\ntmp_->BufferAddressRangeNV = BufferAddressRangeNV;\ntmp_->VertexFormatNV = VertexFormatNV;\ntmp_->NormalFormatNV = NormalFormatNV;\ntmp_->ColorFormatNV = ColorFormatNV;\ntmp_->IndexFormatNV = IndexFormatNV;\ntmp_->TexCoordFormatNV = TexCoordFormatNV;\ntmp_->EdgeFlagFormatNV = EdgeFlagFormatNV;\ntmp_->SecondaryColorFormatNV = SecondaryColorFormatNV;\ntmp_->FogCoordFormatNV = FogCoordFormatNV;\ntmp_->VertexAttribFormatNV = VertexAttribFormatNV;\ntmp_->VertexAttribIFormatNV = VertexAttribIFormatNV;\ntmp_->GetIntegerui64i_vNV = GetIntegerui64i_vNV;\ntmp_->TextureBarrierNV = TextureBarrierNV;\nreturn(tmp_);;\n")))

;;; END OF FILE
