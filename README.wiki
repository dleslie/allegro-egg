[[tags: allegro game]]

== allegro

Allegro 5.0 bindings for Chicken.

[[toc:]]

== Author

Dan Leslie (dan@ironoxide.ca)

== Disclaimer

Due to personal time constraints I have not fully tested these bindings, yet. If you discover any bugs, or even if you believe that some bindings could have a better implementation then please contact me with details.

And yes, the Egg does take a bloody long time to compile.

== Help!

I have limited time these days. If you could undertake any of the following it would be greatly appreciated:

1. Submit issues you discover to the GitHub issue tracker
2. Submit feature requests to the GitHub issue tracker
3. Correct any errors you discover in this documentation page
4. Add documentation where it is lacking
5. Send me an email if you find this egg useful!

== Repository

The main repository can be found on [https://github.com/dleslie/allegro-egg|GitHub].

== Supported Versions

Allegro versions 5.0.x up to 5.0.6 are supported. All 5.0.x versions should work, but features added post-5.0.6 will not be available.

Future version support will likely be added in the future. Patches are welcome!

== Examples

A growing number of examples can be found on [https://github.com/dleslie/allegro-examples|GitHub].

Please contribute!

== Windows Extras

Since building all your packages on windows is a bit of a pain in the ass I've written the Egg with the assumption that you're using the pre-built Allegro libraries.
The only extra step you'll need to do, after installing the prebuilt Allegro bins to your MingW32 directory should be:

<enscript hilight="bash">
# cd /MingW/lib
# cp liballegro-INSTALLED_VERSION-monolith-md.a liballegro.a
</enscript>

Assuming, of course, that you've installed MingW32 to C:\Mingw

== Naming Key

In general, the naming is fairly indicative of the function's behaviour.

The gist is something like this:

; make-type : Constructs a type (Not always available)
; make-type* : Constructs a type, returning a value which must be manually destructed
; free-type! : Manually destructs a type (Not available for internally managed types)
; type-noun : Accessor for value "noun" on a specific type
; type-noun-set! : Mutator for value "noun" on a specific type
; type-verb : Method which requires a specific type to operate
; type-verb! : Method which modifies an object of a specific type
; verbage : Function which operates on the global state
; verbage* : Function which operates on the global state, but also returns a value which must be manually destructed

If a function begins with a type name then you can be assured that the first parameter will be an object of that specific type.

== Records and Related Procedures

=== audio-stream

<record>audio-stream</record>

=== bitmap

<record>bitmap</record>

=== color

<record>color</record>
<procedure>(make-color*)</procedure>
<procedure>(make-color)</procedure>
<procedure>(free-color! color)</procedure>
<procedure>(color-red color)</procedure>
<procedure>(color-green color)</procedure>
<procedure>(color-blue color)</procedure>
<procedure>(color-alpha color)</procedure>

=== condition

<record>condition</record>

=== config

<record>config</record>

=== config-entry

<record>config-entry</config>

=== config-section

<record>config-section</record>

=== cursor

<record>cursor</record>

=== display

<record>display</record>

=== display-mode

<record>display-mode</record>
<procedure>(make-display-mode*)</procedure>
<procedure>(make-display-mode)</procedure>
<procedure>(free-display-mode! display-mode)</procedure>
<procedure>(display-mode-width display-mode)</procedure>
<setter>(display-mode-width-set! display-mode integer)</setter>
<procedure>(display-mode-height display-mode)</procedure>
<setter>(display-mode-height-set! display-mode integer)</setter>
<procedure>(display-mode-format display-mode)</procedure>
<setter>(display-mode-format-set! display-mode pixel-format)</setter>
<procedure>(display-mode-refresh-rate display-mode)</procedure>
<setter>(display-mode-refresh-rate-set! display-mode integer)</setter>

=== driver

<record>driver</record>
<procedure>(free-driver!)</procedure>
<procedure>(driver-id driver)</procedure>
<procedure>(driver-ptr driver)</procedure>
<procedure>(driver-autodetect driver)</procedure>

=== event-source

<record>event-source</record>

=== event-queue

<record>event-queue</record>

=== file

<record>file</record>

=== file-interface

<record>file-interface</record>

=== font

<record>font</record>
<procedure>(font-data font)</procedure>
<procedure>(font-height font)</procedure>

=== fs-entry

<record>fs-entry</record>
<procedure>(fs-entry-vtable fs-entry)</procedure>

=== fs-interface

<record>fs-interface</record>
<procedure>(free-fs-interface! fs-interface)</procedure>
<procedure>(fs-interface-create-entry fs-interface)</procedure>
<procedure>(fs-interface-entry-name fs-interface)</procedure>
<procedure>(fs-interface-update-entry fs-interface)</procedure>
<procedure>(fs-interface-entry-mode fs-interface)</procedure>
<procedure>(fs-interface-atime fs-interface)</procedure>
<procedure>(fs-interface-mtime fs-interface)</procedure>
<procedure>(fs-interface-ctime fs-interface)</procedure>
<procedure>(fs-interface-entry-size fs-interface)</procedure>
<procedure>(fs-interface-entry-exists? fs-interface)</procedure>
<procedure>(fs-interface-remove-entry fs-interface)</procedure>
<procedure>(fs-interface-open-directory fs-interface)</procedure>
<procedure>(fs-interface-read-directory fs-interface)</procedure>
<procedure>(fs-interface-close-directory fs-interface)</procedure>
<procedure>(fs-interface-current-directory fs-interface)</procedure>
<procedure>(fs-interface-make-directory fs-interface)</procedure>
<procedure>(fs-interface-filename-exists? fs-interface)</procedure>
<procedure>(fs-interface-remove-filename fs-interface)</procedure>
<procedure>(fs-interface-open-file fs-interface)</procedure>

=== joystick

<record>joystick</record>

=== joystick-state

<record>joystick-state</record>
<procedure>(make-joystick-state*)</procedure>
<procedure>(make-joystick-state)</procedure>
<procedure>(free-joystick-state! joystick-state)</procedure>
<procedure>(joystick-state-button int)</procedure>

=== keyboard

<record>keyboard</record>

=== keyboard-state

<record>keyboard-state</record>
<procedure>(make-keyboard-state*)</procedure>
<procedure>(make-keyboard-state)</procedure>
<procedure>(free-keyboard-state! keyboard-state)</procedure>
<procedure>(keyboard-state-display)</procedure>

=== locked-region

<record>locked-region</record>
<procedure>(free-locked-region! locked-region)</procedure>
<procedure>(locked-region-data locked-region)</procedure>
<procedure>(locked-region-format locked-region)</procedure>
<procedure>(locked-region-pitch locked-region)</procedure>
<procedure>(locked-region-pixel-size locked-region)</procedure>

=== memory-interface

<record>memory-interface</record>
<procedure>(make-memory-interface*)</procedure>
<procedure>(make-memory-interface)</procedure>
<procedure>(free-memory-interface! memory-interface)</procedure>
<procedure>(memory-interface-malloc memory-interface)</procedure>
<setter>(memory-interface-malloc-set! memory-interface (function c-pointer (integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-realloc memory-interface)</procedure>
<setter>(memory-interface-realloc-set! memory-interface (function void      (c-pointer integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-calloc memory-interface)</procedure>
<setter>(memory-interface-calloc-set! memory-interface (function c-pointer (c-pointer integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-free memory-interface)</procedure>
<setter>(memory-interface-free-set! memory-interface (function c-pointer (integer32 integer32 integer (const c-string) (const c-string))))</setter>

=== mixer

<record>mixer</record>

=== monitor

<record>monitor</record>
<procedure>(make-monitor*)</procedure>
<procedure>(make-monitor)</procedure>
<procedure>(free-monitor! monitor)</procedure>
<procedure>(monitor-x1 monitor)</procedure>
<procedure>(monitor-y1 monitor)</procedure>
<procedure>(monitor-x2 monitor)</procedure>
<procedure>(monitor-y2 monitor)</procedure>

=== mouse

<record>mouse</record>

=== mouse

<record>mouse-cursor</record>

=== mouse-state

<record>mouse-state</record>
<procedure>(make-mouse-state)</procedure>
<procedure>(make-mouse-state*)</procedure>
<procedure>(free-mouse-state! mouse-state)</procedure>
<procedure>(mouse-state-x mouse-state)</procedure>
<procedure>(mouse-state-y mouse-state)</procedure>
<procedure>(mouse-state-z mouse-state)</procedure>
<procedure>(mouse-state-w mouse-state)</procedure>
<procedure>(mouse-state-buttons mouse-state)</procedure>
<procedure>(mouse-state-pressure mouse-state)</procedure>
<procedure>(mouse-state-axis mouse-state integer)</procedure>
<procedure>(mouse-state-display mouse-state)</procedure>

=== mutex

<record>mutex</record>

=== path

<record>path</record>

=== sample

<record>sample</record>

=== sample-id

<record>sample-id</record>

=== sample-instance

<record>sample-instance</record>

=== state

<record>state</record>
<procedure>(make-state*)</procedure>
<procedure>(make-state)</procedure>
<procedure>(free-state! state)</procedure>

=== system

<record>system</record>

=== thread

<record>thread</record>

=== timer

<record>timer</record>

=== timeout

<record>timeout</record>
<procedure>(make-timeout*)</procedure>
<procedure>(make-timeout)</procedure>
<procedure>(free-timeout! timeout)</procedure>

=== transform

<record>transform</record>
<procedure>(make-transform*)</procedure>
<procedure>(make-transform)</procedure>
<procedure>(free-transform! transform)</procedure>
<procedure>(transform-value transform i j)</procedure>

=== utf-string

<record>utf-string</record>

=== version

<record>version</record>

<procedure>(version-major version)</procedure>
<procedure>(version-sub version)</procedure>
<procedure>(version-wip version)</procedure>
<procedure>(version-release-number version)</procedure>
<procedure>(version-string version)</procedure>
<procedure>(version-date-string version)</procedure>
<procedure>(version-date version)</procedure>
<procedure>(version-int version)</procedure>

=== vertex

<record>vertex</record>
<procedure>(make-vertex*)</procedure>
<procedure>(make-vertex)</procedure>
<procedure>(free-vertex! vertex)</procedure>
<procedure>(vertex-x vertex)</procedure>
<setter>(vertex-x-set! vertex float)</setter>
<procedure>(vertex-y vertex)</procedure>
<setter>(vertex-y-set! vertex float)</setter>
<procedure>(vertex-z vertex)</procedure>
<setter>(vertex-z-set! vertex float)</setter>
<procedure>(vertex-u vertex)</procedure>
<setter>(vertex-u-set! vertex float)</setter>
<procedure>(vertex-v vertex)</procedure>
<setter>(vertex-v-set! vertex float)</setter>

=== vertex-declaration

<record>vertex-declaration</record>

=== vertex-element

<record>vertex-element</record>
<procedure>(make-vertex-element*)</procedure>
<procedure>(make-vertex-element)</procedure>
<procedure>(free-vertex-element! vertex-element)</procedure>
<procedure>(vertex-element-attribute vertex-element)</procedure>
<setter>(vertex-element-attribute-set! vertex-element primitive-attribute)</setter>
<procedure>(vertex-element-storage vertex-element)</procedure>
<setter>(vertex-element-storage-set! vertex-element primitive-storage)</setter>
<procedure>(vertex-element-offset vertex-element)</procedure>
<setter>(vertex-element-offset-set! vertex-element integer)</setter>

=== voice

<record>voice</record>

== Event Records

=== any-event

<record>any-event</record>
<procedure>(any-event-type any-event)</procedure>
<procedure>(any-event-source any-event)</procedure>
<procedure>(any-event-timestamp any-event)</procedure>

=== display-event

<record>display-event</record>
<procedure>(display-event-type display-event)</procedure>
<procedure>(display-event-source display-event)</procedure>
<procedure>(display-event-timestamp display-event)</procedure>
<procedure>(display-event-x display-event)</procedure>
<procedure>(display-event-y display-event)</procedure>
<procedure>(display-event-width display-event)</procedure>
<procedure>(display-event-height display-event)</procedure>
<procedure>(display-event-orientation display-event)</procedure>

=== event

<record>event</record>
<procedure>(make-event)</procedure>
<procedure>(make-event*)</procedure>
<procedure>(free-event! event)</procedure>

=== joystick-event

<record>joystick-event</record>
<procedure>(joystick-event-type joystick-event)</procedure>
<procedure>(joystick-event-source joystick-event)</procedure>
<procedure>(joystick-event-timestamp joystick-event)</procedure>
<procedure>(joystick-event-id joystick-event)</procedure>
<procedure>(joystick-event-stick joystick-event)</procedure>
<procedure>(joystick-event-axis joystick-event)</procedure>
<procedure>(joystick-event-position joystick-event)</procedure>
<procedure>(joystick-event-button joystick-event)</procedure>

=== keyboard-event

<record>keyboard-event</record>
<procedure>(keyboard-event-type keyboard-event)</procedure>
<procedure>(keyboard-event-source keyboard-event)</procedure>
<procedure>(keyboard-event-timestamp keyboard-event)</procedure>
<procedure>(keyboard-event-display keyboard-event)</procedure>
<procedure>(keyboard-event-keycode keyboard-event)</procedure>
<procedure>(keyboard-event-unichar keyboard-event)</procedure>
<procedure>(keyboard-event-modifiers keyboard-event)</procedure>
<procedure>(keyboard-event-repeat keyboard-event)</procedure>

=== mouse-event

<record>mouse-event</record>
<procedure>(mouse-event-type mouse-event)</procedure>
<procedure>(mouse-event-source mouse-event)</procedure>
<procedure>(mouse-event-timestamp mouse-event)</procedure>
<procedure>(mouse-event-display mouse-event)</procedure>
<procedure>(mouse-event-x mouse-event)</procedure>
<procedure>(mouse-event-y mouse-event)</procedure>
<procedure>(mouse-event-z mouse-event)</procedure>
<procedure>(mouse-event-w mouse-event)</procedure>
<procedure>(mouse-event-dx mouse-event)</procedure>
<procedure>(mouse-event-dy mouse-event)</procedure>
<procedure>(mouse-event-dz mouse-event)</procedure>
<procedure>(mouse-event-dw mouse-event)</procedure>
<procedure>(mouse-event-button mouse-event)</procedure>
<procedure>(mouse-event-pressure mouse-event)</procedure>

=== timer-event

<record>timer-event</record>
<procedure>(timer-event-type timer-event)</procedure>
<procedure>(timer-event-source timer-event)</procedure>
<procedure>(timer-event-timestamp timer-event)</procedure>
<procedure>(timer-event-count timer-event)</procedure>
<procedure>(timer-event-error timer-event)</procedure>

=== user-event

<record>user-event</record>
<procedure>(user-event-type user-event)</procedure>
<procedure>(user-event-source user-event)</procedure>
<procedure>(user-event-timestamp user-event)</procedure>
<procedure>(user-event-data1 user-event)</procedure>
<setter>(user-event-data1-set! user-event integer)</setter>
<procedure>(user-event-data2 user-event)</procedure>
<setter>(user-event-data2-set! user-event integer)</setter>
<procedure>(user-event-data3 user-event)</procedure>
<setter>(user-event-data3-set! user-event integer)</setter>
<procedure>(user-event-data4 user-event)</procedure>
<setter>(user-event-data4-set! user-event integer)</setter>

== Enums

=== audio-depth

<procedure>(audio-depth->int audio-depth)</procedure>

{{{audio-depth}} may be one of the following symbols:
* int8
* int16
* int24
* float32
* unsigned
* uint8
* uint16
* uint24

<procedure>(int->audio-depth integer)</procedure>

=== display-flag

<procedure>(display-flag->int display-flag)</procedure>

{{display-flag}} may be one of the following symbols:
* windowed
* fullscreen
* opengl
* direct3d-internal
* resizable
* noframe
* generate-expose-events
* opengl3
* opengl-forward-compatible
* fullscreen-window
* minimized

<procedure>(int->display-flag integer)</procedure>

=== display-option

<procedure>(display-option->int display-option)</procedure>

{{display-option}} may be one of the following symbols:
* red-size
* green-size
* blue-size
* alpha-size
* red-shift
* green-shift
* blue-shift
* alpha-shift
* acc-red-size
* acc-green-size
* acc-blue-size
* acc-alpha-size
* stereo
* aux-buffers
* color-size
* depth-size
* stencil-size
* sample-buffers
* samples
* render-method
* float-color
* float-depth
* single-buffer
* swap-method
* compatible-display
* update-display-region
* vsync
* max-bitmap-size
* support-npot-bitmap
* can-draw-into-bitmap
* support-separate-alpha

<procedure>(int->display-option integer)</procedure>

=== display-option-importance

<procedure>(display-option-importance->int display-option-importance)</procedure>

{{display-option-importance}} may be one of the following symbols:
* dont-care
* require
* suggest

<procedure>(int->display-option-importance integer)</procedure>

=== display-orientation

<procedure>(display-orientation->int display-orientation)</procedure>

{{display-orientation}} may be one of the following symbols:
* degrees-0
* degrees-90
* degrees-180
* degrees-270
* face-up
* face-down

<procedure>(int->display-oprientation integer)</procedure>

=== bitmap-flag

<procedure>(bitmap-flag->int bitmap-flag)</procedure>

{{bitmap-flag}} may be one of the following symbols:
* memory-bitmap
* keep-bitmap-format
* force-locking
* no-preserve-texture
* alpha-test
* min-linear
* mag-linear
* mipmap
* no-premultiplied-alpha
* video-bitmap

<procedure>(int->bitmap-flag integer)</procedure>

=== blend-operation

<procedure>(blend-operation->int blend-operation)</procedure>

{{blend-operation}} may be one of the following symbols:
* add
* source-minus-destination
* destination-minus-source

<procedure>(int->blend-operation integer)</procedure>

=== blending-mode

<procedure>(blending-mode->int blending-mode)</procedure>

{{blending-mode}} may be one of the following symbols:
* zero
* one
* alpha
* inverse-alpha

<procedure>(int->blending-mode integer)</procedure>

=== blitting-flag

<procedure>(blitting-flag->int blitting-flag)</procedure>

{{blitting-flag}} may be one of the following symbols:
* flip-horizontal
* flip-vertical

<procedure>(int->blitting-flag integer)</procedure>

=== channel-configuration

<procedure>(channel-configuration->int channel-configuration)</procedure>

{{channel-configuration}} may be one of the following symbols:
* one
* two
* three
* four
* five-one
* six-one
* seven-one

<procedure>(int->channel-configuration integer)</procedure>

=== cursor-type

<procedure>(cursor-type->int cursor-type)</procedure>

{{cursor-type}} may be one of the following symbols:
* none
* default
* arrow
* busy
* question
* edit
* move
* resize-north
* resize-west
* resize-south
* resize-east
* resize-northwest
* resize-southwest
* resize-southeast
* resize-northeast
* progress
* precision
* link
* alt-select
* unavailable

<procedure>(int->cursor-type integer)</procedure>

=== event-type

<procedure>(event-type->int event-type)</procedure>

{{event-type}} may be one of the following symbols:
* joystick-axis
* joystick-button-down
* joystick-button-up
* joystick-configuration
* key-down
* key-char
* key-up
* mouse-axes
* mouse-button-down
* mouse-button-up
* mouse-enter-display
* mouse-leave-display
* mouse-warped
* timer
* display-expose
* display-resize
* display-close
* display-lost
* display-found
* display-switch-in
* display-switch-out
* display-orientation
* audio-stream-fragment
* audio-stream-finished

<procedure>(int->event-type integer)</procedure>

=== font-align

<procedure>(font-align->int font-align)</procedure>

{{font-align}} may be one of the following symbols:
* left
* center
* right

<procedure>(int->font-align integer)</procedure>

=== file-mode

<procedure>(file-mode->int file-mode)</procedure>

{{file-mode}} may be one of the following symbols:
* read
* write
* execute
* hidden
* file
* directory

<procedure>(int->file-mode integer)</procedure>

=== gl-variant

<procedure>(gl-variant->int gl-variant)</procedure>

{{gl-variant}} may be one of the following symbols:
* opengl
* opengl-es

<procedure>(int->gl-variant integer)</procedure>

=== joystick-flag

<procedure>(joystick-flag->int joystick-flag)</procedure>

{{joystick-flag}} may be one of the following symbols:
* digital
* analog

<procedure>(int->joystick-flag integer)</procedure>

=== key

<procedure>(key->int key)</procedure>

{{key}} may be one of the following symbols:
* a
* b
* c
* d
* e
* f
* g
* h
* i
* j
* k
* l
* m
* n
* o
* p
* q
* r
* s
* t
* u
* v
* w
* x
* y
* z
* one
* two
* three
* four
* five
* six
* seven
* eight
* nine
* zero
* pad-one
* pad-two
* pad-three
* pad-four
* pad-five
* pad-six
* pad-seven
* pad-eight
* pad-nine
* pad-zerp
* f1
* f2
* f3
* f4
* f5
* f6
* f7
* f9
* f9
* f10
* f11
* f12
* escape
* tilde
* minus
* equals
* backspace
* tab
* openbrace
* enter
* semicolon
* quote
* backslash
* backslash2
* comma
* fullstop
* slash
* space
* insert
* delete
* home
* end
* pgup
* pgdn
* left
* right
* up
* down
* pad-slash
* pad-asterisk
* pad-minus
* pad-plus
* pad-delete
* pad-enter
* printscreen
* pause
* abnt-c1
* yen
* kana
* convert
* noconvert
* at
* circumflex
* colon2
* kanji
* pad-equals
* backquote
* semicolon2
* command
* unknown
* lshift
* rshift
* lctrl
* rctrl
* alt
* altgr
* lwin
* rwin
* menu
* scrolllock
* numlock
* capslock

<procedure>(int->key integer)</procedure>

=== keymod

<procedure>(keymod->int keymod)</procedure>

{{keymod}} may be one of the following symbols:
* shift
* ctrl
* alt
* lwin
* rwin
* menu
* altgr
* command
* scrolllock
* numlock
* capslock
* inaltseq
* accent1
* accent2
* accent3
* accent4

<procedure>(int->keymod integer)</procedure>

=== locking-flag

<procedure>(locking-flag->int locking-flag)</procedure>

{{locking-flag}} may be one of the following symbols:
* read-write
* read-only
* write-only

<procedure>(int->locking-flag integer)</procedure>

=== mixer-quality

<procedure>(mixer-quality->int mixer-quality)</procedure>

{{mixer-quality}} may be one of the following symbols:
* point
* linear

<procedure>(int->mixer-quality integer)</procedure>

=== pixel-format

<procedure>(pixel-format->int pixel-format)</procedure>

{{pixel-format}} may be one of the following symbols:
* any
* any-no-alpha
* any-with-alpha
* any-15-no-alpha
* any-16-no-alpha
* any-16-with-alpha
* any-24-no-alpha
* any-32-no-alpha
* any-32-with-alpha
* argb-8888
* rgba-8888
* argb-4444
* rgb-888
* rgb-565
* rgb555
* rgba-5551
* argb-1555
* abgr-8888
* xbgr-8888
* bgr-888
* bgr-565
* bgr-555
* rgbx-8888
* xrgb-8888
* abgr-f32
* abgr-8888-le
* rgba-4444

<procedure>(int->pixel-format integer)</procedure>

=== playmode

<procedure>(playmode->int playmode)</procedure>

{{playmode}} may be one of the following symbols:
* once
* loop
* bidirectional

<procedure>(int->playmode integer)</procedure>

=== primitive-attribute

<procedure>(primitive-attribute->int primitive-attribute)</procedure>

{{primitive-attribute}} may be one of the following symbols:
* position
* color
* texture-coordinate
* texture-pixel-coordinate

<procedure>(int->primitive-attribute integer)</procedure>

=== primitive-type

<procedure>(primitive-type->int primitive-type)</procedure>

{{primitive-type}} may be one of the following symbols:
* line-list
* line-strip
* line-loop
* triangle-list
* triangle-strip
* point-list

<procedure>(int->primitive-type integer)</procedure>

=== primitive-storage

<procedure>(primitive-storage->int primitive-storage)</procedure>

{{primitive-storage}} may be one of the following symbols:
* float-2
* float-3
* short-2

<procedure>(int->primitive-storage integer)</procedure>

=== seek-flag

<procedure>(seek-flag->int seek-flag)</procedure>

{{seek-flag}} may be one of the following symbols:
* set
* current
* end

<procedure>(int->seek-flag integer)</procedure>

=== state-flag

<procedure>(state-flag->int state-flag)</procedure>

{{state-flag}} may be one of the following symbols:
* new-display-parameters
* new-bitmap-parameters
* display
* target-bitmap
* blender
* new-file-interface
* transform
* bitmap
* all

<procedure>(int->state-flag integer)</procedure>

=== system-path

<procedure>(system-path->int system-path)</procedure>

{{system-path}} may be one of the following symbols:
* resources-path
* temp-path
* user-data-path
* user-home-path
* user-settings-path
* user-documents-path
* exename-path
* last-path

== Constants

* joystick-max-axes
* jostick-max-sticks
* joystick-max-buttons
* default-display-adapter
* eof
* mouse-max-extra-axis
* vertex-cache-size
* primitive-quality
* audio-pan-none
* build-version
* pi

== Functions

<procedure></procedure>

=== Audio

<procedure>(make-sample* (blob buffer) (unsigned-integer samples) (unsigned-integer frequency) audio-depth channel-configuration (bool free-buffer))</procedure>

Implements al_create_sample.

<procedure>(make-sample (blob buffer) (unsigned-integer samples) (unsigned-integer frequency) audio-depth channel-configuration (bool free-buffer))</procedure>

Implements al_create_sample, with (free-sample!) declared as a finalizer.

<procedure>(free-sample! sample)</procedure>

Implements al_destroy_sample.

<procedure>(make-sample-instance* sample)</procedure>

Implements al_create_sample_instance.

<procedure>(make-sample-instance sample)</procedure>

Implements al_create_sample_instance, with (free-sample-instance!) declared as a finalizer.

<procedure>(free-sample-instance! sample)</procedure>

Implements al_destroy_sample_instance.

<procedure>(sample-frequency sample)</procedure>

Implements al_get_sample_frequenecy.

<procedure>(sample-length sample)</procedure>

Implements al_get_sample_length.

<procedure>(sample-depth sample)</procedure>

Implements al_get_sample_depth.

<procedure>(sample-channels sample)</procedure>

Implements al_get_sample_channels.

<procedure>(sample-instance-frequency sample-instance)</procedure>

Implements al_get_sample_instance_frequency.

<procedure>(sample-instance-length sample-instance)</procedure>

Implements al_get_sample_instance_length.

<procedure>(sample-instance-position sample-instance)</procedure>

Implements al_get_sample_instance-position.

<procedure>(sample-instance-speed sample-instance)</procedure>

Implements al_get_sample_instance_speed.

<procedure>(sample-instance-gain sample-instance)</procedure>

Implements al_get_sample_instance_gain.

<procedure>(sample-instance-pan sample-instance)</procedure>

Implements al_get_sample_instance_pan.

<procedure>(sample-instance-time sample-instance)</procedure>

Implements al_get_sample_instance_time.

<procedure>(sample-instance-depth sample-instance)</procedure>

Implements al_get_sample_instance_depth.

<procedure>(sample-instance-channels sample-instance)</procedure>

Implements al_get_sample_instance_channels.

<procedure>(sample-instance-playmode sample-instance)</procedure>

Implements al_get_sample_instance_playmode.

<procedure>(sample-instance-playing? sample-instance)</procedure>

Implements al_get_sample_instance_playing.

<procedure>(sample-instance-attached? sample-instance)</procedure>

Implements al_get_sample_instance_attached.

<procedure>(sample-instance-position-set! sample-instance unsigned-integer)</procedure>

Implements al_set_sample_instance_position.

<procedure>(sample-instance-length-set! sample-instance unsigned-integer)</procedure>

Implements al_set_sample_instance_length.

<procedure>(sample-instance-speed-set! sample-instance float)</procedure>

Implements al_set_sample_instance_speed.

<procedure>(sample-instance-gain-set! sample-instance float)</procedure>

Implements al_set_sample_instance_gain.

<procedure>(sample-instance-pan-set! sample-instance float)</procedure>

Implements al_set_sample_instance_pan.

<procedure>(sample-instance-playmode-set! sample-instance playmode)</procedure>

Implements al_set_sample_instance_playmode.

<procedure>(sample-instance-playing-set! sample-instance bool)</procedure>

Implements al_set_sample_instance_playing.

<procedure>(sample-instance-detach! sample-instance)</procedure>

Implements al_detach_sample_instance.

<procedure>(sample-instance-sample sample-instance)</procedure>

Implements al_get_sample.

<procedure>(sample-instance-sample-set! sample-instance sample)</procedure>

Implements al_set_sample

<procedure>(sample-instance-play sample-instance)</procedure>

Implements al_play_sample_instance.

<procedure>(sample-instance-stop sample-instance)</procedure>

Implements al_stop_sample_instance.

<procedure>(make-audio-stream* (integer buffer-count) (unsigned-integer samples) (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_audio_stream.

<procedure>(make-audio-stream (integer buffer-count) (unsigned-integer samples) (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_audio_stream, with (free-audio-stream!) declared as a finalizer.

<procedure>(free-audio-stream! audio-stream)</procedure>

Implements al_destroy_audio_stream.

<procedure>(audio-stram-drain audio-stream)</procedure>

Implements al_drain_audio_stream.

<procedure>(audio-stream-frequency audio-stream)</procedure>

Implements al_get_audio_stream_frequency.

<procedure>(audio-stream-length audio-stream)</procedure>

Implements al_get_audio_stream_length.

<procedure>(audio-stream-fragments audio-stream)</procedure>

Implements al_get_available_audio_stream_fragments.

<procedure>(audio-stream-available-fragments audio-stream)</procedure>

Implements al_get_available_audio_stream_fragments.

<procedure>(audio-stream-speed audio-stream)</procedure>

Implements al_get_audio_stream_speed.

<procedure>(audio-stream-gain audio-stream)</procedure>

Implements al_get_audio_stream_gain.

<procedure>(audio-stream-channels audio-stream)</procedure>

Implements al_get_audio_stream_channels.

<procedure>(audio-stream-depth audio-stream)</procedure>

Implements al_get_audio_stream_depth.

<procedure>(audio-stream-playmode audio-stream)</procedure>

Implements al_get_audio_stream_playmode.

<procedure>(audio-stream-playing? audio-stream)</procedure>

Implements al_get_audio_stream_playing.

<procedure>(audio-stream-attached? audio-stream)</procedure>

Implements al_get_audio_stream_attached.

<procedure>(audio-stream-fragment audio-stream)</procedure>

Implements al_get_audio_stream_fragment.

<procedure>(audio-stream-speed-set! audio-stream float)</procedure>

Implements al_set_audio_stream_speed.

<procedure>(audio-stream-gain-set! audio-stream float)</procedure>

Implements al_set_audio_stream_gain.

<procedure>(audio-stream-pan-set! audio-stream float)</procedure>

Implements al_set_audio_stream_pan.

<procedure>(audio-stream-playmode-set! audio-stream playmode)</procedure>

Implements al_set_audio_stream_playmode.

<procedure>(audio-stream-playing-set! audio-stream bool)</procedure>

Implements al_set_audio_stream_playing.

<procedure>(audio-stream-detach! audio-stream)</procedure>

Implements al_detach_audio_stream.

<procedure>(audio-stream-fragment-set! audio-stream c-pointer)</procedure>

Implements al_set_audio_stream_fragment.

<procedure>(audio-stream-rewind! audio-stream)</procedure>

Implements al_rewind_audio_stream.

<procedure>(audio-stream-seek-seconds! audio-stream double)</procedure>

Implements al_seek_audio_stream_secs.

<procedure>(audio-stream-position-seconds audio-stream)</procedure>

Impements al_get_audio_stream_position_secs.

<procedure>(audio-stream-length-seconds audio-stream)</procedure>

Implements al_get_audio_length_secs.

<procedure>(audio-stream-loop-set! audio-stream (double start-seconds) (double end-seconds))</procedure>

Implements al_set_audio_stream_loop_secs.

<procedure>(audio-stream-event-source audio-stream)</procedure>

Implements al_get_audio_stream_event_source.

<procedure>(make-mixer* (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_mixer.

<procedure>(make-mixer (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_mixer, with (free-mixer!) declared as a finalizer.

<procedure>(free-mixer! mixer)</procedure>

Implements al_destroy_mixer.

<procedure>(sample-instance-attach-to-mixer! sample-instance mixer)</procedure>

Implements al_attach_sample_instance_to_mixer.

<procedure>(audio-stream-attach-to-mixer! audio-stream mixer)</procedure>

Implements al_attach_audio_stram_to_mixer.

<procedure>(mixer-attach-to-mixer! mixer mixer)</procedure>

Implements al_attach_mixer_to_mixer.

<procedure>(mixer-postprocess-callback-set! mixer (function void (c-pointer unsigned-integer32 c-pointer)) (c-pointer data))</procedure>

Implements al_set_mixer_postprocess_callback.

<procedure>(mixer-frequency mixer)</procedure>

Implements al_get_mixer_frequency.

<procedure>(mixer-channels mixer)</procedure>

Implements al_get_mixer_channels.

<procedure>(mixer-depth mixer)</procedure>

Implements al_get_mixer_depth.

<procedure>(mixer-quality mixer)</procedure>

Implements al_get_mixer_quality.

<procedure>(mixer-playing? mixer)</procedure>

Implements al_get_mixer_playing.

<procedure>(mixer-attached? mixer)</procedure>

Implements al_get_mixer_attached.

<procedure>(mixer-frequency-set! mixer unsigned-integer)</procedure>

Implements al_set_mixer_frequency.

<procedure>(mixer-quality-set! mixer mixer-quality)</procedure>

Implements al_set_mixer_quality.

<procedure>(mixer-playing-set! mixer bool)</procedure>

Implements al_set_mixer_playing.

<procedure>(mixer-detach! mixer)</procedure>

Implements al_detach_mixer.

<procedure>(make-voice* (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_voice.

<procedure>(make-voice (unsigned-integer frequency) audio-depth channel-configuration)</procedure>

Implements al_create_voice, with (free-voice!) declared as a finalizer.

<procedure>(free-voice! voice)</procedure>

Implements al_destroy_voice.

<procedure>(sample-instance-attach-to-voice! sample-instance voice)</procedure>

Implements al_attach_sample_instance_to_voice.

<procedure>(audio-stream-attach-to-voice! audio-stram voice)</procedure>

Implements al_attach_audio_stream_to_voice.

<procedure>(mixer-attach-to-voice! mixer voice)</procedure>

Implements al_attach_mixer_to_voice.

<procedure>(voice-detach! voice)</procedure>

Implements al_detach_voice.

<procedure>(voice-frequency voice)</procedure>

Implements al_get_voice_frequency.

<procedure>(voice-position voice)</procedure>

Implements al_get_voice_position voice)</procedure>

<procedure>(voice-channels voice)</procedure>

Implements al_get_voice_channels.

<procedure>(voice-depth voice)</procedure>

Implements al_get_voice_depth.

<procedure>(voice-playing? voice)</procedure>

Implements al_get_voice_playing.

<procedure>(voice-position-set! voice unsigned-integer)</procedure>

Implements al_set_voice_position.

<procedure>(voice-playing-set! voice bool)</procedure>

Implements al_set_voice_playing.

<procedure>(audio-addon-install)</procedure>

Implements al_install_audio.

<procedure>(audio-addon-uninstall)</procedure>

Implements al_uninstall_audio.

<procedure>(audio-addon-installed?)</procedure>

Implements al_is_audio_installed.

<procedure>(audio-addon-version)</procedure>

Implements al_get_allegro_audio_version.

<procedure>(channel-configuration-count channel-configuration)</procedure>

Implements al_get_channel_count.

<procedure>(audio-depth-size audio-depth)</procedure>

Implements al_get_audio_depth_size.

<procedure>(default-mixer)</procedure>

Implements al_get_default_mixer.

<procedure>(default-mixer-set! mixer)</procedure>

Implements al_set_default_mixer.

<procedure>(default-mixer-restore!)</procedure>

Implements al_restore_default_mixer.

<procedure>(sample-play sample (float gain) (float pan) (float speed) playmode sample-id)</procedure>

Implements al_play_sample.

The Sample ID is written to the provided sample-id struct.

<procedure>(sample-stop sample-id)</procedure>

Implements al_stop_sample.

<procedure>(reserve-samples integer)</procedure>

Implements al_reserve_samples.

<procedure>(stop-all-samples)</procedure>

Implements al_stop_samples.

<procedure>(register-sample-loader (string extension) (function sample ((const string))))</procedure>

Implements al_register_sample_loader.

<procedure>(register-sample-saver (string extension) (function bool ((const c-string) sample)))</procedure>

Implements al_register_sample_saver.

<procedure>(register-audio-stream-loader (string extension) (function audio-stream ((const string) size_t unsigned-integer32)))</procedure>

Implements al_register_audio_stream_loader.

<procedure>(register-sample-file-loader (string extension) (function sample (file)))</procedure>

Implements al_register_sample_loader_f.

<procedure>(register-sample-file-saver (string extension) (function bool (file sample)))</procedure>

Implements al_register_sample_saver_f.

<procedure>(register-audio-stream-file-loader (string extension) (function audio-stream (file size_t unsigned-integer)))</procedure>

Implements al_register_audio_stream_loader_f.

<procedure>(load-sample* string)</procedure>

Implements al_load_sample.

<procedure>(load-sample string)</procedure>

Implements al_load_sample, with (free-sample!) declared as a finalizer.

<procedure>(load-audio-stream* string (integer buffer-count) (unsigned-integer samples))</procedure>

Implements al_load_audio_stream.

<procedure>(load-audio-stream string (integer buffer-count) (unsigned-integer samples))</procedure>

Implements al_load_audio_stream, with (free-audio-stream!) declared as a finalizer.

<procedure>(load-audio-stream-from-file* file (string identity) (integer buffer-count) (unsigned-integer samples))</procedure>

Implements al_load_audio_straem_from_file.

<procedure>(load-audio-stream-from-file file (string identity) (integer buffer-count) (unsigned-integer samples))</procedure>

Implements al_load_audio_straem_from_file, with (free-audio-stream!) declared as a finalizer.

<procedure>(load-sample-from-file* file (string identity))</procedure>

Implements al_load_sample_f.

<procedure>(load-sample-from-file file (string identity))</procedure>

Implements al_load_sample_f, with (free-sample!) declared as a finalizer.

<procedure>(sample-save-to-file sample file (string identity))</procedure>

Implements al_save_sample_f.

<procedure>(sample-save sample (string filename))</procedure>

Implements al_save_sample.


=== Audio Codec Addon

<procedure>(acodec-addon-init)</procedure>

Implements al_init_acodec_addon.

<procedure>(acodec-addon-version)</procedure>

Implements al_get_allegro_acodec_version.

=== Bitmap

<procedure>(new-bitmap-format-set! pixel-format)</procedure>

Implements al_set_new_bitmap_format.

<procedure>(new-bitmap-format)</procedure>

Implements al_get_new_bitmap_flags.

<procedure>(new-bitmap-flags-set! bitmap-flag)</procedure>

Implements al_set_new_bitmap_flags.

<procedure>(new-bitmap-flags)</procedure>

Implements al_get_new_bitmap_flags.

<procedure>(new-bitmap-add-flag bitmap-flag)</procedure>

Implements al_add_new_bitmap_flag.

<procedure>(make-bitmap* (integer width) (integer height))</procedure>

Implements al_create_bitmap.

<procedure>(make-bitmap (integer width) (integer height))</procedure>

Implements al_create_bitmap, with (free-bitmap!) declared as a finalizer.

<procedure>(bitmap-draw bitmap (float dx) (float dy) bitmap-flag)</procedure>

Implements al_draw_bitmap.

<procedure>(draw-bitmap bitmap (float dx) (float dy) bitmap-flag)</procedure>

Implements al_draw_bitmap.

<procedure>(bitmap-draw-region bitmap (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_bitmap_region.

<procedure>(draw-bitmap-region bitmap (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_bitmap_region.

<procedure>(bitmap-draw-scaled bitmap (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (float dw) (float dh) (integer bitmap-flags))</procedure>

Implements al_draw_scaled_bitmap.

<procedure>(draw-scaled-bitmap bitmap (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (float dw) (float dh) (integer bitmap-flags))</procedure>

Implements al_draw_scaled_bitmap.

<procedure>(bitmap-draw-rotated bitmap (float cx) (float cy) (float dx) (float dy) (float angle) (integer bitmap-flags))</procedure>

Implements al_draw_rotated_bitmap.

<procedure>(draw-rotated-bitmap bitmap (float cx) (float cy) (float dx) (float dy) (float angle) (integer bitmap-flags))</procedure>

Implements al_draw_rotated_bitmap.

<procedure>(bitmap-draw-scaled-rotated bitmap (float cx) (float cy) (float dx) (float dy) (float xscale) (float yscale) (float angle) (integer bitmap-flags))</procedure>

Implements al_draw_scaled_rotated_bitmap.

<procedure>(draw-scaled-rotated-bitmap bitmap (float cx) (float cy) (float dx) (float dy) (float xscale) (float yscale) (float angle) (integer bitmap-flags))</procedure>

Implements al_draw_scaled_rotated_bitmap.

<procedure>(bitmap-draw-tinted (bitmap bmp) (color tint) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_tinted_bitmap.

<procedure>(draw-tinted-bitmap (bitmap bmp) (color tint) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_tinted_bitmap.

<procedure>(bitmap-draw-tinted-region (bitmap bmp) (color tint) (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_tinted_bitmap_region.

<procedure>(draw-tinted-bitmap-region (bitmap bmp) (color tint) (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (integer bitmap-flags))</procedure>

Implements al_draw_tinted_bitmap_region.

<procedure>(bitmap-draw-tinted-scaled (bitmap bmp) (color tint) (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (float dw) (float dh) (integer flags))</procedure>

Implements al_draw_tinted_scale_bitmap.

<procedure>(draw-tinted-scaled-bitmap (bitmap bmp) (color tint) (float sx) (float sy) (float sw) (float sh) (float dx) (float dy) (float dw) (float dh) (integer flags))</procedure>

Implements al_draw_tinted_scale_bitmap.

<procedure>(bitmap-draw-tinted-rotated (bitmap bmp) (color tint) (float cx) (float cy) (float dx) (float dy) (float angle) (integer flags))</procedure>

Implements al_draw_tinted_rotated_bitmap.

<procedure>(draw-tinted-rotated-bitmap (bitmap bmp) (color tint) (float cx) (float cy) (float dx) (float dy) (float angle) (integer flags))</procedure>

Implements al_draw_tinted_rotated_bitmap.

<procedure>(bitmap-draw-tinted-scaled-rotated (bitmap bmp) (color tint) (float cx) (float cy) (float dx) (float dy) (float xscale) (float yscale) (float angle) (integer flags))</procedure>

Implements al_draw_tinted_scaled_rotated_bitmap.

<procedure>(draw-tinted-scaled-rotated-bitmap (bitmap bmp) (color tint) (float cx) (float cy) (float dx) (float dy) (float xscale) (float yscale) (float angle) (integer flags))</procedure>

Implements al_draw_tinted_scaled_rotated_bitmap.

<procedure>(bitmap-lock*! bitmap pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap.

<procedure>(lock-bitmap*! bitmap pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap.

<procedure>(bitmap-lock-region*! bitmap (integer x) (integer y) (integer width) (integer height) pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap_region.

<procedure>(lock-bitmap-region*! bitmap (integer x) (integer y) (integer width) (integer height) pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap_region.

<procedure>(bitmap-unlock! bitmap)</procedure>

Implements al_unlock_bitmap.

<procedure>(unlock-bitmap! bitmap)</procedure>

Implements al_unlock_bitmap.

<procedure>(bitmap-lock! bitmap pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap, with (bitmap-unlock!) and (free-locked-region!) declared as finalizers.

<procedure>(lock-bitmap! bitmap pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap, with (bitmap-unlock!) and (free-locked-region!) declared as finalizers.

<procedure>(bitmap-lock-region! bitmap (integer x) (integer y) (integer width) (integer height) pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap_region, with (bitmap-unlock!) and (free-locked-region!) declared as finalizers.

<procedure>(lock-bitmap-region! bitmap (integer x) (integer y) (integer width) (integer height) pixel-format (integer bitmap-flags))</procedure>

Implements al_lock_bitmap_region, with (bitmap-unlock!) and (free-locked-region!) declared as finalizers.

<procedure>(bitmap-pixel! (bitmap bmp) (int x) (int y) (color c))</procedure>

Sets the provided color struct to the color value at the given coordinates.

<procedure>(bitmap-pixel* (bitmap bmp) (int x) (int y))</procedure>

Returns a new color struct of the color value at the given coordinates.

<procedure>(bitmap-pixel (bitmap bmp) (int x) (int y))</procedure>

Returns a new color struct of the color value at the given coordinates, with (free-color!) declared as a finalizer.

<procedure>(bitmap-width bitmap)</procedure>

Implements al_get_bitmap_width.

<procedure>(bitmap-height bitmap)</procedure>

Implements al_get_bitmap_height.

<procedure>(bitmap-format bitmap)</procedure>

Implements al_get_bitmap_format.

<procedure>(bitmap-flags bitmap)</procedure>

Implements al_get_bitmap_flags.

<procedure>(bitmap-mask->alpha! bitmap color)</procedure>

Implements al_convert_mask_to_alpha.

<procedure>(bitmap-clone* bitmap)</procedure>

Implements al_clone_bitmap.

<procedure>(bitmap-clone bitmap)</procedure>

Implements al_clone_bitmap, with (free-bitmap!) declared as a finalizer.

<procedure>(bitmap-locked? bitmap)</procedure>

Implements al_is_bitmap_locked.

<procedure>(bitmap-put-pixel! bitmap (integer x) (integer y) (color c))</procedure>

Implements _al_put_pixel.

<procedure>(make-sub-bitmap* bitmap (integer x) (integer y) (integer width) (integer height))</procedure>

Implements al_create_sub_bitmap.

<procedure>(make-sub-bitmap bitmap (integer x) (integer y) (integer width) (integer height))</procedure>

Implements al_create_sub_bitmap, with (free-bitmap!) declared as a finalizer.

<procedure>(sub-bitmap? bitmap)</procedure>

Implements al_is_sub_bitmap.

<procedure>(put-pixel (integer x) (integer y) (color c))</procedure>

Implements al_put_pixel.

<procedure>(put-blended-pixel (integer x) (integer y) (color c))</procedure>

Implements al_put_blended_pixel.

<procedure>(pixel-size pixel-format)</procedure>

Implements al_get_pixel_size.

<procedure>(color-map-rgb! (color c) (unsigned-byte r) (unsigned-byte g) (unsigned-byte b))</procedure>

Maps rgb values onto the provided color struct, implementing al_map_rgb.

<procedure>(color-map-rgba! (color c) (unsigned-byte r) (unsigned-byte g) (unsigned-byte b) (unsigned-byte a))</procedure>

Maps rgba values onto the provided color struct, implementing al_map_rgba.

<procedure>(color-map-rgb-float! (color c) (unsigned-byte r) (unsigned-byte g) (unsigned-byte b))</procedure>

Maps rgb values onto the provided color struct, implementing al_map_rgb_f.

<procedure>(color-map-rgba-float! (color c) (unsigned-byte r) (unsigned-byte g) (unsigned-byte b) (unsigned-byte a))</procedure>

Maps rgba values onto the provided color struct, implementing al_map_rgba_f.

<procedure>(map-rgb* r g b)</procedure>

Returns a new color struct mapped to the given rgb values.

<procedure>(map-rgb r g b)</procedure>

Returns a new color struct mapped to the given rgb values, with (free-color!) declared as a finalizer.

<procedure>(map-rgba* r g b a)</procedure>

Prodcues a new color struct mapped to the given rgba values.

<procedure>(map-rgba r g b a)</procedure>

Returns a new color struct mapped to the given rgba values, with (free-color!) declared as a finalizer.

<procedure>(map-rgb-float* r g b)</procedure>

Returns a new color struct mapped to the given rgb values.

<procedure>(map-rgb-float r g b)</procedure>

Returns a new color struct mapped to the given rgb values, with (free-color!) declared as a finalizer.

<procedure>(map-rgba-float* r g b a)</procedure>

Returns a new color struct mapped to the given rgba values.

<procedure>(map-rgba-float r g b a)</procedure>

Returns a new color struct mapped to the given rgba values, with (free-color!) declared as a finalizer.

<procedure>(color-unmap-rgb color)</procedure>

Returns a 3-element list of the rgb values representing a given color struct.

<procedure>(color-unmap-rgba color)</procedure>

Returns a 4-element list of the rgba values representing a given color struct.

<procedure>(color-unmap-rgb-float color)</procedure>

Returns a 3-element list of the rgb values representing a given color struct.

<procedure>(color-unmap-rgba-float color)</procedure>

Returns a 4-element list of the rgb values representing a given color struct.

<procedure>(pixel-format-bits pixel-format)</procedure>

Implements al_get_pixel_format_bits.

<procedure>(clipping-rectangle)</procedure>

Returns a 4-element list of the x, y, width and height values of the current clipping rectangle.

<procedure>(clippingle-rectangle-set! (integer x) (integer y) (integer width) (integer height))</procedure>

Sets the current clipping rectangle.

<procedure>(blender)</procedure>

Returns a 3-element list of the op, source and destination of the current blender.

<procedure>(blender-set! (blend-operation op) (integer source) (integer destination))</procedure>

Implements al_set_blender.

<procedure>(separate-blender)</procedure>

Returns a 6-element list of the op, source, destination, alpha op, alpha source, and alpha destination.

<procedure>(separate-blender-set! (blend-operation op) (integer src) (integer destination) (integer alpha-op) (integer alpha-source) (integer alpha-destination))</procedure>

Implements al_set_separate_blender. 

=== Bitmap I/O

<procedure>(register-bitmap-loader (string extension) (function bitmap ((const c-string))))</procedure>

Implements al_register_bitmap_loader.

<procedure>(register-bitmap-file-loader (string extension) (function bitmap (file)))</procedure>

Implements al_register_bitmap_loader_f.

<procedure>(register-bitmap-saver (string extension) ((function bool ((const c-string) bitmap)) saver))</procedure>

Implements al_register_bitmap_saver.

<procedure>(register-bitmap-file-saver (string extension) ((function bool (file bitmap)) saver))</procedure>

Implements al_register_bitmap_saver_f.

<procedure>(load-bitmap* string)</procedure>

Implements al_load_bitmap.

<procedure>(load-bitmap string)</procedure>

Implements al_load_bitmap, with (free-bitmap!) declared as a finalizer.

<procedure>(load-bitmap-from-file* file string)</procedure>

Implements al_load_bitmap_f.

<procedure>(load-bitmap-from-file file string)</procedure>

Implements al_load_bitmap_f, with (free-bitmap!) declared as a finalizer.

<procedure>(bitmap-save bitmap string)</procedure>

Implements al_save_bitmap.

<procedure>(bitmap-save-to-file bitmap file string)</procedure>

Implements al_save_bitmap_f.

=== Color

<procedure>(color-addon-version)</procedure>

Implements al_get_allegro_color_version.

<procedure>(hsv->rgb (float h) (float s) (float v))</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(rgb->hsl (float red) (float green) (float blue))</procedure>

Returns a 3-element list consisting of the hsl elements.

<procedure>(hsl->rgb (float hue) (float saturation) (float lightness))</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(name->rgb string)</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(rgb->name (float red) (float green) (float blue))</procedure>

Returns a string representation of the rgb elements.

<procedure>(cmyk->rgb (float cyan) (float magenta) (float yellow) (float key))</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(rgb->cmyk (float red) (float green) (float blue))</procedure>

Returns a 4-element list consisting of the cmyk elements.

<procedure>(yuv->rgb (float y) (float u) (float v))</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(rgb->yuv (float red) (float green) (float blue))</procedure>

Returns a 3-element list consisting of the yuv elements.

<procedure>(rgb->html (float red) (float green) (float blue))</procedure>

Returns a string consisting of the html representation.

<procedure>(html->rgb string)</procedure>

Returns a 3-element list consisting of the rgb elements.

<procedure>(make-color-rgb* (integer r) (integer g) (integer b))</procedure>

Creates a color struct from rgb elements.

<procedure>(make-color-rgb (integer r) (integer g) (integer b))</procedure>

Creates a color struct from rgb elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-rgba*(integer r) (integer g) (integer b) (integer a))</procedure>

Creates a color struct from rgba elements.

<procedure>(make-color-rgba (integer r) (integer g) (integer b) (integer a))</procedure>

Creates a color struct from rgba elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-yuv* (integer y) (integer u) (integer v))</procedure>

Creates a color struct from yuv elements.

<procedure>(make-color-yuv (integer y) (integer u) (integer v))</procedure>

Creates a color struct from yuv elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-cmyk* (integer c) (integer m) (integer y) (integer k))</procedure>

Creates a color struct from cmyk elements.

<procedure>(make-color-cmyk  (integer c) (integer m) (integer y) (integer k))</procedure>

Creates a color struct from cmyk elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-hsl*(integer h) (integer s) (integer l))</procedure>

Creates a color struct from hsl elements.

<procedure>(make-color-hsl  (integer h) (integer s) (integer l))</procedure>

Creates a color struct from hsl elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-hsv*(integer h) (integer s) (integer v))</procedure>

Creates a color struct from hsv elements.

<procedure>(make-color-hsv  (integer h) (integer s) (integer v))</procedure>

Creates a color struct from hsv elements, with (free-color!) declared as a finalizer.

<procedure>(make-color-name* string)</procedure>

Creates a color struct from a string name.

<procedure>(make-color-name string)</procedure>

Creates a color struct from a string name, with (free-color!) declared as a finalizer.

<procedure>(make-color-html* string)</procedure>

Creates a color struct from a html representation.

<procedure>(make-color-html string)</procedure>

Creates a color struct from a html representation, with (free-color!) declared as a finalizer.

<procedure>(color-yuv! color (float y) (float u) (float v))</procedure>

Maps yuv elements to a color struct.

<procedure>(color-cmyk! color (float c) (float m) (float y) (float k))</procedure>

Maps cmyk elements to a color struct.

<procedure>(color-hsl! color (float h) (float s) (float l))</procedure>

Maps hsl elements to a color struct.

<procedure>(color-hsv! color (float h) (float s) (float v))</procedure>

Maps hsv elements to a color struct.

<procedure>(color-name! color string)</procedure>

Maps a color name to a color struct.

<procedure>(color-html! color string)</procedure>

Maps a html representation to a color struct.

=== Config Files

<procedure>(make-config*)</procedure>

Implements al_create_config.

<procedure>(make-config)</procedure>

Implements al_create_config, with (free-config!) declared as a finalizer.

<procedure>(free-config! config)</procedure>

Implements al_destroy_config.

<procedure>(config-section-add! config string)</procedure>

Implements al_add_config_section.

<procedure>(config-value-set! config (string section) (string key) (string value))</procedure>

Implements al_set_config_value.

<procedure>(config-comment-add! config (string section) (string comment))</procedure>

Implements al_add_config_comment.

<procedure>(config-value config (string section) (string key))</procedure>

Implements al_get_config_value.

<procedure>(load-config* string)</procedure>

Implements al_load_config_file.

<procedure>(load-config string)</procedure>

Implements al_load_config_file, with (free-config!) decalred as a finalizer.

<procedure>(load-config-from-file* file)</procedure>

Implements al_load_config_file_f.

<procedure>(load-config-from-file file)</procedure>

Implements al_load_config_file_f, with (free-config!) declared as a finalizer.

<procedure>(config-save config string)</procedure>

Implements al_save_config_file.

<procedure>(config-save-to-file config file)</procedure>

Implements al_save_config_file_f.

<procedure>(config-merge! config config)</procedure>

Implements al_merge_config_into.

<procedure>(config-merge config config)</procedure>

Implements al_merge_config.

<procedure>(config-sections config)</procedure>

Creates an iterator that covers the sections of the given config.

Returns values of the form (list config-section promise).

(force) the promise to get the next section.

Needs testing!

<procedure>(config-entries config config-section)</procedure>

Creates an iterator that covers the entries of the given config and config-section.

Returns values of the form (list config-entry promise).

(force) the promise to get the next entry.

Needs testing!

=== Debugging

<procedure>(trace-prefix (string channel) (int level) (string file) (int line) (string function))</procedure>

Implements _al_trace_prefix.

<procedure>(trace-level-debug)</procedure>

Implements ALLEGRO_DEBUG.

<procedure>(trace-level-info)</procedure>

Implements ALLEGRO_INFO.

<procedure>(trace-level-warn)</procedure>

Implements ALLEGRO_WARN.

<procedure>(trace-level-error)</procedure>

Implements ALLEGRO_ERROR.

<procedure>(debug-assert bool)</procedure>

Implements ALLEGRO_ASSERT.

=== Display

<procedure>(new-display-refresh-rate)</procedure>

Implements al_get_new_display_refresh_rate.

<procedure>(new-display-refresh-rate-set! integer)</procedure>

Implements al_set_new_display_refresh_rate.

<procedure>(new-display-flags)</procedure>

Implements al_get_new_display_flags.

<procedure>(new-display-flags-set! integer)</procedure>

Implements al_set_new_display_flags.

<procedure>(new-display-adapter)</procedure>

Implements al_get_new_display_adapter.

<procedure>(new-display-adapter-set! integer)</procedure>

Implements al_set_new_display_adpater.

<procedure>(new-display-window-position)</procedure>

Returns a 2-element list consisting of the new display coordinates.

<procedure>(new-display-window-position-set! (integer x) (integer y))</procedure>

Sets the a new display's window position.

<procedure>(new-display-option-value display-option)</procedure>

Retrieves the value for a particular display-option for newly created displays.

<procedure>(new-display-option-importance display-option)</procedure>

Retrieves the importance for a particular display-option for newly created dispalys.

<procedure>(new-display-option-set! display-option (integer value) display-option-importance)</procedure>

Implements al_set_new_display_option.

<procedure>(new-display-reset-options)</procedure>

Implements al_reset_new_display_options.

<procedure>(make-display* (integer width) (integer height))</procedure>

Implements al_create_display.

<procedure>(make-display (integer width) (integer height))</procedure>

Implements al_create_display, with (free-display!) declared as a finalizer.

<procedure>(make-display/mode* display-mode (integer adapter) (integer flags))</procedure>

Creates a new display, taking the refresh rate, width and height from a display-mode struct.

<procedure>(make-display/mode display-mode (integer adapter) (integer flags))</procedure>

Creates a new display, taking the refresh rate, width and height from a display-mode struct, with (free-display-mode!) declared as a finalizer.

<procedure>(free-display! display)</procedure>

Implements al_destroy_display.

<procedure>(current-display)</procedure>

Implements al_get_current_display.

<procedure>(display-mode-count)</procedure>

Implements al_get_num_display_modes.

<procedure>(display-mode-init! display-mode (integer index))</procedure>

Implements al_get_display_mode, returning #f if unsuccessful.

<procedure>(update-display-region! (integer x) (integer y) (integer width) (integer height))</procedure>

Implements al_update_display_region.

<procedure>(compatible-bitmap? bitmap)</procedure>

Implements al_is_compatible_bitmap.

<procedure>(wait-for-vsync)</procedure>

Implements al_wait_for_vsync.

<procedure>(draw-pixel (float x) (floay y) color)</procedure>

Implements al_draw_pixel.

<procedure>(video-adapter-count)</procedure>

Implements al_get_num_video_adapters.

<procedure>(monitor-init! monitor (integer adapter))</procedure>

Implements al_get_monitor_info.

<procedure>(display-option display display-option)</procedure>

Implements al_get_display_option.

<setter>(display-hold-bitmap-drawing! bool)</setter>

Implements al_hold_bitmap_drawing.

<procedure>(display-bitmap-drawing-held?)</procedure>

Implements al_is_bitmap_drawing_help.

<procedure>(display-window-title-set! display string)</procedure>

Implements al_set_window_title.

<procedure>(display-width display)</procedure>

Implements al_get_display_width.

<procedure>(display-height display)</procedure>

Implements al_get_display_height.

<procedure>(display-format display)</procedure>

Implements al_get_display_format.

<procedure>(display-refresh-rate display)</procedure>

Implements al_get_display_refresh_rate.

<procedure>(display-flags display)</procedure>

Implements al_get_display_flags.

<procedure>(display-toggle-flag! display display-flag bool)</procedure>

Implements al_toggle_display_flag.

<procedure>(display-backbuffer display)</procedure>

Implements al_get_backbuffer.

<procedure>(display-acknowledge-resize display)</procedure>

Implements al_acknowledge_resize.

<procedure>(display-resize! display (integer width) (integer height))</procedure>

Implements al_resize_display.

<procedure>(display-event-source display)</procedure>

Implements al_get_display_event_source.

<procedure>(display-iconset! display bitmap)</procedure>

Implements al_set_display_icon.

<procedure>(clear-to-color color)</procedure>

Implements al_clear_to_color.

<procedure>(target-bitmap)</procedure>

Implements al_get_target_bitmap.

<procedure>(target-bitmap-set! bitmap)</procedure>

Implements al_set_target_bitmap.

<procedure>(target-backbuffer-set! display)</procedure>

Implements al_set_target_backbuffer.

<procedure>(flip-display)</procedure>

Implements al_flip_display.

=== Direct3D

<procedure>(d3d-non-pow2-texture-support?)</procedure>

Implements al_have_d3d_non_pow2_texture_support.

<procedure>(d3d-non-square-texture-support?)</procedure>

Implements al_have_d3d_non_square_texture_support.

==== Bitmap Specific

<procedure>(bitmap-d3d-system-texture bitmap)</procedure>

Implements al_get_d3d_system_texture.

<procedure>(bitmap-d3d-video-texture bitmap)</procedure>

Implements al_get_d3d_video_texture.

<procedure>(bitmap-d3d-texture-position bitmap)</procedure>

Returns a 2-element list consisting of a u, v pair.

==== Display Specific

<procedure>(display-d3d-device-lost? display)</procedure>

Implements al_is_d3d_device_lost.

<procedure>(display-d3d-device display)</procedure>

Implements al_get_d3d_device.

=== Events

<procedure>(user-event-type? integer)</procedure>

Implements ALLEGRO_EVENT_TYPE_IS_USER.

<procedure>(make-event-type (integer a) (integer b) (integer c) (integer d))</procedure>

Implements ALLEGRO_GET_EVENT_TYPE.

<procedure>(event-type event)</procedure>

Returns the type of a given event struct.

<procedure>(event->any-event event)</procedure>

Converts an event to an any-event.

<procedure>(event->display-event event)</procedure>

Converts an event to a display-event.

<procedure>(event->joystick-event event)</procedure>

Converts an event to a joystick-event.

<procedure>(event->keyboard-event event)</procedure>

Converts an event to a keyboard-event.

<procedure>(event->mouse-event event)</procedure>

Converts an event to a mouse-event.

<procedure>(event->timer-event event)</procedure>

Converts an event to a timer-event.

<procedure>(event->user-event event)</procedure>

Converts an event to a user-event.

<procedure>(user-event-source-init! event-source)</procedure>

Implements al_init_user_event_source.

<procedure>(free-user-event-source! event-source)</procedure>

Implements al_destroy_user_event_source.

<procedure>(emit-user-event! event-source event (function void (user-event)))</procedure>

Implements al_emit_user_event.

<procedure>(user-event-unref! user-event)</procedure>

Implements al_unref_user_event.

<procedure>(event-source-data event-source)</procedure>

Implements al_get_event_source_data.

<procedure>(event-source-data-set! event-source integer)</procedure>

Implements al_set_event_source_data.

<procedure>(make-event-queue*)</procedure>

Implements al_create_event_queue.

<procedure>(make-event-queue)</procedure>

Implements al_create_event_queue, with (free-event-queue!) declared as a finalizer.

<procedure>(free-event-queue! event-queue)</procedure>

Implements al_destroy_event_queue.

<procedure>(event-queue-register-source! event-queue event-source)</procedure>

Implements al_register_event_source.

<procedure>(event-queue-unregister-source! event-queue event-source)</procedure>

Implements al_unregister_event_source.

<procedure>(event-queue-empty? event-queue)</procedure>

Implements al_is_event_queue_empty.

<procedure>(event-queue-next! event-queue event)</procedure>

Implements al_get_next_event.

<procedure>(event-queue-peek! event-queue event)</procedure>

Implements al_peek_next_event.

<procedure>(event-queue-drop-next! event-queue)</procedure>

Implements al_drop_next_event_queue.

<procedure>(event-queue-flush! event-queue)</procedure>

Implements al_drop_next_event.

<procedure>(event-queue-wait! event-queue event)</procedure>

Implements al_wait_for_event.

<procedure>(event-queue-timed-wait! event-queue event float)</procedure>

Implements al_wait_for_event_timed.

<procedure>(event-queue-wait-until! event-queue event timeout)</procedure>

Implements al_wait_for_event_until.

=== Errors

<procedure>(error-number)</procedure>

Implements al_get_errno.

<procedure>(error-number-set!)</procedure>

Implements al_set_errno.

=== File Operations

<procedure>(make-temp-file* (string template) ((c-pointer path) out_path))</procedure>

Implements al_make_temp_file.

<procedure>(make-temp-file (string template) ((c-pointer path) out_path))</procedure>

Implements al_make_temp_file, with (free&close-file!) declared as a finalizer.

<procedure>(file-open* (string path) (string mode))</procedure>

Implements al_fopen.

<procedure>(file-open (string path) (string mode))</procedure>

Implements al_fopen, with (free&close-file!) declared as a finalizer.

<procedure>(file-open-fd* (integer file-descriptor) (string mode))</procedure>

Implements al_fopen_fd.

<procedure>(file-open-fd (integer file-descriptor) (string mode))</procedure>

Implements al_fopen_fd, with (free&close-file!) declared as a finalizer.

<procedure>(free&close-file! file)</procedure>

Closes a file with (file-close!), then uses (free!) to clear the file struct from memory.

<procedure>(file-close! file)</procedure>

Implements al_fclose.

<procedure>(file-read! file blob (integer size))</procedure>

Implements al_fread.

<procedure>(file-write! file blob (integer size))</procedure>

Implements al_fwrite.

<procedure>(file-tell file)</procedure.

Implements al_ftell.

<procedure>(file-seek! file (integer offset) (integer whence))</procedure>

Implements al_fseek.

<procedure>(file-eof? file)</procedure>

Implements al_feof.

<procedure>(file-error? file)</procedure>

Implements al_ferror.

<procedure>(file-clear-error! file)</procedure>

Implements al_fclearerr.

<procedure>(file-unget-chars! file (integer count))</procedure>

Implements al_fungetc.

<procedure>(file-size file)</procedure>

Implements al_fsize.

<procedure>(file-get-char! file)</procedure>

Implements al_fgetc.

<procedure>(file-put-char! file (integer character))</procedure>

Implements al_fputc.

<procedure>(file-read-16le! file)</procedure>

Implements al_fread16le.

<procedure>(file-read-16be! file)</procedure>

Implements al_fread16be.

<procedure>(file-write-16le! file integer)</procedure>

Implements al_fwrite16le.

<procedure>(file-read-32le! file)</procedure>

Implements al_fread32le.

<procedure>(file-read-32be! file)</procedure>

Implements al_fread32be.

<procedure>(file-write-32le! file integer)</procedure>

Implements al_fwrite32le.

<procedure>(file-write-32be! file integer)</procedure>

Implements al_fwrite32be.

<procedure>(file-get-string! file blob (integer max))</procedure>

Implements al_fgets.

<procedure>(file-get-utf-string*! file)</procedure>

Implements al_get_ustr.

<procedure>(file-get-utf-string! file)</procedure>

Implements al_get_ustr, with (free-utf-string!) declared as a finalizer.

<procedure>(file-put-string! file string)</procedure>

Implements al_fputs.

<procedure>(file-userdata file)</procedure>

Implements al_get_file_userdata.

<procedure>(new-file-interface-set! file-interface)</procedure>

Implements al_set_new_file_interface.

<procedure>(file-interface-open* file-interface (string path) (string mode))</procedure>

Implements al_fopen_interface.

<procedure>(file-interface-open file-interface (string path) (string mode))</procedure>

Implements al_fopen_interface, with (free&close-file!) declared as a finalizer.

<procedure>(make-file-handle* file-interface (c-pointer userdata))</procedure>

Implements al_create_file_handle.

<procedure>(make-file-handle file-interface (c-pointer userdata))</procedure>

Implements al_create_file_handle, with (free&close-file!) decalred as a finalizer.

=== File System Hooks

<procedure>(make-fs-entry* string)</procedure>

Implements al_create_fs_entry.

<procedure>(make-fs-entry string)</procedure>

Implements al_create_fs_entry, with (free-fs-entry!) declared as a finalizer.

<procedure>(free-fs-entry! fs-entry)</procedure>

Implements al_destroy_fs_entry.

<procedure>(fs-entry-name fs-entry)</procedure>

Implements al_get_fs_entry_name.

<procedure>(fs-entry-update! fs-entry)</procedure>

Implements al_update_fs_entry.

<procedure>(fs-entry-mode fs-entry)</procedure>

Implements al_get_fs_entry_mode.

<procedure>(fs-entry-atime fs-entry)</procedure>

Implements al_get_fs_entry_atime.

<procedure>(fs-entry-mtime fs-entry)</procedure>

Implements al_get_fs_entry_mtime.

<procedure>(fs-entry-ctime fs-entry)</procedure>

Implements al_get_fs_entry_ctime.

<procedure>(fs-entry-size fs-entry)</procedure>

Implements al_get_fs_entry_size.

<procedure>(fs-entry-exists? fs-entry)</procedure>

Implements al_fs_entry_exists.

<procedure>(fs-entry-remove! fs-entry)</procedure>

Implements al_remove_fs_entry.

<procedure>(fs-entry-open fs-enty string)</procedure>

Implements al_open_fs_entry.

<procedure>(fs-entry-directory-open! fs-entry)</procedure>

Implements al_open_directory.

<procedure>(fs-entry-directory-read fs-entry)<procedure>

Implements al_read_directory.

<procedure>(fs-entry-directory-close! fs-entry)</procedure>

Implements al_close_directory.

<procedure>(current-directory)</procedure>

Implements al_get_current_directory.

<procedure>(change-directory string)</procedure>

Implements al_change_directory.

<procedure>(make-directory string)</procedure>

Implements al_make_directory.

<procedure>(filename-exists? string)</procedure>

Implements al_filename_exists.

<procedure>(filename-remove! string)</procedure>

Implements al_remove_filename.

<procedure>(new-file-interface)</procedure>

Implements al_get_new_file_interface.

<procedure>(current-fs-interface)</procedure>

Implements al_get_fs_interface.

<setter>(current-fs-interface-set!)</setter>

Implements al_set_fs_interface.

<setter>(standard-fs-interface-set!)</setter>

Implements al_set_standard_fs_interface.

=== Fixed Math

<procedure>(fix-to-rad integer)</procedure>

Implements al_fixtorad_r.

<procedure>(rad-to-fix integer)</procedure>

Implements al_radtofix_r.

<procedure>(fixed-sqrt integer)</procedure>

Implements al_fixsqrt.

<procedure>(fixed-hypot integer)</procedure>

Implements al_fixhypot.

<procedure>(fixed-atan integer)</procedure>

Implements al_fixatan.

<procedure>(fixed-atan2 integer)</procedure>

Implements al_fixatan2.

<procedure>(fixed-cos integer)</procedure>

Wraps _al_fix_cos_tbl.

<procedure>(fixed-tan integer)</procedure>

Wraps _al_fix_tan_tbl.

<procedure>(fixed-acos integer)</procedure>

Wraps _al_fix_acos_tbl.

=== Fonts

<procedure>(register-font-loader (string extension) (function font (string integer integer)))</procedure>

Implements al_register_font_loader.

<procedure>(load-bitmap-font* string)</procedure>

Implements al_load_bitmap_font.

<procedure>(load-bitmap-font string)</procedure>

Implements al_load_bitmap_font, with (free-font!) declared as a finalizer.

<procedure>(load-font* string (integer size) (integer flags))</procedure>

Implements al_load_font.

<procedure>(load-font string (integer size) (integer flags))</procedure>

Implements al_load_font, with (free-font!) declared as a finalizer.

<procedure>(make-font-from-bitmap* bitmap (integer n) (s32vector ranges))</procedure>

Implements al_grab_font_from_bitmap.

<procedure>(make-font-from-bitmap bitmap (integer n) (s32vector ranges))</procedure>

Implements al_grab_font_from_bitmap, with (free-font!) declared as a finalizer.

<procedure>(free-font! font)</procedure>

Implements al_destroy_font.

<procedure>(font-draw-utf (font f) (color c) (float x) (float y) (font-align flags) (utf-string ustr))</procedure>

Implements al_draw_ustr.

<procedure>(font-draw-string (font f) (color c) (float x) (float y) (font-align flags) (string text))</procedure>

Implements al_draw_text.

<procedure>(font-draw-justified-string (font f) (color c) (float x1) (float x2) (float y) (float diff) (font-align flags) (c-string text))</procedure>

Implements al_draw_justified_text.

<procedure>(font-draw-justified-utf-string (font f) (color c) (float x1) (float x2) (float y) (float diff)  (font-align flags) (utf-string text))</procedure>

Implements al_draw_justified_ustr.

<procedure>(font-width font string)</procedure>

Implements al_get_text_width.

<procedure>(font-utf-width font utf-string)</procedure>

Implements al_get_ustr_width.

<procedure>(font-line-height font)</procedure>

Implements al_get_font_line_height.

<procedure>(font-ascent font)</procedure>

Implements al_get_font_ascent.

<procedure>(font-descent font)</procedure>

Implements al_get_font_descent.

<procedure>(font-utf-dimensions (font f) (utf-string text))</procedure>

Returns a 4-element list consisting of the bounding box elements: x, y, width and height.

<procedure>(font-dimensions (font f) (string text))</procedure>

Returns a 4-element list consisting of the bounding box elements: x, y, width and height.

<procedure>(font-addon-install)</procedure>

Implements al_init_font_addon.

<procedure>(font-addon-uninstall)</procedure>

Implements al_shutdown_font_addon.

<procedure>(font-addon-version)</procedure>

Implements al_get_allegro_font_version.

=== Image Formats

<procedure>(image-addon-install)</procedure>

Implements al_init_image_addon.

<procedure>(image-addon-uninstall)</procedure>

Implements al_shutdown_image_addon.

<procedure>(image-addon-version)</procedure>

Implements al_get_allegro_image_version.

=== Joystick

<procedure>(joystick-addon-install)</procedure>

Implements al_install_joystick.

<procedure>(joystick-addon-uninstall)</procedure>

Implements al_uninstall_joystick.

<procedure>(joystick-addon-installed?)<procedure>

Implements al_is_joystick_installed.

<procedure>(joystick-addon-reconfigure)</procedure>

Implements al_reconfigure_joysticks.

<procedure>(joystick-event-source)<procedure>

Implements al_get_joystick_event_source.

<procedure>(joystick-count)</procedure>

Implements al_get_num_joysticks.

<procedure>(joystick-ref integer)</procedure>

Implements al_get_joystick.

<procedure>(joystick-release joystick)</procedure>

Implements al_release_joystick.

<procedure>(joystick-active? joystick)</procedure>

Implements al_get_joystick_active.

<procedure>(joystick-name joystick)</procedure>

Implements al_get_joystick_name.

<procedure>(joystick-axes-count joystick (integer stick))</procedure>

Implements al_get_joystick_num_axes.

<procedure>(joystick-button-count joystick)</procedure>

Implements al_get_joystick_num_buttons.

<procedure>(joystick-button-name joystick (integer button))</procedure>

Implements al_get_joystick_button_name.

<procedure>(joystick-state-init! joystick-state joystick)</procedure>

Implements al_get_joystick_state.

<procedure>(joystick-state-axis joystick-state (integer stick) (integer axis))</procedure>

Retrieves desired axis value for a particular stick; #f if either stick or axis is out of available bounds.

=== Keyboard

<procedure>(keyboard-addon-installed?)</procedure>

Implements al_is_keyboard_installed.

<procedure>(keyboard-addon-install)</procedure>

Implements al_install_keyboard.

<procedure>(keyboard-addon-uninstall)</procedure>

Implements al_uninstall_keyboard.

<procedure>(keycode->string key)</procedure>

Implements al_keycode_to_name. Not strictly necessary, since the enums are symbols which can easily be converted to strings.

<procedure>(keyboard-event-source)</procedure>

Implements al_get_keyboard_event_source.

<procedure>(keyboard-led-set! integer)</procedure>

Implements al_set_keyboard_leds.

<procedure>(keyboard-state-init! keyboard-state)</procedure>

Implements al_get_keyboard_state.

<procedure>(keyboard-state-key-down? keyboard-state key)</procedure>

Implements al_key_down.

<procedure>(keyboard-three-finger-flag?)</procedure>

Wraps _al_three_finger_flag.

<procedure>(keyboard-led-flag?)</procedure>

Wraps _al_key_led_flag.

=== Memory

<procedure>(memory-interface-set! memory-interface)</procedure>

Implements al_set_memory_interface.

<procedure>(malloc* integer)</procedure>

Implements al_malloc.

<procedure>(malloc integer)</procedure>

Implements al_malloc, with (free!) declared as a finalizer.

<procedure>(free! ptr)</procedure>

Implements al_free.

<procedure>(realloc* ptr integer)</procedure>

Implements al_realloc.

<procedure>(realloc ptr integer)</procedure>

Implements al_realloc, with (free!) declared as a finalizer.

<procedure>(calloc* integer integer)</procedure>

Implements al_calloc.

<procedure>(calloc integer integer)</procedure>

Implements al_calloc, with (free!) declared as a finalizer.

<procedure>(malloc/context* (int size) (int line) (string file) (string function))</procedure>

Implements al_malloc_with_context.

<procedure>(malloc/context (int size) (int line) (string file) (string function))</procedure>

Implements al_malloc_with_context, with (free/context!) declared as a finalizer.

<procedure>(free/context! ptr (int line) (string file) (string function))</procedure>

Implements al_free_with_context.

<procedure>(realloc/context* ptr (int size) (int line) (string file) (string function))</procedure>

Implements al_realloc_with_context.

<procedure>(realloc/context ptr (int size) (int line) (string file) (string function))</procedure>

Implements al_realloc_with_context, with (free/context!) declared as a finalizer.

<procedure>(calloc/context* (int count) (int size) (int line) (string file) (string function))</procedure>

Implements al_calloc_with_context.

<procedure>(calloc/context (int count) (int size) (int line) (string file) (string function))</procedure>

Implements al_calloc_with_context, with (free/context!) declared as a finalizer.

=== Memory Files

<procedure>(open-memfile* (c-pointer mem) (unsigned-integer size) (string mode))</procedure>

Implements al_open_memfile.

<procedure>(open-memfile (c-pointer mem) (unsigned-integer size) (string mode))</procedure>

Implements al_open_memfile, with (free&close-file!) declared as a finalizer.

<procedure>(memfile-version)</procedure>

Implements al_get_allegro_memfile_version.

=== Miscellaneous

<procedure>(combine-flags converter flags)</procedure>

For combining enum flags together, ie:

<enscript highlight="scheme">
(combine-flags display-flag->int '(windowed opengl resizable generate-expose-events))
</enscript>

<procedure>(make-id a b c d)</procedure>

Implements AL_ID.

<procedure>(run-main argc argv (function integer (integer (c-pointer c-string))))</procedure>

Implements al_run_main.

<procedure>(init-everything)</procedure>

Initializes all sub-systems.

<procedure>(init-symbol s)</procedure>

Initializes sub-systems by symbol-name. Valid symbols are: allegro, audio, font, image, joystick, keyboard, mouse, primitives, and ttf.

<procedure>(init-this arg)</procedure>

Initializes sub-systems either by a single symbol or by a list of symbols. Ie:

<enscript highlight="scheme">
(init-this (list 'allegro 'audio 'font 'image 'joystick 'keyboard 'mouse 'primitives 'ttf))
</enscript>

<procedure>(uninstall-everything)</procedure>

Attempts to uninitialize all loaded sub-systems.

<procedure>(uninstall-this arg)</procedure>

Attempts to uninitialize sub-systems by either a single symbol or by a list of symbols. Ie:

<enscript highlight="scheme">
(uninstall-this (list 'system 'audio 'font 'image 'joystick 'keyboard 'mouse 'primitives 'ttf))
</enscript>

=== Mouse

<procedure>(mouse-addon-installed?)</procedure>

Implements al_is_mouse_installed.

<procedure>(mouse-addon-install)</procedure>

Implements al_install_mouse.

<procedure>(mouse-addon-uninstall)</procedure>

Implements al_uninstall_mouse.

<procedure>(mouse-button-count)</procedure>

Implements al_get_mouse_num_buttons.

<procedure>(mouse-axes-count)</procedure>

Implements al_get_mouse_num_axes.

<procedure>(mouse-xy-set! display (integer x) (integer y))</procedure>

Implements al_set_mouse_xy.

<procedure>(mouse-z-set! display integer)</procedure>

Implements al_set_mouse_z.

<procedure>(mouse-w-set! display integer)</procedure>

Implements al_set_mouse_w.

<procedure>(mouse-event-source)</procedure>

Implements al_get_mouse_event_source.

<procedure>(mouse-state-init! mouse-state)</procedure.

Implements al_get_mouse_state.

<procedure>(mouse-state-button-down mouse-state (integer button))</procedure>

Implements al_mouse_button_down.

<procedure>(mouse-state-axis mouse-state (integer axis))</procedure>

Implements al_get_mouse_state_axis.

<procedure>(mouse-axis-set! (integer axis) (integer value))</procedure>

Implements al_set_mouse_axis.

<procedure>(make-cursor* (bitmap sprite) (integer xfocus) (integer yfocus))</procedure>

Implements al_create_mouse_cursor.

<procedure>(make-cursor (bitmap sprite) (integer xfocus) (integer yfocus))</procedure>

Implements al_create_mouse_cursor, with (free-cursor!) declared as a finalizer.

<procedure>(free-cursor! cursor)</procedure>

Implements al_destroy_mouse_cursor.

<procedure>(mouse-cursor-position)</procedure>

Returns a 2-element list consisting of the x and y position of the mouse cursor.

<procedure>(mouse-ungrab)</procedure>

Implements al_ungrab_mouse.

<procedure>(display-grab-mouse! display)</procedure>

Implements al_grab_mouse.

<procedure>(display-cursor-set! display mouse-cursor)</procedure>

Implements al_set_mouse_cursor.

<procedure>(display-hide-cursor! display)</procedure>

Implements al_hide_mouse_cursor.

<procedure>(display-system-mouse-cursor-set! display cursor-type)</procedure>

Implements al_set_system_mouse_cursor.

=== OpenGL

<procedure>(opengl-addon-version)</procedure>

Implements al_get_opengl_version.

<procedure>(opengl-extension-exists? string)</procedure>

Implements al_have_opengl_extension.

<procedure>(opengl-proc-address string)</procedure>

Implements al_get_opengl_proc_address.

<procedure>(opengl-texture bitmap)</procedure>

Implements al_get_opengl_texture.

<procedure>(opengl-remove-fbo! bitmap)</procedure>

Implements al_remove_opengl_fbo.

<procedure>(opengl-fbo bitmap)</procedure>

Implements al_get_opengl_fbo.

<procedure>(opengl-texture-size bitmap)</procedure>

Returns a 2-element list of the width and height of the opengl texture for the given bitmap.

<procedure>(opengl-texture-position bitmap)</procedure>

Returns a 2-element list of the u,v position of the opengl texture for the given bitmap.

<procedure>(opengl-context-set! display)</procedure>

Implements al_set_current_opengl_context.

<procedure>(opengl-variant)</procedure>

Implements al_get_opengl_variant.

=== Paths

<procedure>(make-path* string)</procedure>

Implements al_create_path.

<procedure>(make-path string)<procedure>

Implements al_create_path, with (free-path!) declared as a finalizer.

<procedure>(make-path-for-directory* string)</procedure>

Implements al_create_path_for_directory.

<procedure>(make-path-for-directory string)</procedure>

Implements al_create_path_for_directory, with (free-path!) declared as a finalizer.

<procedure>(free-path! path)</procedure>

Implements al_destroy_path.

<procedure>(path->string path (char separator))</procedure>

Implements al_path_cstr.

<procedure>(path-component-count path)</procedure>

Implements al_get_path_num_components.

<procedure>(path-component path integer)</procedure>

Implements al_get_path_compoenent.

<setter>(path-component-set! path integer string)</setter>

Implements al_replace_path_component.

<procedure>(path-component-remove! path integer)</procedure>

Implements al_remove_path_component.

<procedure>(path-component-insert! path integer string)</procedure>

Implements al_insert_path_component.

<procedure>(path-clone path)</procedure>

Implements al_clone_path.

<procedure>(path-tail path)</procedure>

Implements al_get_path_tail.

<procedure>(path-drop-tail! path)</procedure>

Implements al_drop_path_tail.

<procedure>(path-append! path string)</procedure>

Implements al_append_path_component.

<procedure>(path-join! path path)</procedure>

Implements al_join_paths.

<procedure>(path-rebase! path path)</procedure>

Implements al_rebase_path.

<procedure>(path-drive path)</procedure>

Implements al_get_path_drive.

<setter>(path-drive-set! path string)</setter>

Implements al_set_path_drive.

<procedure>(path-filename path)</procedure>

Implements al_get_path_filename.

<setter>(path-filename-set! path string)</setter>

Implements al_set_path_filename.

<procedure>(path-extension path)</procedure>

Implements al_get_path_extension.

<setter>(path-extension-set! path string)</setter>

Implements al_set_path_extension.

<procedure>(path-basename path)</procedure>

Implements al_get_path_basename.

<procedure>(path-make-canonical! path)</procedure>

Implements al_make_path_canonical.

=== PhysicsFS

See also: the [[physfs]] egg.

<procedure>(enable-physfs-file-interface)</procedure>

Implements al_set_physfs_file_interface.

<procedure>(physfs-addon-version)</procedure>

Implements al_get_allegro_physfs_version.

=== Primitives

<procedure>(primitives-addon-version)</primitives>

Implements al_get_allegro_primitives_version.

<procedure>(primitives-addon-install)</primitives>

Implements al_init_primitives_addon.

<procedure>(primitives-addon-uninstall)</primitives>

Implements al_shutdown_primitives_addon.

<procedure>(make-vertex-declaration* vertex-element integer)</procedure>

Implements al_create_vertex_decl.

<procedure>(make-vertex-declaration vertex-element integer)</procedure>

Implements al_create_vertex_decl, with (free-vertex-declaration!) declared as a finalizer.

<procedure>(free-vertex-declaration! vertex-declaration)</procedure>

Implements al_destroy_vertex_decl.

<procedure>(draw-primitive (c-pointer vertices) vertex-declaration bitmap (integer start) (integer end) primitive-type)</procedure>

Implements al_draw_prim.

<procedure>(draw-indexed-primitive (c-pointer vertices) vertex-declaration bitmap (s32-vector indices) (integer count) primitive-type)</procedure>

Implements al_draw_indexed_prim.

<procedure>(draw-soft-triangle (vertex v1) (vertex v2) (vertex v3) (uintptr state)
                                                 ((function void (uintptr vertex vertex vertex)) init)
                                                 ((function void (uintptr int int int int)) first)
                                                 ((function void (uintptr int)) step)
                                                 ((function void (uintptr int int int)) draw))</procedure>

Implements al_draw_soft_triangle.

<procedure>(draw-soft-line (vertex v1) (vertex v2) (uintptr state)
                                              ((function void (uintptr int int vertex vertex)) first)
                                              ((function void (uintptr int)) step)
                                              ((function void (uintptr int int)) draw))</procedure>

Implements al_draw_soft_line.

<procedure>(draw-line (float x1) (float y1) (float x2) (float y2) (color c) (float thickness))</procedure>

Implements al_draw_line.

<procedure>(draw-triangle (float x1) (float y1) (float x2) (float y2) (float x3) (float y3) (color c) (float thickness))</procedure>

Implements al_draw_triangle.

<procedure>(draw-rectangle (float x1) (float y1) (float x2) (float y2) (color c) (float thickness))</procedure>

Implements al_draw_rectangle.

<procedure>(draw-rounded-rectangle (float x1) (float y1) (float x2) (float y2) (float rx) (float ry) (color c) (float thickness))</procedure>

Implements al_draw_rounded_rectangle.

<procedure>(draw-circle (float cx) (float cy) (float r) (color c) (float thickness))</procedure>

Implements al_draw_circle.

<procedure>(draw-ellipse (float cx) (float cy) (float rx) (float ry) (color c) (float thickness))</procedure>

Implements al_draw_ellipse.

<procedure>(draw-arc (float cx) (float cy) (float r) (float start_theta) (float delta_theta) (color c) (float thickness))</procedure>

Implements al_draw_arc.

<procedure>(draw-spline (f32vector points) (color c) (float thickness))</procedure>

Implements al_draw_spline.

<procedure>(draw-ribbon (f32vector points) (integer32 stride) (color c) (float thickness) (integer32 num_segments))</procedure>

Implements al_draw_ribbon.

<procedure>(draw-triangle/fill (float x1) (float y1) (float x2) (float y2) (float x3) (float y3) (color c))</procedure>

Implements al_draw_filled_triangle.

<procedure>(draw-rectangle/fill (float x1) (float y1) (float x2) (float y2) (color c))</procedure>

Implements al_draw_filled_rectangle.

<procedure>(draw-rounded-rectangle/fill (float x1) (float y1) (float x2) (float y2) (float rx) (float ry) (color c))</procedure>

Implements al_draw_filled_rounded_rectangle.

<procedure>(draw-circle/fill (float cx) (float cy) (float r) (color c))</procedure>

Implements al_draw_filled_circle.

<procedure>(draw-ellipse/fill (float cx) (float cy) (float rx) (float ry) (color c))</procedure>

Implements al_draw_filled_ellipse.

<procedure>(calculate-arc (integer32 stride) (float cx) (float cy) (float rx) (float ry) (float start_theta) (float delta_theta) (float thickness) (integer32 num_segments))</procedure>

Implements al_calculate_arc.

<procedure>(calculate-spline (integer32 stride) (f32vector points) (float thickness) (int num_segments))</procedure>

Implements al_calculate_spline.

<procedure>(calculate-ribbon (integer32 dest_stride) ((const f32vector) points) (integer32 points_stride) (float thickness) (integer32 num_segments))</procedure>

Implements al_calculate_ribbon.

=== System

<procedure>(init)</procedure>

Implements al_init.

<procedure>(inhibit-screensaver bool)</procedure>

Implements al_inhibit_screensaver.

<procedure>(org-name)</procedure>

Implements al_get_org_name.

<setter>(org-name-set! string)</setter>

Implements al_set_org_name.

<procedure>(app-name)</procedure>

Implements al_get_app_name.

<setter>(app-name-set! string)</procedure>

Implements al_set_app_name.

<procedure>(system-addon-uninstall)</procedure>

Implements al_uninstall_system.

<procedure>(system-addon-installed?)</procedure>

Implements al_is_system_installed.

<procedure>(system-driver)</procedure>

Implements al_get_system_driver.

<procedure>(system-config)</procedure>

Implements al_get_system_config.

<procedure>(standard-path system-path)</procedure>

Implements al_get_standard_path.

=== Threads

WARNING: Untested, may not interact well with Chicken.

Please, please tell me about your successes and workarounds. I'll fix the egg as called for.

<procedure>(make-thread* (function c-pointer (thread c-pointer)) c-pointer)</procedure>

Implements al_create_thread.

<procedure>(make-thread (function c-pointer (thread c-pointer)) c-pointer)</procedure>

Implements al_create_thread, with (free-thread!) declared as a finalizer.

<procedure>(free-thread! thread)</procedure>

Implements al_destroy_thread.

<proceudre>(run-detached-thread (function c-pointer (c-pointer)) c-pointer)</procedure>

Implements al_run_detached_thread.

<procedure>(thread-start! thread)</procedure>

Implements al_start_thread.

<procedure>(thread-join! thread ((c-pointer c-pointer) ret_value))</procedure>

Implements al_join_thread.

<procedure>(thread-should-stop? thread)</procedure>

Implements al_get_thread_should_stop.

<setter>(thread-should-stop-set! thread)</setter>

Implements al_set_thread_should_stop.

<procedure>(make-mutex*)</procedure>

Implements al_create_mutex.

<procedure>(make-mutex)</procedure>

Implements al_create_mutex, with (free-mutex!) declared as a finalizer.

<procedure>(free-mutex! mutex)</procedure>

Implements al_destroy_mutex.

<procedure>(make-mutex-recursive*)</procedure>

Implements al_create_mutex_recursive.

<procedure>(make-mutex-recursive)</procedure>

Implements al_create_mutex_recursive, with (free-mutex!) declared as a finalizer.

<procedure>(mutex-lock! mutex)</procedure>

Implements al_lock_mutex.

<procedure>(mutex-unlock! mutex)</procedure>

Implements al_unlock_mutex.

<procedure>(make-condition*)</procedure>

Implements al_create_cond.

<procedure>(make-condition)</procedure>

Implements al_create_cond, with (free-condition!) declared as a finalizer.

<procedure>(free-condition! condition)</procedure>

Implements al_destroy_cond.

<procedure>(condition-wait condition mutex)</procedure>

Implements al_wait_cond.

<procedure>(condition-wait-until condition mutex timeout)</procedure>

Implements al_wait_cond_until.

<procedure>(condition-broadcast condition)</procedure>

Implements al_broadcast_cond.

<procedure>(condition-signal condition)</procedure>

Implements al_signal_cond.

=== Thread Local Storage

<procedure>(state-store! state state-flag)</procedure>

Implements al_store_state.

<procedure>(state-restore state)</procedure>

Implements al_restore_state.

=== Time

<procedure>(current-time)</procedure>

Implements al_get_time.

<procedure>(rest double)</procedure>

Implements al_rest.

<procedure>(timeout-init! timeout double)</procedure>

Implements al_init_timeout.

=== Timer

<procedure>(make-timer* double)</procedure>

Implements al_create_timer.

<procedure>(make-timer double)</procedure>

Implements al_create_timer, with (free-timer!) declared as a finalizer.

<procedure>(free-timer! timer)</procedure>

Implements al_destroy_timer.

<procedure>(usec->sec double)</procedure>

Implements ALLEGRO_USECS_TO_SECS.

<procedure>(msec->sec double)</procedure>

Implements ALLEGRO_MSECS_TO_SECS.

<procedure>(bps->sec double)</procedure>

Implements ALLEGRO_BPS_TO_SECS.

<procedure>(bpm->sec double)</procedure>

Implements ALLEGRO_BPM_TO_SECS.

<procedure>(timer-start! timer)</procedure>

Implements al_start_timer.

<procedure>(timer-stop! timer)</procedure>

Implements al_stop_timer.

<procedure>(timer-started? timer)</procedure>

Implements al_get_timer_started.

<procedure>(timer-speed timer)</procedure>

Implements al_get_timer_speed.

<setter>(timer-speed-set! timer double)</procedure>

Implements al_set_timer_speed.

<procedure>(timer-count timer)</procedure>

Implements al_get_timer_count.

<setter>(timer-count-set! timer integer)</procedure>

Implements al_set_timer_count.

<procedure>(timer-count-add! timer integer)</procedure>

Implements al_add_timer_count.

<procedure>(timer-source timer)</procedure>

Implements al_get_timer_event_source.

=== Transformations

<procedure>(transform-use transform)</procedure>

Implements al_use_transform.

<procedure>(transform-copy! transform transform)</procedure>

Implements al_copy_transform.

<procedure>(transform-identity! transform)</procedure>

Implements al_identity_transform.

<procedure>(transform-build! transform (float x) (float y) (float sx) (float sy) (float theta))</procedure>

Implements al_build_transform.

<procedure>(transform-translate! transform (float x) (float y))</procedure>

Implements al_translate_transform.

<procedure>(transform-scale! transform (float sx) (float sy))</procedure>

Implements al_scale_transform.

<procedure>(transform-coordinates transform (float x) (float y))</procedure>

Implements al_transform_coordinates; returns a 2-element list of the transformed coordinate pair.

<procedure>(transform-compose! transform transform)</procedure>

Implements al_compose_transform.

<procedure>(transform-invert! transform)</procedure>

Implements al_invert_transform.

<procedure>(transform-check-inverse transform float)</procedure>

Implements al_check_inverse.

<procedure>(current-transform)</procedure>

Implements al_get_current_transform.

=== True Type Font Support

<procedure>(load-ttf* (string filename) (integer size) (integer flags))</procedure>

Implements al_load_ttf_font.

<procedure>(load-ttf (string filename) (integer size) (integer flags))</procedure>

Implements al_load_ttf_font, with (free-font!) declared as a finalizer.

<procedure>(load-ttf-from-file* (file f) (string filename) (integer size) (integer flags))</procedure>

Implements al_load_ttf_font_f.

<procedure>(load-ttf-from-file (file f) (string filename) (integer size) (integer flags))</procedure>

Implements al_load_ttf_font_f, with (free-font!) declared as a finalizer.

<procedure>(ttf-addon-install)</procedure>

Implements al_init_ttf_addon.

<procedure>(ttf-addon-uninstall)</procedure>

Implements al_shutdown_ttf_addon.

<procedure>(ttf-addon-version)</procedure>

Implements al_get_allegro_ttf_version.

=== UTF Strings

<procedure>(make-utf-string* string)</procedure>

Implements al_ustr_new.

<procedure>(make-utf-string string)</procedure>

Implements al_ustr_new, with (free-utf-string!) declared as a finalizer.

<procedure>(make-utf-string-from-buffer* blob)</procedure>

Given a blob, produces a new utf-string.

<procedure>(make-utf-string-from-buffer blob)</procedure>

Given a blob, produces a new utf-string, with (free-utf-string!) declared as a finalizer.

<procedure>(free-utf-string! utf-string)</procedure>

Implements al_ustr_free.

<procedure>(utf->string utf-string)</procedure>

Implements al_cstr.

<procedure>(utf->buffer! utf-string blob)</procedure>

Implements al_ustr_to_buffer.

<procedure>(utf->string-copy utf-string)</procedure>

Implements al_cstr_dup.

<procedure>(utf-copy* utf-string)</procedure>

Implements al_ustr_dup.

<procedure>(utf-copy utf-string)</procedure>

Implements al_ustr_dup, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-substring* utf-string (integer start) (integer end))</procedure>

Implements al_ustr_dup_substr.

<procedure>(utf-substring utf-string (integer start) (integer end))</procedure>

Implements al_ustr_dup_substr, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-empty-string)</procedure>

Implements al_ustr_empty_string.

<procedure>(make-utf-null-string*)</procedure>

Makes an empty utf-string struct, where the string pointer is unset.

<procedure>(make-utf-null-string)</procedure>

Makes an empty utf-string struct, where the string pointer is unset, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-reference-cstr* string)</procedure>

Implements al_ref_cstr.

<procedure>(utf-reference-cstr string)</procedure>

Implements al_ref_cstr, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-reference-buffer* blob)</procedure>

Implements al_ref_buffer.

<procedure>(utf-reference-buffer blob)</procedure>

Implements al_ref_buffer, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-reference-utf-string* utf-string (integer start) (integer end))</procedure>

Implements al_ref_ustr.

<procedure>(utf-reference-utf-string utf-string (integer start) (integer end))</procedure>

Implements al_ref_ustr, with (free-utf-string!) declared as a finalizer.

<procedure>(utf-size utf-string)</procedure>

Implements al_ustr_size.

<procedure>(utf-length utf-string)</procedure>

Implements al_ustr_length.

<procedure>(utf-offset utf-string integer)</procedure>

Implements al_ustr_offset.

<procedure>(utf-next utf-string integer)</procedure>

Implements al_ustr_next, modified to return #f at the end of the string.

<procedure>(utf-previous utf-string integer)</procedure>

Implements al_ustr_prev, modified to return #f at the end of the string.

<procedure>(utf-get utf-string integer)</procedure>

Implements al_ustr_get.

<procedure>(utf-get-next utf-string integer)</procedure>

Returns a 2-element list consisting of the next code and its position, or #f if at the end of the string.

<procedure>(utf-get-prev utf-string integer)</procedure>

Returns a 2-element list consisting of the previous code and its position, or #f if at the start of the string.

<procedure>(utf-remove-char! utf-string integer)</procedure>

Implements al_ustr_remove_chr.

<procedure>(utf-remove-range! utf-string (integer start) (integer end))</procedure>

Implements al_ustr_remove_range.

<procedure>(utf-truncate! utf-string integer)</procedure>

Implements al_ustr_truncate.

<procedure>(utf-ltrim! utf-string)</procedure>

Implements al_ustr_ltrim_ws.

<procedure>(utf-rtrim! utf-string)</procedure>

Implements al_ustr_rtrim_ws.

<procedure>(utf-trim! utf-string)</procedure>

Implements al_ustr_trim_ws.

<procedure>(utf-assign! utf-string utf-string)</procedure>

Implements al_ustr_assign.

<procedure>(utf-assign-substring! utf-string utf-string (integer start) (integer end))</procedure>

Implements al_ustr_assign_substr.

<procedure>(utf-assign-string! utf-string string)</procedure>

Implements al_ustr_assign_cstr.

<procedure>(utf-set-char! utf-string (integer pos) (integer char))</procedure>

Implements al_ustr_set_chr.

<procedure>(utf-replace-range! utf-string (integer start) (integer end) utf-string)</procedure>

Implements al_ustr_replace_range.

<procedure>(utf-find utf-string (integer start) utf-string)</procedure>

Implements al_ustr_find_str.

<procedure>(utf-find-string utf-string (integer start) string)</procedure>

Implements al_ustr_find_cstr.

<procedure>(utf-find-char utf-string (integer start) (integer char))</procedure>

Implements al_ustr_find_chr.

<procedure>(utf-find-set utf-string (integer start) utf-string)</procedure>

Implements al_ustr_find_set.

<procedure>(utf-find-set-string utf-string integer string)</procedure>

Implements al_ustr_find_set_cstr.

<procedure>(utf-find-cset utf-string integer utf-string)</procedure>

Implements al_ustr_find_cset.

<procedure>(utf-find-cset-string utf-string integer string)</procedure>

Implements al_ustr_find_set_cstr.

<procedure>(utf-rfind utf-string integer utf-string)</procedure>

Implements al_ustr_rfind_str.

<procedure>(utf-rfind-char utf-string integer (integer char))</procedure>

Implements al_ustr_rfind_char.

<procedure>(utf-rfind-string utf-string integer string)</procedure>

Implements al_ustr_rfind_cstr.

<procedure>(utf-find&replace! utf-string integer utf-string utf-string)</procedure>

Implements al_ustr_find_replace.

<procedure>(utf-find&replace-string! utf-string integer string string)</procedure>

Implements al_ustr_find_replace_cstr.

<procedure>(utf-equal? utf-string utf-string)</procedure>

Implements al_ustr_equal.

<procedure>(utf-compare utf-string utf-string)</procedure>

Implements al_ustr_compare.

<procedure>(utf-ncompare utf-string utf-string integer)</procedure>

Implements al_ustr_ncompare.

<procedure>(utf-prefix? utf-string utf-string)</procedure>

Implements al_ustr_has_prefix.

<procedure>(utf-prefix-string? utf-string string)</procedure>

Implements al_ustr_has_prefix_cstr.

<procedure>(utf-suffix? utf-string utf-string)</procedure>

Implements al_ustr_has_prefix.

<procedure>(utf-suffix-string? utf-string string)</procedure>

Implements al_ustr_has_suffix_cstr.

<procedure>(utf8-width integer32)</procedure>

Implements al_utf8_width.

<procedure>(utf8-encode! blob integer32)</procedure>

Implements al_utf8_encode.

<procedure>(utf-string-utf16-size utf-string)</procedure>

Implements al_ustr_size_utf16.

<procedure>(utf-string-utf16-encode utf-string blob integer)</procedure>

Implements al_ustr_encode_utf16.

<procedure>(utf16-width integer)</procedure>

Implements al_utf16_width.

<procedure>(utf16-encode u16vector integer32)</procedure>

Implements al_utf16_encode.

=== Windows

<procedure>(windows-window-handle)</procedure>

Implements al_get_win_window_handle.

=== C Utilities

Found in the allegro-c-util module.

==== (make-c-string-list obj)

The obj parameter can either be a single string or list of strings. Returns a managed pointer to a NULL-terminated (char **) list suitable for use with GL extension methods.

=== GL Extensions

The GL Extensions for OpenGL 3/4 support in Allegro have been mapped with bind, and thus aren't particularly 'schemey'. However, as they're intended primarily for advanced users it should be preferable in order to search for familiar functionalities.

Because the Egg is so large it needed to be separated, as such the extensions can be found in the allegro-glext module.

==== GL Constants

* gl:1PASS_EXT
* gl:1PASS_SGIS
* gl:2PASS_0_EXT
* gl:2PASS_0_SGIS
* gl:2PASS_1_EXT
* gl:2PASS_1_SGIS
* gl:2X_BIT_ATI
* gl:422_AVERAGE_EXT
* gl:422_EXT
* gl:422_REV_AVERAGE_EXT
* gl:422_REV_EXT
* gl:4PASS_0_EXT
* gl:4PASS_0_SGIS
* gl:4PASS_1_EXT
* gl:4PASS_1_SGIS
* gl:4PASS_2_EXT
* gl:4PASS_2_SGIS
* gl:4PASS_3_EXT
* gl:4PASS_3_SGIS
* gl:4X_BIT_ATI
* gl:8X_BIT_ATI
* gl:ABGR_EXT
* gl:ACTIVE_ATTRIBUTE_MAX_LENGTH
* gl:ACTIVE_ATTRIBUTES
* gl:ACTIVE_PROGRAM_EXT
* gl:ACTIVE_STENCIL_FACE_EXT
* gl:ACTIVE_SUBROUTINE_MAX_LENGTH
* gl:ACTIVE_SUBROUTINES
* gl:ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
* gl:ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
* gl:ACTIVE_SUBROUTINE_UNIFORMS
* gl:ACTIVE_TEXTURE
* gl:ACTIVE_TEXTURE_ARB
* gl:ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
* gl:ACTIVE_UNIFORM_BLOCKS
* gl:ACTIVE_UNIFORM_MAX_LENGTH
* gl:ACTIVE_UNIFORMS
* gl:ACTIVE_VARYING_MAX_LENGTH_NV
* gl:ACTIVE_VARYINGS_NV
* gl:ACTIVE_VERTEX_UNITS_ARB
* gl:ADD_ATI
* gl:ADD_SIGNED
* gl:ADD_SIGNED_ARB
* gl:ADD_SIGNED_EXT
* gl:ALIASED_LINE_WIDTH_RANGE
* gl:ALIASED_POINT_SIZE_RANGE
* gl:ALL_COMPLETED_NV
* gl:ALLOW_DRAW_FRG_HINT_PGI
* gl:ALLOW_DRAW_MEM_HINT_PGI
* gl:ALLOW_DRAW_OBJ_HINT_PGI
* gl:ALLOW_DRAW_WIN_HINT_PGI
* gl:ALPHA12_EXT
* gl:ALPHA16_EXT
* gl:ALPHA16F_ARB
* gl:ALPHA16I_EXT
* gl:ALPHA16_SNORM
* gl:ALPHA16UI_EXT
* gl:ALPHA32F_ARB
* gl:ALPHA32I_EXT
* gl:ALPHA32UI_EXT
* gl:ALPHA4_EXT
* gl:ALPHA8_EXT
* gl:ALPHA8I_EXT
* gl:ALPHA8_SNORM
* gl:ALPHA8UI_EXT
* gl:ALPHA_FLOAT16_APPLE
* gl:ALPHA_FLOAT16_ATI
* gl:ALPHA_FLOAT32_APPLE
* gl:ALPHA_FLOAT32_ATI
* gl:ALPHA_INTEGER
* gl:ALPHA_INTEGER_EXT
* gl:ALPHA_MAX_CLAMP_INGR
* gl:ALPHA_MAX_SGIX
* gl:ALPHA_MIN_CLAMP_INGR
* gl:ALPHA_MIN_SGIX
* gl:ALPHA_SNORM
* gl:ALREADY_SIGNALED
* gl:ALWAYS_FAST_HINT_PGI
* gl:ALWAYS_SOFT_HINT_PGI
* gl:ANY_SAMPLES_PASSED
* gl:ARRAY_BUFFER
* gl:ARRAY_BUFFER_ARB
* gl:ARRAY_BUFFER_BINDING
* gl:ARRAY_BUFFER_BINDING_ARB
* gl:ARRAY_ELEMENT_LOCK_COUNT_EXT
* gl:ARRAY_ELEMENT_LOCK_FIRST_EXT
* gl:ARRAY_OBJECT_BUFFER_ATI
* gl:ARRAY_OBJECT_OFFSET_ATI
* gl:ASYNC_DRAW_PIXELS_SGIX
* gl:ASYNC_HISTOGRAM_SGIX
* gl:ASYNC_MARKER_SGIX
* gl:ASYNC_READ_PIXELS_SGIX
* gl:ASYNC_TEX_IMAGE_SGIX
* gl:ATTACHED_SHADERS
* gl:ATTENUATION_EXT
* gl:ATTRIB_ARRAY_POINTER_NV
* gl:ATTRIB_ARRAY_SIZE_NV
* gl:ATTRIB_ARRAY_STRIDE_NV
* gl:ATTRIB_ARRAY_TYPE_NV
* gl:AUX_DEPTH_STENCIL_APPLE
* gl:AVERAGE_EXT
* gl:AVERAGE_HP
* gl:BACK_NORMALS_HINT_PGI
* gl:BACK_PRIMARY_COLOR_NV
* gl:BACK_SECONDARY_COLOR_NV
* gl:BGR
* gl:BGRA
* gl:BGRA_EXT
* gl:BGRA_INTEGER
* gl:BGRA_INTEGER_EXT
* gl:BGR_EXT
* gl:BGR_INTEGER
* gl:BGR_INTEGER_EXT
* gl:BIAS_BIT_ATI
* gl:BIAS_BY_NEGATIVE_ONE_HALF_NV
* gl:BINORMAL_ARRAY_EXT
* gl:BINORMAL_ARRAY_POINTER_EXT
* gl:BINORMAL_ARRAY_STRIDE_EXT
* gl:BINORMAL_ARRAY_TYPE_EXT
* gl:BLEND_COLOR
* gl:BLEND_COLOR_EXT
* gl:BLEND_DST_ALPHA
* gl:BLEND_DST_ALPHA_EXT
* gl:BLEND_DST_RGB
* gl:BLEND_DST_RGB_EXT
* gl:BLEND_EQUATION
* gl:BLEND_EQUATION_ALPHA
* gl:BLEND_EQUATION_ALPHA_EXT
* gl:BLEND_EQUATION_EXT
* gl:BLEND_EQUATION_RGB_EXT
* gl:BLEND_SRC_ALPHA
* gl:BLEND_SRC_ALPHA_EXT
* gl:BLEND_SRC_RGB
* gl:BLEND_SRC_RGB_EXT
* gl:BLUE_BIT_ATI
* gl:BLUE_INTEGER
* gl:BLUE_INTEGER_EXT
* gl:BLUE_MAX_CLAMP_INGR
* gl:BLUE_MIN_CLAMP_INGR
* gl:BOOL
* gl:BOOL_ARB
* gl:BOOL_VEC2
* gl:BOOL_VEC2_ARB
* gl:BOOL_VEC3
* gl:BOOL_VEC3_ARB
* gl:BOOL_VEC4
* gl:BOOL_VEC4_ARB
* gl:BUFFER_ACCESS
* gl:BUFFER_ACCESS_ARB
* gl:BUFFER_FLUSHING_UNMAP_APPLE
* gl:BUFFER_GPU_ADDRESS_NV
* gl:BUFFER_MAPPED
* gl:BUFFER_MAPPED_ARB
* gl:BUFFER_MAP_POINTER
* gl:BUFFER_MAP_POINTER_ARB
* gl:BUFFER_OBJECT_APPLE
* gl:BUFFER_SERIALIZED_MODIFY_APPLE
* gl:BUFFER_SIZE
* gl:BUFFER_SIZE_ARB
* gl:BUFFER_USAGE
* gl:BUFFER_USAGE_ARB
* gl:BUMP_ENVMAP_ATI
* gl:BUMP_NUM_TEX_UNITS_ATI
* gl:BUMP_ROT_MATRIX_ATI
* gl:BUMP_ROT_MATRIX_SIZE_ATI
* gl:BUMP_TARGET_ATI
* gl:BUMP_TEX_UNITS_ATI
* gl:CALLIGRAPHIC_FRAGMENT_SGIX
* gl:CLAMP_FRAGMENT_COLOR
* gl:CLAMP_FRAGMENT_COLOR_ARB
* gl:CLAMP_READ_COLOR
* gl:CLAMP_READ_COLOR_ARB
* gl:CLAMP_TO_BORDER
* gl:CLAMP_TO_BORDER_ARB
* gl:CLAMP_TO_BORDER_SGIS
* gl:CLAMP_TO_EDGE
* gl:CLAMP_TO_EDGE_SGIS
* gl:CLAMP_VERTEX_COLOR
* gl:CLAMP_VERTEX_COLOR_ARB
* gl:CLIENT_ACTIVE_TEXTURE
* gl:CLIENT_ACTIVE_TEXTURE_ARB
* gl:CLIP_DISTANCE_NV
* gl:CLIP_FAR_HINT_PGI
* gl:CLIP_NEAR_HINT_PGI
* gl:CLIP_VOLUME_CLIPPING_HINT_EXT
* gl:CMYKA_EXT
* gl:CMYK_EXT
* gl:CND0_ATI
* gl:CND_ATI
* gl:COLOR3_BIT_PGI
* gl:COLOR4_BIT_PGI
* gl:COLOR_ALPHA_PAIRING_ATI
* gl:COLOR_ARRAY_ADDRESS_NV
* gl:COLOR_ARRAY_BUFFER_BINDING
* gl:COLOR_ARRAY_BUFFER_BINDING_ARB
* gl:COLOR_ARRAY_COUNT_EXT
* gl:COLOR_ARRAY_EXT
* gl:COLOR_ARRAY_LENGTH_NV
* gl:COLOR_ARRAY_LIST_IBM
* gl:COLOR_ARRAY_LIST_STRIDE_IBM
* gl:COLOR_ARRAY_PARALLEL_POINTERS_INTEL
* gl:COLOR_ARRAY_POINTER_EXT
* gl:COLOR_ARRAY_SIZE_EXT
* gl:COLOR_ARRAY_STRIDE_EXT
* gl:COLOR_ARRAY_TYPE_EXT
* gl:COLOR_ATTACHMENT0
* gl:COLOR_ATTACHMENT0_EXT
* gl:COLOR_ATTACHMENT1
* gl:COLOR_ATTACHMENT10
* gl:COLOR_ATTACHMENT10_EXT
* gl:COLOR_ATTACHMENT11
* gl:COLOR_ATTACHMENT11_EXT
* gl:COLOR_ATTACHMENT12
* gl:COLOR_ATTACHMENT12_EXT
* gl:COLOR_ATTACHMENT13
* gl:COLOR_ATTACHMENT13_EXT
* gl:COLOR_ATTACHMENT14
* gl:COLOR_ATTACHMENT14_EXT
* gl:COLOR_ATTACHMENT15
* gl:COLOR_ATTACHMENT15_EXT
* gl:COLOR_ATTACHMENT1_EXT
* gl:COLOR_ATTACHMENT2
* gl:COLOR_ATTACHMENT2_EXT
* gl:COLOR_ATTACHMENT3
* gl:COLOR_ATTACHMENT3_EXT
* gl:COLOR_ATTACHMENT4
* gl:COLOR_ATTACHMENT4_EXT
* gl:COLOR_ATTACHMENT5
* gl:COLOR_ATTACHMENT5_EXT
* gl:COLOR_ATTACHMENT6
* gl:COLOR_ATTACHMENT6_EXT
* gl:COLOR_ATTACHMENT7
* gl:COLOR_ATTACHMENT7_EXT
* gl:COLOR_ATTACHMENT8
* gl:COLOR_ATTACHMENT8_EXT
* gl:COLOR_ATTACHMENT9
* gl:COLOR_ATTACHMENT9_EXT
* gl:COLOR_FLOAT_APPLE
* gl:COLOR_INDEX12_EXT
* gl:COLOR_INDEX16_EXT
* gl:COLOR_INDEX1_EXT
* gl:COLOR_INDEX2_EXT
* gl:COLOR_INDEX4_EXT
* gl:COLOR_INDEX8_EXT
* gl:COLOR_MATRIX
* gl:COLOR_MATRIX_SGI
* gl:COLOR_MATRIX_STACK_DEPTH
* gl:COLOR_MATRIX_STACK_DEPTH_SGI
* gl:COLOR_SUM
* gl:COLOR_SUM_ARB
* gl:COLOR_SUM_CLAMP_NV
* gl:COLOR_SUM_EXT
* gl:COLOR_TABLE
* gl:COLOR_TABLE_ALPHA_SIZE
* gl:COLOR_TABLE_ALPHA_SIZE_SGI
* gl:COLOR_TABLE_BIAS
* gl:COLOR_TABLE_BIAS_SGI
* gl:COLOR_TABLE_BLUE_SIZE
* gl:COLOR_TABLE_BLUE_SIZE_SGI
* gl:COLOR_TABLE_FORMAT
* gl:COLOR_TABLE_FORMAT_SGI
* gl:COLOR_TABLE_GREEN_SIZE
* gl:COLOR_TABLE_GREEN_SIZE_SGI
* gl:COLOR_TABLE_INTENSITY_SIZE
* gl:COLOR_TABLE_INTENSITY_SIZE_SGI
* gl:COLOR_TABLE_LUMINANCE_SIZE
* gl:COLOR_TABLE_LUMINANCE_SIZE_SGI
* gl:COLOR_TABLE_RED_SIZE
* gl:COLOR_TABLE_RED_SIZE_SGI
* gl:COLOR_TABLE_SCALE
* gl:COLOR_TABLE_SCALE_SGI
* gl:COLOR_TABLE_SGI
* gl:COLOR_TABLE_WIDTH
* gl:COLOR_TABLE_WIDTH_SGI
* gl:COMBINE
* gl:COMBINE4_NV
* gl:COMBINE_ALPHA
* gl:COMBINE_ALPHA_ARB
* gl:COMBINE_ALPHA_EXT
* gl:COMBINE_ARB
* gl:COMBINE_EXT
* gl:COMBINER0_NV
* gl:COMBINER1_NV
* gl:COMBINER2_NV
* gl:COMBINER3_NV
* gl:COMBINER4_NV
* gl:COMBINER5_NV
* gl:COMBINER6_NV
* gl:COMBINER7_NV
* gl:COMBINER_AB_DOT_PRODUCT_NV
* gl:COMBINER_AB_OUTPUT_NV
* gl:COMBINER_BIAS_NV
* gl:COMBINER_CD_DOT_PRODUCT_NV
* gl:COMBINER_CD_OUTPUT_NV
* gl:COMBINER_COMPONENT_USAGE_NV
* gl:COMBINE_RGB
* gl:COMBINE_RGB_ARB
* gl:COMBINE_RGB_EXT
* gl:COMBINER_INPUT_NV
* gl:COMBINER_MAPPING_NV
* gl:COMBINER_MUX_SUM_NV
* gl:COMBINER_SCALE_NV
* gl:COMBINER_SUM_OUTPUT_NV
* gl:COMPARE_REF_DEPTH_TO_TEXTURE_EXT
* gl:COMPARE_REF_TO_TEXTURE
* gl:COMPARE_R_TO_TEXTURE
* gl:COMPARE_R_TO_TEXTURE_ARB
* gl:COMPATIBLE_SUBROUTINES
* gl:COMP_BIT_ATI
* gl:COMPILE_STATUS
* gl:COMPRESSED_ALPHA
* gl:COMPRESSED_ALPHA_ARB
* gl:COMPRESSED_INTENSITY
* gl:COMPRESSED_INTENSITY_ARB
* gl:COMPRESSED_LUMINANCE
* gl:COMPRESSED_LUMINANCE_ALPHA
* gl:COMPRESSED_LUMINANCE_ALPHA_ARB
* gl:COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
* gl:COMPRESSED_LUMINANCE_ARB
* gl:COMPRESSED_LUMINANCE_LATC1_EXT
* gl:COMPRESSED_RED
* gl:COMPRESSED_RED_GREEN_RGTC2_EXT
* gl:COMPRESSED_RED_RGTC1
* gl:COMPRESSED_RED_RGTC1_EXT
* gl:COMPRESSED_RG
* gl:COMPRESSED_RGB
* gl:COMPRESSED_RGBA
* gl:COMPRESSED_RGBA_ARB
* gl:COMPRESSED_RGBA_BPTC_UNORM_ARB
* gl:COMPRESSED_RGBA_FXT1_3DFX
* gl:COMPRESSED_RGB_ARB
* gl:COMPRESSED_RGBA_S3TC_DXT1_EXT
* gl:COMPRESSED_RGBA_S3TC_DXT3_EXT
* gl:COMPRESSED_RGBA_S3TC_DXT5_EXT
* gl:COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
* gl:COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
* gl:COMPRESSED_RGB_FXT1_3DFX
* gl:COMPRESSED_RGB_S3TC_DXT1_EXT
* gl:COMPRESSED_RG_RGTC2
* gl:COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
* gl:COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
* gl:COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
* gl:COMPRESSED_SIGNED_RED_RGTC1
* gl:COMPRESSED_SIGNED_RED_RGTC1_EXT
* gl:COMPRESSED_SIGNED_RG_RGTC2
* gl:COMPRESSED_SLUMINANCE
* gl:COMPRESSED_SLUMINANCE_ALPHA
* gl:COMPRESSED_SLUMINANCE_ALPHA_EXT
* gl:COMPRESSED_SLUMINANCE_EXT
* gl:COMPRESSED_SRGB
* gl:COMPRESSED_SRGB_ALPHA
* gl:COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
* gl:COMPRESSED_SRGB_ALPHA_EXT
* gl:COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
* gl:COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
* gl:COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
* gl:COMPRESSED_SRGB_EXT
* gl:COMPRESSED_SRGB_S3TC_DXT1_EXT
* gl:COMPRESSED_TEXTURE_FORMATS
* gl:COMPRESSED_TEXTURE_FORMATS_ARB
* gl:CON_0_ATI
* gl:CON_10_ATI
* gl:CON_11_ATI
* gl:CON_12_ATI
* gl:CON_13_ATI
* gl:CON_14_ATI
* gl:CON_15_ATI
* gl:CON_16_ATI
* gl:CON_17_ATI
* gl:CON_18_ATI
* gl:CON_19_ATI
* gl:CON_1_ATI
* gl:CON_20_ATI
* gl:CON_21_ATI
* gl:CON_22_ATI
* gl:CON_23_ATI
* gl:CON_24_ATI
* gl:CON_25_ATI
* gl:CON_26_ATI
* gl:CON_27_ATI
* gl:CON_28_ATI
* gl:CON_29_ATI
* gl:CON_2_ATI
* gl:CON_30_ATI
* gl:CON_31_ATI
* gl:CON_3_ATI
* gl:CON_4_ATI
* gl:CON_5_ATI
* gl:CON_6_ATI
* gl:CON_7_ATI
* gl:CON_8_ATI
* gl:CON_9_ATI
* gl:CONDITION_SATISFIED
* gl:CONSERVE_MEMORY_HINT_PGI
* gl:CONSTANT
* gl:CONSTANT_ALPHA
* gl:CONSTANT_ALPHA_EXT
* gl:CONSTANT_ARB
* gl:CONSTANT_BORDER
* gl:CONSTANT_BORDER_HP
* gl:CONSTANT_COLOR
* gl:CONSTANT_COLOR0_NV
* gl:CONSTANT_COLOR1_NV
* gl:CONSTANT_COLOR_EXT
* gl:CONSTANT_EXT
* gl:CONST_EYE_NV
* gl:CONTEXT_COMPATIBILITY_PROFILE_BIT
* gl:CONTEXT_CORE_PROFILE_BIT
* gl:CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
* gl:CONTEXT_FLAGS
* gl:CONTEXT_PROFILE_MASK
* gl:CONTINUOUS_AMD
* gl:CONVOLUTION_1D
* gl:CONVOLUTION_1D_EXT
* gl:CONVOLUTION_2D
* gl:CONVOLUTION_2D_EXT
* gl:CONVOLUTION_BORDER_COLOR
* gl:CONVOLUTION_BORDER_COLOR_HP
* gl:CONVOLUTION_BORDER_MODE
* gl:CONVOLUTION_BORDER_MODE_EXT
* gl:CONVOLUTION_FILTER_BIAS
* gl:CONVOLUTION_FILTER_BIAS_EXT
* gl:CONVOLUTION_FILTER_SCALE
* gl:CONVOLUTION_FILTER_SCALE_EXT
* gl:CONVOLUTION_FORMAT
* gl:CONVOLUTION_FORMAT_EXT
* gl:CONVOLUTION_HEIGHT
* gl:CONVOLUTION_HEIGHT_EXT
* gl:CONVOLUTION_HINT_SGIX
* gl:CONVOLUTION_WIDTH
* gl:CONVOLUTION_WIDTH_EXT
* gl:COORD_REPLACE
* gl:COORD_REPLACE_ARB
* gl:COORD_REPLACE_NV
* gl:COPY_READ_BUFFER
* gl:COPY_WRITE_BUFFER
* gl:COUNTER_RANGE_AMD
* gl:COUNTER_TYPE_AMD
* gl:CUBIC_EXT
* gl:CUBIC_HP
* gl:CULL_FRAGMENT_NV
* gl:CULL_MODES_NV
* gl:CULL_VERTEX_EXT
* gl:CULL_VERTEX_EYE_POSITION_EXT
* gl:CULL_VERTEX_IBM
* gl:CULL_VERTEX_OBJECT_POSITION_EXT
* gl:CURRENT_ATTRIB_NV
* gl:CURRENT_BINORMAL_EXT
* gl:CURRENT_FOG_COORD
* gl:CURRENT_FOG_COORDINATE
* gl:CURRENT_FOG_COORDINATE_EXT
* gl:CURRENT_MATRIX_ARB
* gl:CURRENT_MATRIX_INDEX_ARB
* gl:CURRENT_MATRIX_NV
* gl:CURRENT_MATRIX_STACK_DEPTH_ARB
* gl:CURRENT_MATRIX_STACK_DEPTH_NV
* gl:CURRENT_OCCLUSION_QUERY_ID_NV
* gl:CURRENT_PALETTE_MATRIX_ARB
* gl:CURRENT_PROGRAM
* gl:CURRENT_QUERY
* gl:CURRENT_QUERY_ARB
* gl:CURRENT_RASTER_NORMAL_SGIX
* gl:CURRENT_RASTER_SECONDARY_COLOR
* gl:CURRENT_SECONDARY_COLOR
* gl:CURRENT_SECONDARY_COLOR_EXT
* gl:CURRENT_TANGENT_EXT
* gl:CURRENT_TIME_NV
* gl:CURRENT_VERTEX_ATTRIB
* gl:CURRENT_VERTEX_ATTRIB_ARB
* gl:CURRENT_VERTEX_EXT
* gl:CURRENT_VERTEX_WEIGHT_EXT
* gl:CURRENT_WEIGHT_ARB
* gl:DECR_WRAP
* gl:DECR_WRAP_EXT
* gl:DEFORMATIONS_MASK_SGIX
* gl:DELETE_STATUS
* gl:DEPENDENT_AR_TEXTURE_2D_NV
* gl:DEPENDENT_GB_TEXTURE_2D_NV
* gl:DEPENDENT_HILO_TEXTURE_2D_NV
* gl:DEPENDENT_RGB_TEXTURE_3D_NV
* gl:DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
* gl:DEPTH24_STENCIL8
* gl:DEPTH24_STENCIL8_EXT
* gl:DEPTH32F_STENCIL8
* gl:DEPTH32F_STENCIL8_NV
* gl:DEPTH_ATTACHMENT
* gl:DEPTH_ATTACHMENT_EXT
* gl:DEPTH_BOUNDS_EXT
* gl:DEPTH_BOUNDS_TEST_EXT
* gl:DEPTH_BUFFER
* gl:DEPTH_BUFFER_FLOAT_MODE_NV
* gl:DEPTH_CLAMP
* gl:DEPTH_CLAMP_NV
* gl:DEPTH_COMPONENT16
* gl:DEPTH_COMPONENT16_ARB
* gl:DEPTH_COMPONENT16_SGIX
* gl:DEPTH_COMPONENT24
* gl:DEPTH_COMPONENT24_ARB
* gl:DEPTH_COMPONENT24_SGIX
* gl:DEPTH_COMPONENT32
* gl:DEPTH_COMPONENT32_ARB
* gl:DEPTH_COMPONENT32F
* gl:DEPTH_COMPONENT32F_NV
* gl:DEPTH_COMPONENT32_SGIX
* gl:DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
* gl:DEPTH_PASS_INSTRUMENT_MAX_SGIX
* gl:DEPTH_PASS_INSTRUMENT_SGIX
* gl:DEPTH_STENCIL
* gl:DEPTH_STENCIL_ATTACHMENT
* gl:DEPTH_STENCIL_EXT
* gl:DEPTH_STENCIL_NV
* gl:DEPTH_STENCIL_TO_BGRA_NV
* gl:DEPTH_STENCIL_TO_RGBA_NV
* gl:DEPTH_TEXTURE_MODE
* gl:DEPTH_TEXTURE_MODE_ARB
* gl:DETAIL_TEXTURE_2D_BINDING_SGIS
* gl:DETAIL_TEXTURE_2D_SGIS
* gl:DETAIL_TEXTURE_FUNC_POINTS_SGIS
* gl:DETAIL_TEXTURE_LEVEL_SGIS
* gl:DETAIL_TEXTURE_MODE_SGIS
* gl:DISCARD_ATI
* gl:DISCARD_NV
* gl:DISCRETE_AMD
* gl:DISTANCE_ATTENUATION_EXT
* gl:DISTANCE_ATTENUATION_SGIS
* gl:DOT2_ADD_ATI
* gl:DOT3_ATI
* gl:DOT3_RGB
* gl:DOT3_RGBA
* gl:DOT3_RGBA_ARB
* gl:DOT3_RGB_ARB
* gl:DOT4_ATI
* gl:DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
* gl:DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
* gl:DOT_PRODUCT_DEPTH_REPLACE_NV
* gl:DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
* gl:DOT_PRODUCT_NV
* gl:DOT_PRODUCT_PASS_THROUGH_NV
* gl:DOT_PRODUCT_REFLECT_CUBE_MAP_NV
* gl:DOT_PRODUCT_TEXTURE_1D_NV
* gl:DOT_PRODUCT_TEXTURE_2D_NV
* gl:DOT_PRODUCT_TEXTURE_3D_NV
* gl:DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
* gl:DOT_PRODUCT_TEXTURE_RECTANglE_NV
* gl:DOUBLE_MAT2
* gl:DOUBLE_MAT2x3
* gl:DOUBLE_MAT2x4
* gl:DOUBLE_MAT3
* gl:DOUBLE_MAT3x2
* gl:DOUBLE_MAT3x4
* gl:DOUBLE_MAT4
* gl:DOUBLE_MAT4x2
* gl:DOUBLE_MAT4x3
* gl:DOUBLE_VEC2
* gl:DOUBLE_VEC3
* gl:DOUBLE_VEC4
* gl:DRAW_BUFFER0
* gl:DRAW_BUFFER0_ARB
* gl:DRAW_BUFFER0_ATI
* gl:DRAW_BUFFER1
* gl:DRAW_BUFFER10
* gl:DRAW_BUFFER10_ARB
* gl:DRAW_BUFFER10_ATI
* gl:DRAW_BUFFER11
* gl:DRAW_BUFFER11_ARB
* gl:DRAW_BUFFER11_ATI
* gl:DRAW_BUFFER12
* gl:DRAW_BUFFER12_ARB
* gl:DRAW_BUFFER12_ATI
* gl:DRAW_BUFFER13
* gl:DRAW_BUFFER13_ARB
* gl:DRAW_BUFFER13_ATI
* gl:DRAW_BUFFER14
* gl:DRAW_BUFFER14_ARB
* gl:DRAW_BUFFER14_ATI
* gl:DRAW_BUFFER15
* gl:DRAW_BUFFER15_ARB
* gl:DRAW_BUFFER15_ATI
* gl:DRAW_BUFFER1_ARB
* gl:DRAW_BUFFER1_ATI
* gl:DRAW_BUFFER2
* gl:DRAW_BUFFER2_ARB
* gl:DRAW_BUFFER2_ATI
* gl:DRAW_BUFFER3
* gl:DRAW_BUFFER3_ARB
* gl:DRAW_BUFFER3_ATI
* gl:DRAW_BUFFER4
* gl:DRAW_BUFFER4_ARB
* gl:DRAW_BUFFER4_ATI
* gl:DRAW_BUFFER5
* gl:DRAW_BUFFER5_ARB
* gl:DRAW_BUFFER5_ATI
* gl:DRAW_BUFFER6
* gl:DRAW_BUFFER6_ARB
* gl:DRAW_BUFFER6_ATI
* gl:DRAW_BUFFER7
* gl:DRAW_BUFFER7_ARB
* gl:DRAW_BUFFER7_ATI
* gl:DRAW_BUFFER8
* gl:DRAW_BUFFER8_ARB
* gl:DRAW_BUFFER8_ATI
* gl:DRAW_BUFFER9
* gl:DRAW_BUFFER9_ARB
* gl:DRAW_BUFFER9_ATI
* gl:DRAW_FRAMEBUFFER
* gl:DRAW_FRAMEBUFFER_BINDING_EXT
* gl:DRAW_FRAMEBUFFER_EXT
* gl:DRAW_INDIRECT_BUFFER
* gl:DRAW_INDIRECT_BUFFER_BINDING
* gl:DRAW_PIXELS_APPLE
* gl:DS_BIAS_NV
* gl:DSDT8_MAG8_INTENSITY8_NV
* gl:DSDT8_MAG8_NV
* gl:DSDT8_NV
* gl:DSDT_MAG_INTENSITY_NV
* gl:DSDT_MAG_NV
* gl:DSDT_MAG_VIB_NV
* gl:DSDT_NV
* gl:DS_SCALE_NV
* gl:DT_BIAS_NV
* gl:DT_SCALE_NV
* gl:DU8DV8_ATI
* gl:DUAL_ALPHA12_SGIS
* gl:DUAL_ALPHA16_SGIS
* gl:DUAL_ALPHA4_SGIS
* gl:DUAL_ALPHA8_SGIS
* gl:DUAL_INTENSITY12_SGIS
* gl:DUAL_INTENSITY16_SGIS
* gl:DUAL_INTENSITY4_SGIS
* gl:DUAL_INTENSITY8_SGIS
* gl:DUAL_LUMINANCE12_SGIS
* gl:DUAL_LUMINANCE16_SGIS
* gl:DUAL_LUMINANCE4_SGIS
* gl:DUAL_LUMINANCE8_SGIS
* gl:DUAL_LUMINANCE_ALPHA4_SGIS
* gl:DUAL_LUMINANCE_ALPHA8_SGIS
* gl:DUAL_TEXTURE_SELECT_SGIS
* gl:DUDV_ATI
* gl:DYNAMIC_ATI
* gl:DYNAMIC_COPY
* gl:DYNAMIC_COPY_ARB
* gl:DYNAMIC_DRAW
* gl:DYNAMIC_DRAW_ARB
* gl:DYNAMIC_READ
* gl:DYNAMIC_READ_ARB
* gl:EDGE_FLAG_ARRAY_ADDRESS_NV
* gl:EDGE_FLAG_ARRAY_BUFFER_BINDING
* gl:EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
* gl:EDGE_FLAG_ARRAY_COUNT_EXT
* gl:EDGE_FLAG_ARRAY_EXT
* gl:EDGE_FLAG_ARRAY_LENGTH_NV
* gl:EDGE_FLAG_ARRAY_LIST_IBM
* gl:EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
* gl:EDGE_FLAG_ARRAY_POINTER_EXT
* gl:EDGE_FLAG_ARRAY_STRIDE_EXT
* gl:EDGEFLAG_BIT_PGI
* gl:EIGHTH_BIT_ATI
* gl:ELEMENT_ARRAY_ADDRESS_NV
* gl:ELEMENT_ARRAY_APPLE
* gl:ELEMENT_ARRAY_ATI
* gl:ELEMENT_ARRAY_BUFFER
* gl:ELEMENT_ARRAY_BUFFER_ARB
* gl:ELEMENT_ARRAY_BUFFER_BINDING
* gl:ELEMENT_ARRAY_BUFFER_BINDING_ARB
* gl:ELEMENT_ARRAY_LENGTH_NV
* gl:ELEMENT_ARRAY_POINTER_APPLE
* gl:ELEMENT_ARRAY_POINTER_ATI
* gl:ELEMENT_ARRAY_TYPE_APPLE
* gl:ELEMENT_ARRAY_TYPE_ATI
* gl:ELEMENT_ARRAY_UNIFIED_NV
* gl:EMBOSS_CONSTANT_NV
* gl:EMBOSS_LIGHT_NV
* gl:EMBOSS_MAP_NV
* gl:E_TIMES_F_NV
* gl:EVAL_2D_NV
* gl:EVAL_FRACTIONAL_TESSELLATION_NV
* gl:EVAL_TRIANGULAR_2D_NV
* gl:EVAL_VERTEX_ATTRIB0_NV
* gl:EVAL_VERTEX_ATTRIB10_NV
* gl:EVAL_VERTEX_ATTRIB11_NV
* gl:EVAL_VERTEX_ATTRIB12_NV
* gl:EVAL_VERTEX_ATTRIB13_NV
* gl:EVAL_VERTEX_ATTRIB14_NV
* gl:EVAL_VERTEX_ATTRIB15_NV
* gl:EVAL_VERTEX_ATTRIB1_NV
* gl:EVAL_VERTEX_ATTRIB2_NV
* gl:EVAL_VERTEX_ATTRIB3_NV
* gl:EVAL_VERTEX_ATTRIB4_NV
* gl:EVAL_VERTEX_ATTRIB5_NV
* gl:EVAL_VERTEX_ATTRIB6_NV
* gl:EVAL_VERTEX_ATTRIB7_NV
* gl:EVAL_VERTEX_ATTRIB8_NV
* gl:EVAL_VERTEX_ATTRIB9_NV
* gl:EXPAND_NEGATE_NV
* gl:EXPAND_NORMAL_NV
* gl:EYE_DISTANCE_TO_LINE_SGIS
* gl:EYE_DISTANCE_TO_POINT_SGIS
* gl:EYE_LINE_SGIS
* gl:EYE_PLANE_ABSOLUTE_NV
* gl:EYE_POINT_SGIS
* gl:EYE_RADIAL_NV
* gl:FAILURE_NV
* gl:FENCE_APPLE
* gl:FENCE_CONDITION_NV
* gl:FENCE_STATUS_NV
* gl:FIELD_LOWER_NV
* gl:FIELDS_NV
* gl:FIELD_UPPER_NV
* gl:FILTER4_SGIS
* gl:FIRST_VERTEX_CONVENTION
* gl:FIRST_VERTEX_CONVENTION_EXT
* gl:FIXED_OES
* gl:FIXED_ONLY
* gl:FIXED_ONLY_ARB
* gl:FLOAT_32_UNSIGNED_INT_24_8_REV
* gl:FLOAT_32_UNSIGNED_INT_24_8_REV_NV
* gl:FLOAT_CLEAR_COLOR_VALUE_NV
* gl:FLOAT_MAT2
* gl:FLOAT_MAT2_ARB
* gl:FLOAT_MAT2x3
* gl:FLOAT_MAT2x4
* gl:FLOAT_MAT3
* gl:FLOAT_MAT3_ARB
* gl:FLOAT_MAT3x2
* gl:FLOAT_MAT3x4
* gl:FLOAT_MAT4
* gl:FLOAT_MAT4_ARB
* gl:FLOAT_MAT4x2
* gl:FLOAT_MAT4x3
* gl:FLOAT_R16_NV
* gl:FLOAT_R32_NV
* gl:FLOAT_RG16_NV
* gl:FLOAT_RG32_NV
* gl:FLOAT_RGB16_NV
* gl:FLOAT_RGB32_NV
* gl:FLOAT_RGBA16_NV
* gl:FLOAT_RGBA32_NV
* gl:FLOAT_RGBA_MODE_NV
* gl:FLOAT_RGBA_NV
* gl:FLOAT_RGB_NV
* gl:FLOAT_RG_NV
* gl:FLOAT_R_NV
* gl:FLOAT_VEC2
* gl:FLOAT_VEC2_ARB
* gl:FLOAT_VEC3
* gl:FLOAT_VEC3_ARB
* gl:FLOAT_VEC4
* gl:FLOAT_VEC4_ARB
* gl:FOG_COORD
* gl:FOG_COORD_ARRAY
* gl:FOG_COORD_ARRAY_ADDRESS_NV
* gl:FOG_COORD_ARRAY_LENGTH_NV
* gl:FOG_COORDINATE
* gl:FOG_COORDINATE_ARRAY
* gl:FOG_COORDINATE_ARRAY_BUFFER_BINDING
* gl:FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
* gl:FOG_COORDINATE_ARRAY_EXT
* gl:FOG_COORDINATE_ARRAY_LIST_IBM
* gl:FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
* gl:FOG_COORDINATE_ARRAY_POINTER
* gl:FOG_COORDINATE_ARRAY_POINTER_EXT
* gl:FOG_COORDINATE_ARRAY_STRIDE
* gl:FOG_COORDINATE_ARRAY_STRIDE_EXT
* gl:FOG_COORDINATE_ARRAY_TYPE
* gl:FOG_COORDINATE_ARRAY_TYPE_EXT
* gl:FOG_COORDINATE_EXT
* gl:FOG_COORDINATE_SOURCE
* gl:FOG_COORDINATE_SOURCE_EXT
* gl:FOG_COORD_SRC
* gl:FOG_DISTANCE_MODE_NV
* gl:FOG_FUNC_POINTS_SGIS
* gl:FOG_FUNC_SGIS
* gl:FOG_OFFSET_SGIX
* gl:FOG_OFFSET_VALUE_SGIX
* gl:FOG_SCALE_SGIX
* gl:FOG_SCALE_VALUE_SGIX
* gl:FOG_SPECULAR_TEXTURE_WIN
* gl:FORCE_BLUE_TO_ONE_NV
* gl:FORMAT_SUBSAMPLE_24_24_OML
* gl:FORMAT_SUBSAMPLE_244_244_OML
* gl:FRACTIONAL_EVEN
* gl:FRACTIONAL_ODD
* gl:FRAGMENT_COLOR_EXT
* gl:FRAGMENT_COLOR_MATERIAL_FACE_SGIX
* gl:FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
* gl:FRAGMENT_COLOR_MATERIAL_SGIX
* gl:FRAGMENT_DEPTH
* gl:FRAGMENT_DEPTH_EXT
* gl:FRAGMENT_INTERPOLATION_OFFSET_BITS
* gl:FRAGMENT_LIGHT0_SGIX
* gl:FRAGMENT_LIGHT1_SGIX
* gl:FRAGMENT_LIGHT2_SGIX
* gl:FRAGMENT_LIGHT3_SGIX
* gl:FRAGMENT_LIGHT4_SGIX
* gl:FRAGMENT_LIGHT5_SGIX
* gl:FRAGMENT_LIGHT6_SGIX
* gl:FRAGMENT_LIGHT7_SGIX
* gl:FRAGMENT_LIGHTING_SGIX
* gl:FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
* gl:FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
* gl:FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
* gl:FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
* gl:FRAGMENT_MATERIAL_EXT
* gl:FRAGMENT_NORMAL_EXT
* gl:FRAGMENT_PROGRAM_ARB
* gl:FRAGMENT_PROGRAM_BINDING_NV
* gl:FRAGMENT_PROGRAM_NV
* gl:FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
* gl:FRAGMENT_SHADER
* gl:FRAGMENT_SHADER_ARB
* gl:FRAGMENT_SHADER_ATI
* gl:FRAGMENT_SHADER_DERIVATIVE_HINT
* gl:FRAMEBUFFER
* gl:FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
* gl:FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
* gl:FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_LAYERED
* gl:FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
* gl:FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
* gl:FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
* gl:FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
* gl:FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
* gl:FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
* gl:FRAMEBUFFER_ATTACHMENT_RED_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
* gl:FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
* gl:FRAMEBUFFER_BINDING
* gl:FRAMEBUFFER_BINDING_EXT
* gl:FRAMEBUFFER_COMPLETE
* gl:FRAMEBUFFER_COMPLETE_EXT
* gl:FRAMEBUFFER_DEFAULT
* gl:FRAMEBUFFER_EXT
* gl:FRAMEBUFFER_INCOMPLETE_ATTACHMENT
* gl:FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
* gl:FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
* gl:FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
* gl:FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
* gl:FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
* gl:FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
* gl:FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
* gl:FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
* gl:FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
* gl:FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
* gl:FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
* gl:FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
* gl:FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
* gl:FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
* gl:FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
* gl:FRAMEBUFFER_INCOMPLETE_READ_BUFFER
* gl:FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
* gl:FRAMEBUFFER_SRGB
* gl:FRAMEBUFFER_SRGB_CAPABLE_EXT
* gl:FRAMEBUFFER_SRGB_EXT
* gl:FRAMEBUFFER_STATUS_ERROR_EXT
* gl:FRAMEBUFFER_UNDEFINED
* gl:FRAMEBUFFER_UNSUPPORTED
* gl:FRAMEBUFFER_UNSUPPORTED_EXT
* gl:FRAME_NV
* gl:FRAMEZOOM_FACTOR_SGIX
* gl:FRAMEZOOM_SGIX
* gl:FULL_RANGE_EXT
* gl:FULL_STIPPLE_HINT_PGI
* gl:FUNC_ADD
* gl:FUNC_ADD_EXT
* gl:FUNC_REVERSE_SUBTRACT
* gl:FUNC_REVERSE_SUBTRACT_EXT
* gl:FUNC_SUBTRACT
* gl:FUNC_SUBTRACT_EXT
* gl:GENERATE_MIPMAP
* gl:GENERATE_MIPMAP_HINT
* gl:GENERATE_MIPMAP_HINT_SGIS
* gl:GENERATE_MIPMAP_SGIS
* gl:GENERIC_ATTRIB_NV
* gl:GEOMETRY_DEFORMATION_BIT_SGIX
* gl:GEOMETRY_DEFORMATION_SGIX
* gl:GEOMETRY_INPUT_TYPE
* gl:GEOMETRY_INPUT_TYPE_ARB
* gl:GEOMETRY_INPUT_TYPE_EXT
* gl:GEOMETRY_OUTPUT_TYPE
* gl:GEOMETRY_OUTPUT_TYPE_ARB
* gl:GEOMETRY_OUTPUT_TYPE_EXT
* gl:GEOMETRY_PROGRAM_NV
* gl:GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
* gl:GEOMETRY_SHADER
* gl:GEOMETRY_SHADER_ARB
* gl:GEOMETRY_SHADER_EXT
* gl:GEOMETRY_SHADER_INVOCATIONS
* gl:GEOMETRY_VERTICES_OUT
* gl:GEOMETRY_VERTICES_OUT_ARB
* gl:GEOMETRY_VERTICES_OUT_EXT
* gl:GLOBAL_ALPHA_FACTOR_SUN
* gl:GLOBAL_ALPHA_SUN
* gl:GPU_ADDRESS_NV
* gl:GREEN_BIT_ATI
* gl:GREEN_INTEGER
* gl:GREEN_INTEGER_EXT
* gl:GREEN_MAX_CLAMP_INGR
* gl:GREEN_MIN_CLAMP_INGR
* gl:HALF_APPLE
* gl:HALF_BIAS_NEGATE_NV
* gl:HALF_BIAS_NORMAL_NV
* gl:HALF_BIT_ATI
* gl:HALF_FLOAT
* gl:HALF_FLOAT_ARB
* gl:HALF_FLOAT_NV
* gl:HI_BIAS_NV
* gl:HILO16_NV
* gl:HILO8_NV
* gl:HILO_NV
* gl:HI_SCALE_NV
* gl:HISTOGRAM
* gl:HISTOGRAM_ALPHA_SIZE
* gl:HISTOGRAM_ALPHA_SIZE_EXT
* gl:HISTOGRAM_BLUE_SIZE
* gl:HISTOGRAM_BLUE_SIZE_EXT
* gl:HISTOGRAM_EXT
* gl:HISTOGRAM_FORMAT
* gl:HISTOGRAM_FORMAT_EXT
* gl:HISTOGRAM_GREEN_SIZE
* gl:HISTOGRAM_GREEN_SIZE_EXT
* gl:HISTOGRAM_LUMINANCE_SIZE
* gl:HISTOGRAM_LUMINANCE_SIZE_EXT
* gl:HISTOGRAM_RED_SIZE
* gl:HISTOGRAM_RED_SIZE_EXT
* gl:HISTOGRAM_SINK
* gl:HISTOGRAM_SINK_EXT
* gl:HISTOGRAM_WIDTH
* gl:HISTOGRAM_WIDTH_EXT
* gl:IDENTITY_NV
* gl:IGNORE_BORDER_HP
* gl:IMAGE_CUBIC_WEIGHT_HP
* gl:IMAGE_MAG_FILTER_HP
* gl:IMAGE_MIN_FILTER_HP
* gl:IMAGE_ROTATE_ANGLE_HP
* gl:IMAGE_ROTATE_ORIGIN_X_HP
* gl:IMAGE_ROTATE_ORIGIN_Y_HP
* gl:IMAGE_SCALE_X_HP
* gl:IMAGE_SCALE_Y_HP
* gl:IMAGE_TRANSFORM_2D_HP
* gl:IMAGE_TRANSLATE_X_HP
* gl:IMAGE_TRANSLATE_Y_HP
* gl:IMPLEMENTATION_COLOR_READ_FORMAT_OES
* gl:IMPLEMENTATION_COLOR_READ_TYPE_OES
* gl:INCR_WRAP
* gl:INCR_WRAP_EXT
* gl:INDEX
* gl:INDEX_ARRAY_ADDRESS_NV
* gl:INDEX_ARRAY_BUFFER_BINDING
* gl:INDEX_ARRAY_BUFFER_BINDING_ARB
* gl:INDEX_ARRAY_COUNT_EXT
* gl:INDEX_ARRAY_EXT
* gl:INDEX_ARRAY_LENGTH_NV
* gl:INDEX_ARRAY_LIST_IBM
* gl:INDEX_ARRAY_LIST_STRIDE_IBM
* gl:INDEX_ARRAY_POINTER_EXT
* gl:INDEX_ARRAY_STRIDE_EXT
* gl:INDEX_ARRAY_TYPE_EXT
* gl:INDEX_BIT_PGI
* gl:INDEX_MATERIAL_EXT
* gl:INDEX_MATERIAL_FACE_EXT
* gl:INDEX_MATERIAL_PARAMETER_EXT
* gl:INDEX_TEST_EXT
* gl:INDEX_TEST_FUNC_EXT
* gl:INDEX_TEST_REF_EXT
* gl:INFO_LOG_LENGTH
* gl:INSTRUMENT_BUFFER_POINTER_SGIX
* gl:INSTRUMENT_MEASUREMENTS_SGIX
* gl:INT_2_10_10_10_REV
* gl:INTENSITY12_EXT
* gl:INTENSITY16_EXT
* gl:INTENSITY16F_ARB
* gl:INTENSITY16I_EXT
* gl:INTENSITY16_SNORM
* gl:INTENSITY16UI_EXT
* gl:INTENSITY32F_ARB
* gl:INTENSITY32I_EXT
* gl:INTENSITY32UI_EXT
* gl:INTENSITY4_EXT
* gl:INTENSITY8_EXT
* gl:INTENSITY8I_EXT
* gl:INTENSITY8_SNORM
* gl:INTENSITY8UI_EXT
* gl:INTENSITY_EXT
* gl:INTENSITY_FLOAT16_APPLE
* gl:INTENSITY_FLOAT16_ATI
* gl:INTENSITY_FLOAT32_APPLE
* gl:INTENSITY_FLOAT32_ATI
* gl:INTENSITY_SNORM
* gl:INTERLACE_OML
* gl:INTERLACE_READ_INGR
* gl:INTERLACE_READ_OML
* gl:INTERLACE_SGIX
* gl:INTERLEAVED_ATTRIBS
* gl:INTERLEAVED_ATTRIBS_EXT
* gl:INTERLEAVED_ATTRIBS_NV
* gl:INTERPOLATE
* gl:INTERPOLATE_ARB
* gl:INTERPOLATE_EXT
* gl:INT_SAMPLER_1D
* gl:INT_SAMPLER_1D_ARRAY
* gl:INT_SAMPLER_1D_ARRAY_EXT
* gl:INT_SAMPLER_1D_EXT
* gl:INT_SAMPLER_2D
* gl:INT_SAMPLER_2D_ARRAY
* gl:INT_SAMPLER_2D_ARRAY_EXT
* gl:INT_SAMPLER_2D_EXT
* gl:INT_SAMPLER_2D_MULTISAMPLE
* gl:INT_SAMPLER_2D_MULTISAMPLE_ARRAY
* gl:INT_SAMPLER_2D_RECT
* gl:INT_SAMPLER_2D_RECT_EXT
* gl:INT_SAMPLER_3D
* gl:INT_SAMPLER_3D_EXT
* gl:INT_SAMPLER_BUFFER
* gl:INT_SAMPLER_BUFFER_AMD
* gl:INT_SAMPLER_BUFFER_EXT
* gl:INT_SAMPLER_CUBE
* gl:INT_SAMPLER_CUBE_EXT
* gl:INT_SAMPLER_CUBE_MAP_ARRAY
* gl:INT_SAMPLER_RENDERBUFFER_NV
* gl:INT_VEC2
* gl:INT_VEC2_ARB
* gl:INT_VEC3
* gl:INT_VEC3_ARB
* gl:INT_VEC4
* gl:INT_VEC4_ARB
* gl:INVALID_FRAMEBUFFER_OPERATION
* gl:INVALID_FRAMEBUFFER_OPERATION_EXT
* gl:INVARIANT_DATATYPE_EXT
* gl:INVARIANT_EXT
* gl:INVARIANT_VALUE_EXT
* gl:INVERSE_NV
* gl:INVERSE_TRANSPOSE_NV
* gl:INVERTED_SCREEN_W_REND
* gl:IR_INSTRUMENT1_SGIX
* gl:ISOLINES
* gl:IUI_N3F_V2F_EXT
* gl:IUI_N3F_V3F_EXT
* gl:IUI_V2F_EXT
* gl:IUI_V3F_EXT
* gl:LAST_VERTEX_CONVENTION
* gl:LAST_VERTEX_CONVENTION_EXT
* gl:LAST_VIDEO_CAPTURE_STATUS_NV
* gl:LERP_ATI
* gl:LIGHT_ENV_MODE_SGIX
* gl:LIGHT_MODEL_COLOR_CONTROL
* gl:LIGHT_MODEL_COLOR_CONTROL_EXT
* gl:LIGHT_MODEL_SPECULAR_VECTOR_APPLE
* gl:LINEAR_CLIPMAP_LINEAR_SGIX
* gl:LINEAR_CLIPMAP_NEAREST_SGIX
* gl:LINEAR_DETAIL_ALPHA_SGIS
* gl:LINEAR_DETAIL_COLOR_SGIS
* gl:LINEAR_DETAIL_SGIS
* gl:LINEAR_SHARPEN_ALPHA_SGIS
* gl:LINEAR_SHARPEN_COLOR_SGIS
* gl:LINEAR_SHARPEN_SGIS
* gl:LINES_ADJACENCY
* gl:LINES_ADJACENCY_ARB
* gl:LINES_ADJACENCY_EXT
* gl:LINE_STRIP_ADJACENCY
* gl:LINE_STRIP_ADJACENCY_ARB
* gl:LINE_STRIP_ADJACENCY_EXT
* gl:LINK_STATUS
* gl:LIST_PRIORITY_SGIX
* gl:LO_BIAS_NV
* gl:LOCAL_CONSTANT_DATATYPE_EXT
* gl:LOCAL_CONSTANT_EXT
* gl:LOCAL_CONSTANT_VALUE_EXT
* gl:LOCAL_EXT
* gl:LO_SCALE_NV
* gl:LOWER_LEFT
* gl:LUMINANCE12_ALPHA12_EXT
* gl:LUMINANCE12_ALPHA4_EXT
* gl:LUMINANCE12_EXT
* gl:LUMINANCE16_ALPHA16_EXT
* gl:LUMINANCE16_ALPHA16_SNORM
* gl:LUMINANCE16_EXT
* gl:LUMINANCE16F_ARB
* gl:LUMINANCE16I_EXT
* gl:LUMINANCE16_SNORM
* gl:LUMINANCE16UI_EXT
* gl:LUMINANCE32F_ARB
* gl:LUMINANCE32I_EXT
* gl:LUMINANCE32UI_EXT
* gl:LUMINANCE4_ALPHA4_EXT
* gl:LUMINANCE4_EXT
* gl:LUMINANCE6_ALPHA2_EXT
* gl:LUMINANCE8_ALPHA8_EXT
* gl:LUMINANCE8_ALPHA8_SNORM
* gl:LUMINANCE8_EXT
* gl:LUMINANCE8I_EXT
* gl:LUMINANCE8_SNORM
* gl:LUMINANCE8UI_EXT
* gl:LUMINANCE_ALPHA16F_ARB
* gl:LUMINANCE_ALPHA16I_EXT
* gl:LUMINANCE_ALPHA16UI_EXT
* gl:LUMINANCE_ALPHA32F_ARB
* gl:LUMINANCE_ALPHA32I_EXT
* gl:LUMINANCE_ALPHA32UI_EXT
* gl:LUMINANCE_ALPHA8I_EXT
* gl:LUMINANCE_ALPHA8UI_EXT
* gl:LUMINANCE_ALPHA_FLOAT16_APPLE
* gl:LUMINANCE_ALPHA_FLOAT16_ATI
* gl:LUMINANCE_ALPHA_FLOAT32_APPLE
* gl:LUMINANCE_ALPHA_FLOAT32_ATI
* gl:LUMINANCE_ALPHA_INTEGER_EXT
* gl:LUMINANCE_ALPHA_SNORM
* gl:LUMINANCE_FLOAT16_APPLE
* gl:LUMINANCE_FLOAT16_ATI
* gl:LUMINANCE_FLOAT32_APPLE
* gl:LUMINANCE_FLOAT32_ATI
* gl:LUMINANCE_INTEGER_EXT
* gl:LUMINANCE_SNORM
* gl:MAD_ATI
* gl:MAGNITUDE_BIAS_NV
* gl:MAGNITUDE_SCALE_NV
* gl:MAJOR_VERSION
* gl:MAP1_BINORMAL_EXT
* gl:MAP1_TANGENT_EXT
* gl:MAP1_VERTEX_ATTRIB0_4_NV
* gl:MAP1_VERTEX_ATTRIB10_4_NV
* gl:MAP1_VERTEX_ATTRIB11_4_NV
* gl:MAP1_VERTEX_ATTRIB12_4_NV
* gl:MAP1_VERTEX_ATTRIB13_4_NV
* gl:MAP1_VERTEX_ATTRIB14_4_NV
* gl:MAP1_VERTEX_ATTRIB1_4_NV
* gl:MAP1_VERTEX_ATTRIB15_4_NV
* gl:MAP1_VERTEX_ATTRIB2_4_NV
* gl:MAP1_VERTEX_ATTRIB3_4_NV
* gl:MAP1_VERTEX_ATTRIB4_4_NV
* gl:MAP1_VERTEX_ATTRIB5_4_NV
* gl:MAP1_VERTEX_ATTRIB6_4_NV
* gl:MAP1_VERTEX_ATTRIB7_4_NV
* gl:MAP1_VERTEX_ATTRIB8_4_NV
* gl:MAP1_VERTEX_ATTRIB9_4_NV
* gl:MAP2_BINORMAL_EXT
* gl:MAP2_TANGENT_EXT
* gl:MAP2_VERTEX_ATTRIB0_4_NV
* gl:MAP2_VERTEX_ATTRIB10_4_NV
* gl:MAP2_VERTEX_ATTRIB11_4_NV
* gl:MAP2_VERTEX_ATTRIB12_4_NV
* gl:MAP2_VERTEX_ATTRIB13_4_NV
* gl:MAP2_VERTEX_ATTRIB14_4_NV
* gl:MAP2_VERTEX_ATTRIB1_4_NV
* gl:MAP2_VERTEX_ATTRIB15_4_NV
* gl:MAP2_VERTEX_ATTRIB2_4_NV
* gl:MAP2_VERTEX_ATTRIB3_4_NV
* gl:MAP2_VERTEX_ATTRIB4_4_NV
* gl:MAP2_VERTEX_ATTRIB5_4_NV
* gl:MAP2_VERTEX_ATTRIB6_4_NV
* gl:MAP2_VERTEX_ATTRIB7_4_NV
* gl:MAP2_VERTEX_ATTRIB8_4_NV
* gl:MAP2_VERTEX_ATTRIB9_4_NV
* gl:MAP_ATTRIB_U_ORDER_NV
* gl:MAP_ATTRIB_V_ORDER_NV
* gl:MAP_FLUSH_EXPLICIT_BIT
* gl:MAP_INVALIDATE_BUFFER_BIT
* gl:MAP_INVALIDATE_RANGE_BIT
* gl:MAP_READ_BIT
* gl:MAP_TESSELLATION_NV
* gl:MAP_UNSYNCHRONIZED_BIT
* gl:MAP_WRITE_BIT
* gl:MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
* gl:MAT_AMBIENT_BIT_PGI
* gl:MAT_COLOR_INDEXES_BIT_PGI
* gl:MAT_DIFFUSE_BIT_PGI
* gl:MAT_EMISSION_BIT_PGI
* gl:MATERIAL_SIDE_HINT_PGI
* gl:MATRIX0_ARB
* gl:MATRIX0_NV
* gl:MATRIX10_ARB
* gl:MATRIX11_ARB
* gl:MATRIX12_ARB
* gl:MATRIX13_ARB
* gl:MATRIX14_ARB
* gl:MATRIX15_ARB
* gl:MATRIX16_ARB
* gl:MATRIX17_ARB
* gl:MATRIX18_ARB
* gl:MATRIX19_ARB
* gl:MATRIX1_ARB
* gl:MATRIX1_NV
* gl:MATRIX20_ARB
* gl:MATRIX21_ARB
* gl:MATRIX22_ARB
* gl:MATRIX23_ARB
* gl:MATRIX24_ARB
* gl:MATRIX25_ARB
* gl:MATRIX26_ARB
* gl:MATRIX27_ARB
* gl:MATRIX28_ARB
* gl:MATRIX29_ARB
* gl:MATRIX2_ARB
* gl:MATRIX2_NV
* gl:MATRIX30_ARB
* gl:MATRIX31_ARB
* gl:MATRIX3_ARB
* gl:MATRIX3_NV
* gl:MATRIX4_ARB
* gl:MATRIX4_NV
* gl:MATRIX5_ARB
* gl:MATRIX5_NV
* gl:MATRIX6_ARB
* gl:MATRIX6_NV
* gl:MATRIX7_ARB
* gl:MATRIX7_NV
* gl:MATRIX8_ARB
* gl:MATRIX9_ARB
* gl:MATRIX_EXT
* gl:MATRIX_INDEX_ARRAY_ARB
* gl:MATRIX_INDEX_ARRAY_POINTER_ARB
* gl:MATRIX_INDEX_ARRAY_SIZE_ARB
* gl:MATRIX_INDEX_ARRAY_STRIDE_ARB
* gl:MATRIX_INDEX_ARRAY_TYPE_ARB
* gl:MATRIX_PALETTE_ARB
* gl:MAT_SHININESS_BIT_PGI
* gl:MAT_SPECULAR_BIT_PGI
* gl:MAX
* gl:MAX_3D_TEXTURE_SIZE
* gl:MAX_3D_TEXTURE_SIZE_EXT
* gl:MAX_4D_TEXTURE_SIZE_SGIS
* gl:MAX_ACTIVE_LIGHTS_SGIX
* gl:MAX_ARRAY_TEXTURE_LAYERS
* gl:MAX_ARRAY_TEXTURE_LAYERS_EXT
* gl:MAX_ASYNC_DRAW_PIXELS_SGIX
* gl:MAX_ASYNC_HISTOGRAM_SGIX
* gl:MAX_ASYNC_READ_PIXELS_SGIX
* gl:MAX_ASYNC_TEX_IMAGE_SGIX
* gl:MAX_BINDABLE_UNIFORM_SIZE_EXT
* gl:MAX_CLIPMAP_DEPTH_SGIX
* gl:MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
* gl:MAX_COLOR_ATTACHMENTS
* gl:MAX_COLOR_ATTACHMENTS_EXT
* gl:MAX_COLOR_MATRIX_STACK_DEPTH
* gl:MAX_COLOR_MATRIX_STACK_DEPTH_SGI
* gl:MAX_COLOR_TEXTURE_SAMPLES
* gl:MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
* gl:MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
* gl:MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
* gl:MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
* gl:MAX_COMBINED_TEXTURE_IMAGE_UNITS
* gl:MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
* gl:MAX_COMBINED_UNIFORM_BLOCKS
* gl:MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
* gl:MAX_CONVOLUTION_HEIGHT
* gl:MAX_CONVOLUTION_HEIGHT_EXT
* gl:MAX_CONVOLUTION_WIDTH
* gl:MAX_CONVOLUTION_WIDTH_EXT
* gl:MAX_CUBE_MAP_TEXTURE_SIZE
* gl:MAX_CUBE_MAP_TEXTURE_SIZE_ARB
* gl:MAX_CUBE_MAP_TEXTURE_SIZE_EXT
* gl:MAX_DEFORMATION_ORDER_SGIX
* gl:MAX_DEPTH_TEXTURE_SAMPLES
* gl:MAX_DRAW_BUFFERS
* gl:MAX_DRAW_BUFFERS_ARB
* gl:MAX_DRAW_BUFFERS_ATI
* gl:MAX_DUAL_SOURCE_DRAW_BUFFERS
* gl:MAX_ELEMENTS_INDICES
* gl:MAX_ELEMENTS_INDICES_EXT
* gl:MAX_ELEMENTS_VERTICES
* gl:MAX_ELEMENTS_VERTICES_EXT
* gl:MAX_EXT
* gl:MAX_FOG_FUNC_POINTS_SGIS
* gl:MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
* gl:MAX_FRAGMENT_INPUT_COMPONENTS
* gl:MAX_FRAGMENT_INTERPOLATION_OFFSET
* gl:MAX_FRAGMENT_LIGHTS_SGIX
* gl:MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
* gl:MAX_FRAGMENT_UNIFORM_BLOCKS
* gl:MAX_FRAGMENT_UNIFORM_COMPONENTS
* gl:MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
* gl:MAX_FRAMEZOOM_FACTOR_SGIX
* gl:MAX_GENERAL_COMBINERS_NV
* gl:MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
* gl:MAX_GEOMETRY_INPUT_COMPONENTS
* gl:MAX_GEOMETRY_OUTPUT_COMPONENTS
* gl:MAX_GEOMETRY_OUTPUT_VERTICES
* gl:MAX_GEOMETRY_OUTPUT_VERTICES_ARB
* gl:MAX_GEOMETRY_OUTPUT_VERTICES_EXT
* gl:MAX_GEOMETRY_SHADER_INVOCATIONS
* gl:MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
* gl:MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
* gl:MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
* gl:MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
* gl:MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
* gl:MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
* gl:MAX_GEOMETRY_UNIFORM_BLOCKS
* gl:MAX_GEOMETRY_UNIFORM_COMPONENTS
* gl:MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
* gl:MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
* gl:MAX_GEOMETRY_VARYING_COMPONENTS_ARB
* gl:MAX_GEOMETRY_VARYING_COMPONENTS_EXT
* gl:MAX_INTEGER_SAMPLES
* gl:MAX_MAP_TESSELLATION_NV
* gl:MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
* gl:MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
* gl:MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
* gl:MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
* gl:MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
* gl:MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
* gl:MAX_PALETTE_MATRICES_ARB
* gl:MAX_PATCH_VERTICES
* gl:MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
* gl:MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
* gl:MAX_PROGRAM_ADDRESS_REGISTERS_ARB
* gl:MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_ATTRIB_COMPONENTS_NV
* gl:MAX_PROGRAM_ATTRIBS_ARB
* gl:MAX_PROGRAM_CALL_DEPTH_NV
* gl:MAX_PROGRAM_ENV_PARAMETERS_ARB
* gl:MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
* gl:MAX_PROGRAM_GENERIC_ATTRIBS_NV
* gl:MAX_PROGRAM_GENERIC_RESULTS_NV
* gl:MAX_PROGRAM_IF_DEPTH_NV
* gl:MAX_PROGRAM_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_LOCAL_PARAMETERS_ARB
* gl:MAX_PROGRAM_LOOP_COUNT_NV
* gl:MAX_PROGRAM_LOOP_DEPTH_NV
* gl:MAX_PROGRAM_MATRICES_ARB
* gl:MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
* gl:MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
* gl:MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_NATIVE_ATTRIBS_ARB
* gl:MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_NATIVE_PARAMETERS_ARB
* gl:MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
* gl:MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
* gl:MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_OUTPUT_VERTICES_NV
* gl:MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
* gl:MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
* gl:MAX_PROGRAM_PARAMETERS_ARB
* gl:MAX_PROGRAM_RESULT_COMPONENTS_NV
* gl:MAX_PROGRAM_TEMPORARIES_ARB
* gl:MAX_PROGRAM_TEXEL_OFFSET
* gl:MAX_PROGRAM_TEXEL_OFFSET_EXT
* gl:MAX_PROGRAM_TEX_INDIRECTIONS_ARB
* gl:MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
* gl:MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
* gl:MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
* gl:MAX_RATIONAL_EVAL_ORDER_NV
* gl:MAX_RECTANGLE_TEXTURE_SIZE
* gl:MAX_RECTANGLE_TEXTURE_SIZE_ARB
* gl:MAX_RECTANGLE_TEXTURE_SIZE_EXT
* gl:MAX_RECTANGLE_TEXTURE_SIZE_NV
* gl:MAX_RENDERBUFFER_SIZE
* gl:MAX_RENDERBUFFER_SIZE_EXT
* gl:MAX_SAMPLE_MASK_WORDS
* gl:MAX_SAMPLE_MASK_WORDS_NV
* gl:MAX_SAMPLES
* gl:MAX_SAMPLES_EXT
* gl:MAX_SERVER_WAIT_TIMEOUT
* gl:MAX_SHADER_BUFFER_ADDRESS_NV
* gl:MAX_SHININESS_NV
* gl:MAX_SPOT_EXPONENT_NV
* gl:MAX_SUBROUTINES
* gl:MAX_SUBROUTINE_UNIFORM_LOCATIONS
* gl:MAX_TESS_CONTROL_INPUT_COMPONENTS
* gl:MAX_TESS_CONTROL_OUTPUT_COMPONENTS
* gl:MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
* gl:MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
* gl:MAX_TESS_CONTROL_UNIFORM_BLOCKS
* gl:MAX_TESS_CONTROL_UNIFORM_COMPONENTS
* gl:MAX_TESS_EVALUATION_INPUT_COMPONENTS
* gl:MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
* gl:MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
* gl:MAX_TESS_EVALUATION_UNIFORM_BLOCKS
* gl:MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
* gl:MAX_TESS_GEN_LEVEL
* gl:MAX_TESS_PATCH_COMPONENTS
* gl:MAX_TEXTURE_BUFFER_SIZE
* gl:MAX_TEXTURE_BUFFER_SIZE_ARB
* gl:MAX_TEXTURE_BUFFER_SIZE_EXT
* gl:MAX_TEXTURE_COORDS
* gl:MAX_TEXTURE_COORDS_ARB
* gl:MAX_TEXTURE_COORDS_NV
* gl:MAX_TEXTURE_IMAGE_UNITS
* gl:MAX_TEXTURE_IMAGE_UNITS_ARB
* gl:MAX_TEXTURE_IMAGE_UNITS_NV
* gl:MAX_TEXTURE_LOD_BIAS
* gl:MAX_TEXTURE_LOD_BIAS_EXT
* gl:MAX_TEXTURE_MAX_ANISOTROPY_EXT
* gl:MAX_TEXTURE_UNITS
* gl:MAX_TEXTURE_UNITS_ARB
* gl:MAX_TRACK_MATRICES_NV
* gl:MAX_TRACK_MATRIX_STACK_DEPTH_NV
* gl:MAX_TRANSFORM_FEEDBACK_BUFFERS
* gl:MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
* gl:MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
* gl:MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
* gl:MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
* gl:MAX_UNIFORM_BLOCK_SIZE
* gl:MAX_UNIFORM_BUFFER_BINDINGS
* gl:MAX_VARYING_COMPONENTS_EXT
* gl:MAX_VARYING_FLOATS
* gl:MAX_VARYING_FLOATS_ARB
* gl:MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
* gl:MAX_VERTEX_ATTRIBS
* gl:MAX_VERTEX_ATTRIBS_ARB
* gl:MAX_VERTEX_BINDABLE_UNIFORMS_EXT
* gl:MAX_VERTEX_HINT_PGI
* gl:MAX_VERTEX_OUTPUT_COMPONENTS
* gl:MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
* gl:MAX_VERTEX_SHADER_INVARIANTS_EXT
* gl:MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
* gl:MAX_VERTEX_SHADER_LOCALS_EXT
* gl:MAX_VERTEX_SHADER_VARIANTS_EXT
* gl:MAX_VERTEX_STREAMS
* gl:MAX_VERTEX_STREAMS_ATI
* gl:MAX_VERTEX_TEXTURE_IMAGE_UNITS
* gl:MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
* gl:MAX_VERTEX_UNIFORM_BLOCKS
* gl:MAX_VERTEX_UNIFORM_COMPONENTS
* gl:MAX_VERTEX_UNIFORM_COMPONENTS_ARB
* gl:MAX_VERTEX_UNITS_ARB
* gl:MAX_VERTEX_VARYING_COMPONENTS_ARB
* gl:MAX_VERTEX_VARYING_COMPONENTS_EXT
* gl:MIN
* gl:MIN_EXT
* gl:MIN_FRAGMENT_INTERPOLATION_OFFSET
* gl:MINMAX
* gl:MINMAX_EXT
* gl:MINMAX_FORMAT
* gl:MINMAX_FORMAT_EXT
* gl:MINMAX_SINK
* gl:MINMAX_SINK_EXT
* gl:MINOR_VERSION
* gl:MIN_PROGRAM_TEXEL_OFFSET
* gl:MIN_PROGRAM_TEXEL_OFFSET_EXT
* gl:MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
* gl:MIN_SAMPLE_SHADING_VALUE
* gl:MIRROR_CLAMP_ATI
* gl:MIRROR_CLAMP_EXT
* gl:MIRROR_CLAMP_TO_BORDER_EXT
* gl:MIRROR_CLAMP_TO_EDGE_ATI
* gl:MIRROR_CLAMP_TO_EDGE_EXT
* gl:MIRRORED_REPEAT
* gl:MIRRORED_REPEAT_ARB
* gl:MIRRORED_REPEAT_IBM
* gl:MODELVIEW0_ARB
* gl:MODELVIEW10_ARB
* gl:MODELVIEW11_ARB
* gl:MODELVIEW12_ARB
* gl:MODELVIEW13_ARB
* gl:MODELVIEW14_ARB
* gl:MODELVIEW15_ARB
* gl:MODELVIEW16_ARB
* gl:MODELVIEW17_ARB
* gl:MODELVIEW18_ARB
* gl:MODELVIEW19_ARB
* gl:MODELVIEW1_ARB
* gl:MODELVIEW1_EXT
* gl:MODELVIEW1_MATRIX_EXT
* gl:MODELVIEW1_STACK_DEPTH_EXT
* gl:MODELVIEW20_ARB
* gl:MODELVIEW21_ARB
* gl:MODELVIEW22_ARB
* gl:MODELVIEW23_ARB
* gl:MODELVIEW24_ARB
* gl:MODELVIEW25_ARB
* gl:MODELVIEW26_ARB
* gl:MODELVIEW27_ARB
* gl:MODELVIEW28_ARB
* gl:MODELVIEW29_ARB
* gl:MODELVIEW2_ARB
* gl:MODELVIEW30_ARB
* gl:MODELVIEW31_ARB
* gl:MODELVIEW3_ARB
* gl:MODELVIEW4_ARB
* gl:MODELVIEW5_ARB
* gl:MODELVIEW6_ARB
* gl:MODELVIEW7_ARB
* gl:MODELVIEW8_ARB
* gl:MODELVIEW9_ARB
* gl:MODELVIEW_PROJECTION_NV
* gl:MODULATE_ADD_ATI
* gl:MODULATE_SIGNED_ADD_ATI
* gl:MODULATE_SUBTRACT_ATI
* gl:MOV_ATI
* gl:MUL_ATI
* gl:MULTISAMPLE
* gl:MULTISAMPLE_3DFX
* gl:MULTISAMPLE_ARB
* gl:MULTISAMPLE_BIT
* gl:MULTISAMPLE_BIT_3DFX
* gl:MULTISAMPLE_BIT_ARB
* gl:MULTISAMPLE_BIT_EXT
* gl:MULTISAMPLE_EXT
* gl:MULTISAMPLE_FILTER_HINT_NV
* gl:MULTISAMPLE_SGIS
* gl:MVP_MATRIX_EXT
* gl:NAMED_STRING_LENGTH_ARB
* gl:NAMED_STRING_TYPE_ARB
* gl:NATIVE_GRAPHICS_BEGIN_HINT_PGI
* gl:NATIVE_GRAPHICS_END_HINT_PGI
* gl:NATIVE_GRAPHICS_HANDLE_PGI
* gl:NEAREST_CLIPMAP_LINEAR_SGIX
* gl:NEAREST_CLIPMAP_NEAREST_SGIX
* gl:NEGATE_BIT_ATI
* gl:NEGATIVE_ONE_EXT
* gl:NEGATIVE_W_EXT
* gl:NEGATIVE_X_EXT
* gl:NEGATIVE_Y_EXT
* gl:NEGATIVE_Z_EXT
* gl:NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
* gl:NORMAL_ARRAY_ADDRESS_NV
* gl:NORMAL_ARRAY_BUFFER_BINDING
* gl:NORMAL_ARRAY_BUFFER_BINDING_ARB
* gl:NORMAL_ARRAY_COUNT_EXT
* gl:NORMAL_ARRAY_EXT
* gl:NORMAL_ARRAY_LENGTH_NV
* gl:NORMAL_ARRAY_LIST_IBM
* gl:NORMAL_ARRAY_LIST_STRIDE_IBM
* gl:NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
* gl:NORMAL_ARRAY_POINTER_EXT
* gl:NORMAL_ARRAY_STRIDE_EXT
* gl:NORMAL_ARRAY_TYPE_EXT
* gl:NORMAL_BIT_PGI
* gl:NORMALIZED_RANGE_EXT
* gl:NORMAL_MAP
* gl:NORMAL_MAP_ARB
* gl:NORMAL_MAP_EXT
* gl:NORMAL_MAP_NV
* gl:NUM_COMPATIBLE_SUBROUTINES
* gl:NUM_COMPRESSED_TEXTURE_FORMATS
* gl:NUM_COMPRESSED_TEXTURE_FORMATS_ARB
* gl:NUM_EXTENSIONS
* gl:NUM_FILL_STREAMS_NV
* gl:NUM_FRAGMENT_CONSTANTS_ATI
* gl:NUM_FRAGMENT_REGISTERS_ATI
* gl:NUM_GENERAL_COMBINERS_NV
* gl:NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
* gl:NUM_INSTRUCTIONS_PER_PASS_ATI
* gl:NUM_INSTRUCTIONS_TOTAL_ATI
* gl:NUM_LOOPBACK_COMPONENTS_ATI
* gl:NUM_PASSES_ATI
* gl:NUM_VIDEO_CAPTURE_STREAMS_NV
* gl:OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
* gl:OBJECT_ACTIVE_ATTRIBUTES_ARB
* gl:OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
* gl:OBJECT_ACTIVE_UNIFORMS_ARB
* gl:OBJECT_ATTACHED_OBJECTS_ARB
* gl:OBJECT_BUFFER_SIZE_ATI
* gl:OBJECT_BUFFER_USAGE_ATI
* gl:OBJECT_COMPILE_STATUS_ARB
* gl:OBJECT_DELETE_STATUS_ARB
* gl:OBJECT_DISTANCE_TO_LINE_SGIS
* gl:OBJECT_DISTANCE_TO_POINT_SGIS
* gl:OBJECT_INFO_LOG_LENGTH_ARB
* gl:OBJECT_LINE_SGIS
* gl:OBJECT_LINK_STATUS_ARB
* gl:OBJECT_POINT_SGIS
* gl:OBJECT_SHADER_SOURCE_LENGTH_ARB
* gl:OBJECT_SUBTYPE_ARB
* gl:OBJECT_TYPE
* gl:OBJECT_TYPE_ARB
* gl:OBJECT_VALIDATE_STATUS_ARB
* gl:OCCLUSION_TEST_HP
* gl:OCCLUSION_TEST_RESULT_HP
* gl:OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
* gl:OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
* gl:OFFSET_HILO_TEXTURE_2D_NV
* gl:OFFSET_HILO_TEXTURE_RECTANGLE_NV
* gl:OFFSET_PROJECTIVE_TEXTURE_2D_NV
* gl:OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
* gl:OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
* gl:OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
* gl:OFFSET_TEXTURE_2D_NV
* gl:OFFSET_TEXTURE_BIAS_NV
* gl:OFFSET_TEXTURE_MATRIX_NV
* gl:OFFSET_TEXTURE_RECTANGLE_NV
* gl:OFFSET_TEXTURE_RECTANGLE_SCALE_NV
* gl:OFFSET_TEXTURE_SCALE_NV
* gl:ONE_EXT
* gl:ONE_MINUS_CONSTANT_ALPHA
* gl:ONE_MINUS_CONSTANT_ALPHA_EXT
* gl:ONE_MINUS_CONSTANT_COLOR
* gl:ONE_MINUS_CONSTANT_COLOR_EXT
* gl:ONE_MINUS_SRC1_ALPHA
* gl:ONE_MINUS_SRC1_COLOR
* gl:OP_ADD_EXT
* gl:OP_CLAMP_EXT
* gl:OP_CROSS_PRODUCT_EXT
* gl:OP_DOT3_EXT
* gl:OP_DOT4_EXT
* gl:OPERAND0_ALPHA
* gl:OPERAND0_ALPHA_ARB
* gl:OPERAND0_ALPHA_EXT
* gl:OPERAND0_RGB
* gl:OPERAND0_RGB_ARB
* gl:OPERAND0_RGB_EXT
* gl:OPERAND1_ALPHA
* gl:OPERAND1_ALPHA_ARB
* gl:OPERAND1_ALPHA_EXT
* gl:OPERAND1_RGB
* gl:OPERAND1_RGB_ARB
* gl:OPERAND1_RGB_EXT
* gl:OPERAND2_ALPHA
* gl:OPERAND2_ALPHA_ARB
* gl:OPERAND2_ALPHA_EXT
* gl:OPERAND2_RGB
* gl:OPERAND2_RGB_ARB
* gl:OPERAND2_RGB_EXT
* gl:OPERAND3_ALPHA_NV
* gl:OPERAND3_RGB_NV
* gl:OP_EXP_BASE_2_EXT
* gl:OP_FLOOR_EXT
* gl:OP_FRAC_EXT
* gl:OP_INDEX_EXT
* gl:OP_LOG_BASE_2_EXT
* gl:OP_MADD_EXT
* gl:OP_MAX_EXT
* gl:OP_MIN_EXT
* gl:OP_MOV_EXT
* gl:OP_MUL_EXT
* gl:OP_MULTIPLY_MATRIX_EXT
* gl:OP_NEGATE_EXT
* gl:OP_POWER_EXT
* gl:OP_RECIP_EXT
* gl:OP_RECIP_SQRT_EXT
* gl:OP_ROUND_EXT
* gl:OP_SET_GE_EXT
* gl:OP_SET_LT_EXT
* gl:OP_SUB_EXT
* gl:OUTPUT_COLOR0_EXT
* gl:OUTPUT_COLOR1_EXT
* gl:OUTPUT_FOG_EXT
* gl:OUTPUT_TEXTURE_COORD0_EXT
* gl:OUTPUT_TEXTURE_COORD10_EXT
* gl:OUTPUT_TEXTURE_COORD11_EXT
* gl:OUTPUT_TEXTURE_COORD12_EXT
* gl:OUTPUT_TEXTURE_COORD13_EXT
* gl:OUTPUT_TEXTURE_COORD14_EXT
* gl:OUTPUT_TEXTURE_COORD15_EXT
* gl:OUTPUT_TEXTURE_COORD16_EXT
* gl:OUTPUT_TEXTURE_COORD17_EXT
* gl:OUTPUT_TEXTURE_COORD18_EXT
* gl:OUTPUT_TEXTURE_COORD19_EXT
* gl:OUTPUT_TEXTURE_COORD1_EXT
* gl:OUTPUT_TEXTURE_COORD20_EXT
* gl:OUTPUT_TEXTURE_COORD21_EXT
* gl:OUTPUT_TEXTURE_COORD22_EXT
* gl:OUTPUT_TEXTURE_COORD23_EXT
* gl:OUTPUT_TEXTURE_COORD24_EXT
* gl:OUTPUT_TEXTURE_COORD25_EXT
* gl:OUTPUT_TEXTURE_COORD26_EXT
* gl:OUTPUT_TEXTURE_COORD27_EXT
* gl:OUTPUT_TEXTURE_COORD28_EXT
* gl:OUTPUT_TEXTURE_COORD29_EXT
* gl:OUTPUT_TEXTURE_COORD2_EXT
* gl:OUTPUT_TEXTURE_COORD30_EXT
* gl:OUTPUT_TEXTURE_COORD31_EXT
* gl:OUTPUT_TEXTURE_COORD3_EXT
* gl:OUTPUT_TEXTURE_COORD4_EXT
* gl:OUTPUT_TEXTURE_COORD5_EXT
* gl:OUTPUT_TEXTURE_COORD6_EXT
* gl:OUTPUT_TEXTURE_COORD7_EXT
* gl:OUTPUT_TEXTURE_COORD8_EXT
* gl:OUTPUT_TEXTURE_COORD9_EXT
* gl:OUTPUT_VERTEX_EXT
* gl:PACK_CMYK_HINT_EXT
* gl:PACK_IMAGE_DEPTH_SGIS
* gl:PACK_IMAGE_HEIGHT
* gl:PACK_IMAGE_HEIGHT_EXT
* gl:PACK_INVERT_MESA
* gl:PACK_RESAMPLE_OML
* gl:PACK_RESAMPLE_SGIX
* gl:PACK_ROW_BYTES_APPLE
* gl:PACK_SKIP_IMAGES
* gl:PACK_SKIP_IMAGES_EXT
* gl:PACK_SKIP_VOLUMES_SGIS
* gl:PACK_SUBSAMPLE_RATE_SGIX
* gl:PALETTE4_R5_G6_B5_OES
* gl:PALETTE4_RGB5_A1_OES
* gl:PALETTE4_RGB8_OES
* gl:PALETTE4_RGBA4_OES
* gl:PALETTE4_RGBA8_OES
* gl:PALETTE8_R5_G6_B5_OES
* gl:PALETTE8_RGB5_A1_OES
* gl:PALETTE8_RGB8_OES
* gl:PALETTE8_RGBA4_OES
* gl:PALETTE8_RGBA8_OES
* gl:PARALLEL_ARRAYS_INTEL
* gl:PARTIAL_SUCCESS_NV
* gl:PASS_THROUGH_NV
* gl:PATCH_DEFAULT_INNER_LEVEL
* gl:PATCH_DEFAULT_OUTER_LEVEL
* gl:PATCHES
* gl:PATCH_VERTICES
* gl:PERCENTAGE_AMD
* gl:PERFMON_RESULT_AMD
* gl:PERFMON_RESULT_AVAILABLE_AMD
* gl:PERFMON_RESULT_SIZE_AMD
* gl:PER_STAGE_CONSTANTS_NV
* gl:PERTURB_EXT
* gl:PHONG_HINT_WIN
* gl:PHONG_WIN
* gl:PIXEL_COUNT_AVAILABLE_NV
* gl:PIXEL_COUNTER_BITS_NV
* gl:PIXEL_COUNT_NV
* gl:PIXEL_CUBIC_WEIGHT_EXT
* gl:PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
* gl:PIXEL_FRAGMENT_RGB_SOURCE_SGIS
* gl:PIXEL_GROUP_COLOR_SGIS
* gl:PIXEL_MAG_FILTER_EXT
* gl:PIXEL_MIN_FILTER_EXT
* gl:PIXEL_PACK_BUFFER
* gl:PIXEL_PACK_BUFFER_ARB
* gl:PIXEL_PACK_BUFFER_BINDING
* gl:PIXEL_PACK_BUFFER_BINDING_ARB
* gl:PIXEL_PACK_BUFFER_BINDING_EXT
* gl:PIXEL_PACK_BUFFER_EXT
* gl:PIXEL_SUBSAMPLE_2424_SGIX
* gl:PIXEL_SUBSAMPLE_4242_SGIX
* gl:PIXEL_SUBSAMPLE_4444_SGIX
* gl:PIXEL_TEX_GEN_ALPHA_LS_SGIX
* gl:PIXEL_TEX_GEN_ALPHA_MS_SGIX
* gl:PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
* gl:PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
* gl:PIXEL_TEX_GEN_MODE_SGIX
* gl:PIXEL_TEX_GEN_Q_CEILING_SGIX
* gl:PIXEL_TEX_GEN_Q_FLOOR_SGIX
* gl:PIXEL_TEX_GEN_Q_ROUND_SGIX
* gl:PIXEL_TEX_GEN_SGIX
* gl:PIXEL_TEXTURE_SGIS
* gl:PIXEL_TILE_BEST_ALIGNMENT_SGIX
* gl:PIXEL_TILE_CACHE_INCREMENT_SGIX
* gl:PIXEL_TILE_CACHE_SIZE_SGIX
* gl:PIXEL_TILE_GRID_DEPTH_SGIX
* gl:PIXEL_TILE_GRID_HEIGHT_SGIX
* gl:PIXEL_TILE_GRID_WIDTH_SGIX
* gl:PIXEL_TILE_HEIGHT_SGIX
* gl:PIXEL_TILE_WIDTH_SGIX
* gl:PIXEL_TRANSFORM_2D_EXT
* gl:PIXEL_TRANSFORM_2D_MATRIX_EXT
* gl:PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
* gl:PIXEL_UNPACK_BUFFER
* gl:PIXEL_UNPACK_BUFFER_ARB
* gl:PIXEL_UNPACK_BUFFER_BINDING
* gl:PIXEL_UNPACK_BUFFER_BINDING_ARB
* gl:PIXEL_UNPACK_BUFFER_BINDING_EXT
* gl:PIXEL_UNPACK_BUFFER_EXT
* gl:PN_TRIANGLES_ATI
* gl:PN_TRIANGLES_NORMAL_MODE_ATI
* gl:PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
* gl:PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
* gl:PN_TRIANGLES_POINT_MODE_ATI
* gl:PN_TRIANGLES_POINT_MODE_CUBIC_ATI
* gl:PN_TRIANGLES_POINT_MODE_LINEAR_ATI
* gl:PN_TRIANGLES_TESSELATION_LEVEL_ATI
* gl:POINT_DISTANCE_ATTENUATION
* gl:POINT_DISTANCE_ATTENUATION_ARB
* gl:POINT_FADE_THRESHOLD_SIZE
* gl:POINT_FADE_THRESHOLD_SIZE_ARB
* gl:POINT_FADE_THRESHOLD_SIZE_EXT
* gl:POINT_FADE_THRESHOLD_SIZE_SGIS
* gl:POINT_SIZE_MAX
* gl:POINT_SIZE_MAX_ARB
* gl:POINT_SIZE_MAX_EXT
* gl:POINT_SIZE_MAX_SGIS
* gl:POINT_SIZE_MIN
* gl:POINT_SIZE_MIN_ARB
* gl:POINT_SIZE_MIN_EXT
* gl:POINT_SIZE_MIN_SGIS
* gl:POINT_SPRITE
* gl:POINT_SPRITE_ARB
* gl:POINT_SPRITE_COORD_ORIGIN
* gl:POINT_SPRITE_NV
* gl:POINT_SPRITE_R_MODE_NV
* gl:POLYGON_OFFSET_BIAS_EXT
* gl:POLYGON_OFFSET_EXT
* gl:POLYGON_OFFSET_FACTOR_EXT
* gl:POST_COLOR_MATRIX_ALPHA_BIAS
* gl:POST_COLOR_MATRIX_ALPHA_BIAS_SGI
* gl:POST_COLOR_MATRIX_ALPHA_SCALE
* gl:POST_COLOR_MATRIX_ALPHA_SCALE_SGI
* gl:POST_COLOR_MATRIX_BLUE_BIAS
* gl:POST_COLOR_MATRIX_BLUE_BIAS_SGI
* gl:POST_COLOR_MATRIX_BLUE_SCALE
* gl:POST_COLOR_MATRIX_BLUE_SCALE_SGI
* gl:POST_COLOR_MATRIX_COLOR_TABLE
* gl:POST_COLOR_MATRIX_COLOR_TABLE_SGI
* gl:POST_COLOR_MATRIX_GREEN_BIAS
* gl:POST_COLOR_MATRIX_GREEN_BIAS_SGI
* gl:POST_COLOR_MATRIX_GREEN_SCALE
* gl:POST_COLOR_MATRIX_GREEN_SCALE_SGI
* gl:POST_COLOR_MATRIX_RED_BIAS
* gl:POST_COLOR_MATRIX_RED_BIAS_SGI
* gl:POST_COLOR_MATRIX_RED_SCALE
* gl:POST_COLOR_MATRIX_RED_SCALE_SGI
* gl:POST_CONVOLUTION_ALPHA_BIAS
* gl:POST_CONVOLUTION_ALPHA_BIAS_EXT
* gl:POST_CONVOLUTION_ALPHA_SCALE
* gl:POST_CONVOLUTION_ALPHA_SCALE_EXT
* gl:POST_CONVOLUTION_BLUE_BIAS
* gl:POST_CONVOLUTION_BLUE_BIAS_EXT
* gl:POST_CONVOLUTION_BLUE_SCALE
* gl:POST_CONVOLUTION_BLUE_SCALE_EXT
* gl:POST_CONVOLUTION_COLOR_TABLE
* gl:POST_CONVOLUTION_COLOR_TABLE_SGI
* gl:POST_CONVOLUTION_GREEN_BIAS
* gl:POST_CONVOLUTION_GREEN_BIAS_EXT
* gl:POST_CONVOLUTION_GREEN_SCALE
* gl:POST_CONVOLUTION_GREEN_SCALE_EXT
* gl:POST_CONVOLUTION_RED_BIAS
* gl:POST_CONVOLUTION_RED_BIAS_EXT
* gl:POST_CONVOLUTION_RED_SCALE
* gl:POST_CONVOLUTION_RED_SCALE_EXT
* gl:POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
* gl:POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
* gl:POST_TEXTURE_FILTER_BIAS_SGIX
* gl:POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
* gl:POST_TEXTURE_FILTER_SCALE_SGIX
* gl:PREFER_DOUBLEBUFFER_HINT_PGI
* gl:PRESENT_DURATION_NV
* gl:PRESENT_TIME_NV
* gl:PRESERVE_ATI
* gl:PREVIOUS
* gl:PREVIOUS_ARB
* gl:PREVIOUS_EXT
* gl:PREVIOUS_TEXTURE_INPUT_NV
* gl:PRIMARY_COLOR
* gl:PRIMARY_COLOR_ARB
* gl:PRIMARY_COLOR_EXT
* gl:PRIMARY_COLOR_NV
* gl:PRIMITIVE_ID_NV
* gl:PRIMITIVE_RESTART
* gl:PRIMITIVE_RESTART_INDEX
* gl:PRIMITIVE_RESTART_INDEX_NV
* gl:PRIMITIVE_RESTART_NV
* gl:PRIMITIVES_GENERATED
* gl:PRIMITIVES_GENERATED_EXT
* gl:PRIMITIVES_GENERATED_NV
* gl:PROGRAM_ADDRESS_REGISTERS_ARB
* gl:PROGRAM_ALU_INSTRUCTIONS_ARB
* gl:PROGRAM_ATTRIB_COMPONENTS_NV
* gl:PROGRAM_ATTRIBS_ARB
* gl:PROGRAM_BINDING_ARB
* gl:PROGRAM_ERROR_POSITION_ARB
* gl:PROGRAM_ERROR_POSITION_NV
* gl:PROGRAM_ERROR_STRING_ARB
* gl:PROGRAM_ERROR_STRING_NV
* gl:PROGRAM_FORMAT_ARB
* gl:PROGRAM_FORMAT_ASCII_ARB
* gl:PROGRAM_INSTRUCTIONS_ARB
* gl:PROGRAM_LENGTH_ARB
* gl:PROGRAM_LENGTH_NV
* gl:PROGRAM_MATRIX_EXT
* gl:PROGRAM_MATRIX_STACK_DEPTH_EXT
* gl:PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
* gl:PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
* gl:PROGRAM_NATIVE_ATTRIBS_ARB
* gl:PROGRAM_NATIVE_INSTRUCTIONS_ARB
* gl:PROGRAM_NATIVE_PARAMETERS_ARB
* gl:PROGRAM_NATIVE_TEMPORARIES_ARB
* gl:PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
* gl:PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
* gl:PROGRAM_OBJECT_ARB
* gl:PROGRAM_PARAMETER_NV
* gl:PROGRAM_PARAMETERS_ARB
* gl:PROGRAM_POINT_SIZE
* gl:PROGRAM_POINT_SIZE_ARB
* gl:PROGRAM_POINT_SIZE_EXT
* gl:PROGRAM_RESIDENT_NV
* gl:PROGRAM_RESULT_COMPONENTS_NV
* gl:PROGRAM_STRING_ARB
* gl:PROGRAM_STRING_NV
* gl:PROGRAM_TARGET_NV
* gl:PROGRAM_TEMPORARIES_ARB
* gl:PROGRAM_TEX_INDIRECTIONS_ARB
* gl:PROGRAM_TEX_INSTRUCTIONS_ARB
* gl:PROGRAM_UNDER_NATIVE_LIMITS_ARB
* gl:PROVOKING_VERTEX
* gl:PROVOKING_VERTEX_EXT
* gl:PROXY_COLOR_TABLE
* gl:PROXY_COLOR_TABLE_SGI
* gl:PROXY_HISTOGRAM
* gl:PROXY_HISTOGRAM_EXT
* gl:PROXY_POST_COLOR_MATRIX_COLOR_TABLE
* gl:PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
* gl:PROXY_POST_CONVOLUTION_COLOR_TABLE
* gl:PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
* gl:PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
* gl:PROXY_TEXTURE_1D_ARRAY
* gl:PROXY_TEXTURE_1D_ARRAY_EXT
* gl:PROXY_TEXTURE_1D_EXT
* gl:PROXY_TEXTURE_1D_STACK_MESAX
* gl:PROXY_TEXTURE_2D_ARRAY
* gl:PROXY_TEXTURE_2D_ARRAY_EXT
* gl:PROXY_TEXTURE_2D_EXT
* gl:PROXY_TEXTURE_2D_MULTISAMPLE
* gl:PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
* gl:PROXY_TEXTURE_2D_STACK_MESAX
* gl:PROXY_TEXTURE_3D
* gl:PROXY_TEXTURE_3D_EXT
* gl:PROXY_TEXTURE_4D_SGIS
* gl:PROXY_TEXTURE_COLOR_TABLE_SGI
* gl:PROXY_TEXTURE_CUBE_MAP
* gl:PROXY_TEXTURE_CUBE_MAP_ARB
* gl:PROXY_TEXTURE_CUBE_MAP_ARRAY
* gl:PROXY_TEXTURE_CUBE_MAP_EXT
* gl:PROXY_TEXTURE_RECTANGLE
* gl:PROXY_TEXTURE_RECTANGLE_ARB
* gl:PROXY_TEXTURE_RECTANGLE_EXT
* gl:PROXY_TEXTURE_RECTANGLE_NV
* gl:PURGEABLE_APPLE
* gl:QUAD_ALPHA4_SGIS
* gl:QUAD_ALPHA8_SGIS
* gl:QUAD_INTENSITY4_SGIS
* gl:QUAD_INTENSITY8_SGIS
* gl:QUAD_LUMINANCE4_SGIS
* gl:QUAD_LUMINANCE8_SGIS
* gl:QUAD_MESH_SUN
* gl:QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
* gl:QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
* gl:QUAD_TEXTURE_SELECT_SGIS
* gl:QUARTER_BIT_ATI
* gl:QUERY_BY_REGION_NO_WAIT
* gl:QUERY_BY_REGION_NO_WAIT_NV
* gl:QUERY_BY_REGION_WAIT
* gl:QUERY_BY_REGION_WAIT_NV
* gl:QUERY_COUNTER_BITS
* gl:QUERY_COUNTER_BITS_ARB
* gl:QUERY_NO_WAIT
* gl:QUERY_NO_WAIT_NV
* gl:QUERY_RESULT
* gl:QUERY_RESULT_ARB
* gl:QUERY_RESULT_AVAILABLE
* gl:QUERY_RESULT_AVAILABLE_ARB
* gl:QUERY_WAIT
* gl:QUERY_WAIT_NV
* gl:R11F_G11F_B10F
* gl:R11F_G11F_B10F_EXT
* gl:R16
* gl:R16F
* gl:R16I
* gl:R16_SNORM
* gl:R16UI
* gl:R1UI_C3F_V3F_SUN
* gl:R1UI_C4F_N3F_V3F_SUN
* gl:R1UI_C4UB_V3F_SUN
* gl:R1UI_N3F_V3F_SUN
* gl:R1UI_T2F_C4F_N3F_V3F_SUN
* gl:R1UI_T2F_N3F_V3F_SUN
* gl:R1UI_T2F_V3F_SUN
* gl:R1UI_V3F_SUN
* gl:R32F
* gl:R32I
* gl:R32UI
* gl:R8
* gl:R8I
* gl:R8_SNORM
* gl:R8UI
* gl:RASTERIZER_DISCARD
* gl:RASTERIZER_DISCARD_EXT
* gl:RASTERIZER_DISCARD_NV
* gl:RASTER_POSITION_UNCLIPPED_IBM
* gl:READ_FRAMEBUFFER
* gl:READ_FRAMEBUFFER_BINDING
* gl:READ_FRAMEBUFFER_EXT
* gl:READ_ONLY
* gl:READ_ONLY_ARB
* gl:READ_PIXEL_DATA_RANGE_LENGTH_NV
* gl:READ_PIXEL_DATA_RANGE_NV
* gl:READ_PIXEL_DATA_RANGE_POINTER_NV
* gl:READ_WRITE
* gl:READ_WRITE_ARB
* gl:RECLAIM_MEMORY_HINT_PGI
* gl:RED_BIT_ATI
* gl:RED_INTEGER
* gl:RED_INTEGER_EXT
* gl:RED_MAX_CLAMP_INGR
* gl:RED_MIN_CLAMP_INGR
* gl:RED_SNORM
* gl:REDUCE
* gl:REDUCE_EXT
* gl:REFERENCE_PLANE_EQUATION_SGIX
* gl:REFERENCE_PLANE_SGIX
* gl:REFLECTION_MAP
* gl:REFLECTION_MAP_ARB
* gl:REFLECTION_MAP_EXT
* gl:REFLECTION_MAP_NV
* gl:REG_0_ATI
* gl:REG_10_ATI
* gl:REG_11_ATI
* gl:REG_12_ATI
* gl:REG_13_ATI
* gl:REG_14_ATI
* gl:REG_15_ATI
* gl:REG_16_ATI
* gl:REG_17_ATI
* gl:REG_18_ATI
* gl:REG_19_ATI
* gl:REG_1_ATI
* gl:REG_20_ATI
* gl:REG_21_ATI
* gl:REG_22_ATI
* gl:REG_23_ATI
* gl:REG_24_ATI
* gl:REG_25_ATI
* gl:REG_26_ATI
* gl:REG_27_ATI
* gl:REG_28_ATI
* gl:REG_29_ATI
* gl:REG_2_ATI
* gl:REG_30_ATI
* gl:REG_31_ATI
* gl:REG_3_ATI
* gl:REG_4_ATI
* gl:REG_5_ATI
* gl:REG_6_ATI
* gl:REG_7_ATI
* gl:REG_8_ATI
* gl:REG_9_ATI
* gl:REGISTER_COMBINERS_NV
* gl:RELEASED_APPLE
* gl:RENDERBUFFER
* gl:RENDERBUFFER_ALPHA_SIZE
* gl:RENDERBUFFER_BINDING
* gl:RENDERBUFFER_BINDING_EXT
* gl:RENDERBUFFER_BLUE_SIZE
* gl:RENDERBUFFER_COLOR_SAMPLES_NV
* gl:RENDERBUFFER_COVERAGE_SAMPLES_NV
* gl:RENDERBUFFER_DEPTH_SIZE
* gl:RENDERBUFFER_EXT
* gl:RENDERBUFFER_FREE_MEMORY_ATI
* gl:RENDERBUFFER_GREEN_SIZE
* gl:RENDERBUFFER_HEIGHT
* gl:RENDERBUFFER_HEIGHT_EXT
* gl:RENDERBUFFER_INTERNAL_FORMAT
* gl:RENDERBUFFER_INTERNAL_FORMAT_EXT
* gl:RENDERBUFFER_RED_SIZE
* gl:RENDERBUFFER_SAMPLES
* gl:RENDERBUFFER_SAMPLES_EXT
* gl:RENDERBUFFER_STENCIL_SIZE
* gl:RENDERBUFFER_WIDTH
* gl:RENDERBUFFER_WIDTH_EXT
* gl:REPLACE_EXT
* gl:REPLACEMENT_CODE_ARRAY_POINTER_SUN
* gl:REPLACEMENT_CODE_ARRAY_STRIDE_SUN
* gl:REPLACEMENT_CODE_ARRAY_SUN
* gl:REPLACEMENT_CODE_ARRAY_TYPE_SUN
* gl:REPLACEMENT_CODE_SUN
* gl:REPLACE_MIDDLE_SUN
* gl:REPLACE_OLDEST_SUN
* gl:REPLICATE_BORDER
* gl:REPLICATE_BORDER_HP
* gl:RESAMPLE_AVERAGE_OML
* gl:RESAMPLE_DECIMATE_OML
* gl:RESAMPLE_DECIMATE_SGIX
* gl:RESAMPLE_REPLICATE_OML
* gl:RESAMPLE_REPLICATE_SGIX
* gl:RESAMPLE_ZERO_FILL_OML
* gl:RESAMPLE_ZERO_FILL_SGIX
* gl:RESCALE_NORMAL
* gl:RESCALE_NORMAL_EXT
* gl:RESTART_SUN
* gl:RETAINED_APPLE
* gl:RG
* gl:RG16
* gl:RG16F
* gl:RG16I
* gl:RG16_SNORM
* gl:RG16UI
* gl:RG32F
* gl:RG32I
* gl:RG32UI
* gl:RG8
* gl:RG8I
* gl:RG8_SNORM
* gl:RG8UI
* gl:RGB10_A2_EXT
* gl:RGB10_A2UI
* gl:RGB10_EXT
* gl:RGB12_EXT
* gl:RGB16_EXT
* gl:RGB16F
* gl:RGB16F_ARB
* gl:RGB16I
* gl:RGB16I_EXT
* gl:RGB16_SNORM
* gl:RGB16UI
* gl:RGB16UI_EXT
* gl:RGB2_EXT
* gl:RGB32F
* gl:RGB32F_ARB
* gl:RGB32I
* gl:RGB32I_EXT
* gl:RGB32UI
* gl:RGB32UI_EXT
* gl:RGB_422_APPLE
* gl:RGB4_EXT
* gl:RGB4_S3TC
* gl:RGB5_A1_EXT
* gl:RGB5_EXT
* gl:RGB8_EXT
* gl:RGB8I
* gl:RGB8I_EXT
* gl:RGB8_SNORM
* gl:RGB8UI
* gl:RGB8UI_EXT
* gl:RGB9_E5
* gl:RGB9_E5_EXT
* gl:RGBA12_EXT
* gl:RGBA16_EXT
* gl:RGBA16F
* gl:RGBA16F_ARB
* gl:RGBA16I
* gl:RGBA16I_EXT
* gl:RGBA16_SNORM
* gl:RGBA16UI
* gl:RGBA16UI_EXT
* gl:RGBA2_EXT
* gl:RGBA32F
* gl:RGBA32F_ARB
* gl:RGBA32I
* gl:RGBA32I_EXT
* gl:RGBA32UI
* gl:RGBA32UI_EXT
* gl:RGBA4_EXT
* gl:RGBA4_S3TC
* gl:RGBA8_EXT
* gl:RGBA8I
* gl:RGBA8I_EXT
* gl:RGBA8_SNORM
* gl:RGBA8UI
* gl:RGBA8UI_EXT
* gl:RGBA_FLOAT16_APPLE
* gl:RGBA_FLOAT16_ATI
* gl:RGBA_FLOAT32_APPLE
* gl:RGBA_FLOAT32_ATI
* gl:RGBA_FLOAT_MODE_ARB
* gl:RGBA_INTEGER
* gl:RGBA_INTEGER_EXT
* gl:RGBA_INTEGER_MODE_EXT
* gl:RGBA_S3TC
* gl:RGBA_SIGNED_COMPONENTS_EXT
* gl:RGBA_SNORM
* gl:RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
* gl:RGB_FLOAT16_APPLE
* gl:RGB_FLOAT16_ATI
* gl:RGB_FLOAT32_APPLE
* gl:RGB_FLOAT32_ATI
* gl:RGB_INTEGER
* gl:RGB_INTEGER_EXT
* gl:RGB_S3TC
* gl:RGB_SCALE
* gl:RGB_SCALE_ARB
* gl:RGB_SCALE_EXT
* gl:RGB_SNORM
* gl:RG_INTEGER
* gl:RG_SNORM
* gl:SAMPLE_ALPHA_TO_COVERAGE
* gl:SAMPLE_ALPHA_TO_COVERAGE_ARB
* gl:SAMPLE_ALPHA_TO_MASK_EXT
* gl:SAMPLE_ALPHA_TO_MASK_SGIS
* gl:SAMPLE_ALPHA_TO_ONE
* gl:SAMPLE_ALPHA_TO_ONE_ARB
* gl:SAMPLE_ALPHA_TO_ONE_EXT
* gl:SAMPLE_ALPHA_TO_ONE_SGIS
* gl:SAMPLE_BUFFERS
* gl:SAMPLE_BUFFERS_3DFX
* gl:SAMPLE_BUFFERS_ARB
* gl:SAMPLE_BUFFERS_EXT
* gl:SAMPLE_BUFFERS_SGIS
* gl:SAMPLE_COVERAGE
* gl:SAMPLE_COVERAGE_ARB
* gl:SAMPLE_COVERAGE_INVERT
* gl:SAMPLE_COVERAGE_INVERT_ARB
* gl:SAMPLE_COVERAGE_VALUE
* gl:SAMPLE_COVERAGE_VALUE_ARB
* gl:SAMPLE_MASK
* gl:SAMPLE_MASK_EXT
* gl:SAMPLE_MASK_INVERT_EXT
* gl:SAMPLE_MASK_INVERT_SGIS
* gl:SAMPLE_MASK_NV
* gl:SAMPLE_MASK_SGIS
* gl:SAMPLE_MASK_VALUE
* gl:SAMPLE_MASK_VALUE_EXT
* gl:SAMPLE_MASK_VALUE_NV
* gl:SAMPLE_MASK_VALUE_SGIS
* gl:SAMPLE_PATTERN_EXT
* gl:SAMPLE_PATTERN_SGIS
* gl:SAMPLE_POSITION
* gl:SAMPLE_POSITION_NV
* gl:SAMPLER_1D
* gl:SAMPLER_1D_ARB
* gl:SAMPLER_1D_ARRAY
* gl:SAMPLER_1D_ARRAY_EXT
* gl:SAMPLER_1D_ARRAY_SHADOW
* gl:SAMPLER_1D_ARRAY_SHADOW_EXT
* gl:SAMPLER_1D_SHADOW
* gl:SAMPLER_1D_SHADOW_ARB
* gl:SAMPLER_2D
* gl:SAMPLER_2D_ARB
* gl:SAMPLER_2D_ARRAY
* gl:SAMPLER_2D_ARRAY_EXT
* gl:SAMPLER_2D_ARRAY_SHADOW
* gl:SAMPLER_2D_ARRAY_SHADOW_EXT
* gl:SAMPLER_2D_MULTISAMPLE
* gl:SAMPLER_2D_MULTISAMPLE_ARRAY
* gl:SAMPLER_2D_RECT
* gl:SAMPLER_2D_RECT_ARB
* gl:SAMPLER_2D_RECT_SHADOW
* gl:SAMPLER_2D_RECT_SHADOW_ARB
* gl:SAMPLER_2D_SHADOW
* gl:SAMPLER_2D_SHADOW_ARB
* gl:SAMPLER_3D
* gl:SAMPLER_3D_ARB
* gl:SAMPLER_BINDING
* gl:SAMPLER_BUFFER
* gl:SAMPLER_BUFFER_AMD
* gl:SAMPLER_BUFFER_EXT
* gl:SAMPLER_CUBE
* gl:SAMPLER_CUBE_ARB
* gl:SAMPLER_CUBE_MAP_ARRAY
* gl:SAMPLER_CUBE_MAP_ARRAY_SHADOW
* gl:SAMPLER_CUBE_SHADOW
* gl:SAMPLER_CUBE_SHADOW_EXT
* gl:SAMPLER_RENDERBUFFER_NV
* gl:SAMPLES
* gl:SAMPLES_3DFX
* gl:SAMPLES_ARB
* gl:SAMPLES_EXT
* gl:SAMPLE_SHADING
* gl:SAMPLES_PASSED
* gl:SAMPLES_PASSED_ARB
* gl:SAMPLES_SGIS
* gl:SATURATE_BIT_ATI
* gl:SCALAR_EXT
* gl:SCALEBIAS_HINT_SGIX
* gl:SCALE_BY_FOUR_NV
* gl:SCALE_BY_ONE_HALF_NV
* gl:SCALE_BY_TWO_NV
* gl:SCREEN_COORDINATES_REND
* gl:SECONDARY_COLOR_ARRAY
* gl:SECONDARY_COLOR_ARRAY_ADDRESS_NV
* gl:SECONDARY_COLOR_ARRAY_BUFFER_BINDING
* gl:SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
* gl:SECONDARY_COLOR_ARRAY_EXT
* gl:SECONDARY_COLOR_ARRAY_LENGTH_NV
* gl:SECONDARY_COLOR_ARRAY_LIST_IBM
* gl:SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
* gl:SECONDARY_COLOR_ARRAY_POINTER
* gl:SECONDARY_COLOR_ARRAY_POINTER_EXT
* gl:SECONDARY_COLOR_ARRAY_SIZE
* gl:SECONDARY_COLOR_ARRAY_SIZE_EXT
* gl:SECONDARY_COLOR_ARRAY_STRIDE
* gl:SECONDARY_COLOR_ARRAY_STRIDE_EXT
* gl:SECONDARY_COLOR_ARRAY_TYPE
* gl:SECONDARY_COLOR_ARRAY_TYPE_EXT
* gl:SECONDARY_COLOR_NV
* gl:SECONDARY_INTERPOLATOR_ATI
* gl:SEPARABLE_2D
* gl:SEPARABLE_2D_EXT
* gl:SEPARATE_ATTRIBS
* gl:SEPARATE_ATTRIBS_EXT
* gl:SEPARATE_ATTRIBS_NV
* gl:SEPARATE_SPECULAR_COLOR
* gl:SEPARATE_SPECULAR_COLOR_EXT
* gl:SHADER_CONSISTENT_NV
* gl:SHADER_INCLUDE_ARB
* gl:SHADER_OBJECT_ARB
* gl:SHADER_OPERATION_NV
* gl:SHADER_SOURCE_LENGTH
* gl:SHADER_TYPE
* gl:SHADING_LANGUAGE_VERSION
* gl:SHADOW_AMBIENT_SGIX
* gl:SHADOW_ATTENUATION_EXT
* gl:SHARED_TEXTURE_PALETTE_EXT
* gl:SHARPEN_TEXTURE_FUNC_POINTS_SGIS
* gl:SIGNALED
* gl:SIGNED_ALPHA8_NV
* gl:SIGNED_ALPHA_NV
* gl:SIGNED_HILO16_NV
* gl:SIGNED_HILO8_NV
* gl:SIGNED_HILO_NV
* gl:SIGNED_IDENTITY_NV
* gl:SIGNED_INTENSITY8_NV
* gl:SIGNED_INTENSITY_NV
* gl:SIGNED_LUMINANCE8_ALPHA8_NV
* gl:SIGNED_LUMINANCE8_NV
* gl:SIGNED_LUMINANCE_ALPHA_NV
* gl:SIGNED_LUMINANCE_NV
* gl:SIGNED_NEGATE_NV
* gl:SIGNED_NORMALIZED
* gl:SIGNED_RGB8_NV
* gl:SIGNED_RGB8_UNSIGNED_ALPHA8_NV
* gl:SIGNED_RGBA8_NV
* gl:SIGNED_RGBA_NV
* gl:SIGNED_RGB_NV
* gl:SIGNED_RGB_UNSIGNED_ALPHA_NV
* gl:SINGLE_COLOR
* gl:SINGLE_COLOR_EXT
* gl:SLICE_ACCUM_SUN
* gl:SLUMINANCE
* gl:SLUMINANCE8
* gl:SLUMINANCE8_ALPHA8
* gl:SLUMINANCE8_ALPHA8_EXT
* gl:SLUMINANCE8_EXT
* gl:SLUMINANCE_ALPHA
* gl:SLUMINANCE_ALPHA_EXT
* gl:SLUMINANCE_EXT
* gl:SMOOTH_LINE_WIDTH_GRANULARITY
* gl:SMOOTH_LINE_WIDTH_RANGE
* gl:SMOOTH_POINT_SIZE_GRANULARITY
* gl:SMOOTH_POINT_SIZE_RANGE
* gl:SOURCE0_ALPHA
* gl:SOURCE0_ALPHA_ARB
* gl:SOURCE0_ALPHA_EXT
* gl:SOURCE0_RGB
* gl:SOURCE0_RGB_ARB
* gl:SOURCE0_RGB_EXT
* gl:SOURCE1_ALPHA
* gl:SOURCE1_ALPHA_ARB
* gl:SOURCE1_ALPHA_EXT
* gl:SOURCE1_RGB
* gl:SOURCE1_RGB_ARB
* gl:SOURCE1_RGB_EXT
* gl:SOURCE2_ALPHA
* gl:SOURCE2_ALPHA_ARB
* gl:SOURCE2_ALPHA_EXT
* gl:SOURCE2_RGB
* gl:SOURCE2_RGB_ARB
* gl:SOURCE2_RGB_EXT
* gl:SOURCE3_ALPHA_NV
* gl:SOURCE3_RGB_NV
* gl:SPARE0_NV
* gl:SPARE0_PLUS_SECONDARY_COLOR_NV
* gl:SPARE1_NV
* gl:SPRITE_AXIAL_SGIX
* gl:SPRITE_AXIS_SGIX
* gl:SPRITE_EYE_ALIGNED_SGIX
* gl:SPRITE_MODE_SGIX
* gl:SPRITE_OBJECT_ALIGNED_SGIX
* gl:SPRITE_SGIX
* gl:SPRITE_TRANSLATION_SGIX
* gl:SRC0_ALPHA
* gl:SRC0_RGB
* gl:SRC1_ALPHA
* gl:SRC1_COLOR
* gl:SRC1_RGB
* gl:SRC2_ALPHA
* gl:SRC2_RGB
* gl:SRGB
* gl:SRGB8
* gl:SRGB8_ALPHA8
* gl:SRGB8_ALPHA8_EXT
* gl:SRGB8_EXT
* gl:SRGB_ALPHA
* gl:SRGB_ALPHA_EXT
* gl:SRGB_EXT
* gl:STATIC_ATI
* gl:STATIC_COPY
* gl:STATIC_COPY_ARB
* gl:STATIC_DRAW
* gl:STATIC_DRAW_ARB
* gl:STATIC_READ
* gl:STATIC_READ_ARB
* gl:STENCIL_ATTACHMENT
* gl:STENCIL_ATTACHMENT_EXT
* gl:STENCIL_BACK_FAIL
* gl:STENCIL_BACK_FAIL_ATI
* gl:STENCIL_BACK_FUNC
* gl:STENCIL_BACK_FUNC_ATI
* gl:STENCIL_BACK_PASS_DEPTH_FAIL
* gl:STENCIL_BACK_PASS_DEPTH_FAIL_ATI
* gl:STENCIL_BACK_PASS_DEPTH_PASS
* gl:STENCIL_BACK_PASS_DEPTH_PASS_ATI
* gl:STENCIL_BACK_REF
* gl:STENCIL_BACK_VALUE_MASK
* gl:STENCIL_BACK_WRITEMASK
* gl:STENCIL_BUFFER
* gl:STENCIL_CLEAR_TAG_VALUE_EXT
* gl:STENCIL_INDEX1
* gl:STENCIL_INDEX16
* gl:STENCIL_INDEX16_EXT
* gl:STENCIL_INDEX1_EXT
* gl:STENCIL_INDEX4
* gl:STENCIL_INDEX4_EXT
* gl:STENCIL_INDEX8
* gl:STENCIL_INDEX8_EXT
* gl:STENCIL_INDEX_EXT
* gl:STENCIL_TAG_BITS_EXT
* gl:STENCIL_TEST_TWO_SIDE_EXT
* gl:STORAGE_CACHED_APPLE
* gl:STORAGE_PRIVATE_APPLE
* gl:STORAGE_SHARED_APPLE
* gl:STREAM_COPY
* gl:STREAM_COPY_ARB
* gl:STREAM_DRAW
* gl:STREAM_DRAW_ARB
* gl:STREAM_READ
* gl:STREAM_READ_ARB
* gl:STRICT_DEPTHFUNC_HINT_PGI
* gl:STRICT_LIGHTING_HINT_PGI
* gl:STRICT_SCISSOR_HINT_PGI
* gl:SUB_ATI
* gl:SUBTRACT
* gl:SUBTRACT_ARB
* gl:SUCCESS_NV
* gl:SWIZZLE_STQ_ATI
* gl:SWIZZLE_STQ_DQ_ATI
* gl:SWIZZLE_STR_ATI
* gl:SWIZZLE_STR_DR_ATI
* gl:SWIZZLE_STRQ_ATI
* gl:SWIZZLE_STRQ_DQ_ATI
* gl:SYNC_CONDITION
* gl:SYNC_FENCE
* gl:SYNC_FLAGS
* gl:SYNC_FLUSH_COMMANDS_BIT
* gl:SYNC_GPU_COMMANDS_COMPLETE
* gl:SYNC_STATUS
* gl:T2F_IUI_N3F_V2F_EXT
* gl:T2F_IUI_N3F_V3F_EXT
* gl:T2F_IUI_V2F_EXT
* gl:T2F_IUI_V3F_EXT
* gl:TABLE_TOO_LARGE
* gl:TABLE_TOO_LARGE_EXT
* gl:TANGENT_ARRAY_EXT
* gl:TANGENT_ARRAY_POINTER_EXT
* gl:TANGENT_ARRAY_STRIDE_EXT
* gl:TANGENT_ARRAY_TYPE_EXT
* gl:TESS_CONTROL_OUTPUT_VERTICES
* gl:TESS_CONTROL_SHADER
* gl:TESSELLATION_FACTOR_AMD
* gl:TESSELLATION_MODE_AMD
* gl:TESS_EVALUATION_SHADER
* gl:TESS_GEN_MODE
* gl:TESS_GEN_POINT_MODE
* gl:TESS_GEN_SPACING
* gl:TESS_GEN_VERTEX_ORDER
* gl:TEXCOORD1_BIT_PGI
* gl:TEXCOORD2_BIT_PGI
* gl:TEXCOORD3_BIT_PGI
* gl:TEXCOORD4_BIT_PGI
* gl:TEXT_FRAGMENT_SHADER_ATI
* gl:TEXTURE0
* gl:TEXTURE0_ARB
* gl:TEXTURE1
* gl:TEXTURE10
* gl:TEXTURE10_ARB
* gl:TEXTURE11
* gl:TEXTURE11_ARB
* gl:TEXTURE12
* gl:TEXTURE12_ARB
* gl:TEXTURE13
* gl:TEXTURE13_ARB
* gl:TEXTURE14
* gl:TEXTURE14_ARB
* gl:TEXTURE15
* gl:TEXTURE15_ARB
* gl:TEXTURE16
* gl:TEXTURE16_ARB
* gl:TEXTURE17
* gl:TEXTURE17_ARB
* gl:TEXTURE18
* gl:TEXTURE18_ARB
* gl:TEXTURE19
* gl:TEXTURE19_ARB
* gl:TEXTURE1_ARB
* gl:TEXTURE_1D_ARRAY
* gl:TEXTURE_1D_ARRAY_EXT
* gl:TEXTURE_1D_BINDING_EXT
* gl:TEXTURE_1D_STACK_BINDING_MESAX
* gl:TEXTURE_1D_STACK_MESAX
* gl:TEXTURE2
* gl:TEXTURE20
* gl:TEXTURE20_ARB
* gl:TEXTURE21
* gl:TEXTURE21_ARB
* gl:TEXTURE22
* gl:TEXTURE22_ARB
* gl:TEXTURE23
* gl:TEXTURE23_ARB
* gl:TEXTURE24
* gl:TEXTURE24_ARB
* gl:TEXTURE25
* gl:TEXTURE25_ARB
* gl:TEXTURE26
* gl:TEXTURE26_ARB
* gl:TEXTURE27
* gl:TEXTURE27_ARB
* gl:TEXTURE28
* gl:TEXTURE28_ARB
* gl:TEXTURE29
* gl:TEXTURE29_ARB
* gl:TEXTURE2_ARB
* gl:TEXTURE_2D_ARRAY
* gl:TEXTURE_2D_ARRAY_EXT
* gl:TEXTURE_2D_BINDING_EXT
* gl:TEXTURE_2D_MULTISAMPLE
* gl:TEXTURE_2D_MULTISAMPLE_ARRAY
* gl:TEXTURE_2D_STACK_BINDING_MESAX
* gl:TEXTURE_2D_STACK_MESAX
* gl:TEXTURE3
* gl:TEXTURE30
* gl:TEXTURE30_ARB
* gl:TEXTURE31
* gl:TEXTURE31_ARB
* gl:TEXTURE3_ARB
* gl:TEXTURE_3D
* gl:TEXTURE_3D_BINDING_EXT
* gl:TEXTURE_3D_EXT
* gl:TEXTURE4
* gl:TEXTURE4_ARB
* gl:TEXTURE_4D_BINDING_SGIS
* gl:TEXTURE_4D_SGIS
* gl:TEXTURE_4DSIZE_SGIS
* gl:TEXTURE5
* gl:TEXTURE5_ARB
* gl:TEXTURE6
* gl:TEXTURE6_ARB
* gl:TEXTURE7
* gl:TEXTURE7_ARB
* gl:TEXTURE8
* gl:TEXTURE8_ARB
* gl:TEXTURE9
* gl:TEXTURE9_ARB
* gl:TEXTURE_ALPHA_SIZE_EXT
* gl:TEXTURE_ALPHA_TYPE
* gl:TEXTURE_ALPHA_TYPE_ARB
* gl:TEXTURE_APPLICATION_MODE_EXT
* gl:TEXTURE_BASE_LEVEL
* gl:TEXTURE_BASE_LEVEL_SGIS
* gl:TEXTURE_BINDING_1D_ARRAY
* gl:TEXTURE_BINDING_1D_ARRAY_EXT
* gl:TEXTURE_BINDING_2D_ARRAY
* gl:TEXTURE_BINDING_2D_ARRAY_EXT
* gl:TEXTURE_BINDING_2D_MULTISAMPLE
* gl:TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
* gl:TEXTURE_BINDING_3D
* gl:TEXTURE_BINDING_BUFFER
* gl:TEXTURE_BINDING_BUFFER_ARB
* gl:TEXTURE_BINDING_BUFFER_EXT
* gl:TEXTURE_BINDING_CUBE_MAP
* gl:TEXTURE_BINDING_CUBE_MAP_ARB
* gl:TEXTURE_BINDING_CUBE_MAP_ARRAY
* gl:TEXTURE_BINDING_CUBE_MAP_EXT
* gl:TEXTURE_BINDING_RECTANGL:E
* gl:TEXTURE_BINDING_RECTANGLE_ARB
* gl:TEXTURE_BINDING_RECTANGLE_EXT
* gl:TEXTURE_BINDING_RECTANGLE_NV
* gl:TEXTURE_BINDING_RENDERBUFFER_NV
* gl:TEXTURE_BLUE_SIZE_EXT
* gl:TEXTURE_BLUE_TYPE
* gl:TEXTURE_BLUE_TYPE_ARB
* gl:TEXTURE_BORDER_VALUES_NV
* gl:TEXTURE_BUFFER
* gl:TEXTURE_BUFFER_ARB
* gl:TEXTURE_BUFFER_DATA_STORE_BINDING
* gl:TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
* gl:TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
* gl:TEXTURE_BUFFER_EXT
* gl:TEXTURE_BUFFER_FORMAT
* gl:TEXTURE_BUFFER_FORMAT_ARB
* gl:TEXTURE_BUFFER_FORMAT_EXT
* gl:TEXTURE_CLIPMAP_CENTER_SGIX
* gl:TEXTURE_CLIPMAP_DEPTH_SGIX
* gl:TEXTURE_CLIPMAP_FRAME_SGIX
* gl:TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
* gl:TEXTURE_CLIPMAP_OFFSET_SGIX
* gl:TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
* gl:TEXTURE_COLOR_TABLE_SGI
* gl:TEXTURE_COLOR_WRITEMASK_SGIS
* gl:TEXTURE_COMPARE_FAIL_VALUE_ARB
* gl:TEXTURE_COMPARE_FUNC
* gl:TEXTURE_COMPARE_FUNC_ARB
* gl:TEXTURE_COMPARE_MODE
* gl:TEXTURE_COMPARE_MODE_ARB
* gl:TEXTURE_COMPARE_OPERATOR_SGIX
* gl:TEXTURE_COMPARE_SGIX
* gl:TEXTURE_COMPRESSED
* gl:TEXTURE_COMPRESSED_ARB
* gl:TEXTURE_COMPRESSED_IMAGE_SIZE
* gl:TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
* gl:TEXTURE_COMPRESSION_HINT
* gl:TEXTURE_COMPRESSION_HINT_ARB
* gl:TEXTURE_CONSTANT_DATA_SUNX
* gl:TEXTURE_COORD_ARRAY_ADDRESS_NV
* gl:TEXTURE_COORD_ARRAY_BUFFER_BINDING
* gl:TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
* gl:TEXTURE_COORD_ARRAY_COUNT_EXT
* gl:TEXTURE_COORD_ARRAY_EXT
* gl:TEXTURE_COORD_ARRAY_LENGTH_NV
* gl:TEXTURE_COORD_ARRAY_LIST_IBM
* gl:TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
* gl:TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
* gl:TEXTURE_COORD_ARRAY_POINTER_EXT
* gl:TEXTURE_COORD_ARRAY_SIZE_EXT
* gl:TEXTURE_COORD_ARRAY_STRIDE_EXT
* gl:TEXTURE_COORD_ARRAY_TYPE_EXT
* gl:TEXTURE_COORD_NV
* gl:TEXTURE_CUBE_MAP
* gl:TEXTURE_CUBE_MAP_ARB
* gl:TEXTURE_CUBE_MAP_ARRAY
* gl:TEXTURE_CUBE_MAP_EXT
* gl:TEXTURE_CUBE_MAP_NEGATIVE_X
* gl:TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
* gl:TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Y
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Z
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
* gl:TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
* gl:TEXTURE_CUBE_MAP_POSITIVE_X
* gl:TEXTURE_CUBE_MAP_POSITIVE_X_ARB
* gl:TEXTURE_CUBE_MAP_POSITIVE_X_EXT
* gl:TEXTURE_CUBE_MAP_POSITIVE_Y
* gl:TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
* gl:TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
* gl:TEXTURE_CUBE_MAP_POSITIVE_Z
* gl:TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
* gl:TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
* gl:TEXTURE_CUBE_MAP_SEAMLESS
* gl:TEXTURE_DEFORMATION_BIT_SGIX
* gl:TEXTURE_DEFORMATION_SGIX
* gl:TEXTURE_DEPTH
* gl:TEXTURE_DEPTH_EXT
* gl:TEXTURE_DEPTH_SIZE
* gl:TEXTURE_DEPTH_SIZE_ARB
* gl:TEXTURE_DEPTH_TYPE
* gl:TEXTURE_DEPTH_TYPE_ARB
* gl:TEXTURE_DS_SIZE_NV
* gl:TEXTURE_DT_SIZE_NV
* gl:TEXTURE_ENV_BIAS_SGIX
* gl:TEXTURE_FILTER4_SIZE_SGIS
* gl:TEXTURE_FILTER_CONTROL
* gl:TEXTURE_FILTER_CONTROL_EXT
* gl:TEXTURE_FIXED_SAMPLE_LOCATIONS
* gl:TEXTURE_FLOAT_COMPONENTS_NV
* gl:TEXTURE_FREE_MEMORY_ATI
* gl:TEXTURE_GEQUAL_R_SGIX
* gl:TEXTURE_GREEN_SIZE_EXT
* gl:TEXTURE_GREEN_TYPE
* gl:TEXTURE_GREEN_TYPE_ARB
* gl:TEXTURE_HI_SIZE_NV
* gl:TEXTURE_INDEX_SIZE_EXT
* gl:TEXTURE_INTENSITY_SIZE_EXT
* gl:TEXTURE_INTENSITY_TYPE
* gl:TEXTURE_INTENSITY_TYPE_ARB
* gl:TEXTURE_LEQUAL_R_SGIX
* gl:TEXTURE_LIGHT_EXT
* gl:TEXTURE_LIGHTING_MODE_HP
* gl:TEXTURE_LOD_BIAS
* gl:TEXTURE_LOD_BIAS_EXT
* gl:TEXTURE_LOD_BIAS_R_SGIX
* gl:TEXTURE_LOD_BIAS_S_SGIX
* gl:TEXTURE_LOD_BIAS_T_SGIX
* gl:TEXTURE_LO_SIZE_NV
* gl:TEXTURE_LUMINANCE_SIZE_EXT
* gl:TEXTURE_LUMINANCE_TYPE
* gl:TEXTURE_LUMINANCE_TYPE_ARB
* gl:TEXTURE_MAG_SIZE_NV
* gl:TEXTURE_MATERIAL_FACE_EXT
* gl:TEXTURE_MATERIAL_PARAMETER_EXT
* gl:TEXTURE_MAX_ANISOTROPY_EXT
* gl:TEXTURE_MAX_CLAMP_R_SGIX
* gl:TEXTURE_MAX_CLAMP_S_SGIX
* gl:TEXTURE_MAX_CLAMP_T_SGIX
* gl:TEXTURE_MAX_LEVEL
* gl:TEXTURE_MAX_LEVEL_SGIS
* gl:TEXTURE_MAX_LOD
* gl:TEXTURE_MAX_LOD_SGIS
* gl:TEXTURE_MIN_LOD
* gl:TEXTURE_MIN_LOD_SGIS
* gl:TEXTURE_MULTI_BUFFER_HINT_SGIX
* gl:TEXTURE_NORMAL_EXT
* gl:TEXTURE_POST_SPECULAR_HP
* gl:TEXTURE_PRE_SPECULAR_HP
* gl:TEXTURE_PRIORITY_EXT
* gl:TEXTURE_RANGE_LENGTH_APPLE
* gl:TEXTURE_RANGE_POINTER_APPLE
* gl:TEXTURE_RECTANGLE
* gl:TEXTURE_RECTANGLE_ARB
* gl:TEXTURE_RECTANGLE_EXT
* gl:TEXTURE_RECTANGLE_NV
* gl:TEXTURE_RED_SIZE_EXT
* gl:TEXTURE_RED_TYPE
* gl:TEXTURE_RED_TYPE_ARB
* gl:TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
* gl:TEXTURE_RENDERBUFFER_NV
* gl:TEXTURE_RESIDENT_EXT
* gl:TEXTURE_SAMPLES
* gl:TEXTURE_SHADER_NV
* gl:TEXTURE_SHARED_SIZE
* gl:TEXTURE_SHARED_SIZE_EXT
* gl:TEXTURE_STENCIL_SIZE
* gl:TEXTURE_STENCIL_SIZE_EXT
* gl:TEXTURE_STORAGE_HINT_APPLE
* gl:TEXTURE_SWIZZLE_A
* gl:TEXTURE_SWIZZLE_A_EXT
* gl:TEXTURE_SWIZZLE_B
* gl:TEXTURE_SWIZZLE_B_EXT
* gl:TEXTURE_SWIZZLE_G
* gl:TEXTURE_SWIZZLE_G_EXT
* gl:TEXTURE_SWIZZLE_R
* gl:TEXTURE_SWIZZLE_R_EXT
* gl:TEXTURE_SWIZZLE_RGBA
* gl:TEXTURE_SWIZZLE_RGBA_EXT
* gl:TEXTURE_TOO_LARGE_EXT
* gl:TEXTURE_UNSIGNED_REMAP_MODE_NV
* gl:TEXTURE_WRAP_Q_SGIS
* gl:TEXTURE_WRAP_R
* gl:TEXTURE_WRAP_R_EXT
* gl:TIME_ELAPSED
* gl:TIME_ELAPSED_EXT
* gl:TIMEOUT_EXPIRED
* gl:TIMESTAMP
* gl:TRACK_MATRIX_NV
* gl:TRACK_MATRIX_TRANSFORM_NV
* gl:TRANSFORM_FEEDBACK
* gl:TRANSFORM_FEEDBACK_ATTRIBS_NV
* gl:TRANSFORM_FEEDBACK_BINDING
* gl:TRANSFORM_FEEDBACK_BINDING_NV
* gl:TRANSFORM_FEEDBACK_BUFFER
* gl:TRANSFORM_FEEDBACK_BUFFER_ACTIVE
* gl:TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_BINDING
* gl:TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
* gl:TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_EXT
* gl:TRANSFORM_FEEDBACK_BUFFER_MODE
* gl:TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
* gl:TRANSFORM_FEEDBACK_BUFFER_MODE_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_PAUSED
* gl:TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_SIZE
* gl:TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
* gl:TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
* gl:TRANSFORM_FEEDBACK_BUFFER_START
* gl:TRANSFORM_FEEDBACK_BUFFER_START_EXT
* gl:TRANSFORM_FEEDBACK_BUFFER_START_NV
* gl:TRANSFORM_FEEDBACK_NV
* gl:TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
* gl:TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
* gl:TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
* gl:TRANSFORM_FEEDBACK_RECORD_NV
* gl:TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
* gl:TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
* gl:TRANSFORM_FEEDBACK_VARYINGS
* gl:TRANSFORM_FEEDBACK_VARYINGS_EXT
* gl:TRANSFORM_FEEDBACK_VARYINGS_NV
* gl:TRANSFORM_HINT_APPLE
* gl:TRANSPOSE_COLOR_MATRIX
* gl:TRANSPOSE_COLOR_MATRIX_ARB
* gl:TRANSPOSE_CURRENT_MATRIX_ARB
* gl:TRANSPOSE_MODELVIEW_MATRIX
* gl:TRANSPOSE_MODELVIEW_MATRIX_ARB
* gl:TRANSPOSE_NV
* gl:TRANSPOSE_PROGRAM_MATRIX_EXT
* gl:TRANSPOSE_PROJECTION_MATRIX
* gl:TRANSPOSE_PROJECTION_MATRIX_ARB
* gl:TRANSPOSE_TEXTURE_MATRIX
* gl:TRANSPOSE_TEXTURE_MATRIX_ARB
* gl:TRIANGLE_LIST_SUN
* gl:TRIANGLE_MESH_SUN
* gl:TRIANGLES_ADJACENCY
* gl:TRIANGLES_ADJACENCY_ARB
* gl:TRIANGLES_ADJACENCY_EXT
* gl:TRIANGLE_STRIP_ADJACENCY
* gl:TRIANGLE_STRIP_ADJACENCY_ARB
* gl:TRIANGLE_STRIP_ADJACENCY_EXT
* gl:UNDEFINED_APPLE
* gl:UNIFORM_ARRAY_STRIDE
* gl:UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
* gl:UNIFORM_BLOCK_ACTIVE_UNIFORMS
* gl:UNIFORM_BLOCK_BINDING
* gl:UNIFORM_BLOCK_DATA_SIZE
* gl:UNIFORM_BLOCK_INDEX
* gl:UNIFORM_BLOCK_NAME_LENGTH
* gl:UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
* gl:UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
* gl:UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
* gl:UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
* gl:UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
* gl:UNIFORM_BUFFER
* gl:UNIFORM_BUFFER_BINDING
* gl:UNIFORM_BUFFER_BINDING_EXT
* gl:UNIFORM_BUFFER_EXT
* gl:UNIFORM_BUFFER_OFFSET_ALIGNMENT
* gl:UNIFORM_BUFFER_SIZE
* gl:UNIFORM_BUFFER_START
* gl:UNIFORM_IS_ROW_MAJOR
* gl:UNIFORM_MATRIX_STRIDE
* gl:UNIFORM_NAME_LENGTH
* gl:UNIFORM_OFFSET
* gl:UNIFORM_SIZE
* gl:UNIFORM_TYPE
* gl:UNPACK_CLIENT_STORAGE_APPLE
* gl:UNPACK_CMYK_HINT_EXT
* gl:UNPACK_CONSTANT_DATA_SUNX
* gl:UNPACK_IMAGE_DEPTH_SGIS
* gl:UNPACK_IMAGE_HEIGHT
* gl:UNPACK_IMAGE_HEIGHT_EXT
* gl:UNPACK_RESAMPLE_OML
* gl:UNPACK_RESAMPLE_SGIX
* gl:UNPACK_ROW_BYTES_APPLE
* gl:UNPACK_SKIP_IMAGES
* gl:UNPACK_SKIP_IMAGES_EXT
* gl:UNPACK_SKIP_VOLUMES_SGIS
* gl:UNPACK_SUBSAMPLE_RATE_SGIX
* gl:UNSIGNALED
* gl:UNSIGNED_BYTE_2_3_3_REV
* gl:UNSIGNED_BYTE_3_3_2
* gl:UNSIGNED_BYTE_3_3_2_EXT
* gl:UNSIGNED_IDENTITY_NV
* gl:UNSIGNED_INT
* gl:UNSIGNED_INT_10_10_10_2
* gl:UNSIGNED_INT_10_10_10_2_EXT
* gl:UNSIGNED_INT_10F_11F_11F_REV
* gl:UNSIGNED_INT_10F_11F_11F_REV_EXT
* gl:UNSIGNED_INT_2_10_10_10_REV
* gl:UNSIGNED_INT_24_8
* gl:UNSIGNED_INT_24_8_EXT
* gl:UNSIGNED_INT_24_8_NV
* gl:UNSIGNED_INT_5_9_9_9_REV
* gl:UNSIGNED_INT_5_9_9_9_REV_EXT
* gl:UNSIGNED_INT64_AMD
* gl:UNSIGNED_INT_8_8_8_8
* gl:UNSIGNED_INT_8_8_8_8_EXT
* gl:UNSIGNED_INT_8_8_8_8_REV
* gl:UNSIGNED_INT_8_8_S8_S8_REV_NV
* gl:UNSIGNED_INT_S8_S8_8_8_NV
* gl:UNSIGNED_INT_SAMPLER_1D
* gl:UNSIGNED_INT_SAMPLER_1D_ARRAY
* gl:UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
* gl:UNSIGNED_INT_SAMPLER_1D_EXT
* gl:UNSIGNED_INT_SAMPLER_2D
* gl:UNSIGNED_INT_SAMPLER_2D_ARRAY
* gl:UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
* gl:UNSIGNED_INT_SAMPLER_2D_EXT
* gl:UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
* gl:UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
* gl:UNSIGNED_INT_SAMPLER_2D_RECT
* gl:UNSIGNED_INT_SAMPLER_2D_RECT_EXT
* gl:UNSIGNED_INT_SAMPLER_3D
* gl:UNSIGNED_INT_SAMPLER_3D_EXT
* gl:UNSIGNED_INT_SAMPLER_BUFFER
* gl:UNSIGNED_INT_SAMPLER_BUFFER_AMD
* gl:UNSIGNED_INT_SAMPLER_BUFFER_EXT
* gl:UNSIGNED_INT_SAMPLER_CUBE
* gl:UNSIGNED_INT_SAMPLER_CUBE_EXT
* gl:UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
* gl:UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
* gl:UNSIGNED_INT_VEC2
* gl:UNSIGNED_INT_VEC2_EXT
* gl:UNSIGNED_INT_VEC3
* gl:UNSIGNED_INT_VEC3_EXT
* gl:UNSIGNED_INT_VEC4
* gl:UNSIGNED_INT_VEC4_EXT
* gl:UNSIGNED_INVERT_NV
* gl:UNSIGNED_NORMALIZED
* gl:UNSIGNED_NORMALIZED_ARB
* gl:UNSIGNED_SHORT_1_5_5_5_REV
* gl:UNSIGNED_SHORT_4_4_4_4
* gl:UNSIGNED_SHORT_4_4_4_4_EXT
* gl:UNSIGNED_SHORT_4_4_4_4_REV
* gl:UNSIGNED_SHORT_5_5_5_1
* gl:UNSIGNED_SHORT_5_5_5_1_EXT
* gl:UNSIGNED_SHORT_5_6_5
* gl:UNSIGNED_SHORT_5_6_5_REV
* gl:UNSIGNED_SHORT_8_8_APPLE
* gl:UNSIGNED_SHORT_8_8_MESA
* gl:UNSIGNED_SHORT_8_8_REV_APPLE
* gl:UNSIGNED_SHORT_8_8_REV_MESA
* gl:UPPER_LEFT
* gl:VALIDATE_STATUS
* gl:VARIABLE_A_NV
* gl:VARIABLE_B_NV
* gl:VARIABLE_C_NV
* gl:VARIABLE_D_NV
* gl:VARIABLE_E_NV
* gl:VARIABLE_F_NV
* gl:VARIABLE_G_NV
* gl:VARIANT_ARRAY_EXT
* gl:VARIANT_ARRAY_POINTER_EXT
* gl:VARIANT_ARRAY_STRIDE_EXT
* gl:VARIANT_ARRAY_TYPE_EXT
* gl:VARIANT_DATATYPE_EXT
* gl:VARIANT_EXT
* gl:VARIANT_VALUE_EXT
* gl:VBO_FREE_MEMORY_ATI
* gl:VECTOR_EXT
* gl:VERSION_1_2
* gl:VERSION_1_3
* gl:VERSION_1_4
* gl:VERSION_1_5
* gl:VERSION_2_0
* gl:VERSION_2_1
* gl:VERTEX23_BIT_PGI
* gl:VERTEX4_BIT_PGI
* gl:VERTEX_ARRAY_ADDRESS_NV
* gl:VERTEX_ARRAY_BINDING
* gl:VERTEX_ARRAY_BINDING_APPLE
* gl:VERTEX_ARRAY_BUFFER_BINDING
* gl:VERTEX_ARRAY_BUFFER_BINDING_ARB
* gl:VERTEX_ARRAY_COUNT_EXT
* gl:VERTEX_ARRAY_EXT
* gl:VERTEX_ARRAY_LENGTH_NV
* gl:VERTEX_ARRAY_LIST_IBM
* gl:VERTEX_ARRAY_LIST_STRIDE_IBM
* gl:VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
* gl:VERTEX_ARRAY_POINTER_EXT
* gl:VERTEX_ARRAY_RANGE_APPLE
* gl:VERTEX_ARRAY_RANGE_LENGTH_APPLE
* gl:VERTEX_ARRAY_RANGE_LENGTH_NV
* gl:VERTEX_ARRAY_RANGE_NV
* gl:VERTEX_ARRAY_RANGE_POINTER_APPLE
* gl:VERTEX_ARRAY_RANGE_POINTER_NV
* gl:VERTEX_ARRAY_RANGE_VALID_NV
* gl:VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
* gl:VERTEX_ARRAY_SIZE_EXT
* gl:VERTEX_ARRAY_STORAGE_HINT_APPLE
* gl:VERTEX_ARRAY_STRIDE_EXT
* gl:VERTEX_ARRAY_TYPE_EXT
* gl:VERTEX_ATTRIB_ARRAY0_NV
* gl:VERTEX_ATTRIB_ARRAY10_NV
* gl:VERTEX_ATTRIB_ARRAY11_NV
* gl:VERTEX_ATTRIB_ARRAY12_NV
* gl:VERTEX_ATTRIB_ARRAY13_NV
* gl:VERTEX_ATTRIB_ARRAY14_NV
* gl:VERTEX_ATTRIB_ARRAY15_NV
* gl:VERTEX_ATTRIB_ARRAY1_NV
* gl:VERTEX_ATTRIB_ARRAY2_NV
* gl:VERTEX_ATTRIB_ARRAY3_NV
* gl:VERTEX_ATTRIB_ARRAY4_NV
* gl:VERTEX_ATTRIB_ARRAY5_NV
* gl:VERTEX_ATTRIB_ARRAY6_NV
* gl:VERTEX_ATTRIB_ARRAY7_NV
* gl:VERTEX_ATTRIB_ARRAY8_NV
* gl:VERTEX_ATTRIB_ARRAY9_NV
* gl:VERTEX_ATTRIB_ARRAY_ADDRESS_NV
* gl:VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
* gl:VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
* gl:VERTEX_ATTRIB_ARRAY_ENABLED
* gl:VERTEX_ATTRIB_ARRAY_ENABLED_ARB
* gl:VERTEX_ATTRIB_ARRAY_INTEGER
* gl:VERTEX_ATTRIB_ARRAY_INTEGER_EXT
* gl:VERTEX_ATTRIB_ARRAY_LENGTH_NV
* gl:VERTEX_ATTRIB_ARRAY_NORMALIZED
* gl:VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
* gl:VERTEX_ATTRIB_ARRAY_POINTER
* gl:VERTEX_ATTRIB_ARRAY_POINTER_ARB
* gl:VERTEX_ATTRIB_ARRAY_SIZE
* gl:VERTEX_ATTRIB_ARRAY_SIZE_ARB
* gl:VERTEX_ATTRIB_ARRAY_STRIDE
* gl:VERTEX_ATTRIB_ARRAY_STRIDE_ARB
* gl:VERTEX_ATTRIB_ARRAY_TYPE
* gl:VERTEX_ATTRIB_ARRAY_TYPE_ARB
* gl:VERTEX_ATTRIB_ARRAY_UNIFIED_NV
* gl:VERTEX_ATTRIB_MAP1_APPLE
* gl:VERTEX_ATTRIB_MAP1_COEFF_APPLE
* gl:VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
* gl:VERTEX_ATTRIB_MAP1_ORDER_APPLE
* gl:VERTEX_ATTRIB_MAP1_SIZE_APPLE
* gl:VERTEX_ATTRIB_MAP2_APPLE
* gl:VERTEX_ATTRIB_MAP2_COEFF_APPLE
* gl:VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
* gl:VERTEX_ATTRIB_MAP2_ORDER_APPLE
* gl:VERTEX_ATTRIB_MAP2_SIZE_APPLE
* gl:VERTEX_BLEND_ARB
* gl:VERTEX_CONSISTENT_HINT_PGI
* gl:VERTEX_DATA_HINT_PGI
* gl:VERTEX_ID_NV
* gl:VERTEX_PRECLIP_HINT_SGIX
* gl:VERTEX_PRECLIP_SGIX
* gl:VERTEX_PROGRAM_ARB
* gl:VERTEX_PROGRAM_BINDING_NV
* gl:VERTEX_PROGRAM_NV
* gl:VERTEX_PROGRAM_PARAMETER_BUFFER_NV
* gl:VERTEX_PROGRAM_POINT_SIZE
* gl:VERTEX_PROGRAM_POINT_SIZE_ARB
* gl:VERTEX_PROGRAM_POINT_SIZE_NV
* gl:VERTEX_PROGRAM_TWO_SIDE
* gl:VERTEX_PROGRAM_TWO_SIDE_ARB
* gl:VERTEX_PROGRAM_TWO_SIDE_NV
* gl:VERTEX_SHADER
* gl:VERTEX_SHADER_ARB
* gl:VERTEX_SHADER_BINDING_EXT
* gl:VERTEX_SHADER_EXT
* gl:VERTEX_SHADER_INSTRUCTIONS_EXT
* gl:VERTEX_SHADER_INVARIANTS_EXT
* gl:VERTEX_SHADER_LOCAL_CONSTANTS_EXT
* gl:VERTEX_SHADER_LOCALS_EXT
* gl:VERTEX_SHADER_OPTIMIZED_EXT
* gl:VERTEX_SHADER_VARIANTS_EXT
* gl:VERTEX_SOURCE_ATI
* gl:VERTEX_STATE_PROGRAM_NV
* gl:VERTEX_STREAM0_ATI
* gl:VERTEX_STREAM1_ATI
* gl:VERTEX_STREAM2_ATI
* gl:VERTEX_STREAM3_ATI
* gl:VERTEX_STREAM4_ATI
* gl:VERTEX_STREAM5_ATI
* gl:VERTEX_STREAM6_ATI
* gl:VERTEX_STREAM7_ATI
* gl:VERTEX_WEIGHT_ARRAY_EXT
* gl:VERTEX_WEIGHT_ARRAY_POINTER_EXT
* gl:VERTEX_WEIGHT_ARRAY_SIZE_EXT
* gl:VERTEX_WEIGHT_ARRAY_STRIDE_EXT
* gl:VERTEX_WEIGHT_ARRAY_TYPE_EXT
* gl:VERTEX_WEIGHTING_EXT
* gl:VIBRANCE_BIAS_NV
* gl:VIBRANCE_SCALE_NV
* gl:VIDEO_BUFFER_BINDING_NV
* gl:VIDEO_BUFFER_INTERNAL_FORMAT_NV
* gl:VIDEO_BUFFER_NV
* gl:VIDEO_BUFFER_PITCH_NV
* gl:VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
* gl:VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
* gl:VIDEO_CAPTURE_FRAME_HEIGHT_NV
* gl:VIDEO_CAPTURE_FRAME_WIDTH_NV
* gl:VIDEO_CAPTURE_SURFACE_ORIGIN_NV
* gl:VIDEO_CAPTURE_TO_422_SUPPORTED_NV
* gl:VIDEO_COLOR_CONVERSION_MATRIX_NV
* gl:VIDEO_COLOR_CONVERSION_MAX_NV
* gl:VIDEO_COLOR_CONVERSION_MIN_NV
* gl:VIDEO_COLOR_CONVERSION_OFFSET_NV
* gl:VOLATILE_APPLE
* gl:WAIT_FAILED
* gl:WEIGHT_ARRAY_ARB
* gl:WEIGHT_ARRAY_BUFFER_BINDING
* gl:WEIGHT_ARRAY_BUFFER_BINDING_ARB
* gl:WEIGHT_ARRAY_POINTER_ARB
* gl:WEIGHT_ARRAY_SIZE_ARB
* gl:WEIGHT_ARRAY_STRIDE_ARB
* gl:WEIGHT_ARRAY_TYPE_ARB
* gl:WEIGHT_SUM_UNITY_ARB
* gl:W_EXT
* gl:WIDE_LINE_HINT_PGI
* gl:WRAP_BORDER_SUN
* gl:WRITE_ONLY
* gl:WRITE_ONLY_ARB
* gl:WRITE_PIXEL_DATA_RANGE_LENGTH_NV
* gl:WRITE_PIXEL_DATA_RANGE_NV
* gl:WRITE_PIXEL_DATA_RANGE_POINTER_NV
* gl:X_EXT
* gl:YCBAYCR8A_4224_NV
* gl:YCBCR_422_APPLE
* gl:YCBCR_MESA
* gl:YCBYCR8_422_NV
* gl:YCRCB_422_SGIX
* gl:YCRCB_444_SGIX
* gl:YCRCBA_SGIX
* gl:YCRCB_SGIX
* gl:Y_EXT
* gl:Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
* gl:Z4Y12Z4CB12Z4CR12_444_NV
* gl:Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
* gl:Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
* gl:Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
* gl:ZERO_EXT
* gl:Z_EXT

==== gl: Functions

<procedure>gl:AccumxOES</procedure>
<procedure>gl:ActiveProgramEXT</procedure>
<procedure>gl:ActiveStencilFaceEXT</procedure>
<procedure>gl:ActiveTexture</procedure>
<procedure>gl:ActiveTextureARB</procedure>
<procedure>gl:ActiveVaryingNV</procedure>
<procedure>gl:AlphaFragmentOp1ATI</procedure>
<procedure>gl:AlphaFragmentOp2ATI</procedure>
<procedure>gl:AlphaFragmentOp3ATI</procedure>
<procedure>gl:AlphaFuncxOES</procedure>
<procedure>gl:ApplyTextureEXT</procedure>
<procedure>gl:AreProgramsResidentNV</procedure>
<procedure>gl:AreTexturesResidentEXT</procedure>
<procedure>gl:ArrayElementEXT</procedure>
<procedure>gl:ArrayObjectATI</procedure>
<procedure>gl:AsyncMarkerSGIX</procedure>
<procedure>gl:AttachObjectARB</procedure>
<procedure>gl:AttachShader</procedure>
<procedure>gl:BeginConditionalRender</procedure>
<procedure>gl:BeginConditionalRenderNV</procedure>
<procedure>gl:BeginFragmentShaderATI</procedure>
<procedure>gl:BeginOcclusionQueryNV</procedure>
<procedure>gl:BeginPerfMonitorAMD</procedure>
<procedure>gl:BeginQuery</procedure>
<procedure>gl:BeginQueryARB</procedure>
<procedure>gl:BeginQueryIndexed</procedure>
<procedure>gl:BeginTransformFeedback</procedure>
<procedure>gl:BeginTransformFeedbackEXT</procedure>
<procedure>gl:BeginTransformFeedbackNV</procedure>
<procedure>gl:BeginVertexShaderEXT</procedure>
<procedure>gl:BeginVideoCaptureNV</procedure>
<procedure>gl:BindAttribLocation</procedure>
<procedure>gl:BindAttribLocationARB</procedure>
<procedure>gl:BindBuffer</procedure>
<procedure>gl:BindBufferARB</procedure>
<procedure>gl:BindBufferBase</procedure>
<procedure>gl:BindBufferBaseEXT</procedure>
<procedure>gl:BindBufferBaseNV</procedure>
<procedure>gl:BindBufferBaseNV</procedure>
<procedure>gl:BindBufferOffsetEXT</procedure>
<procedure>gl:BindBufferOffsetNV</procedure>
<procedure>gl:BindBufferOffsetNV</procedure>
<procedure>gl:BindBufferRange</procedure>
<procedure>gl:BindBufferRangeEXT</procedure>
<procedure>gl:BindBufferRangeNV</procedure>
<procedure>gl:BindBufferRangeNV</procedure>
<procedure>gl:BindFragDataLocation</procedure>
<procedure>gl:BindFragDataLocationEXT</procedure>
<procedure>gl:BindFragDataLocationIndexed</procedure>
<procedure>gl:BindFragmentShaderATI</procedure>
<procedure>gl:BindFramebuffer</procedure>
<procedure>gl:BindFramebufferEXT</procedure>
<procedure>gl:BindLightParameterEXT</procedure>
<procedure>gl:BindMaterialParameterEXT</procedure>
<procedure>gl:BindMultiTextureEXT</procedure>
<procedure>gl:BindParameterEXT</procedure>
<procedure>gl:BindProgramARB</procedure>
<procedure>gl:BindProgramNV</procedure>
<procedure>gl:BindRenderbuffer</procedure>
<procedure>gl:BindRenderbufferEXT</procedure>
<procedure>gl:BindSampler</procedure>
<procedure>gl:BindTexGenParameterEXT</procedure>
<procedure>gl:BindTextureEXT</procedure>
<procedure>gl:BindTextureUnitParameterEXT</procedure>
<procedure>gl:BindTransformFeedback</procedure>
<procedure>gl:BindTransformFeedbackNV</procedure>
<procedure>gl:BindVertexArray</procedure>
<procedure>gl:BindVertexArrayAPPLE</procedure>
<procedure>gl:BindVertexShaderEXT</procedure>
<procedure>gl:BindVideoCaptureStreamBufferNV</procedure>
<procedure>gl:BindVideoCaptureStreamTextureNV</procedure>
<procedure>gl:Binormal3bEXT</procedure>
<procedure>gl:Binormal3bvEXT</procedure>
<procedure>gl:Binormal3dEXT</procedure>
<procedure>gl:Binormal3dvEXT</procedure>
<procedure>gl:Binormal3fEXT</procedure>
<procedure>gl:Binormal3fvEXT</procedure>
<procedure>gl:Binormal3iEXT</procedure>
<procedure>gl:Binormal3ivEXT</procedure>
<procedure>gl:Binormal3sEXT</procedure>
<procedure>gl:Binormal3svEXT</procedure>
<procedure>gl:BinormalPointerEXT</procedure>
<procedure>gl:BitmapxOES</procedure>
<procedure>gl:BlendColor</procedure>
<procedure>gl:BlendColorEXT</procedure>
<procedure>gl:BlendColorxOES</procedure>
<procedure>gl:BlendEquation</procedure>
<procedure>gl:BlendEquationEXT</procedure>
<procedure>gl:BlendEquationIndexedAMD</procedure>
<procedure>gl:BlendEquationSeparate</procedure>
<procedure>gl:BlendEquationSeparateEXT</procedure>
<procedure>gl:BlendEquationSeparateIndexedAMD</procedure>
<procedure>gl:BlendEquationSeparatei</procedure>
<procedure>gl:BlendEquationi</procedure>
<procedure>gl:BlendFuncIndexedAMD</procedure>
<procedure>gl:BlendFuncSeparate</procedure>
<procedure>gl:BlendFuncSeparateEXT</procedure>
<procedure>gl:BlendFuncSeparateINGR</procedure>
<procedure>gl:BlendFuncSeparateIndexedAMD</procedure>
<procedure>gl:BlendFuncSeparatei</procedure>
<procedure>gl:BlendFunci</procedure>
<procedure>gl:BlitFramebuffer</procedure>
<procedure>gl:BlitFramebufferEXT</procedure>
<procedure>gl:BufferAddressRangeNV</procedure>
<procedure>gl:BufferData</procedure>
<procedure>gl:BufferDataARB</procedure>
<procedure>gl:BufferParameteriAPPLE</procedure>
<procedure>gl:BufferSubData</procedure>
<procedure>gl:BufferSubDataARB</procedure>
<procedure>gl:CheckFramebufferStatus</procedure>
<procedure>gl:CheckFramebufferStatusEXT</procedure>
<procedure>gl:CheckNamedFramebufferStatusEXT</procedure>
<procedure>gl:ClampColor</procedure>
<procedure>gl:ClampColorARB</procedure>
<procedure>gl:ClearAccumxOES</procedure>
<procedure>gl:ClearBufferfi</procedure>
<procedure>gl:ClearBufferfv</procedure>
<procedure>gl:ClearBufferiv</procedure>
<procedure>gl:ClearBufferuiv</procedure>
<procedure>gl:ClearColorxOES</procedure>
<procedure>gl:ClearDepthdNV</procedure>
<procedure>gl:ClearDepthfOES</procedure>
<procedure>gl:ClearDepthxOES</procedure>
<procedure>gl:ClientActiveTexture</procedure>
<procedure>gl:ClientActiveTextureARB</procedure>
<procedure>gl:ClientActiveVertexStreamATI</procedure>
<procedure>gl:ClientAttribDefaultEXT</procedure>
<procedure>gl:ClientWaitSync</procedure>
<procedure>gl:ClipPlanefOES</procedure>
<procedure>gl:ClipPlanexOES</procedure>
<procedure>gl:Color3fVertex3fSUN</procedure>
<procedure>gl:Color3fVertex3fvSUN</procedure>
<procedure>gl:Color3hNV</procedure>
<procedure>gl:Color3hvNV</procedure>
<procedure>gl:Color3xOES</procedure>
<procedure>gl:Color3xvOES</procedure>
<procedure>gl:Color4fNormal3fVertex3fSUN</procedure>
<procedure>gl:Color4fNormal3fVertex3fvSUN</procedure>
<procedure>gl:Color4hNV</procedure>
<procedure>gl:Color4hvNV</procedure>
<procedure>gl:Color4ubVertex2fSUN</procedure>
<procedure>gl:Color4ubVertex2fvSUN</procedure>
<procedure>gl:Color4ubVertex3fSUN</procedure>
<procedure>gl:Color4ubVertex3fvSUN</procedure>
<procedure>gl:Color4xOES</procedure>
<procedure>gl:Color4xvOES</procedure>
<procedure>gl:ColorFormatNV</procedure>
<procedure>gl:ColorFragmentOp1ATI</procedure>
<procedure>gl:ColorFragmentOp2ATI</procedure>
<procedure>gl:ColorFragmentOp3ATI</procedure>
<procedure>gl:ColorMaskIndexedEXT</procedure>
<procedure>gl:ColorMaski</procedure>
<procedure>gl:ColorP3ui</procedure>
<procedure>gl:ColorP3uiv</procedure>
<procedure>gl:ColorP4ui</procedure>
<procedure>gl:ColorP4uiv</procedure>
<procedure>gl:ColorPointerEXT</procedure>
<procedure>gl:ColorPointervINTEL</procedure>
<procedure>gl:ColorSubTable</procedure>
<procedure>gl:ColorTable</procedure>
<procedure>gl:ColorTableEXT</procedure>
<procedure>gl:ColorTableParameterfv</procedure>
<procedure>gl:ColorTableParameterfvSGI</procedure>
<procedure>gl:ColorTableParameteriv</procedure>
<procedure>gl:ColorTableParameterivSGI</procedure>
<procedure>gl:ColorTableSGI</procedure>
<procedure>gl:CombinerInputNV</procedure>
<procedure>gl:CombinerOutputNV</procedure>
<procedure>gl:CombinerParameterfNV</procedure>
<procedure>gl:CombinerParameterfvNV</procedure>
<procedure>gl:CombinerParameteriNV</procedure>
<procedure>gl:CombinerParameterivNV</procedure>
<procedure>gl:CombinerStageParameterfvNV</procedure>
<procedure>gl:CompileShader</procedure>
<procedure>gl:CompileShaderARB</procedure>
<procedure>gl:CompileShaderIncludeARB</procedure>
<procedure>gl:CompressedMultiTexImage1DEXT</procedure>
<procedure>gl:CompressedMultiTexImage2DEXT</procedure>
<procedure>gl:CompressedMultiTexImage3DEXT</procedure>
<procedure>gl:CompressedMultiTexSubImage1DEXT</procedure>
<procedure>gl:CompressedMultiTexSubImage2DEXT</procedure>
<procedure>gl:CompressedMultiTexSubImage3DEXT</procedure>
<procedure>gl:CompressedTexImage1D</procedure>
<procedure>gl:CompressedTexImage1DARB</procedure>
<procedure>gl:CompressedTexImage2D</procedure>
<procedure>gl:CompressedTexImage2DARB</procedure>
<procedure>gl:CompressedTexImage3D</procedure>
<procedure>gl:CompressedTexImage3DARB</procedure>
<procedure>gl:CompressedTexSubImage1D</procedure>
<procedure>gl:CompressedTexSubImage1DARB</procedure>
<procedure>gl:CompressedTexSubImage2D</procedure>
<procedure>gl:CompressedTexSubImage2DARB</procedure>
<procedure>gl:CompressedTexSubImage3D</procedure>
<procedure>gl:CompressedTexSubImage3DARB</procedure>
<procedure>gl:CompressedTextureImage1DEXT</procedure>
<procedure>gl:CompressedTextureImage2DEXT</procedure>
<procedure>gl:CompressedTextureImage3DEXT</procedure>
<procedure>gl:CompressedTextureSubImage1DEXT</procedure>
<procedure>gl:CompressedTextureSubImage2DEXT</procedure>
<procedure>gl:CompressedTextureSubImage3DEXT</procedure>
<procedure>gl:ConvolutionFilter1D</procedure>
<procedure>gl:ConvolutionFilter1DEXT</procedure>
<procedure>gl:ConvolutionFilter2D</procedure>
<procedure>gl:ConvolutionFilter2DEXT</procedure>
<procedure>gl:ConvolutionParameterf</procedure>
<procedure>gl:ConvolutionParameterfEXT</procedure>
<procedure>gl:ConvolutionParameterfv</procedure>
<procedure>gl:ConvolutionParameterfvEXT</procedure>
<procedure>gl:ConvolutionParameteri</procedure>
<procedure>gl:ConvolutionParameteriEXT</procedure>
<procedure>gl:ConvolutionParameteriv</procedure>
<procedure>gl:ConvolutionParameterivEXT</procedure>
<procedure>gl:ConvolutionParameterxOES</procedure>
<procedure>gl:ConvolutionParameterxvOES</procedure>
<procedure>gl:CopyBufferSubData</procedure>
<procedure>gl:CopyColorSubTable</procedure>
<procedure>gl:CopyColorSubTableEXT</procedure>
<procedure>gl:CopyColorTable</procedure>
<procedure>gl:CopyColorTableSGI</procedure>
<procedure>gl:CopyConvolutionFilter1D</procedure>
<procedure>gl:CopyConvolutionFilter1DEXT</procedure>
<procedure>gl:CopyConvolutionFilter2D</procedure>
<procedure>gl:CopyConvolutionFilter2DEXT</procedure>
<procedure>gl:CopyMultiTexImage1DEXT</procedure>
<procedure>gl:CopyMultiTexImage2DEXT</procedure>
<procedure>gl:CopyMultiTexSubImage1DEXT</procedure>
<procedure>gl:CopyMultiTexSubImage2DEXT</procedure>
<procedure>gl:CopyMultiTexSubImage3DEXT</procedure>
<procedure>gl:CopyTexImage1DEXT</procedure>
<procedure>gl:CopyTexImage2DEXT</procedure>
<procedure>gl:CopyTexSubImage1DEXT</procedure>
<procedure>gl:CopyTexSubImage2DEXT</procedure>
<procedure>gl:CopyTexSubImage3D</procedure>
<procedure>gl:CopyTexSubImage3DEXT</procedure>
<procedure>gl:CopyTextureImage1DEXT</procedure>
<procedure>gl:CopyTextureImage2DEXT</procedure>
<procedure>gl:CopyTextureSubImage1DEXT</procedure>
<procedure>gl:CopyTextureSubImage2DEXT</procedure>
<procedure>gl:CopyTextureSubImage3DEXT</procedure>
<procedure>gl:CreateProgram</procedure>
<procedure>gl:CreateProgramObjectARB</procedure>
<procedure>gl:CreateShader</procedure>
<procedure>gl:CreateShaderObjectARB</procedure>
<procedure>gl:CreateShaderProgramEXT</procedure>
<procedure>gl:CullParameterdvEXT</procedure>
<procedure>gl:CullParameterfvEXT</procedure>
<procedure>gl:CurrentPaletteMatrixARB</procedure>
<procedure>gl:DeformSGIX</procedure>
<procedure>gl:DeformationMap3dSGIX</procedure>
<procedure>gl:DeformationMap3fSGIX</procedure>
<procedure>gl:DeleteAsyncMarkersSGIX</procedure>
<procedure>gl:DeleteBuffers</procedure>
<procedure>gl:DeleteBuffersARB</procedure>
<procedure>gl:DeleteFencesAPPLE</procedure>
<procedure>gl:DeleteFencesNV</procedure>
<procedure>gl:DeleteFragmentShaderATI</procedure>
<procedure>gl:DeleteFramebuffers</procedure>
<procedure>gl:DeleteFramebuffersEXT</procedure>
<procedure>gl:DeleteNamedStringARB</procedure>
<procedure>gl:DeleteObjectARB</procedure>
<procedure>gl:DeleteOcclusionQueriesNV</procedure>
<procedure>gl:DeletePerfMonitorsAMD</procedure>
<procedure>gl:DeleteProgram</procedure>
<procedure>gl:DeleteProgramsARB</procedure>
<procedure>gl:DeleteProgramsNV</procedure>
<procedure>gl:DeleteQueries</procedure>
<procedure>gl:DeleteQueriesARB</procedure>
<procedure>gl:DeleteRenderbuffers</procedure>
<procedure>gl:DeleteRenderbuffersEXT</procedure>
<procedure>gl:DeleteSamplers</procedure>
<procedure>gl:DeleteShader</procedure>
<procedure>gl:DeleteSync</procedure>
<procedure>gl:DeleteTexturesEXT</procedure>
<procedure>gl:DeleteTransformFeedbacks</procedure>
<procedure>gl:DeleteTransformFeedbacksNV</procedure>
<procedure>gl:DeleteVertexArrays</procedure>
<procedure>gl:DeleteVertexArraysAPPLE</procedure>
<procedure>gl:DeleteVertexShaderEXT</procedure>
<procedure>gl:DepthBoundsEXT</procedure>
<procedure>gl:DepthBoundsdNV</procedure>
<procedure>gl:DepthRangedNV</procedure>
<procedure>gl:DepthRangefOES</procedure>
<procedure>gl:DepthRangexOES</procedure>
<procedure>gl:DetachObjectARB</procedure>
<procedure>gl:DetachShader</procedure>
<procedure>gl:DetailTexFuncSGIS</procedure>
<procedure>gl:DisableClientStateIndexedEXT</procedure>
<procedure>gl:DisableIndexedEXT</procedure>
<procedure>gl:DisableVariantClientStateEXT</procedure>
<procedure>gl:DisableVertexAttribAPPLE</procedure>
<procedure>gl:DisableVertexAttribArray</procedure>
<procedure>gl:DisableVertexAttribArrayARB</procedure>
<procedure>gl:DisableVertexAttribArrayARB</procedure>
<procedure>gl:Disablei</procedure>
<procedure>gl:DrawArraysEXT</procedure>
<procedure>gl:DrawArraysIndirect</procedure>
<procedure>gl:DrawArraysInstanced</procedure>
<procedure>gl:DrawArraysInstancedARB</procedure>
<procedure>gl:DrawArraysInstancedEXT</procedure>
<procedure>gl:DrawBuffers</procedure>
<procedure>gl:DrawBuffersARB</procedure>
<procedure>gl:DrawBuffersATI</procedure>
<procedure>gl:DrawElementArrayAPPLE</procedure>
<procedure>gl:DrawElementArrayATI</procedure>
<procedure>gl:DrawElementsBaseVertex</procedure>
<procedure>gl:DrawElementsIndirect</procedure>
<procedure>gl:DrawElementsInstanced</procedure>
<procedure>gl:DrawElementsInstancedARB</procedure>
<procedure>gl:DrawElementsInstancedBaseVertex</procedure>
<procedure>gl:DrawElementsInstancedEXT</procedure>
<procedure>gl:DrawMeshArraysSUN</procedure>
<procedure>gl:DrawRangeElementArrayAPPLE</procedure>
<procedure>gl:DrawRangeElementArrayATI</procedure>
<procedure>gl:DrawRangeElements</procedure>
<procedure>gl:DrawRangeElementsBaseVertex</procedure>
<procedure>gl:DrawRangeElementsEXT</procedure>
<procedure>gl:DrawTransformFeedback</procedure>
<procedure>gl:DrawTransformFeedbackNV</procedure>
<procedure>gl:DrawTransformFeedbackStream</procedure>
<procedure>gl:EdgeFlagFormatNV</procedure>
<procedure>gl:EdgeFlagPointerEXT</procedure>
<procedure>gl:ElementPointerAPPLE</procedure>
<procedure>gl:ElementPointerATI</procedure>
<procedure>gl:EnableClientStateIndexedEXT</procedure>
<procedure>gl:EnableIndexedEXT</procedure>
<procedure>gl:EnableVariantClientStateEXT</procedure>
<procedure>gl:EnableVertexAttribAPPLE</procedure>
<procedure>gl:EnableVertexAttribArray</procedure>
<procedure>gl:EnableVertexAttribArrayARB</procedure>
<procedure>gl:EnableVertexAttribArrayARB</procedure>
<procedure>gl:Enablei</procedure>
<procedure>gl:EndConditionalRender</procedure>
<procedure>gl:EndConditionalRenderNV</procedure>
<procedure>gl:EndFragmentShaderATI</procedure>
<procedure>gl:EndOcclusionQueryNV</procedure>
<procedure>gl:EndPerfMonitorAMD</procedure>
<procedure>gl:EndQuery</procedure>
<procedure>gl:EndQueryARB</procedure>
<procedure>gl:EndQueryIndexed</procedure>
<procedure>gl:EndTransformFeedback</procedure>
<procedure>gl:EndTransformFeedbackEXT</procedure>
<procedure>gl:EndTransformFeedbackNV</procedure>
<procedure>gl:EndVertexShaderEXT</procedure>
<procedure>gl:EndVideoCaptureNV</procedure>
<procedure>gl:EvalCoord1xOES</procedure>
<procedure>gl:EvalCoord1xvOES</procedure>
<procedure>gl:EvalCoord2xOES</procedure>
<procedure>gl:EvalCoord2xvOES</procedure>
<procedure>gl:EvalMapsNV</procedure>
<procedure>gl:ExecuteProgramNV</procedure>
<procedure>gl:ExtractComponentEXT</procedure>
<procedure>gl:FeedbackBufferxOES</procedure>
<procedure>gl:FenceSync</procedure>
<procedure>gl:FinalCombinerInputNV</procedure>
<procedure>gl:FinishAsyncSGIX</procedure>
<procedure>gl:FinishFenceAPPLE</procedure>
<procedure>gl:FinishFenceNV</procedure>
<procedure>gl:FinishObjectAPPLE</procedure>
<procedure>gl:FinishTextureSUNX</procedure>
<procedure>gl:FlushMappedBufferRange</procedure>
<procedure>gl:FlushMappedBufferRangeAPPLE</procedure>
<procedure>gl:FlushPixelDataRangeNV</procedure>
<procedure>gl:FlushRasterSGIX</procedure>
<procedure>gl:FlushVertexArrayRangeAPPLE</procedure>
<procedure>gl:FlushVertexArrayRangeNV</procedure>
<procedure>gl:FogCoordFormatNV</procedure>
<procedure>gl:FogCoordPointer</procedure>
<procedure>gl:FogCoordPointerEXT</procedure>
<procedure>gl:FogCoordd</procedure>
<procedure>gl:FogCoorddEXT</procedure>
<procedure>gl:FogCoorddv</procedure>
<procedure>gl:FogCoorddvEXT</procedure>
<procedure>gl:FogCoordf</procedure>
<procedure>gl:FogCoordfEXT</procedure>
<procedure>gl:FogCoordfv</procedure>
<procedure>gl:FogCoordfvEXT</procedure>
<procedure>gl:FogCoordhNV</procedure>
<procedure>gl:FogCoordhvNV</procedure>
<procedure>gl:FogFuncSGIS</procedure>
<procedure>gl:FogxOES</procedure>
<procedure>gl:FogxvOES</procedure>
<procedure>gl:FragmentColorMaterialSGIX</procedure>
<procedure>gl:FragmentLightModelfSGIX</procedure>
<procedure>gl:FragmentLightModelfvSGIX</procedure>
<procedure>gl:FragmentLightModeliSGIX</procedure>
<procedure>gl:FragmentLightModelivSGIX</procedure>
<procedure>gl:FragmentLightfSGIX</procedure>
<procedure>gl:FragmentLightfvSGIX</procedure>
<procedure>gl:FragmentLightiSGIX</procedure>
<procedure>gl:FragmentLightivSGIX</procedure>
<procedure>gl:FragmentMaterialfSGIX</procedure>
<procedure>gl:FragmentMaterialfvSGIX</procedure>
<procedure>gl:FragmentMaterialiSGIX</procedure>
<procedure>gl:FragmentMaterialivSGIX</procedure>
<procedure>gl:FrameTerminatorGREMEDY</procedure>
<procedure>gl:FrameZoomSGIX</procedure>
<procedure>gl:FramebufferDrawBufferEXT</procedure>
<procedure>gl:FramebufferDrawBuffersEXT</procedure>
<procedure>gl:FramebufferReadBufferEXT</procedure>
<procedure>gl:FramebufferRenderbuffer</procedure>
<procedure>gl:FramebufferRenderbufferEXT</procedure>
<procedure>gl:FramebufferTexture1D</procedure>
<procedure>gl:FramebufferTexture1DEXT</procedure>
<procedure>gl:FramebufferTexture2D</procedure>
<procedure>gl:FramebufferTexture2DEXT</procedure>
<procedure>gl:FramebufferTexture3D</procedure>
<procedure>gl:FramebufferTexture3DEXT</procedure>
<procedure>gl:FramebufferTextureARB</procedure>
<procedure>gl:FramebufferTextureEXT</procedure>
<procedure>gl:FramebufferTextureEXT</procedure>
<procedure>gl:FramebufferTextureFaceARB</procedure>
<procedure>gl:FramebufferTextureFaceEXT</procedure>
<procedure>gl:FramebufferTextureLayer</procedure>
<procedure>gl:FramebufferTextureLayerARB</procedure>
<procedure>gl:FramebufferTextureLayerEXT</procedure>
<procedure>gl:FramebufferTextureLayerEXT</procedure>
<procedure>gl:FramebufferTextureLayerEXT</procedure>
<procedure>gl:FreeObjectBufferATI</procedure>
<procedure>gl:FrustumfOES</procedure>
<procedure>gl:FrustumxOES</procedure>
<procedure>gl:GenAsyncMarkersSGIX</procedure>
<procedure>gl:GenBuffers</procedure>
<procedure>gl:GenBuffersARB</procedure>
<procedure>gl:GenFencesAPPLE</procedure>
<procedure>gl:GenFencesNV</procedure>
<procedure>gl:GenFragmentShadersATI</procedure>
<procedure>gl:GenFramebuffers</procedure>
<procedure>gl:GenFramebuffersEXT</procedure>
<procedure>gl:GenOcclusionQueriesNV</procedure>
<procedure>gl:GenPerfMonitorsAMD</procedure>
<procedure>gl:GenProgramsARB</procedure>
<procedure>gl:GenProgramsNV</procedure>
<procedure>gl:GenQueries</procedure>
<procedure>gl:GenQueriesARB</procedure>
<procedure>gl:GenRenderbuffers</procedure>
<procedure>gl:GenRenderbuffersEXT</procedure>
<procedure>gl:GenSamplers</procedure>
<procedure>gl:GenSymbolsEXT</procedure>
<procedure>gl:GenTexturesEXT</procedure>
<procedure>gl:GenTransformFeedbacks</procedure>
<procedure>gl:GenTransformFeedbacksNV</procedure>
<procedure>gl:GenVertexArrays</procedure>
<procedure>gl:GenVertexArraysAPPLE</procedure>
<procedure>gl:GenVertexShadersEXT</procedure>
<procedure>gl:GenerateMipmap</procedure>
<procedure>gl:GenerateMipmapEXT</procedure>
<procedure>gl:GenerateMultiTexMipmapEXT</procedure>
<procedure>gl:GenerateTextureMipmapEXT</procedure>
<procedure>gl:GetActiveAttrib</procedure>
<procedure>gl:GetActiveAttribARB</procedure>
<procedure>gl:GetActiveSubroutineName</procedure>
<procedure>gl:GetActiveSubroutineUniformName</procedure>
<procedure>gl:GetActiveSubroutineUniformiv</procedure>
<procedure>gl:GetActiveUniform</procedure>
<procedure>gl:GetActiveUniformARB</procedure>
<procedure>gl:GetActiveUniformBlockName</procedure>
<procedure>gl:GetActiveUniformBlockiv</procedure>
<procedure>gl:GetActiveUniformName</procedure>
<procedure>gl:GetActiveUniformsiv</procedure>
<procedure>gl:GetActiveVaryingNV</procedure>
<procedure>gl:GetArrayObjectfvATI</procedure>
<procedure>gl:GetArrayObjectivATI</procedure>
<procedure>gl:GetAttachedObjectsARB</procedure>
<procedure>gl:GetAttachedShaders</procedure>
<procedure>gl:GetAttribLocation</procedure>
<procedure>gl:GetAttribLocationARB</procedure>
<procedure>gl:GetBooleanIndexedvEXT</procedure>
<procedure>gl:GetBooleanIndexedvEXT</procedure>
<procedure>gl:GetBooleani_v</procedure>
<procedure>gl:GetBufferParameteriv</procedure>
<procedure>gl:GetBufferParameterivARB</procedure>
<procedure>gl:GetBufferParameterui64vNV</procedure>
<procedure>gl:GetBufferPointerv</procedure>
<procedure>gl:GetBufferPointervARB</procedure>
<procedure>gl:GetBufferSubData</procedure>
<procedure>gl:GetBufferSubDataARB</procedure>
<procedure>gl:GetClipPlanefOES</procedure>
<procedure>gl:GetClipPlanexOES</procedure>
<procedure>gl:GetColorTable</procedure>
<procedure>gl:GetColorTableEXT</procedure>
<procedure>gl:GetColorTableParameterfv</procedure>
<procedure>gl:GetColorTableParameterfvEXT</procedure>
<procedure>gl:GetColorTableParameterfvSGI</procedure>
<procedure>gl:GetColorTableParameteriv</procedure>
<procedure>gl:GetColorTableParameterivEXT</procedure>
<procedure>gl:GetColorTableParameterivSGI</procedure>
<procedure>gl:GetColorTableSGI</procedure>
<procedure>gl:GetCombinerInputParameterfvNV</procedure>
<procedure>gl:GetCombinerInputParameterivNV</procedure>
<procedure>gl:GetCombinerOutputParameterfvNV</procedure>
<procedure>gl:GetCombinerOutputParameterivNV</procedure>
<procedure>gl:GetCombinerStageParameterfvNV</procedure>
<procedure>gl:GetCompressedMultiTexImageEXT</procedure>
<procedure>gl:GetCompressedTexImage</procedure>
<procedure>gl:GetCompressedTexImageARB</procedure>
<procedure>gl:GetCompressedTextureImageEXT</procedure>
<procedure>gl:GetConvolutionFilter</procedure>
<procedure>gl:GetConvolutionFilterEXT</procedure>
<procedure>gl:GetConvolutionParameterfv</procedure>
<procedure>gl:GetConvolutionParameterfvEXT</procedure>
<procedure>gl:GetConvolutionParameteriv</procedure>
<procedure>gl:GetConvolutionParameterivEXT</procedure>
<procedure>gl:GetConvolutionParameterxvOES</procedure>
<procedure>gl:GetDetailTexFuncSGIS</procedure>
<procedure>gl:GetDoubleIndexedvEXT</procedure>
<procedure>gl:GetFenceivNV</procedure>
<procedure>gl:GetFinalCombinerInputParameterfvNV</procedure>
<procedure>gl:GetFinalCombinerInputParameterivNV</procedure>
<procedure>gl:GetFixedvOES</procedure>
<procedure>gl:GetFloatIndexedvEXT</procedure>
<procedure>gl:GetFogFuncSGIS</procedure>
<procedure>gl:GetFragDataIndex</procedure>
<procedure>gl:GetFragDataLocation</procedure>
<procedure>gl:GetFragDataLocationEXT</procedure>
<procedure>gl:GetFragmentLightfvSGIX</procedure>
<procedure>gl:GetFragmentLightivSGIX</procedure>
<procedure>gl:GetFragmentMaterialfvSGIX</procedure>
<procedure>gl:GetFragmentMaterialivSGIX</procedure>
<procedure>gl:GetFramebufferAttachmentParameteriv</procedure>
<procedure>gl:GetFramebufferAttachmentParameterivEXT</procedure>
<procedure>gl:GetFramebufferParameterivEXT</procedure>
<procedure>gl:GetHandleARB</procedure>
<procedure>gl:GetHistogram</procedure>
<procedure>gl:GetHistogramEXT</procedure>
<procedure>gl:GetHistogramParameterfv</procedure>
<procedure>gl:GetHistogramParameterfvEXT</procedure>
<procedure>gl:GetHistogramParameteriv</procedure>
<procedure>gl:GetHistogramParameterivEXT</procedure>
<procedure>gl:GetHistogramParameterxvOES</procedure>
<procedure>gl:GetImageTransformParameterfvHP</procedure>
<procedure>gl:GetImageTransformParameterivHP</procedure>
<procedure>gl:GetInfoLogARB</procedure>
<procedure>gl:GetInstrumentsSGIX</procedure>
<procedure>gl:GetInteger64v</procedure>
<procedure>gl:GetIntegerIndexedvEXT</procedure>
<procedure>gl:GetIntegerIndexedvEXT</procedure>
<procedure>gl:GetIntegerIndexedvEXT</procedure>
<procedure>gl:GetIntegeri_v</procedure>
<procedure>gl:GetIntegerui64i_vNV</procedure>
<procedure>gl:GetIntegerui64vNV</procedure>
<procedure>gl:GetInvariantBooleanvEXT</procedure>
<procedure>gl:GetInvariantFloatvEXT</procedure>
<procedure>gl:GetInvariantIntegervEXT</procedure>
<procedure>gl:GetLightxOES</procedure>
<procedure>gl:GetListParameterfvSGIX</procedure>
<procedure>gl:GetListParameterivSGIX</procedure>
<procedure>gl:GetLocalConstantBooleanvEXT</procedure>
<procedure>gl:GetLocalConstantFloatvEXT</procedure>
<procedure>gl:GetLocalConstantIntegervEXT</procedure>
<procedure>gl:GetMapAttribParameterfvNV</procedure>
<procedure>gl:GetMapAttribParameterivNV</procedure>
<procedure>gl:GetMapControlPointsNV</procedure>
<procedure>gl:GetMapParameterfvNV</procedure>
<procedure>gl:GetMapParameterivNV</procedure>
<procedure>gl:GetMapxvOES</procedure>
<procedure>gl:GetMaterialxOES</procedure>
<procedure>gl:GetMinmax</procedure>
<procedure>gl:GetMinmaxEXT</procedure>
<procedure>gl:GetMinmaxParameterfv</procedure>
<procedure>gl:GetMinmaxParameterfvEXT</procedure>
<procedure>gl:GetMinmaxParameteriv</procedure>
<procedure>gl:GetMinmaxParameterivEXT</procedure>
<procedure>gl:GetMultiTexEnvfvEXT</procedure>
<procedure>gl:GetMultiTexEnvivEXT</procedure>
<procedure>gl:GetMultiTexGendvEXT</procedure>
<procedure>gl:GetMultiTexGenfvEXT</procedure>
<procedure>gl:GetMultiTexGenivEXT</procedure>
<procedure>gl:GetMultiTexImageEXT</procedure>
<procedure>gl:GetMultiTexLevelParameterfvEXT</procedure>
<procedure>gl:GetMultiTexLevelParameterivEXT</procedure>
<procedure>gl:GetMultiTexParameterIivEXT</procedure>
<procedure>gl:GetMultiTexParameterIuivEXT</procedure>
<procedure>gl:GetMultiTexParameterfvEXT</procedure>
<procedure>gl:GetMultiTexParameterivEXT</procedure>
<procedure>gl:GetMultisamplefv</procedure>
<procedure>gl:GetMultisamplefvNV</procedure>
<procedure>gl:GetNamedBufferParameterivEXT</procedure>
<procedure>gl:GetNamedBufferParameterui64vNV</procedure>
<procedure>gl:GetNamedBufferPointervEXT</procedure>
<procedure>gl:GetNamedBufferSubDataEXT</procedure>
<procedure>gl:GetNamedFramebufferAttachmentParameterivEXT</procedure>
<procedure>gl:GetNamedProgramLocalParameterIivEXT</procedure>
<procedure>gl:GetNamedProgramLocalParameterIuivEXT</procedure>
<procedure>gl:GetNamedProgramLocalParameterdvEXT</procedure>
<procedure>gl:GetNamedProgramLocalParameterfvEXT</procedure>
<procedure>gl:GetNamedProgramStringEXT</procedure>
<procedure>gl:GetNamedProgramivEXT</procedure>
<procedure>gl:GetNamedRenderbufferParameterivEXT</procedure>
<procedure>gl:GetNamedStringARB</procedure>
<procedure>gl:GetNamedStringivARB</procedure>
<procedure>gl:GetObjectBufferfvATI</procedure>
<procedure>gl:GetObjectBufferivATI</procedure>
<procedure>gl:GetObjectParameterfvARB</procedure>
<procedure>gl:GetObjectParameterivAPPLE</procedure>
<procedure>gl:GetObjectParameterivARB</procedure>
<procedure>gl:GetOcclusionQueryivNV</procedure>
<procedure>gl:GetOcclusionQueryuivNV</procedure>
<procedure>gl:GetPerfMonitorCounterDataAMD</procedure>
<procedure>gl:GetPerfMonitorCounterInfoAMD</procedure>
<procedure>gl:GetPerfMonitorCounterStringAMD</procedure>
<procedure>gl:GetPerfMonitorCountersAMD</procedure>
<procedure>gl:GetPerfMonitorGroupStringAMD</procedure>
<procedure>gl:GetPerfMonitorGroupsAMD</procedure>
<procedure>gl:GetPixelMapxv</procedure>
<procedure>gl:GetPixelTexGenParameterfvSGIS</procedure>
<procedure>gl:GetPixelTexGenParameterivSGIS</procedure>
<procedure>gl:GetPointerIndexedvEXT</procedure>
<procedure>gl:GetPointervEXT</procedure>
<procedure>gl:GetProgramEnvParameterIivNV</procedure>
<procedure>gl:GetProgramEnvParameterIuivNV</procedure>
<procedure>gl:GetProgramEnvParameterdvARB</procedure>
<procedure>gl:GetProgramEnvParameterfvARB</procedure>
<procedure>gl:GetProgramInfoLog</procedure>
<procedure>gl:GetProgramLocalParameterIivNV</procedure>
<procedure>gl:GetProgramLocalParameterIuivNV</procedure>
<procedure>gl:GetProgramLocalParameterdvARB</procedure>
<procedure>gl:GetProgramLocalParameterfvARB</procedure>
<procedure>gl:GetProgramNamedParameterdvNV</procedure>
<procedure>gl:GetProgramNamedParameterfvNV</procedure>
<procedure>gl:GetProgramParameterdvNV</procedure>
<procedure>gl:GetProgramParameterfvNV</procedure>
<procedure>gl:GetProgramStageiv</procedure>
<procedure>gl:GetProgramStringARB</procedure>
<procedure>gl:GetProgramStringNV</procedure>
<procedure>gl:GetProgramfv</procedure>
<procedure>gl:GetProgramiv</procedure>
<procedure>gl:GetProgramivARB</procedure>
<procedure>gl:GetProgramivNV</procedure>
<procedure>gl:GetQueryIndexediv</procedure>
<procedure>gl:GetQueryObjecti64v</procedure>
<procedure>gl:GetQueryObjecti64vEXT</procedure>
<procedure>gl:GetQueryObjectiv</procedure>
<procedure>gl:GetQueryObjectivARB</procedure>
<procedure>gl:GetQueryObjectui64v</procedure>
<procedure>gl:GetQueryObjectui64vEXT</procedure>
<procedure>gl:GetQueryObjectuiv</procedure>
<procedure>gl:GetQueryObjectuivARB</procedure>
<procedure>gl:GetQueryiv</procedure>
<procedure>gl:GetQueryivARB</procedure>
<procedure>gl:GetRenderbufferParameteriv</procedure>
<procedure>gl:GetRenderbufferParameterivEXT</procedure>
<procedure>gl:GetSamplerParameterIfv</procedure>
<procedure>gl:GetSamplerParameterIiv</procedure>
<procedure>gl:GetSamplerParameterfv</procedure>
<procedure>gl:GetSamplerParameteriv</procedure>
<procedure>gl:GetSeparableFilter</procedure>
<procedure>gl:GetSeparableFilterEXT</procedure>
<procedure>gl:GetShaderInfoLog</procedure>
<procedure>gl:GetShaderSource</procedure>
<procedure>gl:GetShaderSourceARB</procedure>
<procedure>gl:GetShaderfv</procedure>
<procedure>gl:GetShaderiv</procedure>
<procedure>gl:GetSharpenTexFuncSGIS</procedure>
<procedure>gl:GetStringi</procedure>
<procedure>gl:GetSubroutineIndex</procedure>
<procedure>gl:GetSubroutineUniformLocation</procedure>
<procedure>gl:GetSynciv</procedure>
<procedure>gl:GetTexBumpParameterfvATI</procedure>
<procedure>gl:GetTexBumpParameterivATI</procedure>
<procedure>gl:GetTexEnvxvOES</procedure>
<procedure>gl:GetTexFilterFuncSGIS</procedure>
<procedure>gl:GetTexGenxvOES</procedure>
<procedure>gl:GetTexLevelParameterxvOES</procedure>
<procedure>gl:GetTexParameterIiv</procedure>
<procedure>gl:GetTexParameterIuiv</procedure>
<procedure>gl:GetTexParameterPointervAPPLE</procedure>
<procedure>gl:GetTexParameterxvOES</procedure>
<procedure>gl:GetTextureImageEXT</procedure>
<procedure>gl:GetTextureLevelParameterfvEXT</procedure>
<procedure>gl:GetTextureLevelParameterivEXT</procedure>
<procedure>gl:GetTextureParameterIivEXT</procedure>
<procedure>gl:GetTextureParameterIuivEXT</procedure>
<procedure>gl:GetTextureParameterfvEXT</procedure>
<procedure>gl:GetTextureParameterivEXT</procedure>
<procedure>gl:GetTrackMatrixivNV</procedure>
<procedure>gl:GetTransformFeedbackVarying</procedure>
<procedure>gl:GetTransformFeedbackVaryingEXT</procedure>
<procedure>gl:GetTransformFeedbackVaryingNV</procedure>
<procedure>gl:GetUniformBlockIndex</procedure>
<procedure>gl:GetUniformBufferSizeEXT</procedure>
<procedure>gl:GetUniformIndices</procedure>
<procedure>gl:GetUniformLocation</procedure>
<procedure>gl:GetUniformLocationARB</procedure>
<procedure>gl:GetUniformOffsetEXT</procedure>
<procedure>gl:GetUniformSubroutineuiv</procedure>
<procedure>gl:GetUniformdv</procedure>
<procedure>gl:GetUniformfv</procedure>
<procedure>gl:GetUniformfvARB</procedure>
<procedure>gl:GetUniformiv</procedure>
<procedure>gl:GetUniformivARB</procedure>
<procedure>gl:GetUniformui64vNV</procedure>
<procedure>gl:GetUniformuiv</procedure>
<procedure>gl:GetUniformuivEXT</procedure>
<procedure>gl:GetVariantArrayObjectfvATI</procedure>
<procedure>gl:GetVariantArrayObjectivATI</procedure>
<procedure>gl:GetVariantBooleanvEXT</procedure>
<procedure>gl:GetVariantFloatvEXT</procedure>
<procedure>gl:GetVariantIntegervEXT</procedure>
<procedure>gl:GetVariantPointervEXT</procedure>
<procedure>gl:GetVaryinglocationNV</procedure>
<procedure>gl:GetVertexAttribArrayObjectfvATI</procedure>
<procedure>gl:GetVertexAttribArrayObjectivATI</procedure>
<procedure>gl:GetVertexAttribIiv</procedure>
<procedure>gl:GetVertexAttribIivEXT</procedure>
<procedure>gl:GetVertexAttribIivEXT</procedure>
<procedure>gl:GetVertexAttribIuiv</procedure>
<procedure>gl:GetVertexAttribIuivEXT</procedure>
<procedure>gl:GetVertexAttribIuivEXT</procedure>
<procedure>gl:GetVertexAttribPointerv</procedure>
<procedure>gl:GetVertexAttribPointervARB</procedure>
<procedure>gl:GetVertexAttribPointervARB</procedure>
<procedure>gl:GetVertexAttribPointervNV</procedure>
<procedure>gl:GetVertexAttribdv</procedure>
<procedure>gl:GetVertexAttribdvARB</procedure>
<procedure>gl:GetVertexAttribdvARB</procedure>
<procedure>gl:GetVertexAttribdvNV</procedure>
<procedure>gl:GetVertexAttribfv</procedure>
<procedure>gl:GetVertexAttribfvARB</procedure>
<procedure>gl:GetVertexAttribfvARB</procedure>
<procedure>gl:GetVertexAttribfvNV</procedure>
<procedure>gl:GetVertexAttribiv</procedure>
<procedure>gl:GetVertexAttribivARB</procedure>
<procedure>gl:GetVertexAttribivARB</procedure>
<procedure>gl:GetVertexAttribivNV</procedure>
<procedure>gl:GetVideoCaptureStreamdvNV</procedure>
<procedure>gl:GetVideoCaptureStreamfvNV</procedure>
<procedure>gl:GetVideoCaptureStreamivNV</procedure>
<procedure>gl:GetVideoCaptureivNV</procedure>
<procedure>gl:GlobalAlphaFactorbSUN</procedure>
<procedure>gl:GlobalAlphaFactordSUN</procedure>
<procedure>gl:GlobalAlphaFactorfSUN</procedure>
<procedure>gl:GlobalAlphaFactoriSUN</procedure>
<procedure>gl:GlobalAlphaFactorsSUN</procedure>
<procedure>gl:GlobalAlphaFactorubSUN</procedure>
<procedure>gl:GlobalAlphaFactoruiSUN</procedure>
<procedure>gl:GlobalAlphaFactorusSUN</procedure>
<procedure>gl:HintPGI</procedure>
<procedure>gl:Histogram</procedure>
<procedure>gl:HistogramEXT</procedure>
<procedure>gl:IglooInterfaceSGIX</procedure>
<procedure>gl:ImageTransformParameterfHP</procedure>
<procedure>gl:ImageTransformParameterfvHP</procedure>
<procedure>gl:ImageTransformParameteriHP</procedure>
<procedure>gl:ImageTransformParameterivHP</procedure>
<procedure>gl:IndexFormatNV</procedure>
<procedure>gl:IndexFuncEXT</procedure>
<procedure>gl:IndexMaterialEXT</procedure>
<procedure>gl:IndexPointerEXT</procedure>
<procedure>gl:IndexxOES</procedure>
<procedure>gl:IndexxvOES</procedure>
<procedure>gl:InsertComponentEXT</procedure>
<procedure>gl:InstrumentsBufferSGIX</procedure>
<procedure>gl:IsAsyncMarkerSGIX</procedure>
<procedure>gl:IsBuffer</procedure>
<procedure>gl:IsBufferARB</procedure>
<procedure>gl:IsBufferResidentNV</procedure>
<procedure>gl:IsEnabledIndexedEXT</procedure>
<procedure>gl:IsEnabledi</procedure>
<procedure>gl:IsFenceAPPLE</procedure>
<procedure>gl:IsFenceNV</procedure>
<procedure>gl:IsFramebuffer</procedure>
<procedure>gl:IsFramebufferEXT</procedure>
<procedure>gl:IsNamedBufferResidentNV</procedure>
<procedure>gl:IsNamedStringARB</procedure>
<procedure>gl:IsObjectBufferATI</procedure>
<procedure>gl:IsOcclusionQueryNV</procedure>
<procedure>gl:IsProgram</procedure>
<procedure>gl:IsProgramARB</procedure>
<procedure>gl:IsProgramNV</procedure>
<procedure>gl:IsQuery</procedure>
<procedure>gl:IsQueryARB</procedure>
<procedure>gl:IsRenderbuffer</procedure>
<procedure>gl:IsRenderbufferEXT</procedure>
<procedure>gl:IsSampler</procedure>
<procedure>gl:IsShader</procedure>
<procedure>gl:IsSync</procedure>
<procedure>gl:IsTextureEXT</procedure>
<procedure>gl:IsTransformFeedback</procedure>
<procedure>gl:IsTransformFeedbackNV</procedure>
<procedure>gl:IsVariantEnabledEXT</procedure>
<procedure>gl:IsVertexArray</procedure>
<procedure>gl:IsVertexArrayAPPLE</procedure>
<procedure>gl:IsVertexAttribEnabledAPPLE</procedure>
<procedure>gl:LightEnviSGIX</procedure>
<procedure>gl:LightModelxOES</procedure>
<procedure>gl:LightModelxvOES</procedure>
<procedure>gl:LightxOES</procedure>
<procedure>gl:LightxvOES</procedure>
<procedure>gl:LineWidthxOES</procedure>
<procedure>gl:LinkProgram</procedure>
<procedure>gl:LinkProgramARB</procedure>
<procedure>gl:ListParameterfSGIX</procedure>
<procedure>gl:ListParameterfvSGIX</procedure>
<procedure>gl:ListParameteriSGIX</procedure>
<procedure>gl:ListParameterivSGIX</procedure>
<procedure>gl:LoadIdentityDeformationMapSGIX</procedure>
<procedure>gl:LoadMatrixxOES</procedure>
<procedure>gl:LoadProgramNV</procedure>
<procedure>gl:LoadTransposeMatrixd</procedure>
<procedure>gl:LoadTransposeMatrixdARB</procedure>
<procedure>gl:LoadTransposeMatrixf</procedure>
<procedure>gl:LoadTransposeMatrixfARB</procedure>
<procedure>gl:LoadTransposeMatrixxOES</procedure>
<procedure>gl:LockArraysEXT</procedure>
<procedure>gl:MakeBufferNonResidentNV</procedure>
<procedure>gl:MakeBufferResidentNV</procedure>
<procedure>gl:MakeNamedBufferNonResidentNV</procedure>
<procedure>gl:MakeNamedBufferResidentNV</procedure>
<procedure>gl:Map1xOES</procedure>
<procedure>gl:Map2xOES</procedure>
<procedure>gl:MapBuffer</procedure>
<procedure>gl:MapBufferARB</procedure>
<procedure>gl:MapBufferRange</procedure>
<procedure>gl:MapControlPointsNV</procedure>
<procedure>gl:MapGrid1xOES</procedure>
<procedure>gl:MapGrid2xOES</procedure>
<procedure>gl:MapNamedBufferEXT</procedure>
<procedure>gl:MapObjectBufferATI</procedure>
<procedure>gl:MapParameterfvNV</procedure>
<procedure>gl:MapParameterivNV</procedure>
<procedure>gl:MapVertexAttrib1dAPPLE</procedure>
<procedure>gl:MapVertexAttrib1fAPPLE</procedure>
<procedure>gl:MapVertexAttrib2dAPPLE</procedure>
<procedure>gl:MapVertexAttrib2fAPPLE</procedure>
<procedure>gl:MaterialxOES</procedure>
<procedure>gl:MaterialxvOES</procedure>
<procedure>gl:MatrixFrustumEXT</procedure>
<procedure>gl:MatrixIndexPointerARB</procedure>
<procedure>gl:MatrixIndexubvARB</procedure>
<procedure>gl:MatrixIndexuivARB</procedure>
<procedure>gl:MatrixIndexusvARB</procedure>
<procedure>gl:MatrixLoadIdentityEXT</procedure>
<procedure>gl:MatrixLoadTransposedEXT</procedure>
<procedure>gl:MatrixLoadTransposefEXT</procedure>
<procedure>gl:MatrixLoaddEXT</procedure>
<procedure>gl:MatrixLoadfEXT</procedure>
<procedure>gl:MatrixMultTransposedEXT</procedure>
<procedure>gl:MatrixMultTransposefEXT</procedure>
<procedure>gl:MatrixMultdEXT</procedure>
<procedure>gl:MatrixMultfEXT</procedure>
<procedure>gl:MatrixOrthoEXT</procedure>
<procedure>gl:MatrixPopEXT</procedure>
<procedure>gl:MatrixPushEXT</procedure>
<procedure>gl:MatrixRotatedEXT</procedure>
<procedure>gl:MatrixRotatefEXT</procedure>
<procedure>gl:MatrixScaledEXT</procedure>
<procedure>gl:MatrixScalefEXT</procedure>
<procedure>gl:MatrixTranslatedEXT</procedure>
<procedure>gl:MatrixTranslatefEXT</procedure>
<procedure>gl:MinSampleShading</procedure>
<procedure>gl:Minmax</procedure>
<procedure>gl:MinmaxEXT</procedure>
<procedure>gl:MultMatrixxOES</procedure>
<procedure>gl:MultTransposeMatrixd</procedure>
<procedure>gl:MultTransposeMatrixdARB</procedure>
<procedure>gl:MultTransposeMatrixf</procedure>
<procedure>gl:MultTransposeMatrixfARB</procedure>
<procedure>gl:MultTransposeMatrixxOES</procedure>
<procedure>gl:MultiDrawArrays</procedure>
<procedure>gl:MultiDrawArraysEXT</procedure>
<procedure>gl:MultiDrawElementArrayAPPLE</procedure>
<procedure>gl:MultiDrawElements</procedure>
<procedure>gl:MultiDrawElementsBaseVertex</procedure>
<procedure>gl:MultiDrawElementsEXT</procedure>
<procedure>gl:MultiDrawRangeElementArrayAPPLE</procedure>
<procedure>gl:MultiModeDrawArraysIBM</procedure>
<procedure>gl:MultiModeDrawElementsIBM</procedure>
<procedure>gl:MultiTexBufferEXT</procedure>
<procedure>gl:MultiTexCoord1bOES</procedure>
<procedure>gl:MultiTexCoord1bvOES</procedure>
<procedure>gl:MultiTexCoord1d</procedure>
<procedure>gl:MultiTexCoord1dARB</procedure>
<procedure>gl:MultiTexCoord1dv</procedure>
<procedure>gl:MultiTexCoord1dvARB</procedure>
<procedure>gl:MultiTexCoord1f</procedure>
<procedure>gl:MultiTexCoord1fARB</procedure>
<procedure>gl:MultiTexCoord1fv</procedure>
<procedure>gl:MultiTexCoord1fvARB</procedure>
<procedure>gl:MultiTexCoord1hNV</procedure>
<procedure>gl:MultiTexCoord1hvNV</procedure>
<procedure>gl:MultiTexCoord1i</procedure>
<procedure>gl:MultiTexCoord1iARB</procedure>
<procedure>gl:MultiTexCoord1iv</procedure>
<procedure>gl:MultiTexCoord1ivARB</procedure>
<procedure>gl:MultiTexCoord1s</procedure>
<procedure>gl:MultiTexCoord1sARB</procedure>
<procedure>gl:MultiTexCoord1sv</procedure>
<procedure>gl:MultiTexCoord1svARB</procedure>
<procedure>gl:MultiTexCoord1xOES</procedure>
<procedure>gl:MultiTexCoord1xvOES</procedure>
<procedure>gl:MultiTexCoord2bOES</procedure>
<procedure>gl:MultiTexCoord2bvOES</procedure>
<procedure>gl:MultiTexCoord2d</procedure>
<procedure>gl:MultiTexCoord2dARB</procedure>
<procedure>gl:MultiTexCoord2dv</procedure>
<procedure>gl:MultiTexCoord2dvARB</procedure>
<procedure>gl:MultiTexCoord2f</procedure>
<procedure>gl:MultiTexCoord2fARB</procedure>
<procedure>gl:MultiTexCoord2fv</procedure>
<procedure>gl:MultiTexCoord2fvARB</procedure>
<procedure>gl:MultiTexCoord2hNV</procedure>
<procedure>gl:MultiTexCoord2hvNV</procedure>
<procedure>gl:MultiTexCoord2i</procedure>
<procedure>gl:MultiTexCoord2iARB</procedure>
<procedure>gl:MultiTexCoord2iv</procedure>
<procedure>gl:MultiTexCoord2ivARB</procedure>
<procedure>gl:MultiTexCoord2s</procedure>
<procedure>gl:MultiTexCoord2sARB</procedure>
<procedure>gl:MultiTexCoord2sv</procedure>
<procedure>gl:MultiTexCoord2svARB</procedure>
<procedure>gl:MultiTexCoord2xOES</procedure>
<procedure>gl:MultiTexCoord2xvOES</procedure>
<procedure>gl:MultiTexCoord3bOES</procedure>
<procedure>gl:MultiTexCoord3bvOES</procedure>
<procedure>gl:MultiTexCoord3d</procedure>
<procedure>gl:MultiTexCoord3dARB</procedure>
<procedure>gl:MultiTexCoord3dv</procedure>
<procedure>gl:MultiTexCoord3dvARB</procedure>
<procedure>gl:MultiTexCoord3f</procedure>
<procedure>gl:MultiTexCoord3fARB</procedure>
<procedure>gl:MultiTexCoord3fv</procedure>
<procedure>gl:MultiTexCoord3fvARB</procedure>
<procedure>gl:MultiTexCoord3hNV</procedure>
<procedure>gl:MultiTexCoord3hvNV</procedure>
<procedure>gl:MultiTexCoord3i</procedure>
<procedure>gl:MultiTexCoord3iARB</procedure>
<procedure>gl:MultiTexCoord3iv</procedure>
<procedure>gl:MultiTexCoord3ivARB</procedure>
<procedure>gl:MultiTexCoord3s</procedure>
<procedure>gl:MultiTexCoord3sARB</procedure>
<procedure>gl:MultiTexCoord3sv</procedure>
<procedure>gl:MultiTexCoord3svARB</procedure>
<procedure>gl:MultiTexCoord3xOES</procedure>
<procedure>gl:MultiTexCoord3xvOES</procedure>
<procedure>gl:MultiTexCoord4bOES</procedure>
<procedure>gl:MultiTexCoord4bvOES</procedure>
<procedure>gl:MultiTexCoord4d</procedure>
<procedure>gl:MultiTexCoord4dARB</procedure>
<procedure>gl:MultiTexCoord4dv</procedure>
<procedure>gl:MultiTexCoord4dvARB</procedure>
<procedure>gl:MultiTexCoord4f</procedure>
<procedure>gl:MultiTexCoord4fARB</procedure>
<procedure>gl:MultiTexCoord4fv</procedure>
<procedure>gl:MultiTexCoord4fvARB</procedure>
<procedure>gl:MultiTexCoord4hNV</procedure>
<procedure>gl:MultiTexCoord4hvNV</procedure>
<procedure>gl:MultiTexCoord4i</procedure>
<procedure>gl:MultiTexCoord4iARB</procedure>
<procedure>gl:MultiTexCoord4iv</procedure>
<procedure>gl:MultiTexCoord4ivARB</procedure>
<procedure>gl:MultiTexCoord4s</procedure>
<procedure>gl:MultiTexCoord4sARB</procedure>
<procedure>gl:MultiTexCoord4sv</procedure>
<procedure>gl:MultiTexCoord4svARB</procedure>
<procedure>gl:MultiTexCoord4xOES</procedure>
<procedure>gl:MultiTexCoord4xvOES</procedure>
<procedure>gl:MultiTexCoordP1ui</procedure>
<procedure>gl:MultiTexCoordP1uiv</procedure>
<procedure>gl:MultiTexCoordP2ui</procedure>
<procedure>gl:MultiTexCoordP2uiv</procedure>
<procedure>gl:MultiTexCoordP3ui</procedure>
<procedure>gl:MultiTexCoordP3uiv</procedure>
<procedure>gl:MultiTexCoordP4ui</procedure>
<procedure>gl:MultiTexCoordP4uiv</procedure>
<procedure>gl:MultiTexCoordPointerEXT</procedure>
<procedure>gl:MultiTexEnvfEXT</procedure>
<procedure>gl:MultiTexEnvfvEXT</procedure>
<procedure>gl:MultiTexEnviEXT</procedure>
<procedure>gl:MultiTexEnvivEXT</procedure>
<procedure>gl:MultiTexGendEXT</procedure>
<procedure>gl:MultiTexGendvEXT</procedure>
<procedure>gl:MultiTexGenfEXT</procedure>
<procedure>gl:MultiTexGenfvEXT</procedure>
<procedure>gl:MultiTexGeniEXT</procedure>
<procedure>gl:MultiTexGenivEXT</procedure>
<procedure>gl:MultiTexImage1DEXT</procedure>
<procedure>gl:MultiTexImage2DEXT</procedure>
<procedure>gl:MultiTexImage3DEXT</procedure>
<procedure>gl:MultiTexParameterIivEXT</procedure>
<procedure>gl:MultiTexParameterIuivEXT</procedure>
<procedure>gl:MultiTexParameterfEXT</procedure>
<procedure>gl:MultiTexParameterfvEXT</procedure>
<procedure>gl:MultiTexParameteriEXT</procedure>
<procedure>gl:MultiTexParameterivEXT</procedure>
<procedure>gl:MultiTexRenderbufferEXT</procedure>
<procedure>gl:MultiTexSubImage1DEXT</procedure>
<procedure>gl:MultiTexSubImage2DEXT</procedure>
<procedure>gl:MultiTexSubImage3DEXT</procedure>
<procedure>gl:NamedBufferDataEXT</procedure>
<procedure>gl:NamedBufferSubDataEXT</procedure>
<procedure>gl:NamedFramebufferRenderbufferEXT</procedure>
<procedure>gl:NamedFramebufferTexture1DEXT</procedure>
<procedure>gl:NamedFramebufferTexture2DEXT</procedure>
<procedure>gl:NamedFramebufferTexture3DEXT</procedure>
<procedure>gl:NamedFramebufferTextureEXT</procedure>
<procedure>gl:NamedFramebufferTextureFaceEXT</procedure>
<procedure>gl:NamedFramebufferTextureLayerEXT</procedure>
<procedure>gl:NamedProgramLocalParameter4dEXT</procedure>
<procedure>gl:NamedProgramLocalParameter4dvEXT</procedure>
<procedure>gl:NamedProgramLocalParameter4fEXT</procedure>
<procedure>gl:NamedProgramLocalParameter4fvEXT</procedure>
<procedure>gl:NamedProgramLocalParameterI4iEXT</procedure>
<procedure>gl:NamedProgramLocalParameterI4ivEXT</procedure>
<procedure>gl:NamedProgramLocalParameterI4uiEXT</procedure>
<procedure>gl:NamedProgramLocalParameterI4uivEXT</procedure>
<procedure>gl:NamedProgramLocalParameters4fvEXT</procedure>
<procedure>gl:NamedProgramLocalParametersI4ivEXT</procedure>
<procedure>gl:NamedProgramLocalParametersI4uivEXT</procedure>
<procedure>gl:NamedProgramStringEXT</procedure>
<procedure>gl:NamedRenderbufferStorageEXT</procedure>
<procedure>gl:NamedRenderbufferStorageMultisampleCoverageEXT</procedure>
<procedure>gl:NamedRenderbufferStorageMultisampleEXT</procedure>
<procedure>gl:NamedStringARB</procedure>
<procedure>gl:NewObjectBufferATI</procedure>
<procedure>gl:Normal3fVertex3fSUN</procedure>
<procedure>gl:Normal3fVertex3fvSUN</procedure>
<procedure>gl:Normal3hNV</procedure>
<procedure>gl:Normal3hvNV</procedure>
<procedure>gl:Normal3xOES</procedure>
<procedure>gl:Normal3xvOES</procedure>
<procedure>gl:NormalFormatNV</procedure>
<procedure>gl:NormalP3ui</procedure>
<procedure>gl:NormalP3uiv</procedure>
<procedure>gl:NormalPointerEXT</procedure>
<procedure>gl:NormalPointervINTEL</procedure>
<procedure>gl:NormalStream3bATI</procedure>
<procedure>gl:NormalStream3bvATI</procedure>
<procedure>gl:NormalStream3dATI</procedure>
<procedure>gl:NormalStream3dvATI</procedure>
<procedure>gl:NormalStream3fATI</procedure>
<procedure>gl:NormalStream3fvATI</procedure>
<procedure>gl:NormalStream3iATI</procedure>
<procedure>gl:NormalStream3ivATI</procedure>
<procedure>gl:NormalStream3sATI</procedure>
<procedure>gl:NormalStream3svATI</procedure>
<procedure>gl:ObjectPurgeableAPPLE</procedure>
<procedure>gl:ObjectUnpurgeableAPPLE</procedure>
<procedure>gl:OrthofOES</procedure>
<procedure>gl:OrthoxOES</procedure>
<procedure>gl:PNTrianglesfATI</procedure>
<procedure>gl:PNTrianglesiATI</procedure>
<procedure>gl:PassTexCoordATI</procedure>
<procedure>gl:PassThroughxOES</procedure>
<procedure>gl:PatchParameterfv</procedure>
<procedure>gl:PatchParameteri</procedure>
<procedure>gl:PauseTransformFeedback</procedure>
<procedure>gl:PauseTransformFeedbackNV</procedure>
<procedure>gl:PixelDataRangeNV</procedure>
<procedure>gl:PixelMapx</procedure>
<procedure>gl:PixelStorex</procedure>
<procedure>gl:PixelTexGenParameterfSGIS</procedure>
<procedure>gl:PixelTexGenParameterfvSGIS</procedure>
<procedure>gl:PixelTexGenParameteriSGIS</procedure>
<procedure>gl:PixelTexGenParameterivSGIS</procedure>
<procedure>gl:PixelTexGenSGIX</procedure>
<procedure>gl:PixelTransferxOES</procedure>
<procedure>gl:PixelTransformParameterfEXT</procedure>
<procedure>gl:PixelTransformParameterfvEXT</procedure>
<procedure>gl:PixelTransformParameteriEXT</procedure>
<procedure>gl:PixelTransformParameterivEXT</procedure>
<procedure>gl:PixelZoomxOES</procedure>
<procedure>gl:PointParameterf</procedure>
<procedure>gl:PointParameterfARB</procedure>
<procedure>gl:PointParameterfEXT</procedure>
<procedure>gl:PointParameterfSGIS</procedure>
<procedure>gl:PointParameterfv</procedure>
<procedure>gl:PointParameterfvARB</procedure>
<procedure>gl:PointParameterfvEXT</procedure>
<procedure>gl:PointParameterfvSGIS</procedure>
<procedure>gl:PointParameteri</procedure>
<procedure>gl:PointParameteriNV</procedure>
<procedure>gl:PointParameteriv</procedure>
<procedure>gl:PointParameterivNV</procedure>
<procedure>gl:PointSizexOES</procedure>
<procedure>gl:PollAsyncSGIX</procedure>
<procedure>gl:PollInstrumentsSGIX</procedure>
<procedure>gl:PolygonOffsetEXT</procedure>
<procedure>gl:PolygonOffsetxOES</procedure>
<procedure>gl:PrimitiveRestartIndex</procedure>
<procedure>gl:PrimitiveRestartIndexNV</procedure>
<procedure>gl:PrimitiveRestartNV</procedure>
<procedure>gl:PrioritizeTexturesEXT</procedure>
<procedure>gl:PrioritizeTexturesxOES</procedure>
<procedure>gl:ProgramBufferParametersIivNV</procedure>
<procedure>gl:ProgramBufferParametersIuivNV</procedure>
<procedure>gl:ProgramBufferParametersfvNV</procedure>
<procedure>gl:ProgramEnvParameter4dARB</procedure>
<procedure>gl:ProgramEnvParameter4dvARB</procedure>
<procedure>gl:ProgramEnvParameter4fARB</procedure>
<procedure>gl:ProgramEnvParameter4fvARB</procedure>
<procedure>gl:ProgramEnvParameterI4iNV</procedure>
<procedure>gl:ProgramEnvParameterI4ivNV</procedure>
<procedure>gl:ProgramEnvParameterI4uiNV</procedure>
<procedure>gl:ProgramEnvParameterI4uivNV</procedure>
<procedure>gl:ProgramEnvParameters4fvEXT</procedure>
<procedure>gl:ProgramEnvParametersI4ivNV</procedure>
<procedure>gl:ProgramEnvParametersI4uivNV</procedure>
<procedure>gl:ProgramLocalParameter4dARB</procedure>
<procedure>gl:ProgramLocalParameter4dvARB</procedure>
<procedure>gl:ProgramLocalParameter4fARB</procedure>
<procedure>gl:ProgramLocalParameter4fvARB</procedure>
<procedure>gl:ProgramLocalParameterI4iNV</procedure>
<procedure>gl:ProgramLocalParameterI4ivNV</procedure>
<procedure>gl:ProgramLocalParameterI4uiNV</procedure>
<procedure>gl:ProgramLocalParameterI4uivNV</procedure>
<procedure>gl:ProgramLocalParameters4fvEXT</procedure>
<procedure>gl:ProgramLocalParametersI4ivNV</procedure>
<procedure>gl:ProgramLocalParametersI4uivNV</procedure>
<procedure>gl:ProgramNamedParameter4dNV</procedure>
<procedure>gl:ProgramNamedParameter4dvNV</procedure>
<procedure>gl:ProgramNamedParameter4fNV</procedure>
<procedure>gl:ProgramNamedParameter4fvNV</procedure>
<procedure>gl:ProgramParameter4dNV</procedure>
<procedure>gl:ProgramParameter4dvNV</procedure>
<procedure>gl:ProgramParameter4fNV</procedure>
<procedure>gl:ProgramParameter4fvNV</procedure>
<procedure>gl:ProgramParameteriARB</procedure>
<procedure>gl:ProgramParameteriEXT</procedure>
<procedure>gl:ProgramParameters4dvNV</procedure>
<procedure>gl:ProgramParameters4fvNV</procedure>
<procedure>gl:ProgramStringARB</procedure>
<procedure>gl:ProgramUniform1dEXT</procedure>
<procedure>gl:ProgramUniform1dvEXT</procedure>
<procedure>gl:ProgramUniform1fEXT</procedure>
<procedure>gl:ProgramUniform1fvEXT</procedure>
<procedure>gl:ProgramUniform1iEXT</procedure>
<procedure>gl:ProgramUniform1ivEXT</procedure>
<procedure>gl:ProgramUniform1uiEXT</procedure>
<procedure>gl:ProgramUniform1uivEXT</procedure>
<procedure>gl:ProgramUniform2dEXT</procedure>
<procedure>gl:ProgramUniform2dvEXT</procedure>
<procedure>gl:ProgramUniform2fEXT</procedure>
<procedure>gl:ProgramUniform2fvEXT</procedure>
<procedure>gl:ProgramUniform2iEXT</procedure>
<procedure>gl:ProgramUniform2ivEXT</procedure>
<procedure>gl:ProgramUniform2uiEXT</procedure>
<procedure>gl:ProgramUniform2uivEXT</procedure>
<procedure>gl:ProgramUniform3dEXT</procedure>
<procedure>gl:ProgramUniform3dvEXT</procedure>
<procedure>gl:ProgramUniform3fEXT</procedure>
<procedure>gl:ProgramUniform3fvEXT</procedure>
<procedure>gl:ProgramUniform3iEXT</procedure>
<procedure>gl:ProgramUniform3ivEXT</procedure>
<procedure>gl:ProgramUniform3uiEXT</procedure>
<procedure>gl:ProgramUniform3uivEXT</procedure>
<procedure>gl:ProgramUniform4dEXT</procedure>
<procedure>gl:ProgramUniform4dvEXT</procedure>
<procedure>gl:ProgramUniform4fEXT</procedure>
<procedure>gl:ProgramUniform4fvEXT</procedure>
<procedure>gl:ProgramUniform4iEXT</procedure>
<procedure>gl:ProgramUniform4ivEXT</procedure>
<procedure>gl:ProgramUniform4uiEXT</procedure>
<procedure>gl:ProgramUniform4uivEXT</procedure>
<procedure>gl:ProgramUniformMatrix2dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix2fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix2x3dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix2x3fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix2x4dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix2x4fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3x2dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3x2fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3x4dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix3x4fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4x2dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4x2fvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4x3dvEXT</procedure>
<procedure>gl:ProgramUniformMatrix4x3fvEXT</procedure>
<procedure>gl:ProgramUniformui64NV</procedure>
<procedure>gl:ProgramUniformui64vNV</procedure>
<procedure>gl:ProgramVertexLimitNV</procedure>
<procedure>gl:ProvokingVertex</procedure>
<procedure>gl:ProvokingVertexEXT</procedure>
<procedure>gl:PushClientAttribDefaultEXT</procedure>
<procedure>gl:QueryCounter</procedure>
<procedure>gl:QueryMatrixxOES</procedure>
<procedure>gl:RasterPos2xOES</procedure>
<procedure>gl:RasterPos2xvOES</procedure>
<procedure>gl:RasterPos3xOES</procedure>
<procedure>gl:RasterPos3xvOES</procedure>
<procedure>gl:RasterPos4xOES</procedure>
<procedure>gl:RasterPos4xvOES</procedure>
<procedure>gl:ReadInstrumentsSGIX</procedure>
<procedure>gl:RectxOES</procedure>
<procedure>gl:RectxvOES</procedure>
<procedure>gl:ReferencePlaneSGIX</procedure>
<procedure>gl:RenderbufferStorage</procedure>
<procedure>gl:RenderbufferStorageEXT</procedure>
<procedure>gl:RenderbufferStorageMultisample</procedure>
<procedure>gl:RenderbufferStorageMultisampleEXT</procedure>
<procedure>gl:RenderbufferStorageMultsampleCoverageNV</procedure>
<procedure>gl:ReplacementCodePointerSUN</procedure>
<procedure>gl:ReplacementCodeubSUN</procedure>
<procedure>gl:ReplacementCodeubvSUN</procedure>
<procedure>gl:ReplacementCodeuiColor3fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiColor3fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiColor4fNormal3fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiColor4fNormal3fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiColor4ubVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiColor4ubVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiNormal3fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiNormal3fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiTexCoord2fVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuiVertex3fSUN</procedure>
<procedure>gl:ReplacementCodeuiVertex3fvSUN</procedure>
<procedure>gl:ReplacementCodeuivSUN</procedure>
<procedure>gl:ReplacementCodeusSUN</procedure>
<procedure>gl:ReplacementCodeusvSUN</procedure>
<procedure>gl:RequestResidentProgramsNV</procedure>
<procedure>gl:ResetHistogram</procedure>
<procedure>gl:ResetHistogramEXT</procedure>
<procedure>gl:ResetMinmax</procedure>
<procedure>gl:ResetMinmaxEXT</procedure>
<procedure>gl:ResizeBuffersMESA</procedure>
<procedure>gl:ResumeTransformFeedback</procedure>
<procedure>gl:ResumeTransformFeedbackNV</procedure>
<procedure>gl:RotatexOES</procedure>
<procedure>gl:SampleCoverage</procedure>
<procedure>gl:SampleCoverageARB</procedure>
<procedure>gl:SampleCoverageOES</procedure>
<procedure>gl:SampleMapATI</procedure>
<procedure>gl:SampleMaskEXT</procedure>
<procedure>gl:SampleMaskIndexedNV</procedure>
<procedure>gl:SampleMaskSGIS</procedure>
<procedure>gl:SampleMaski</procedure>
<procedure>gl:SamplePatternEXT</procedure>
<procedure>gl:SamplePatternSGIS</procedure>
<procedure>gl:SamplerParameterIiv</procedure>
<procedure>gl:SamplerParameterIuiv</procedure>
<procedure>gl:SamplerParameterf</procedure>
<procedure>gl:SamplerParameterfv</procedure>
<procedure>gl:SamplerParameteri</procedure>
<procedure>gl:SamplerParameteriv</procedure>
<procedure>gl:ScalexOES</procedure>
<procedure>gl:SecondaryColor3b</procedure>
<procedure>gl:SecondaryColor3bEXT</procedure>
<procedure>gl:SecondaryColor3bv</procedure>
<procedure>gl:SecondaryColor3bvEXT</procedure>
<procedure>gl:SecondaryColor3d</procedure>
<procedure>gl:SecondaryColor3dEXT</procedure>
<procedure>gl:SecondaryColor3dv</procedure>
<procedure>gl:SecondaryColor3dvEXT</procedure>
<procedure>gl:SecondaryColor3f</procedure>
<procedure>gl:SecondaryColor3fEXT</procedure>
<procedure>gl:SecondaryColor3fv</procedure>
<procedure>gl:SecondaryColor3fvEXT</procedure>
<procedure>gl:SecondaryColor3hNV</procedure>
<procedure>gl:SecondaryColor3hvNV</procedure>
<procedure>gl:SecondaryColor3i</procedure>
<procedure>gl:SecondaryColor3iEXT</procedure>
<procedure>gl:SecondaryColor3iv</procedure>
<procedure>gl:SecondaryColor3ivEXT</procedure>
<procedure>gl:SecondaryColor3s</procedure>
<procedure>gl:SecondaryColor3sEXT</procedure>
<procedure>gl:SecondaryColor3sv</procedure>
<procedure>gl:SecondaryColor3svEXT</procedure>
<procedure>gl:SecondaryColor3ub</procedure>
<procedure>gl:SecondaryColor3ubEXT</procedure>
<procedure>gl:SecondaryColor3ubv</procedure>
<procedure>gl:SecondaryColor3ubvEXT</procedure>
<procedure>gl:SecondaryColor3ui</procedure>
<procedure>gl:SecondaryColor3uiEXT</procedure>
<procedure>gl:SecondaryColor3uiv</procedure>
<procedure>gl:SecondaryColor3uivEXT</procedure>
<procedure>gl:SecondaryColor3us</procedure>
<procedure>gl:SecondaryColor3usEXT</procedure>
<procedure>gl:SecondaryColor3usv</procedure>
<procedure>gl:SecondaryColor3usvEXT</procedure>
<procedure>gl:SecondaryColorFormatNV</procedure>
<procedure>gl:SecondaryColorP3ui</procedure>
<procedure>gl:SecondaryColorP3uiv</procedure>
<procedure>gl:SecondaryColorPointer</procedure>
<procedure>gl:SecondaryColorPointerEXT</procedure>
<procedure>gl:SelectPerfMonitorCountersAMD</procedure>
<procedure>gl:SeparableFilter2D</procedure>
<procedure>gl:SeparableFilter2DEXT</procedure>
<procedure>gl:SetFenceAPPLE</procedure>
<procedure>gl:SetFenceNV</procedure>
<procedure>gl:SetFragmentShaderConstantATI</procedure>
<procedure>gl:SetInvariantEXT</procedure>
<procedure>gl:SetLocalConstantEXT</procedure>
<procedure>gl:ShaderOp1EXT</procedure>
<procedure>gl:ShaderOp2EXT</procedure>
<procedure>gl:ShaderOp3EXT</procedure>
<procedure>gl:ShaderSource</procedure>
<procedure>gl:ShaderSourceARB</procedure>
<procedure>gl:SharpenTexFuncSGIS</procedure>
<procedure>gl:SpriteParameterfSGIX</procedure>
<procedure>gl:SpriteParameterfvSGIX</procedure>
<procedure>gl:SpriteParameteriSGIX</procedure>
<procedure>gl:SpriteParameterivSGIX</procedure>
<procedure>gl:StartInstrumentsSGIX</procedure>
<procedure>gl:StencilClearTagEXT</procedure>
<procedure>gl:StencilFuncSeparate</procedure>
<procedure>gl:StencilOpSeparate</procedure>
<procedure>gl:StopInstrumentsSGIX</procedure>
<procedure>gl:StringMarkerGREMEDY</procedure>
<procedure>gl:SwizzleEXT</procedure>
<procedure>gl:TagSampleBufferSGIX</procedure>
<procedure>gl:Tangent3bEXT</procedure>
<procedure>gl:Tangent3bvEXT</procedure>
<procedure>gl:Tangent3dEXT</procedure>
<procedure>gl:Tangent3dvEXT</procedure>
<procedure>gl:Tangent3fEXT</procedure>
<procedure>gl:Tangent3fvEXT</procedure>
<procedure>gl:Tangent3iEXT</procedure>
<procedure>gl:Tangent3ivEXT</procedure>
<procedure>gl:Tangent3sEXT</procedure>
<procedure>gl:Tangent3svEXT</procedure>
<procedure>gl:TangentPointerEXT</procedure>
<procedure>gl:TbufferMask3DFX</procedure>
<procedure>gl:TessellationFactorAMD</procedure>
<procedure>gl:TessellationModeAMD</procedure>
<procedure>gl:TestFenceAPPLE</procedure>
<procedure>gl:TestFenceNV</procedure>
<procedure>gl:TestObjectAPPLE</procedure>
<procedure>gl:TexBuffer</procedure>
<procedure>gl:TexBufferARB</procedure>
<procedure>gl:TexBufferEXT</procedure>
<procedure>gl:TexBumpParameterfvATI</procedure>
<procedure>gl:TexBumpParameterivATI</procedure>
<procedure>gl:TexCoord1bOES</procedure>
<procedure>gl:TexCoord1bvOES</procedure>
<procedure>gl:TexCoord1hNV</procedure>
<procedure>gl:TexCoord1hvNV</procedure>
<procedure>gl:TexCoord1xOES</procedure>
<procedure>gl:TexCoord1xvOES</procedure>
<procedure>gl:TexCoord2bOES</procedure>
<procedure>gl:TexCoord2bvOES</procedure>
<procedure>gl:TexCoord2fColor3fVertex3fSUN</procedure>
<procedure>gl:TexCoord2fColor3fVertex3fvSUN</procedure>
<procedure>gl:TexCoord2fColor4fNormal3fVertex3fSUN</procedure>
<procedure>gl:TexCoord2fColor4fNormal3fVertex3fvSUN</procedure>
<procedure>gl:TexCoord2fColor4ubVertex3fSUN</procedure>
<procedure>gl:TexCoord2fColor4ubVertex3fvSUN</procedure>
<procedure>gl:TexCoord2fNormal3fVertex3fSUN</procedure>
<procedure>gl:TexCoord2fNormal3fVertex3fvSUN</procedure>
<procedure>gl:TexCoord2fVertex3fSUN</procedure>
<procedure>gl:TexCoord2fVertex3fvSUN</procedure>
<procedure>gl:TexCoord2hNV</procedure>
<procedure>gl:TexCoord2hvNV</procedure>
<procedure>gl:TexCoord2xOES</procedure>
<procedure>gl:TexCoord2xvOES</procedure>
<procedure>gl:TexCoord3bOES</procedure>
<procedure>gl:TexCoord3bvOES</procedure>
<procedure>gl:TexCoord3hNV</procedure>
<procedure>gl:TexCoord3hvNV</procedure>
<procedure>gl:TexCoord3xOES</procedure>
<procedure>gl:TexCoord3xvOES</procedure>
<procedure>gl:TexCoord4bOES</procedure>
<procedure>gl:TexCoord4bvOES</procedure>
<procedure>gl:TexCoord4fColor4fNormal3fVertex4fSUN</procedure>
<procedure>gl:TexCoord4fColor4fNormal3fVertex4fvSUN</procedure>
<procedure>gl:TexCoord4fVertex4fSUN</procedure>
<procedure>gl:TexCoord4fVertex4fvSUN</procedure>
<procedure>gl:TexCoord4hNV</procedure>
<procedure>gl:TexCoord4hvNV</procedure>
<procedure>gl:TexCoord4xOES</procedure>
<procedure>gl:TexCoord4xvOES</procedure>
<procedure>gl:TexCoordFormatNV</procedure>
<procedure>gl:TexCoordP1ui</procedure>
<procedure>gl:TexCoordP1uiv</procedure>
<procedure>gl:TexCoordP2ui</procedure>
<procedure>gl:TexCoordP2uiv</procedure>
<procedure>gl:TexCoordP3ui</procedure>
<procedure>gl:TexCoordP3uiv</procedure>
<procedure>gl:TexCoordP4ui</procedure>
<procedure>gl:TexCoordP4uiv</procedure>
<procedure>gl:TexCoordPointerEXT</procedure>
<procedure>gl:TexCoordPointervINTEL</procedure>
<procedure>gl:TexEnvxOES</procedure>
<procedure>gl:TexEnvxvOES</procedure>
<procedure>gl:TexFilterFuncSGIS</procedure>
<procedure>gl:TexGenxOES</procedure>
<procedure>gl:TexGenxvOES</procedure>
<procedure>gl:TexImage2DMultisample</procedure>
<procedure>gl:TexImage3D</procedure>
<procedure>gl:TexImage3DEXT</procedure>
<procedure>gl:TexImage3DMultisample</procedure>
<procedure>gl:TexImage4DSGIS</procedure>
<procedure>gl:TexParameterIiv</procedure>
<procedure>gl:TexParameterIuiv</procedure>
<procedure>gl:TexParameterxOES</procedure>
<procedure>gl:TexParameterxvOES</procedure>
<procedure>gl:TexRenderbufferNV</procedure>
<procedure>gl:TexSubImage1DEXT</procedure>
<procedure>gl:TexSubImage2DEXT</procedure>
<procedure>gl:TexSubImage3D</procedure>
<procedure>gl:TexSubImage3DEXT</procedure>
<procedure>gl:TexSubImage4DSGIS</procedure>
<procedure>gl:TextureBarrierNV</procedure>
<procedure>gl:TextureBufferEXT</procedure>
<procedure>gl:TextureColorMaskSGIS</procedure>
<procedure>gl:TextureImage1DEXT</procedure>
<procedure>gl:TextureImage2DEXT</procedure>
<procedure>gl:TextureImage3DEXT</procedure>
<procedure>gl:TextureLightEXT</procedure>
<procedure>gl:TextureMaterialEXT</procedure>
<procedure>gl:TextureNormalEXT</procedure>
<procedure>gl:TextureParameterIivEXT</procedure>
<procedure>gl:TextureParameterIuivEXT</procedure>
<procedure>gl:TextureParameterfEXT</procedure>
<procedure>gl:TextureParameterfvEXT</procedure>
<procedure>gl:TextureParameteriEXT</procedure>
<procedure>gl:TextureParameterivEXT</procedure>
<procedure>gl:TextureRangeAPPLE</procedure>
<procedure>gl:TextureRenderbufferEXT</procedure>
<procedure>gl:TextureSubImage1DEXT</procedure>
<procedure>gl:TextureSubImage2DEXT</procedure>
<procedure>gl:TextureSubImage3DEXT</procedure>
<procedure>gl:TrackMatrixNV</procedure>
<procedure>gl:TransformFeedbackAttribsNV</procedure>
<procedure>gl:TransformFeedbackVaryings</procedure>
<procedure>gl:TransformFeedbackVaryingsEXT</procedure>
<procedure>gl:TransformFeedbackVaryingsNV</procedure>
<procedure>gl:TranslatexOES</procedure>
<procedure>gl:Uniform1d</procedure>
<procedure>gl:Uniform1dv</procedure>
<procedure>gl:Uniform1f</procedure>
<procedure>gl:Uniform1fARB</procedure>
<procedure>gl:Uniform1fv</procedure>
<procedure>gl:Uniform1fvARB</procedure>
<procedure>gl:Uniform1i</procedure>
<procedure>gl:Uniform1iARB</procedure>
<procedure>gl:Uniform1iv</procedure>
<procedure>gl:Uniform1ivARB</procedure>
<procedure>gl:Uniform1ui</procedure>
<procedure>gl:Uniform1uiEXT</procedure>
<procedure>gl:Uniform1uiv</procedure>
<procedure>gl:Uniform1uivEXT</procedure>
<procedure>gl:Uniform2d</procedure>
<procedure>gl:Uniform2dv</procedure>
<procedure>gl:Uniform2f</procedure>
<procedure>gl:Uniform2fARB</procedure>
<procedure>gl:Uniform2fv</procedure>
<procedure>gl:Uniform2fvARB</procedure>
<procedure>gl:Uniform2i</procedure>
<procedure>gl:Uniform2iARB</procedure>
<procedure>gl:Uniform2iv</procedure>
<procedure>gl:Uniform2ivARB</procedure>
<procedure>gl:Uniform2ui</procedure>
<procedure>gl:Uniform2uiEXT</procedure>
<procedure>gl:Uniform2uiv</procedure>
<procedure>gl:Uniform2uivEXT</procedure>
<procedure>gl:Uniform3d</procedure>
<procedure>gl:Uniform3dv</procedure>
<procedure>gl:Uniform3f</procedure>
<procedure>gl:Uniform3fARB</procedure>
<procedure>gl:Uniform3fv</procedure>
<procedure>gl:Uniform3fvARB</procedure>
<procedure>gl:Uniform3i</procedure>
<procedure>gl:Uniform3iARB</procedure>
<procedure>gl:Uniform3iv</procedure>
<procedure>gl:Uniform3ivARB</procedure>
<procedure>gl:Uniform3ui</procedure>
<procedure>gl:Uniform3uiEXT</procedure>
<procedure>gl:Uniform3uiv</procedure>
<procedure>gl:Uniform3uivEXT</procedure>
<procedure>gl:Uniform4d</procedure>
<procedure>gl:Uniform4dv</procedure>
<procedure>gl:Uniform4f</procedure>
<procedure>gl:Uniform4fARB</procedure>
<procedure>gl:Uniform4fv</procedure>
<procedure>gl:Uniform4fvARB</procedure>
<procedure>gl:Uniform4i</procedure>
<procedure>gl:Uniform4iARB</procedure>
<procedure>gl:Uniform4iv</procedure>
<procedure>gl:Uniform4ivARB</procedure>
<procedure>gl:Uniform4ui</procedure>
<procedure>gl:Uniform4uiEXT</procedure>
<procedure>gl:Uniform4uiv</procedure>
<procedure>gl:Uniform4uivEXT</procedure>
<procedure>gl:UniformBlockBinding</procedure>
<procedure>gl:UniformBufferEXT</procedure>
<procedure>gl:UniformMatrix2dv</procedure>
<procedure>gl:UniformMatrix2fv</procedure>
<procedure>gl:UniformMatrix2fvARB</procedure>
<procedure>gl:UniformMatrix2x3dv</procedure>
<procedure>gl:UniformMatrix2x3fv</procedure>
<procedure>gl:UniformMatrix2x4dv</procedure>
<procedure>gl:UniformMatrix2x4fv</procedure>
<procedure>gl:UniformMatrix3dv</procedure>
<procedure>gl:UniformMatrix3fv</procedure>
<procedure>gl:UniformMatrix3fvARB</procedure>
<procedure>gl:UniformMatrix3x2dv</procedure>
<procedure>gl:UniformMatrix3x2fv</procedure>
<procedure>gl:UniformMatrix3x4dv</procedure>
<procedure>gl:UniformMatrix3x4fv</procedure>
<procedure>gl:UniformMatrix4dv</procedure>
<procedure>gl:UniformMatrix4fv</procedure>
<procedure>gl:UniformMatrix4fvARB</procedure>
<procedure>gl:UniformMatrix4x2dv</procedure>
<procedure>gl:UniformMatrix4x2fv</procedure>
<procedure>gl:UniformMatrix4x3dv</procedure>
<procedure>gl:UniformMatrix4x3fv</procedure>
<procedure>gl:UniformSubroutinesuiv</procedure>
<procedure>gl:Uniformui64NV</procedure>
<procedure>gl:Uniformui64vNV</procedure>
<procedure>gl:UnlockArraysEXT</procedure>
<procedure>gl:UnmapBuffer</procedure>
<procedure>gl:UnmapBufferARB</procedure>
<procedure>gl:UnmapNamedBufferEXT</procedure>
<procedure>gl:UnmapObjectBufferATI</procedure>
<procedure>gl:UpdateObjectBufferATI</procedure>
<procedure>gl:UseProgram</procedure>
<procedure>gl:UseProgramObjectARB</procedure>
<procedure>gl:UseShaderProgramEXT</procedure>
<procedure>gl:ValidateProgram</procedure>
<procedure>gl:ValidateProgramARB</procedure>
<procedure>gl:VariantArrayObjectATI</procedure>
<procedure>gl:VariantPointerEXT</procedure>
<procedure>gl:VariantbvEXT</procedure>
<procedure>gl:VariantdvEXT</procedure>
<procedure>gl:VariantfvEXT</procedure>
<procedure>gl:VariantivEXT</procedure>
<procedure>gl:VariantsvEXT</procedure>
<procedure>gl:VariantubvEXT</procedure>
<procedure>gl:VariantuivEXT</procedure>
<procedure>gl:VariantusvEXT</procedure>
<procedure>gl:Vertex2bOES</procedure>
<procedure>gl:Vertex2bvOES</procedure>
<procedure>gl:Vertex2hNV</procedure>
<procedure>gl:Vertex2hvNV</procedure>
<procedure>gl:Vertex2xOES</procedure>
<procedure>gl:Vertex2xvOES</procedure>
<procedure>gl:Vertex3bOES</procedure>
<procedure>gl:Vertex3bvOES</procedure>
<procedure>gl:Vertex3hNV</procedure>
<procedure>gl:Vertex3hvNV</procedure>
<procedure>gl:Vertex3xOES</procedure>
<procedure>gl:Vertex3xvOES</procedure>
<procedure>gl:Vertex4bOES</procedure>
<procedure>gl:Vertex4bvOES</procedure>
<procedure>gl:Vertex4hNV</procedure>
<procedure>gl:Vertex4hvNV</procedure>
<procedure>gl:Vertex4xOES</procedure>
<procedure>gl:Vertex4xvOES</procedure>
<procedure>gl:VertexArrayParameteriAPPLE</procedure>
<procedure>gl:VertexArrayRangeAPPLE</procedure>
<procedure>gl:VertexArrayRangeNV</procedure>
<procedure>gl:VertexAttrib1d</procedure>
<procedure>gl:VertexAttrib1dARB</procedure>
<procedure>gl:VertexAttrib1dARB</procedure>
<procedure>gl:VertexAttrib1dNV</procedure>
<procedure>gl:VertexAttrib1dv</procedure>
<procedure>gl:VertexAttrib1dvARB</procedure>
<procedure>gl:VertexAttrib1dvARB</procedure>
<procedure>gl:VertexAttrib1dvNV</procedure>
<procedure>gl:VertexAttrib1f</procedure>
<procedure>gl:VertexAttrib1fARB</procedure>
<procedure>gl:VertexAttrib1fARB</procedure>
<procedure>gl:VertexAttrib1fNV</procedure>
<procedure>gl:VertexAttrib1fv</procedure>
<procedure>gl:VertexAttrib1fvARB</procedure>
<procedure>gl:VertexAttrib1fvARB</procedure>
<procedure>gl:VertexAttrib1fvNV</procedure>
<procedure>gl:VertexAttrib1hNV</procedure>
<procedure>gl:VertexAttrib1hvNV</procedure>
<procedure>gl:VertexAttrib1s</procedure>
<procedure>gl:VertexAttrib1sARB</procedure>
<procedure>gl:VertexAttrib1sARB</procedure>
<procedure>gl:VertexAttrib1sNV</procedure>
<procedure>gl:VertexAttrib1sv</procedure>
<procedure>gl:VertexAttrib1svARB</procedure>
<procedure>gl:VertexAttrib1svARB</procedure>
<procedure>gl:VertexAttrib1svNV</procedure>
<procedure>gl:VertexAttrib2d</procedure>
<procedure>gl:VertexAttrib2dARB</procedure>
<procedure>gl:VertexAttrib2dARB</procedure>
<procedure>gl:VertexAttrib2dNV</procedure>
<procedure>gl:VertexAttrib2dv</procedure>
<procedure>gl:VertexAttrib2dvARB</procedure>
<procedure>gl:VertexAttrib2dvARB</procedure>
<procedure>gl:VertexAttrib2dvNV</procedure>
<procedure>gl:VertexAttrib2f</procedure>
<procedure>gl:VertexAttrib2fARB</procedure>
<procedure>gl:VertexAttrib2fARB</procedure>
<procedure>gl:VertexAttrib2fNV</procedure>
<procedure>gl:VertexAttrib2fv</procedure>
<procedure>gl:VertexAttrib2fvARB</procedure>
<procedure>gl:VertexAttrib2fvARB</procedure>
<procedure>gl:VertexAttrib2fvNV</procedure>
<procedure>gl:VertexAttrib2hNV</procedure>
<procedure>gl:VertexAttrib2hvNV</procedure>
<procedure>gl:VertexAttrib2s</procedure>
<procedure>gl:VertexAttrib2sARB</procedure>
<procedure>gl:VertexAttrib2sARB</procedure>
<procedure>gl:VertexAttrib2sNV</procedure>
<procedure>gl:VertexAttrib2sv</procedure>
<procedure>gl:VertexAttrib2svARB</procedure>
<procedure>gl:VertexAttrib2svARB</procedure>
<procedure>gl:VertexAttrib2svNV</procedure>
<procedure>gl:VertexAttrib3d</procedure>
<procedure>gl:VertexAttrib3dARB</procedure>
<procedure>gl:VertexAttrib3dARB</procedure>
<procedure>gl:VertexAttrib3dNV</procedure>
<procedure>gl:VertexAttrib3dv</procedure>
<procedure>gl:VertexAttrib3dvARB</procedure>
<procedure>gl:VertexAttrib3dvARB</procedure>
<procedure>gl:VertexAttrib3dvNV</procedure>
<procedure>gl:VertexAttrib3f</procedure>
<procedure>gl:VertexAttrib3fARB</procedure>
<procedure>gl:VertexAttrib3fARB</procedure>
<procedure>gl:VertexAttrib3fNV</procedure>
<procedure>gl:VertexAttrib3fv</procedure>
<procedure>gl:VertexAttrib3fvARB</procedure>
<procedure>gl:VertexAttrib3fvARB</procedure>
<procedure>gl:VertexAttrib3fvNV</procedure>
<procedure>gl:VertexAttrib3hNV</procedure>
<procedure>gl:VertexAttrib3hvNV</procedure>
<procedure>gl:VertexAttrib3s</procedure>
<procedure>gl:VertexAttrib3sARB</procedure>
<procedure>gl:VertexAttrib3sARB</procedure>
<procedure>gl:VertexAttrib3sNV</procedure>
<procedure>gl:VertexAttrib3sv</procedure>
<procedure>gl:VertexAttrib3svARB</procedure>
<procedure>gl:VertexAttrib3svARB</procedure>
<procedure>gl:VertexAttrib3svNV</procedure>
<procedure>gl:VertexAttrib4Nbv</procedure>
<procedure>gl:VertexAttrib4NbvARB</procedure>
<procedure>gl:VertexAttrib4NbvARB</procedure>
<procedure>gl:VertexAttrib4Niv</procedure>
<procedure>gl:VertexAttrib4NivARB</procedure>
<procedure>gl:VertexAttrib4NivARB</procedure>
<procedure>gl:VertexAttrib4Nsv</procedure>
<procedure>gl:VertexAttrib4NsvARB</procedure>
<procedure>gl:VertexAttrib4NsvARB</procedure>
<procedure>gl:VertexAttrib4Nub</procedure>
<procedure>gl:VertexAttrib4NubARB</procedure>
<procedure>gl:VertexAttrib4NubARB</procedure>
<procedure>gl:VertexAttrib4Nubv</procedure>
<procedure>gl:VertexAttrib4NubvARB</procedure>
<procedure>gl:VertexAttrib4NubvARB</procedure>
<procedure>gl:VertexAttrib4Nuiv</procedure>
<procedure>gl:VertexAttrib4NuivARB</procedure>
<procedure>gl:VertexAttrib4NuivARB</procedure>
<procedure>gl:VertexAttrib4Nusv</procedure>
<procedure>gl:VertexAttrib4NusvARB</procedure>
<procedure>gl:VertexAttrib4NusvARB</procedure>
<procedure>gl:VertexAttrib4bv</procedure>
<procedure>gl:VertexAttrib4bvARB</procedure>
<procedure>gl:VertexAttrib4bvARB</procedure>
<procedure>gl:VertexAttrib4d</procedure>
<procedure>gl:VertexAttrib4dARB</procedure>
<procedure>gl:VertexAttrib4dARB</procedure>
<procedure>gl:VertexAttrib4dNV</procedure>
<procedure>gl:VertexAttrib4dv</procedure>
<procedure>gl:VertexAttrib4dvARB</procedure>
<procedure>gl:VertexAttrib4dvARB</procedure>
<procedure>gl:VertexAttrib4dvNV</procedure>
<procedure>gl:VertexAttrib4f</procedure>
<procedure>gl:VertexAttrib4fARB</procedure>
<procedure>gl:VertexAttrib4fARB</procedure>
<procedure>gl:VertexAttrib4fNV</procedure>
<procedure>gl:VertexAttrib4fv</procedure>
<procedure>gl:VertexAttrib4fvARB</procedure>
<procedure>gl:VertexAttrib4fvARB</procedure>
<procedure>gl:VertexAttrib4fvNV</procedure>
<procedure>gl:VertexAttrib4hNV</procedure>
<procedure>gl:VertexAttrib4hvNV</procedure>
<procedure>gl:VertexAttrib4iv</procedure>
<procedure>gl:VertexAttrib4ivARB</procedure>
<procedure>gl:VertexAttrib4ivARB</procedure>
<procedure>gl:VertexAttrib4s</procedure>
<procedure>gl:VertexAttrib4sARB</procedure>
<procedure>gl:VertexAttrib4sARB</procedure>
<procedure>gl:VertexAttrib4sNV</procedure>
<procedure>gl:VertexAttrib4sv</procedure>
<procedure>gl:VertexAttrib4svARB</procedure>
<procedure>gl:VertexAttrib4svARB</procedure>
<procedure>gl:VertexAttrib4svNV</procedure>
<procedure>gl:VertexAttrib4ubNV</procedure>
<procedure>gl:VertexAttrib4ubv</procedure>
<procedure>gl:VertexAttrib4ubvARB</procedure>
<procedure>gl:VertexAttrib4ubvARB</procedure>
<procedure>gl:VertexAttrib4ubvNV</procedure>
<procedure>gl:VertexAttrib4uiv</procedure>
<procedure>gl:VertexAttrib4uivARB</procedure>
<procedure>gl:VertexAttrib4uivARB</procedure>
<procedure>gl:VertexAttrib4usv</procedure>
<procedure>gl:VertexAttrib4usvARB</procedure>
<procedure>gl:VertexAttrib4usvARB</procedure>
<procedure>gl:VertexAttribArrayObjectATI</procedure>
<procedure>gl:VertexAttribDivisor</procedure>
<procedure>gl:VertexAttribFormatNV</procedure>
<procedure>gl:VertexAttribI1i</procedure>
<procedure>gl:VertexAttribI1iEXT</procedure>
<procedure>gl:VertexAttribI1iEXT</procedure>
<procedure>gl:VertexAttribI1iv</procedure>
<procedure>gl:VertexAttribI1ivEXT</procedure>
<procedure>gl:VertexAttribI1ivEXT</procedure>
<procedure>gl:VertexAttribI1ui</procedure>
<procedure>gl:VertexAttribI1uiEXT</procedure>
<procedure>gl:VertexAttribI1uiEXT</procedure>
<procedure>gl:VertexAttribI1uiv</procedure>
<procedure>gl:VertexAttribI1uivEXT</procedure>
<procedure>gl:VertexAttribI1uivEXT</procedure>
<procedure>gl:VertexAttribI2i</procedure>
<procedure>gl:VertexAttribI2iEXT</procedure>
<procedure>gl:VertexAttribI2iEXT</procedure>
<procedure>gl:VertexAttribI2iv</procedure>
<procedure>gl:VertexAttribI2ivEXT</procedure>
<procedure>gl:VertexAttribI2ivEXT</procedure>
<procedure>gl:VertexAttribI2ui</procedure>
<procedure>gl:VertexAttribI2uiEXT</procedure>
<procedure>gl:VertexAttribI2uiEXT</procedure>
<procedure>gl:VertexAttribI2uiv</procedure>
<procedure>gl:VertexAttribI2uivEXT</procedure>
<procedure>gl:VertexAttribI2uivEXT</procedure>
<procedure>gl:VertexAttribI3i</procedure>
<procedure>gl:VertexAttribI3iEXT</procedure>
<procedure>gl:VertexAttribI3iEXT</procedure>
<procedure>gl:VertexAttribI3iv</procedure>
<procedure>gl:VertexAttribI3ivEXT</procedure>
<procedure>gl:VertexAttribI3ivEXT</procedure>
<procedure>gl:VertexAttribI3ui</procedure>
<procedure>gl:VertexAttribI3uiEXT</procedure>
<procedure>gl:VertexAttribI3uiEXT</procedure>
<procedure>gl:VertexAttribI3uiv</procedure>
<procedure>gl:VertexAttribI3uivEXT</procedure>
<procedure>gl:VertexAttribI3uivEXT</procedure>
<procedure>gl:VertexAttribI4bv</procedure>
<procedure>gl:VertexAttribI4bvEXT</procedure>
<procedure>gl:VertexAttribI4bvEXT</procedure>
<procedure>gl:VertexAttribI4i</procedure>
<procedure>gl:VertexAttribI4iEXT</procedure>
<procedure>gl:VertexAttribI4iEXT</procedure>
<procedure>gl:VertexAttribI4iv</procedure>
<procedure>gl:VertexAttribI4ivEXT</procedure>
<procedure>gl:VertexAttribI4ivEXT</procedure>
<procedure>gl:VertexAttribI4sv</procedure>
<procedure>gl:VertexAttribI4svEXT</procedure>
<procedure>gl:VertexAttribI4svEXT</procedure>
<procedure>gl:VertexAttribI4ubv</procedure>
<procedure>gl:VertexAttribI4ubvEXT</procedure>
<procedure>gl:VertexAttribI4ubvEXT</procedure>
<procedure>gl:VertexAttribI4ui</procedure>
<procedure>gl:VertexAttribI4uiEXT</procedure>
<procedure>gl:VertexAttribI4uiEXT</procedure>
<procedure>gl:VertexAttribI4uiv</procedure>
<procedure>gl:VertexAttribI4uivEXT</procedure>
<procedure>gl:VertexAttribI4uivEXT</procedure>
<procedure>gl:VertexAttribI4usv</procedure>
<procedure>gl:VertexAttribI4usvEXT</procedure>
<procedure>gl:VertexAttribI4usvEXT</procedure>
<procedure>gl:VertexAttribIFormatNV</procedure>
<procedure>gl:VertexAttribIPointer</procedure>
<procedure>gl:VertexAttribIPointerEXT</procedure>
<procedure>gl:VertexAttribIPointerEXT</procedure>
<procedure>gl:VertexAttribP1ui</procedure>
<procedure>gl:VertexAttribP1uiv</procedure>
<procedure>gl:VertexAttribP2ui</procedure>
<procedure>gl:VertexAttribP2uiv</procedure>
<procedure>gl:VertexAttribP3ui</procedure>
<procedure>gl:VertexAttribP3uiv</procedure>
<procedure>gl:VertexAttribP4ui</procedure>
<procedure>gl:VertexAttribP4uiv</procedure>
<procedure>gl:VertexAttribPointer</procedure>
<procedure>gl:VertexAttribPointerARB</procedure>
<procedure>gl:VertexAttribPointerARB</procedure>
<procedure>gl:VertexAttribPointerNV</procedure>
<procedure>gl:VertexAttribs1dvNV</procedure>
<procedure>gl:VertexAttribs1fvNV</procedure>
<procedure>gl:VertexAttribs1hvNV</procedure>
<procedure>gl:VertexAttribs1svNV</procedure>
<procedure>gl:VertexAttribs2dvNV</procedure>
<procedure>gl:VertexAttribs2fvNV</procedure>
<procedure>gl:VertexAttribs2hvNV</procedure>
<procedure>gl:VertexAttribs2svNV</procedure>
<procedure>gl:VertexAttribs3dvNV</procedure>
<procedure>gl:VertexAttribs3fvNV</procedure>
<procedure>gl:VertexAttribs3hvNV</procedure>
<procedure>gl:VertexAttribs3svNV</procedure>
<procedure>gl:VertexAttribs4dvNV</procedure>
<procedure>gl:VertexAttribs4fvNV</procedure>
<procedure>gl:VertexAttribs4hvNV</procedure>
<procedure>gl:VertexAttribs4svNV</procedure>
<procedure>gl:VertexAttribs4ubvNV</procedure>
<procedure>gl:VertexBlendARB</procedure>
<procedure>gl:VertexBlendEnvfATI</procedure>
<procedure>gl:VertexBlendEnviATI</procedure>
<procedure>gl:VertexFormatNV</procedure>
<procedure>gl:VertexP2ui</procedure>
<procedure>gl:VertexP2uiv</procedure>
<procedure>gl:VertexP3ui</procedure>
<procedure>gl:VertexP3uiv</procedure>
<procedure>gl:VertexP4ui</procedure>
<procedure>gl:VertexP4uiv</procedure>
<procedure>gl:VertexPointerEXT</procedure>
<procedure>gl:VertexPointervINTEL</procedure>
<procedure>gl:VertexStream1dATI</procedure>
<procedure>gl:VertexStream1dvATI</procedure>
<procedure>gl:VertexStream1fATI</procedure>
<procedure>gl:VertexStream1fvATI</procedure>
<procedure>gl:VertexStream1iATI</procedure>
<procedure>gl:VertexStream1ivATI</procedure>
<procedure>gl:VertexStream1sATI</procedure>
<procedure>gl:VertexStream1svATI</procedure>
<procedure>gl:VertexStream2dATI</procedure>
<procedure>gl:VertexStream2dvATI</procedure>
<procedure>gl:VertexStream2fATI</procedure>
<procedure>gl:VertexStream2fvATI</procedure>
<procedure>gl:VertexStream2iATI</procedure>
<procedure>gl:VertexStream2ivATI</procedure>
<procedure>gl:VertexStream2sATI</procedure>
<procedure>gl:VertexStream2svATI</procedure>
<procedure>gl:VertexStream3dATI</procedure>
<procedure>gl:VertexStream3dvATI</procedure>
<procedure>gl:VertexStream3fATI</procedure>
<procedure>gl:VertexStream3fvATI</procedure>
<procedure>gl:VertexStream3iATI</procedure>
<procedure>gl:VertexStream3ivATI</procedure>
<procedure>gl:VertexStream3sATI</procedure>
<procedure>gl:VertexStream3svATI</procedure>
<procedure>gl:VertexStream4dATI</procedure>
<procedure>gl:VertexStream4dvATI</procedure>
<procedure>gl:VertexStream4fATI</procedure>
<procedure>gl:VertexStream4fvATI</procedure>
<procedure>gl:VertexStream4iATI</procedure>
<procedure>gl:VertexStream4ivATI</procedure>
<procedure>gl:VertexStream4sATI</procedure>
<procedure>gl:VertexStream4svATI</procedure>
<procedure>gl:VertexWeightPointerEXT</procedure>
<procedure>gl:VertexWeightfEXT</procedure>
<procedure>gl:VertexWeightfvEXT</procedure>
<procedure>gl:VertexWeighthNV</procedure>
<procedure>gl:VertexWeighthvNV</procedure>
<procedure>gl:VideoCaptureNV</procedure>
<procedure>gl:VideoCaptureStreamParameterdvNV</procedure>
<procedure>gl:VideoCaptureStreamParameterfvNV</procedure>
<procedure>gl:VideoCaptureStreamParameterivNV</procedure>
<procedure>gl:WaitSync</procedure>
<procedure>gl:WeightPointerARB</procedure>
<procedure>gl:WeightbvARB</procedure>
<procedure>gl:WeightdvARB</procedure>
<procedure>gl:WeightfvARB</procedure>
<procedure>gl:WeightivARB</procedure>
<procedure>gl:WeightsvARB</procedure>
<procedure>gl:WeightubvARB</procedure>
<procedure>gl:WeightuivARB</procedure>
<procedure>gl:WeightusvARB</procedure>
<procedure>gl:WindowPos2d</procedure>
<procedure>gl:WindowPos2dARB</procedure>
<procedure>gl:WindowPos2dMESA</procedure>
<procedure>gl:WindowPos2dv</procedure>
<procedure>gl:WindowPos2dvARB</procedure>
<procedure>gl:WindowPos2dvMESA</procedure>
<procedure>gl:WindowPos2f</procedure>
<procedure>gl:WindowPos2fARB</procedure>
<procedure>gl:WindowPos2fMESA</procedure>
<procedure>gl:WindowPos2fv</procedure>
<procedure>gl:WindowPos2fvARB</procedure>
<procedure>gl:WindowPos2fvMESA</procedure>
<procedure>gl:WindowPos2i</procedure>
<procedure>gl:WindowPos2iARB</procedure>
<procedure>gl:WindowPos2iMESA</procedure>
<procedure>gl:WindowPos2iv</procedure>
<procedure>gl:WindowPos2ivARB</procedure>
<procedure>gl:WindowPos2ivMESA</procedure>
<procedure>gl:WindowPos2s</procedure>
<procedure>gl:WindowPos2sARB</procedure>
<procedure>gl:WindowPos2sMESA</procedure>
<procedure>gl:WindowPos2sv</procedure>
<procedure>gl:WindowPos2svARB</procedure>
<procedure>gl:WindowPos2svMESA</procedure>
<procedure>gl:WindowPos3d</procedure>
<procedure>gl:WindowPos3dARB</procedure>
<procedure>gl:WindowPos3dMESA</procedure>
<procedure>gl:WindowPos3dv</procedure>
<procedure>gl:WindowPos3dvARB</procedure>
<procedure>gl:WindowPos3dvMESA</procedure>
<procedure>gl:WindowPos3f</procedure>
<procedure>gl:WindowPos3fARB</procedure>
<procedure>gl:WindowPos3fMESA</procedure>
<procedure>gl:WindowPos3fv</procedure>
<procedure>gl:WindowPos3fvARB</procedure>
<procedure>gl:WindowPos3fvMESA</procedure>
<procedure>gl:WindowPos3i</procedure>
<procedure>gl:WindowPos3iARB</procedure>
<procedure>gl:WindowPos3iMESA</procedure>
<procedure>gl:WindowPos3iv</procedure>
<procedure>gl:WindowPos3ivARB</procedure>
<procedure>gl:WindowPos3ivMESA</procedure>
<procedure>gl:WindowPos3s</procedure>
<procedure>gl:WindowPos3sARB</procedure>
<procedure>gl:WindowPos3sMESA</procedure>
<procedure>gl:WindowPos3sv</procedure>
<procedure>gl:WindowPos3svARB</procedure>
<procedure>gl:WindowPos3svMESA</procedure>
<procedure>gl:WindowPos4dMESA</procedure>
<procedure>gl:WindowPos4dvMESA</procedure>
<procedure>gl:WindowPos4fMESA</procedure>
<procedure>gl:WindowPos4fvMESA</procedure>
<procedure>gl:WindowPos4iMESA</procedure>
<procedure>gl:WindowPos4ivMESA</procedure>
<procedure>gl:WindowPos4sMESA</procedure>
<procedure>gl:WindowPos4svMESA</procedure>
<procedure>gl:WriteMaskEXT</procedure>

== License

Copyright 2012 Daniel J. Leslie. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice, this list
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.

THIS SOFTWARE IS PROVIDED BY DANIEL J. LESLIE ''AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DANIEL J. LESLIE OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those of the
authors and should not be interpreted as representing official policies, either expressed
or implied, of Daniel J. Leslie.
