[[tags: allegro game]]

== allegro

This document pertains to system related functions found in the Allegro egg.

Please see the main [allegro] wiki page for more information.

[[toc:]]

== Constants

* build-version
* pi

== Enums

=== state-flag

<procedure>(state-flag->int state-flag)</procedure>

{{state-flag}} may be one of the following symbols:
* new-display-parameters
* new-bitmap-parameters
* display
* target-bitmap
* blender
* new-file-interface
* transform
* bitmap
* all

<procedure>(int->state-flag integer)</procedure>

=== system-path

<procedure>(system-path->int system-path)</procedure>

{{system-path}} may be one of the following symbols:
* resources-path
* temp-path
* user-data-path
* user-home-path
* user-settings-path
* user-documents-path
* exename-path
* last-path

== Records

=== condition

<record>condition</record>

=== driver

<record>driver</record>
<procedure>(free-driver!)</procedure>
<procedure>(driver-id driver)</procedure>
<procedure>(driver-ptr driver)</procedure>
<procedure>(driver-autodetect driver)</procedure>

=== mutex

<record>mutex</record>

=== state

<record>state</record>
<procedure>(make-state*)</procedure>
<procedure>(make-state)</procedure>
<procedure>(free-state! state)</procedure>

=== system

<record>system</record>

=== thread

<record>thread</record>

=== timer

<record>timer</record>

=== timeout

<record>timeout</record>
<procedure>(make-timeout*)</procedure>
<procedure>(make-timeout)</procedure>
<procedure>(free-timeout! timeout)</procedure>

=== version

<record>version</record>

<procedure>(version-major version)</procedure>
<procedure>(version-sub version)</procedure>
<procedure>(version-wip version)</procedure>
<procedure>(version-release-number version)</procedure>
<procedure>(version-string version)</procedure>
<procedure>(version-date-string version)</procedure>
<procedure>(version-date version)</procedure>
<procedure>(version-int version)</procedure>

== Functions

=== System

<procedure>(init)</procedure>

Implements al_init.

<procedure>(inhibit-screensaver bool)</procedure>

Implements al_inhibit_screensaver.

<procedure>(org-name)</procedure>

Implements al_get_org_name.

<setter>(org-name-set! string)</setter>

Implements al_set_org_name.

<procedure>(app-name)</procedure>

Implements al_get_app_name.

<setter>(app-name-set! string)</procedure>

Implements al_set_app_name.

<procedure>(system-addon-uninstall)</procedure>

Implements al_uninstall_system.

<procedure>(system-addon-installed?)</procedure>

Implements al_is_system_installed.

<procedure>(system-driver)</procedure>

Implements al_get_system_driver.

<procedure>(system-config)</procedure>

Implements al_get_system_config.

<procedure>(standard-path system-path)</procedure>

Implements al_get_standard_path.

=== Threads

WARNING: Untested, may not interact well with Chicken.

Please, please tell me about your successes and workarounds. I'll fix the egg as called for.

<procedure>(make-thread* (function c-pointer (thread c-pointer)) c-pointer)</procedure>

Implements al_create_thread.

<procedure>(make-thread (function c-pointer (thread c-pointer)) c-pointer)</procedure>

Implements al_create_thread, with (free-thread!) declared as a finalizer.

<procedure>(free-thread! thread)</procedure>

Implements al_destroy_thread.

<proceudre>(run-detached-thread (function c-pointer (c-pointer)) c-pointer)</procedure>

Implements al_run_detached_thread.

<procedure>(thread-start! thread)</procedure>

Implements al_start_thread.

<procedure>(thread-join! thread ((c-pointer c-pointer) ret_value))</procedure>

Implements al_join_thread.

<procedure>(thread-should-stop? thread)</procedure>

Implements al_get_thread_should_stop.

<setter>(thread-should-stop-set! thread)</setter>

Implements al_set_thread_should_stop.

<procedure>(make-mutex*)</procedure>

Implements al_create_mutex.

<procedure>(make-mutex)</procedure>

Implements al_create_mutex, with (free-mutex!) declared as a finalizer.

<procedure>(free-mutex! mutex)</procedure>

Implements al_destroy_mutex.

<procedure>(make-mutex-recursive*)</procedure>

Implements al_create_mutex_recursive.

<procedure>(make-mutex-recursive)</procedure>

Implements al_create_mutex_recursive, with (free-mutex!) declared as a finalizer.

<procedure>(mutex-lock! mutex)</procedure>

Implements al_lock_mutex.

<procedure>(mutex-unlock! mutex)</procedure>

Implements al_unlock_mutex.

<procedure>(make-condition*)</procedure>

Implements al_create_cond.

<procedure>(make-condition)</procedure>

Implements al_create_cond, with (free-condition!) declared as a finalizer.

<procedure>(free-condition! condition)</procedure>

Implements al_destroy_cond.

<procedure>(condition-wait condition mutex)</procedure>

Implements al_wait_cond.

<procedure>(condition-wait-until condition mutex timeout)</procedure>

Implements al_wait_cond_until.

<procedure>(condition-broadcast condition)</procedure>

Implements al_broadcast_cond.

<procedure>(condition-signal condition)</procedure>

Implements al_signal_cond.

=== Thread Local Storage

<procedure>(state-store! state state-flag)</procedure>

Implements al_store_state.

<procedure>(state-restore state)</procedure>

Implements al_restore_state.

=== Time

<procedure>(current-time)</procedure>

Implements al_get_time.

<procedure>(rest double)</procedure>

Implements al_rest.

<procedure>(timeout-init! timeout double)</procedure>

Implements al_init_timeout.

=== Timer

<procedure>(make-timer* double)</procedure>

Implements al_create_timer.

<procedure>(make-timer double)</procedure>

Implements al_create_timer, with (free-timer!) declared as a finalizer.

<procedure>(free-timer! timer)</procedure>

Implements al_destroy_timer.

<procedure>(usec->sec double)</procedure>

Implements ALLEGRO_USECS_TO_SECS.

<procedure>(msec->sec double)</procedure>

Implements ALLEGRO_MSECS_TO_SECS.

<procedure>(bps->sec double)</procedure>

Implements ALLEGRO_BPS_TO_SECS.

<procedure>(bpm->sec double)</procedure>

Implements ALLEGRO_BPM_TO_SECS.

<procedure>(timer-start! timer)</procedure>

Implements al_start_timer.

<procedure>(timer-stop! timer)</procedure>

Implements al_stop_timer.

<procedure>(timer-started? timer)</procedure>

Implements al_get_timer_started.

<procedure>(timer-speed timer)</procedure>

Implements al_get_timer_speed.

<setter>(timer-speed-set! timer double)</procedure>

Implements al_set_timer_speed.

<procedure>(timer-count timer)</procedure>

Implements al_get_timer_count.

<setter>(timer-count-set! timer integer)</procedure>

Implements al_set_timer_count.

<procedure>(timer-count-add! timer integer)</procedure>

Implements al_add_timer_count.

<procedure>(timer-source timer)</procedure>

Implements al_get_timer_event_source.

=== C Utilities

Found in the allegro-c-util module.

==== (make-c-string-list obj)

The obj parameter can either be a single string or list of strings. Returns a managed pointer to a NULL-terminated (char **) list suitable for use with GL extension methods.

