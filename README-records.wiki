[[tags: allegro game]]

== allegro

This document pertains to records found in the Allegro egg.

[[toc:]]

== Records and Related Procedures

=== audio-stream

<record>audio-stream</record>

=== bitmap

<record>bitmap</record>

=== color

<record>color</record>
<procedure>(make-color*)</procedure>
<procedure>(make-color)</procedure>
<procedure>(free-color! color)</procedure>
<procedure>(color-red color)</procedure>
<procedure>(color-green color)</procedure>
<procedure>(color-blue color)</procedure>
<procedure>(color-alpha color)</procedure>

=== condition

<record>condition</record>

=== config

<record>config</record>

=== config-entry

<record>config-entry</config>

=== config-section

<record>config-section</record>

=== cursor

<record>cursor</record>

=== display

<record>display</record>

=== display-mode

<record>display-mode</record>
<procedure>(make-display-mode*)</procedure>
<procedure>(make-display-mode)</procedure>
<procedure>(free-display-mode! display-mode)</procedure>
<procedure>(display-mode-width display-mode)</procedure>
<setter>(display-mode-width-set! display-mode integer)</setter>
<procedure>(display-mode-height display-mode)</procedure>
<setter>(display-mode-height-set! display-mode integer)</setter>
<procedure>(display-mode-format display-mode)</procedure>
<setter>(display-mode-format-set! display-mode pixel-format)</setter>
<procedure>(display-mode-refresh-rate display-mode)</procedure>
<setter>(display-mode-refresh-rate-set! display-mode integer)</setter>

=== driver

<record>driver</record>
<procedure>(free-driver!)</procedure>
<procedure>(driver-id driver)</procedure>
<procedure>(driver-ptr driver)</procedure>
<procedure>(driver-autodetect driver)</procedure>

=== event-source

<record>event-source</record>

=== event-queue

<record>event-queue</record>

=== file

<record>file</record>

=== file-interface

<record>file-interface</record>

=== font

<record>font</record>
<procedure>(font-data font)</procedure>
<procedure>(font-height font)</procedure>

=== fs-entry

<record>fs-entry</record>
<procedure>(fs-entry-vtable fs-entry)</procedure>

=== fs-interface

<record>fs-interface</record>
<procedure>(free-fs-interface! fs-interface)</procedure>
<procedure>(fs-interface-create-entry fs-interface)</procedure>
<procedure>(fs-interface-entry-name fs-interface)</procedure>
<procedure>(fs-interface-update-entry fs-interface)</procedure>
<procedure>(fs-interface-entry-mode fs-interface)</procedure>
<procedure>(fs-interface-atime fs-interface)</procedure>
<procedure>(fs-interface-mtime fs-interface)</procedure>
<procedure>(fs-interface-ctime fs-interface)</procedure>
<procedure>(fs-interface-entry-size fs-interface)</procedure>
<procedure>(fs-interface-entry-exists? fs-interface)</procedure>
<procedure>(fs-interface-remove-entry fs-interface)</procedure>
<procedure>(fs-interface-open-directory fs-interface)</procedure>
<procedure>(fs-interface-read-directory fs-interface)</procedure>
<procedure>(fs-interface-close-directory fs-interface)</procedure>
<procedure>(fs-interface-current-directory fs-interface)</procedure>
<procedure>(fs-interface-make-directory fs-interface)</procedure>
<procedure>(fs-interface-filename-exists? fs-interface)</procedure>
<procedure>(fs-interface-remove-filename fs-interface)</procedure>
<procedure>(fs-interface-open-file fs-interface)</procedure>

=== joystick

<record>joystick</record>

=== joystick-state

<record>joystick-state</record>
<procedure>(make-joystick-state*)</procedure>
<procedure>(make-joystick-state)</procedure>
<procedure>(free-joystick-state! joystick-state)</procedure>
<procedure>(joystick-state-button int)</procedure>

=== keyboard

<record>keyboard</record>

=== keyboard-state

<record>keyboard-state</record>
<procedure>(make-keyboard-state*)</procedure>
<procedure>(make-keyboard-state)</procedure>
<procedure>(free-keyboard-state! keyboard-state)</procedure>
<procedure>(keyboard-state-display)</procedure>

=== locked-region

<record>locked-region</record>
<procedure>(free-locked-region! locked-region)</procedure>
<procedure>(locked-region-data locked-region)</procedure>
<procedure>(locked-region-format locked-region)</procedure>
<procedure>(locked-region-pitch locked-region)</procedure>
<procedure>(locked-region-pixel-size locked-region)</procedure>

=== memory-interface

<record>memory-interface</record>
<procedure>(make-memory-interface*)</procedure>
<procedure>(make-memory-interface)</procedure>
<procedure>(free-memory-interface! memory-interface)</procedure>
<procedure>(memory-interface-malloc memory-interface)</procedure>
<setter>(memory-interface-malloc-set! memory-interface (function c-pointer (integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-realloc memory-interface)</procedure>
<setter>(memory-interface-realloc-set! memory-interface (function void      (c-pointer integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-calloc memory-interface)</procedure>
<setter>(memory-interface-calloc-set! memory-interface (function c-pointer (c-pointer integer32 integer (const c-string) (const c-string))))</setter>
<procedure>(memory-interface-free memory-interface)</procedure>
<setter>(memory-interface-free-set! memory-interface (function c-pointer (integer32 integer32 integer (const c-string) (const c-string))))</setter>

=== mixer

<record>mixer</record>

=== monitor

<record>monitor</record>
<procedure>(make-monitor*)</procedure>
<procedure>(make-monitor)</procedure>
<procedure>(free-monitor! monitor)</procedure>
<procedure>(monitor-x1 monitor)</procedure>
<procedure>(monitor-y1 monitor)</procedure>
<procedure>(monitor-x2 monitor)</procedure>
<procedure>(monitor-y2 monitor)</procedure>

=== mouse

<record>mouse</record>

=== mouse

<record>mouse-cursor</record>

=== mouse-state

<record>mouse-state</record>
<procedure>(make-mouse-state)</procedure>
<procedure>(make-mouse-state*)</procedure>
<procedure>(free-mouse-state! mouse-state)</procedure>
<procedure>(mouse-state-x mouse-state)</procedure>
<procedure>(mouse-state-y mouse-state)</procedure>
<procedure>(mouse-state-z mouse-state)</procedure>
<procedure>(mouse-state-w mouse-state)</procedure>
<procedure>(mouse-state-buttons mouse-state)</procedure>
<procedure>(mouse-state-pressure mouse-state)</procedure>
<procedure>(mouse-state-axis mouse-state integer)</procedure>
<procedure>(mouse-state-display mouse-state)</procedure>

=== mutex

<record>mutex</record>

=== path

<record>path</record>

=== sample

<record>sample</record>

=== sample-id

<record>sample-id</record>

=== sample-instance

<record>sample-instance</record>

=== state

<record>state</record>
<procedure>(make-state*)</procedure>
<procedure>(make-state)</procedure>
<procedure>(free-state! state)</procedure>

=== system

<record>system</record>

=== thread

<record>thread</record>

=== timer

<record>timer</record>

=== timeout

<record>timeout</record>
<procedure>(make-timeout*)</procedure>
<procedure>(make-timeout)</procedure>
<procedure>(free-timeout! timeout)</procedure>

=== transform

<record>transform</record>
<procedure>(make-transform*)</procedure>
<procedure>(make-transform)</procedure>
<procedure>(free-transform! transform)</procedure>
<procedure>(transform-value transform i j)</procedure>

=== utf-string

<record>utf-string</record>

=== version

<record>version</record>

<procedure>(version-major version)</procedure>
<procedure>(version-sub version)</procedure>
<procedure>(version-wip version)</procedure>
<procedure>(version-release-number version)</procedure>
<procedure>(version-string version)</procedure>
<procedure>(version-date-string version)</procedure>
<procedure>(version-date version)</procedure>
<procedure>(version-int version)</procedure>

=== vertex

<record>vertex</record>
<procedure>(make-vertex*)</procedure>
<procedure>(make-vertex)</procedure>
<procedure>(free-vertex! vertex)</procedure>
<procedure>(vertex-x vertex)</procedure>
<setter>(vertex-x-set! vertex float)</setter>
<procedure>(vertex-y vertex)</procedure>
<setter>(vertex-y-set! vertex float)</setter>
<procedure>(vertex-z vertex)</procedure>
<setter>(vertex-z-set! vertex float)</setter>
<procedure>(vertex-u vertex)</procedure>
<setter>(vertex-u-set! vertex float)</setter>
<procedure>(vertex-v vertex)</procedure>
<setter>(vertex-v-set! vertex float)</setter>

=== vertex-declaration

<record>vertex-declaration</record>

=== vertex-element

<record>vertex-element</record>
<procedure>(make-vertex-element*)</procedure>
<procedure>(make-vertex-element)</procedure>
<procedure>(free-vertex-element! vertex-element)</procedure>
<procedure>(vertex-element-attribute vertex-element)</procedure>
<setter>(vertex-element-attribute-set! vertex-element primitive-attribute)</setter>
<procedure>(vertex-element-storage vertex-element)</procedure>
<setter>(vertex-element-storage-set! vertex-element primitive-storage)</setter>
<procedure>(vertex-element-offset vertex-element)</procedure>
<setter>(vertex-element-offset-set! vertex-element integer)</setter>

=== voice

<record>voice</record>
