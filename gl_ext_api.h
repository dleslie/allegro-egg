struct _cl_context;
struct _cl_event;
typedef GLintptr GLvdpauSurfaceNV;
typedef char GLbyte;
typedef char GLchar;
typedef char GLcharARB;
typedef double GLclampd;
typedef double GLdouble;
typedef float GLclampf;
typedef float GLfloat;
typedef int GLclampx;
typedef int GLfixed;
typedef int GLint64EXT;
typedef int GLint;
typedef int GLsizei;
typedef int32_t GLint64;
typedef signed int GLintptr;
typedef signed int GLintptrARB;
typedef signed int GLsizeiptr;
typedef signed int GLsizeiptrARB;
typedef short GLshort;
typedef signed int ptrdiff_t;
typedef struct __GLsync *GLsync;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLhandleARB;
typedef unsigned int GLsizei;
typedef unsigned int GLuint64;
typedef unsigned int GLuint64EXT;
typedef unsigned int GLuint;
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalfNV;
typedef unsigned short GLushort;
typedef void * GLDEBUGPROCAMD;
typedef void * GLDEBUGPROCARB;
typedef void GLvoid;

void BlendColor(GLclampf, GLclampf, GLclampf, GLclampf);
void BlendEquation(GLenum);
void DrawRangeElements(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
void ColorTable(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
void ColorTableParameterfv(GLenum, GLenum, const GLfloat *);
void ColorTableParameteriv(GLenum, GLenum, const GLint *);
void CopyColorTable(GLenum, GLenum, GLint, GLint, GLsizei);
void GetColorTable(GLenum, GLenum, GLenum, GLvoid *);
void GetColorTableParameterfv(GLenum, GLenum, GLfloat *);
void GetColorTableParameteriv(GLenum, GLenum, GLint *);
void ColorSubTable(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyColorSubTable(GLenum, GLsizei, GLint, GLint, GLsizei);
void TexImage3D(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);

void ConvolutionFilter1D(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
void ConvolutionFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void ConvolutionParameterf(GLenum, GLenum, GLfloat);
void ConvolutionParameterfv(GLenum, GLenum, const GLfloat *);
void ConvolutionParameteri(GLenum, GLenum, GLint);
void ConvolutionParameteriv(GLenum, GLenum, const GLint *);
void CopyConvolutionFilter1D(GLenum, GLenum, GLint, GLint, GLsizei);
void CopyConvolutionFilter2D(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
void GetConvolutionFilter(GLenum, GLenum, GLenum, GLvoid *);
void GetConvolutionParameterfv(GLenum, GLenum, GLfloat *);
void GetConvolutionParameteriv(GLenum, GLenum, GLint *);
void GetSeparableFilter(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
void SeparableFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
void GetHistogram(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
void GetHistogramParameterfv(GLenum, GLenum, GLfloat *);
void GetHistogramParameteriv(GLenum, GLenum, GLint *);
void GetMinmax(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
void GetMinmaxParameterfv(GLenum, GLenum, GLfloat *);
void GetMinmaxParameteriv(GLenum, GLenum, GLint *);
void Histogram(GLenum, GLsizei, GLenum, GLboolean);
void Minmax(GLenum, GLenum, GLboolean);
void ResetHistogram(GLenum);
void ResetMinmax(GLenum);

void ActiveTexture(GLenum);
void ClientActiveTexture(GLenum);
void MultiTexCoord1d(GLenum, GLdouble);
void MultiTexCoord1dv(GLenum, const GLdouble *);
void MultiTexCoord1f(GLenum, GLfloat);
void MultiTexCoord1fv(GLenum, const GLfloat *);
void MultiTexCoord1i(GLenum, GLint);
void MultiTexCoord1iv(GLenum, const GLint *);
void MultiTexCoord1s(GLenum, GLshort);
void MultiTexCoord1sv(GLenum, const GLshort *);
void MultiTexCoord2d(GLenum, GLdouble, GLdouble);
void MultiTexCoord2dv(GLenum, const GLdouble *);
void MultiTexCoord2f(GLenum, GLfloat, GLfloat);
void MultiTexCoord2fv(GLenum, const GLfloat *);
void MultiTexCoord2i(GLenum, GLint, GLint);
void MultiTexCoord2iv(GLenum, const GLint *);
void MultiTexCoord2s(GLenum, GLshort, GLshort);
void MultiTexCoord2sv(GLenum, const GLshort *);
void MultiTexCoord3d(GLenum, GLdouble, GLdouble, GLdouble);
void MultiTexCoord3dv(GLenum, const GLdouble *);
void MultiTexCoord3f(GLenum, GLfloat, GLfloat, GLfloat);
void MultiTexCoord3fv(GLenum, const GLfloat *);
void MultiTexCoord3i(GLenum, GLint, GLint, GLint);
void MultiTexCoord3iv(GLenum, const GLint *);
void MultiTexCoord3s(GLenum, GLshort, GLshort, GLshort);
void MultiTexCoord3sv(GLenum, const GLshort *);
void MultiTexCoord4d(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
void MultiTexCoord4dv(GLenum, const GLdouble *);
void MultiTexCoord4f(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
void MultiTexCoord4fv(GLenum, const GLfloat *);
void MultiTexCoord4i(GLenum, GLint, GLint, GLint, GLint);
void MultiTexCoord4iv(GLenum, const GLint *);
void MultiTexCoord4s(GLenum, GLshort, GLshort, GLshort, GLshort);
void MultiTexCoord4sv(GLenum, const GLshort *);
void LoadTransposeMatrixf(const GLfloat *);
void LoadTransposeMatrixd(const GLdouble *);
void MultTransposeMatrixf(const GLfloat *);
void MultTransposeMatrixd(const GLdouble *);
void SampleCoverage(GLclampf, GLboolean);
void CompressedTexImage3D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexImage2D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexImage1D(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
void GetCompressedTexImage(GLenum, GLint, GLvoid *);

void BlendFuncSeparate(GLenum, GLenum, GLenum, GLenum);
void FogCoordf(GLfloat);
void FogCoordfv(const GLfloat *);
void FogCoordd(GLdouble);
void FogCoorddv(const GLdouble *);
void FogCoordPointer(GLenum, GLsizei, const GLvoid *);
void MultiDrawArrays(GLenum, GLint *, GLsizei *, GLsizei);
void MultiDrawElements(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);
void PointParameterf(GLenum, GLfloat);
void PointParameterfv(GLenum, const GLfloat *);
void PointParameteri(GLenum, GLint);
void PointParameteriv(GLenum, const GLint *);
void SecondaryColor3b(GLbyte, GLbyte, GLbyte);
void SecondaryColor3bv(const GLbyte *);
void SecondaryColor3d(GLdouble, GLdouble, GLdouble);
void SecondaryColor3dv(const GLdouble *);
void SecondaryColor3f(GLfloat, GLfloat, GLfloat);
void SecondaryColor3fv(const GLfloat *);
void SecondaryColor3i(GLint, GLint, GLint);
void SecondaryColor3iv(const GLint *);
void SecondaryColor3s(GLshort, GLshort, GLshort);
void SecondaryColor3sv(const GLshort *);
void SecondaryColor3ub(GLubyte, GLubyte, GLubyte);
void SecondaryColor3ubv(const GLubyte *);
void SecondaryColor3ui(GLuint, GLuint, GLuint);
void SecondaryColor3uiv(const GLuint *);
void SecondaryColor3us(GLushort, GLushort, GLushort);
void SecondaryColor3usv(const GLushort *);
void SecondaryColorPointer(GLint, GLenum, GLsizei, const GLvoid *);
void WindowPos2d(GLdouble, GLdouble);
void WindowPos2dv(const GLdouble *);
void WindowPos2f(GLfloat, GLfloat);
void WindowPos2fv(const GLfloat *);
void WindowPos2i(GLint, GLint);
void WindowPos2iv(const GLint *);
void WindowPos2s(GLshort, GLshort);
void WindowPos2sv(const GLshort *);
void WindowPos3d(GLdouble, GLdouble, GLdouble);
void WindowPos3dv(const GLdouble *);
void WindowPos3f(GLfloat, GLfloat, GLfloat);
void WindowPos3fv(const GLfloat *);
void WindowPos3i(GLint, GLint, GLint);
void WindowPos3iv(const GLint *);
void WindowPos3s(GLshort, GLshort, GLshort);
void WindowPos3sv(const GLshort *);

	
void BindBuffer(GLenum, GLuint);
void DeleteBuffers(GLsizei, const GLuint *);
void GenBuffers(GLsizei, GLuint *);
GLboolean IsBuffer(GLuint);
void BufferData(GLenum, GLsizeiptr, const GLvoid *, GLenum);
void BufferSubData(GLenum, GLintptr, GLsizeiptr, const GLvoid *);
void GetBufferSubData(GLenum, GLintptr, GLsizeiptr, GLvoid *);
GLvoid* MapBuffer(GLenum, GLenum);
GLboolean UnmapBuffer(GLenum);
void GetBufferParameteriv(GLenum, GLenum, GLint *);
void GetBufferPointerv(GLenum, GLenum, GLvoid* *);
void GenQueries(GLsizei, GLuint *);
void DeleteQueries(GLsizei, const GLuint *);
GLboolean IsQuery(GLuint);
void BeginQuery(GLenum, GLuint);
void EndQuery(GLenum);
void GetQueryiv(GLenum, GLenum, GLint *);
void GetQueryObjectiv(GLuint, GLenum, GLint *);
void GetQueryObjectuiv(GLuint, GLenum, GLuint *);


void BlendEquationSeparate(GLenum, GLenum);
GLuint CreateProgram(void);
GLuint CreateShader(GLenum);
void DeleteProgram(GLuint);
void DeleteShader(GLuint);
void AttachShader(GLuint, GLuint);
void DetachShader(GLuint, GLuint);
void ShaderSource(GLuint GLsizei, const GLchar **, const GLint *);
void CompileShader(GLuint);
GLboolean IsProgram(GLuint);
GLboolean IsShader (GLuint);
void LinkProgram(GLuint);
void UseProgram(GLuint);
void ValidateProgram(GLuint);
void Uniform1f(GLint, GLfloat);
void Uniform2f(GLint, GLfloat, GLfloat);
void Uniform3f(GLint, GLfloat, GLfloat, GLfloat);
void Uniform4f(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
void Uniform1i(GLint, GLint);
void Uniform2i(GLint, GLint, GLint);
void Uniform3i(GLint, GLint, GLint, GLint);
void Uniform4i(GLint, GLint, GLint, GLint, GLint);
void Uniform1fv(GLint, GLsizei, GLfloat *);
void Uniform2fv(GLint, GLsizei, GLfloat *);
void Uniform3fv(GLint, GLsizei, GLfloat *);
void Uniform4fv(GLint, GLsizei, GLfloat *);
void Uniform1iv(GLint, GLsizei, GLint *);
void Uniform2iv(GLint, GLsizei, GLint *);
void Uniform3iv(GLint, GLsizei, GLint *);
void Uniform4iv(GLint, GLsizei, GLint *);
void UniformMatrix2fv(GLint, GLsizei, GLboolean, GLfloat *);
void UniformMatrix3fv(GLint, GLsizei, GLboolean, GLfloat *);
void UniformMatrix4fv(GLint, GLsizei, GLboolean, GLfloat *);
void GetShaderfv (GLuint, GLenum, GLfloat *);
void GetShaderiv (GLuint, GLenum, GLint *);
void GetProgramfv(GLuint, GLenum, GLfloat *);
void GetProgramiv(GLuint, GLenum, GLint *);
void GetShaderInfoLog (GLuint, GLsizei, GLsizei *, GLchar *);
void GetProgramInfoLog(GLuint, GLsizei, GLsizei *, GLchar *);
void GetAttachedShaders (GLuint, GLsizei, GLsizei *, GLuint *);
GLint GetUniformLocation(GLuint, const GLchar *);
void GetActiveUniform(GLuint GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
void GetUniformfv(GLuint GLint, GLfloat *);
void GetUniformiv(GLuint GLint, GLint *);
void GetShaderSource(GLuint GLsizei, GLsizei *, GLchar *);
void VertexAttrib1f   (GLuint, GLfloat);
void VertexAttrib1s   (GLuint, GLshort);
void VertexAttrib1d   (GLuint, GLdouble);
void VertexAttrib2f   (GLuint, GLfloat, GLfloat);
void VertexAttrib2s   (GLuint, GLshort, GLshort);
void VertexAttrib2d   (GLuint, GLdouble, GLdouble);
void VertexAttrib3f   (GLuint, GLfloat, GLfloat, GLfloat);
void VertexAttrib3s   (GLuint, GLshort, GLshort, GLshort);
void VertexAttrib3d   (GLuint, GLdouble, GLdouble, GLdouble);
void VertexAttrib4f   (GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void VertexAttrib4s   (GLuint, GLshort, GLshort, GLshort, GLshort);
void VertexAttrib4d   (GLuint, GLdouble,GLdouble,GLdouble,GLdouble);
void VertexAttrib4Nub (GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
void VertexAttrib1fv  (GLuint, const GLfloat *);
void VertexAttrib1sv  (GLuint, const GLshort *);
void VertexAttrib1dv  (GLuint, const GLdouble *);
void VertexAttrib2fv  (GLuint, const GLfloat *);
void VertexAttrib2sv  (GLuint, const GLshort *);
void VertexAttrib2dv  (GLuint, const GLdouble *);
void VertexAttrib3fv  (GLuint, const GLfloat *);
void VertexAttrib3sv  (GLuint, const GLshort *);
void VertexAttrib3dv  (GLuint, const GLdouble *);
void VertexAttrib4fv  (GLuint, const GLfloat *);
void VertexAttrib4sv  (GLuint, const GLshort *);
void VertexAttrib4dv  (GLuint, const GLdouble *);
void VertexAttrib4iv  (GLuint, const GLint *);
void VertexAttrib4bv  (GLuint, const GLbyte *);
void VertexAttrib4ubv (GLuint, const GLubyte *);
void VertexAttrib4usv (GLuint, const GLushort *);
void VertexAttrib4uiv (GLuint, const GLuint *);
void VertexAttrib4Nbv (GLuint, const GLbyte *);
void VertexAttrib4Nsv (GLuint, const GLshort *);
void VertexAttrib4Niv (GLuint, const GLint *);
void VertexAttrib4Nubv(GLuint, const GLubyte *);
void VertexAttrib4Nusv(GLuint, const GLushort *);
void VertexAttrib4Nuiv(GLuint, const GLuint *);
void VertexAttribPointer(GLuint GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
void EnableVertexAttribArray(GLuint);
void DisableVertexAttribArray(GLuint);

void BindAttribLocation(GLuint, GLuint, const GLchar *);
void GetActiveAttrib   (GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
GLint GetAttribLocation(GLuint, const GLchar *);
void GetVertexAttribdv(GLuint, GLenum, GLdouble *);
void GetVertexAttribfv(GLuint, GLenum, GLfloat *);
void GetVertexAttribiv(GLuint, GLenum, GLint *);
void GetVertexAttribPointerv(GLuint, GLenum, GLvoid **);

void DrawBuffers(GLsizei n, const GLenum *);

void StencilOpSeparate  (GLenum, GLenum, GLenum, GLenum);
void StencilFuncSeparate(GLenum, GLenum, GLint,  GLuint);



void UniformMatrix2x3fv(GLint, GLsizei, GLboolean, const GLfloat *);
void UniformMatrix3x2fv(GLint, GLsizei, GLboolean, const GLfloat *);
void UniformMatrix2x4fv(GLint, GLsizei, GLboolean, const GLfloat *);
void UniformMatrix4x2fv(GLint, GLsizei, GLboolean, const GLfloat *);
void UniformMatrix3x4fv(GLint, GLsizei, GLboolean, const GLfloat *);
void UniformMatrix4x3fv(GLint, GLsizei, GLboolean, const GLfloat *);

void ColorMaski(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
void GetBooleani_v(GLenum, GLuint, GLboolean *);
void GetIntegeri_v(GLenum, GLuint, GLint *);
void Enablei(GLenum, GLuint);
void Disablei(GLenum, GLuint);
GLboolean IsEnabledi(GLenum, GLuint);
void BeginTransformFeedback(GLenum);
void EndTransformFeedback(void);
void BindBufferRange(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
void BindBufferBase(GLenum, GLuint, GLuint);
void TransformFeedbackVaryings(GLuint, GLsizei, const GLint *, GLenum);
void GetTransformFeedbackVarying(GLuint, GLuint, GLint *);
void ClampColor(GLenum, GLenum);
void BeginConditionalRender(GLuint, GLenum);
void EndConditionalRender(void);
void VertexAttribI1i(GLuint, GLint);
void VertexAttribI2i(GLuint, GLint, GLint);
void VertexAttribI3i(GLuint, GLint, GLint, GLint);
void VertexAttribI4i(GLuint, GLint, GLint, GLint, GLint);
void VertexAttribI1ui(GLuint, GLuint);
void VertexAttribI2ui(GLuint, GLuint, GLuint);
void VertexAttribI3ui(GLuint, GLuint, GLuint, GLuint);
void VertexAttribI4ui(GLuint, GLuint, GLuint, GLuint, GLuint);
void VertexAttribI1iv(GLuint, const GLint *);
void VertexAttribI2iv(GLuint, const GLint *);
void VertexAttribI3iv(GLuint, const GLint *);
void VertexAttribI4iv(GLuint, const GLint *);
void VertexAttribI1uiv(GLuint, const GLuint *);
void VertexAttribI2uiv(GLuint, const GLuint *);
void VertexAttribI3uiv(GLuint, const GLuint *);
void VertexAttribI4uiv(GLuint, const GLuint *);
void VertexAttribI4bv(GLuint, const GLbyte *);
void VertexAttribI4sv(GLuint, const GLshort *);
void VertexAttribI4ubv(GLuint, const GLubyte *);
void VertexAttribI4usv(GLuint, const GLushort *);
void VertexAttribIPointer(GLuint, GLint, GLenum, GLsizei, const GLvoid *);
void GetVertexAttribIiv(GLuint, GLenum, GLint *);
void GetVertexAttribIuiv(GLuint, GLenum, GLuint *);
void GetUniformuiv(GLuint, GLint, GLuint *);
void BindFragDataLocation(GLuint, GLuint, const GLchar *);
GLint GetFragDataLocation(GLuint, const GLchar *);
void Uniform1ui(GLint, GLuint);
void Uniform2ui(GLint, GLuint, GLuint);
void Uniform3ui(GLint, GLuint, GLuint, GLuint);
void Uniform4ui(GLint, GLuint, GLuint, GLuint, GLuint);
void Uniform1uiv(GLint, GLsizei, const GLuint *);
void Uniform2uiv(GLint, GLsizei, const GLuint *);
void Uniform3uiv(GLint, GLsizei, const GLuint *);
void Uniform4uiv(GLint, GLsizei, const GLuint *);
void TexParameterIiv(GLenum, GLenum, const GLint *);
void TexParameterIuiv(GLenum, GLenum, const GLuint *);
void GetTexParameterIiv(GLenum, GLenum, GLint *);
void GetTexParameterIuiv(GLenum, GLenum, GLuint *);
void ClearBufferiv(GLenum, GLint, const GLint *);
void ClearBufferuiv(GLenum, GLint, const GLuint *);
void ClearBufferfv(GLenum, GLint, const GLfloat *);
void ClearBufferfi(GLenum, GLint, GLfloat, GLint);
const GLubyte * GetStringi(GLenum, GLuint);


void DrawArraysInstanced(GLenum, GLint, GLsizei, GLsizei);
void DrawElementsInstanced(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);
void TexBuffer(GLenum, GLenum, GLuint);
void PrimitiveRestartIndex(GLuint);

void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
void glProgramParameteri(GLuint program, GLenum pname, GLint value);
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);




void ActiveTextureARB(GLenum);
void ClientActiveTextureARB(GLenum);
void MultiTexCoord1dARB(GLenum, GLdouble);
void MultiTexCoord1dvARB(GLenum, const GLdouble *);
void MultiTexCoord1fARB(GLenum, GLfloat);
void MultiTexCoord1fvARB(GLenum, const GLfloat *);
void MultiTexCoord1iARB(GLenum, GLint);
void MultiTexCoord1ivARB(GLenum, const GLint *);
void MultiTexCoord1sARB(GLenum, GLshort);
void MultiTexCoord1svARB(GLenum, const GLshort *);
void MultiTexCoord2dARB(GLenum, GLdouble, GLdouble);
void MultiTexCoord2dvARB(GLenum, const GLdouble *);
void MultiTexCoord2fARB(GLenum, GLfloat, GLfloat);
void MultiTexCoord2fvARB(GLenum, const GLfloat *);
void MultiTexCoord2iARB(GLenum, GLint, GLint);
void MultiTexCoord2ivARB(GLenum, const GLint *);
void MultiTexCoord2sARB(GLenum, GLshort, GLshort);
void MultiTexCoord2svARB(GLenum, const GLshort *);
void MultiTexCoord3dARB(GLenum, GLdouble, GLdouble, GLdouble);
void MultiTexCoord3dvARB(GLenum, const GLdouble *);
void MultiTexCoord3fARB(GLenum, GLfloat, GLfloat, GLfloat);
void MultiTexCoord3fvARB(GLenum, const GLfloat *);
void MultiTexCoord3iARB(GLenum, GLint, GLint, GLint);
void MultiTexCoord3ivARB(GLenum, const GLint *);
void MultiTexCoord3sARB(GLenum, GLshort, GLshort, GLshort);
void MultiTexCoord3svARB(GLenum, const GLshort *);
void MultiTexCoord4dARB(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
void MultiTexCoord4dvARB(GLenum, const GLdouble *);
void MultiTexCoord4fARB(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
void MultiTexCoord4fvARB(GLenum, const GLfloat *);
void MultiTexCoord4iARB(GLenum, GLint, GLint, GLint, GLint);
void MultiTexCoord4ivARB(GLenum, const GLint *);
void MultiTexCoord4sARB(GLenum, GLshort, GLshort, GLshort, GLshort);
void MultiTexCoord4svARB(GLenum, const GLshort *);

void LoadTransposeMatrixfARB(const GLfloat *);
void LoadTransposeMatrixdARB(const GLdouble *);
void MultTransposeMatrixfARB(const GLfloat *);
void MultTransposeMatrixdARB(const GLdouble *);

void SampleCoverageARB(GLclampf, GLboolean);

void CompressedTexImage3DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexImage2DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexImage1DARB(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTexSubImage3DARB(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTexSubImage2DARB(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTexSubImage1DARB(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
void GetCompressedTexImageARB(GLenum, GLint, GLvoid *);

void PointParameterfARB(GLenum, GLfloat);
void PointParameterfvARB(GLenum, const GLfloat *);

void WeightbvARB(GLint, const GLbyte *);
void WeightsvARB(GLint, const GLshort *);
void WeightivARB(GLint, const GLint *);
void WeightfvARB(GLint, const GLfloat *);
void WeightdvARB(GLint, const GLdouble *);
void WeightubvARB(GLint, const GLubyte *);
void WeightusvARB(GLint, const GLushort *);
void WeightuivARB(GLint, const GLuint *);
void WeightPointerARB(GLint, GLenum, GLsizei, const GLvoid *);
void VertexBlendARB(GLint);

void CurrentPaletteMatrixARB(GLint);
void MatrixIndexubvARB(GLint, const GLubyte *);
void MatrixIndexusvARB(GLint, const GLushort *);
void MatrixIndexuivARB(GLint, const GLuint *);
void MatrixIndexPointerARB(GLint, GLenum, GLsizei, const GLvoid *);

void WindowPos2dARB(GLdouble, GLdouble);
void WindowPos2dvARB(const GLdouble *);
void WindowPos2fARB(GLfloat, GLfloat);
void WindowPos2fvARB(const GLfloat *);
void WindowPos2iARB(GLint, GLint);
void WindowPos2ivARB(const GLint *);
void WindowPos2sARB(GLshort, GLshort);
void WindowPos2svARB(const GLshort *);
void WindowPos3dARB(GLdouble, GLdouble, GLdouble);
void WindowPos3dvARB(const GLdouble *);
void WindowPos3fARB(GLfloat, GLfloat, GLfloat);
void WindowPos3fvARB(const GLfloat *);
void WindowPos3iARB(GLint, GLint, GLint);
void WindowPos3ivARB(const GLint *);
void WindowPos3sARB(GLshort, GLshort, GLshort);
void WindowPos3svARB(const GLshort *);

void VertexAttrib1dARB(GLuint, GLdouble);
void VertexAttrib1dvARB(GLuint, const GLdouble *);
void VertexAttrib1fARB(GLuint, GLfloat);
void VertexAttrib1fvARB(GLuint, const GLfloat *);
void VertexAttrib1sARB(GLuint, GLshort);
void VertexAttrib1svARB(GLuint, const GLshort *);
void VertexAttrib2dARB(GLuint, GLdouble, GLdouble);
void VertexAttrib2dvARB(GLuint, const GLdouble *);
void VertexAttrib2fARB(GLuint, GLfloat, GLfloat);
void VertexAttrib2fvARB(GLuint, const GLfloat *);
void VertexAttrib2sARB(GLuint, GLshort, GLshort);
void VertexAttrib2svARB(GLuint, const GLshort *);
void VertexAttrib3dARB(GLuint, GLdouble, GLdouble, GLdouble);
void VertexAttrib3dvARB(GLuint, const GLdouble *);
void VertexAttrib3fARB(GLuint, GLfloat, GLfloat, GLfloat);
void VertexAttrib3fvARB(GLuint, const GLfloat *);
void VertexAttrib3sARB(GLuint, GLshort, GLshort, GLshort);
void VertexAttrib3svARB(GLuint, const GLshort *);
void VertexAttrib4NbvARB(GLuint, const GLbyte *);
void VertexAttrib4NivARB(GLuint, const GLint *);
void VertexAttrib4NsvARB(GLuint, const GLshort *);
void VertexAttrib4NubARB(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
void VertexAttrib4NubvARB(GLuint, const GLubyte *);
void VertexAttrib4NuivARB(GLuint, const GLuint *);
void VertexAttrib4NusvARB(GLuint, const GLushort *);
void VertexAttrib4bvARB(GLuint, const GLbyte *);
void VertexAttrib4dARB(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void VertexAttrib4dvARB(GLuint, const GLdouble *);
void VertexAttrib4fARB(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void VertexAttrib4fvARB(GLuint, const GLfloat *);
void VertexAttrib4ivARB(GLuint, const GLint *);
void VertexAttrib4sARB(GLuint, GLshort, GLshort, GLshort, GLshort);
void VertexAttrib4svARB(GLuint, const GLshort *);
void VertexAttrib4ubvARB(GLuint, const GLubyte *);
void VertexAttrib4uivARB(GLuint, const GLuint *);
void VertexAttrib4usvARB(GLuint, const GLushort *);
void VertexAttribPointerARB(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
void EnableVertexAttribArrayARB(GLuint);
void DisableVertexAttribArrayARB(GLuint);
void ProgramStringARB(GLenum, GLenum, GLsizei, const GLvoid *);
void BindProgramARB(GLenum, GLuint);
void DeleteProgramsARB(GLsizei, const GLuint *);
void GenProgramsARB(GLsizei, GLuint *);
void ProgramEnvParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void ProgramEnvParameter4dvARB(GLenum, GLuint, const GLdouble *);
void ProgramEnvParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void ProgramEnvParameter4fvARB(GLenum, GLuint, const GLfloat *);
void ProgramLocalParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void ProgramLocalParameter4dvARB(GLenum, GLuint, const GLdouble *);
void ProgramLocalParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void ProgramLocalParameter4fvARB(GLenum, GLuint, const GLfloat *);
void GetProgramEnvParameterdvARB(GLenum, GLuint, GLdouble *);
void GetProgramEnvParameterfvARB(GLenum, GLuint, GLfloat *);
void GetProgramLocalParameterdvARB(GLenum, GLuint, GLdouble *);
void GetProgramLocalParameterfvARB(GLenum, GLuint, GLfloat *);
void GetProgramivARB(GLenum, GLenum, GLint *);
void GetProgramStringARB(GLenum, GLenum, GLvoid *);
void GetVertexAttribdvARB(GLuint, GLenum, GLdouble *);
void GetVertexAttribfvARB(GLuint, GLenum, GLfloat *);
void GetVertexAttribivARB(GLuint, GLenum, GLint *);
void GetVertexAttribPointervARB(GLuint, GLenum, GLvoid* *);
GLboolean IsProgramARB(GLuint);

void BindBufferARB(GLenum, GLuint);
void DeleteBuffersARB(GLsizei, const GLuint *);
void GenBuffersARB(GLsizei, GLuint *);
GLboolean IsBufferARB(GLuint);
void BufferDataARB(GLenum, GLsizeiptrARB, const GLvoid *, GLenum);
void BufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, const GLvoid *);
void GetBufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, GLvoid *);
GLvoid* MapBufferARB(GLenum, GLenum);
GLboolean UnmapBufferARB(GLenum);
void GetBufferParameterivARB(GLenum, GLenum, GLint *);
void GetBufferPointervARB(GLenum, GLenum, GLvoid* *);

void GenQueriesARB(GLsizei, GLuint *);
void DeleteQueriesARB(GLsizei, const GLuint *);
GLboolean IsQueryARB(GLuint);
void BeginQueryARB(GLenum, GLuint);
void EndQueryARB(GLenum);
void GetQueryivARB(GLenum, GLenum, GLint *);
void GetQueryObjectivARB(GLuint, GLenum, GLint *);
void GetQueryObjectuivARB(GLuint, GLenum, GLuint *);

void DeleteObjectARB(GLhandleARB);
GLhandleARB GetHandleARB(GLenum);
void DetachObjectARB(GLhandleARB, GLhandleARB);
GLhandleARB CreateShaderObjectARB(GLenum);
void ShaderSourceARB(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
void CompileShaderARB(GLhandleARB);
GLhandleARB CreateProgramObjectARB(void);
void AttachObjectARB(GLhandleARB, GLhandleARB);
void LinkProgramARB(GLhandleARB);
void UseProgramObjectARB(GLhandleARB);
void ValidateProgramARB(GLhandleARB);
void Uniform1fARB(GLint, GLfloat);
void Uniform2fARB(GLint, GLfloat, GLfloat);
void Uniform3fARB(GLint, GLfloat, GLfloat, GLfloat);
void Uniform4fARB(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
void Uniform1iARB(GLint, GLint);
void Uniform2iARB(GLint, GLint, GLint);
void Uniform3iARB(GLint, GLint, GLint, GLint);
void Uniform4iARB(GLint, GLint, GLint, GLint, GLint);
void Uniform1fvARB(GLint, GLsizei, GLfloat *);
void Uniform2fvARB(GLint, GLsizei, GLfloat *);
void Uniform3fvARB(GLint, GLsizei, GLfloat *);
void Uniform4fvARB(GLint, GLsizei, GLfloat *);
void Uniform1ivARB(GLint, GLsizei, GLint *);
void Uniform2ivARB(GLint, GLsizei, GLint *);
void Uniform3ivARB(GLint, GLsizei, GLint *);
void Uniform4ivARB(GLint, GLsizei, GLint *);
void UniformMatrix2fvARB(GLint, GLsizei, GLboolean, GLfloat *);
void UniformMatrix3fvARB(GLint, GLsizei, GLboolean, GLfloat *);
void UniformMatrix4fvARB(GLint, GLsizei, GLboolean, GLfloat *);
void GetObjectParameterfvARB(GLhandleARB, GLenum, GLfloat *);
void GetObjectParameterivARB(GLhandleARB, GLenum, GLint *);
void GetInfoLogARB(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
void GetAttachedObjectsARB(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
GLint GetUniformLocationARB(GLhandleARB, const GLcharARB *);
void GetActiveUniformARB(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
void GetUniformfvARB(GLhandleARB, GLint, GLfloat *);
void GetUniformivARB(GLhandleARB, GLint, GLint *);
void GetShaderSourceARB(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);

void VertexAttrib1fARB(GLuint, GLfloat);
void VertexAttrib1sARB(GLuint, GLshort);
void VertexAttrib1dARB(GLuint, GLdouble);
void VertexAttrib2fARB(GLuint, GLfloat, GLfloat);
void VertexAttrib2sARB(GLuint, GLshort, GLshort);
void VertexAttrib2dARB(GLuint, GLdouble, GLdouble);
void VertexAttrib3fARB(GLuint, GLfloat, GLfloat, GLfloat);
void VertexAttrib3sARB(GLuint, GLshort, GLshort, GLshort);
void VertexAttrib3dARB(GLuint, GLdouble, GLdouble, GLdouble);
void VertexAttrib4fARB(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void VertexAttrib4sARB(GLuint, GLshort, GLshort, GLshort, GLshort);
void VertexAttrib4dARB(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void VertexAttrib4NubARB(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
void VertexAttrib1fvARB(GLuint, const GLfloat *);
void VertexAttrib1svARB(GLuint, const GLshort *);
void VertexAttrib1dvARB(GLuint, const GLdouble *);
void VertexAttrib2fvARB(GLuint, const GLfloat *);
void VertexAttrib2svARB(GLuint, const GLshort *);
void VertexAttrib2dvARB(GLuint, const GLdouble *);
void VertexAttrib3fvARB(GLuint, const GLfloat *);
void VertexAttrib3svARB(GLuint, const GLshort *);
void VertexAttrib3dvARB(GLuint, const GLdouble *);
void VertexAttrib4fvARB(GLuint, const GLfloat *);
void VertexAttrib4svARB(GLuint, const GLshort *);
void VertexAttrib4dvARB(GLuint, const GLdouble *);
void VertexAttrib4ivARB(GLuint, const GLint *);
void VertexAttrib4bvARB(GLuint, const GLbyte *);
void VertexAttrib4ubvARB(GLuint, const GLubyte *);
void VertexAttrib4usvARB(GLuint, const GLushort *);
void VertexAttrib4uivARB(GLuint, const GLuint *);
void VertexAttrib4NbvARB(GLuint, const GLbyte *);
void VertexAttrib4NsvARB(GLuint, const GLshort *);
void VertexAttrib4NivARB(GLuint, const GLint *);
void VertexAttrib4NubvARB(GLuint, const GLubyte *);
void VertexAttrib4NusvARB(GLuint, const GLushort *);
void VertexAttrib4NuivARB(GLuint, const GLuint *);
void VertexAttribPointerARB(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
void EnableVertexAttribArrayARB(GLuint);
void DisableVertexAttribArrayARB(GLuint);
void BindAttribLocationARB(GLhandleARB, GLuint, const GLcharARB *);
void GetActiveAttribARB(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
GLint GetAttribLocationARB(GLhandleARB, const GLcharARB *);
void GetVertexAttribdvARB(GLuint, GLenum, GLdouble *);
void GetVertexAttribfvARB(GLuint, GLenum, GLfloat *);
void GetVertexAttribivARB(GLuint, GLenum, GLint *);
void GetVertexAttribPointervARB(GLuint, GLenum, GLvoid **);

void DrawBuffersARB(GLsizei n, const GLenum *bufs);

void ClampColorARB(GLenum, GLenum clamp);

void DrawArraysInstancedARB(GLenum, GLint, GLsizei, GLsizei);
void DrawElementsInstancedARB(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);

GLboolean IsRenderbuffer(GLuint);
void BindRenderbuffer(GLenum, GLuint);
void DeleteRenderbuffers(GLsizei, const GLuint *);
void GenRenderbuffers(GLsizei, GLuint *);
void RenderbufferStorage(GLenum, GLenum, GLsizei, GLsizei);
void GetRenderbufferParameteriv(GLenum, GLenum, GLint *);
GLboolean IsFramebuffer(GLuint);
void BindFramebuffer(GLenum, GLuint);
void DeleteFramebuffers(GLsizei, const GLuint *);
void GenFramebuffers(GLsizei, GLuint *);
GLenum CheckFramebufferStatus(GLenum);
void FramebufferTexture1D(GLenum, GLenum, GLenum, GLuint, GLint);
void FramebufferTexture2D(GLenum, GLenum, GLenum, GLuint, GLint);
void FramebufferTexture3D(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
void FramebufferRenderbuffer(GLenum, GLenum, GLenum, GLuint);
void GetFramebufferAttachmentParameteriv(GLenum, GLenum, GLenum, GLint *);
void GenerateMipmap(GLenum);
void BlitFramebuffer(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
void RenderbufferStorageMultisample(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
void FramebufferTextureLayer(GLenum, GLenum, GLuint, GLint, GLint);

void ProgramParameteriARB(GLuint, GLenum, GLint);
void FramebufferTextureARB(GLenum, GLenum, GLuint, GLint);
void FramebufferTextureLayerARB(GLenum, GLenum, GLuint, GLint, GLint);
void FramebufferTextureFaceARB(GLenum, GLenum, GLuint, GLint, GLenum);

void VertexAttribDivisor(GLuint, GLuint);

void MapBufferRange(GLenum, GLintptr, GLsizeiptr, GLbitfield);
void FlushMappedBufferRange(GLenum, GLintptr, GLsizeiptr);

void TexBufferARB(GLenum, GLenum, GLuint);

void BindVertexArray(GLuint);
void DeleteVertexArrays(GLsizei, const GLuint *);
void GenVertexArrays(GLsizei, GLuint *);
GLboolean IsVertexArray(GLuint);

void GetUniformIndices(GLuint, GLsizei, const GLchar* *, GLuint *);
void GetActiveUniformsiv(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
void GetActiveUniformName(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
GLuint GetUniformBlockIndex(GLuint, const GLchar *);
void GetActiveUniformBlockiv(GLuint, GLuint, GLenum, GLint *);
void GetActiveUniformBlockName(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
void UniformBlockBinding(GLuint, GLuint, GLuint);

void CopyBufferSubData(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);


void DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
void MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);

void ProvokingVertex(GLenum mode);

GLsync FenceSync(GLenum condition, GLbitfield flags);
GLboolean IsSync(GLsync sync);
void DeleteSync(GLsync sync);
GLenum ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void GetInteger64v(GLenum pname, GLint64 *params);
void GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);

void TexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void TexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void SampleMaski(GLuint index, GLbitfield mask);

void BlendEquationi(GLuint buf, GLenum mode);
void BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void BlendFunci(GLuint buf, GLenum src, GLenum dst);
void BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);

void MinSampleShading(GLclampf value);

void NamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
void DeleteNamedStringARB(GLint namelen, const GLchar *name);
void CompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
GLboolean IsNamedStringARB(GLint namelen, const GLchar *name);
void GetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
void GetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);

void BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint GetFragDataIndex(GLuint program, const GLchar *name);

void GenSamplers(GLsizei count, GLuint *samplers);
void DeleteSamplers(GLsizei count, const GLuint *samplers);
GLboolean IsSampler(GLuint sampler);
void BindSampler(GLenum unit, GLuint sampler);
void SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
void SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
void SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
void SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
void GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
void GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
void GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
void GetSamplerParameterIfv(GLuint sampler, GLenum pname, GLfloat *params);

void QueryCounter(GLuint id, GLenum target);
void GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
void GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);

void VertexP2ui(GLenum type, GLuint value);
void VertexP2uiv(GLenum type, const GLuint *value);
void VertexP3ui(GLenum type, GLuint value);
void VertexP3uiv(GLenum type, const GLuint *value);
void VertexP4ui(GLenum type, GLuint value);
void VertexP4uiv(GLenum type, const GLuint *value);
void TexCoordP1ui(GLenum type, GLuint coords);
void TexCoordP1uiv(GLenum type, const GLuint *coords);
void TexCoordP2ui(GLenum type, GLuint coords);
void TexCoordP2uiv(GLenum type, const GLuint *coords);
void TexCoordP3ui(GLenum type, GLuint coords);
void TexCoordP3uiv(GLenum type, const GLuint *coords);
void TexCoordP4ui(GLenum type, GLuint coords);
void TexCoordP4uiv(GLenum type, const GLuint *coords);
void MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
void MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
void MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
void MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
void NormalP3ui(GLenum type, GLuint coords);
void NormalP3uiv(GLenum type, const GLuint *coords);
void ColorP3ui(GLenum type, GLuint color);
void ColorP3uiv(GLenum type, const GLuint *color);
void ColorP4ui(GLenum type, GLuint color);
void ColorP4uiv(GLenum type, const GLuint *color);
void SecondaryColorP3ui(GLenum type, GLuint color);
void SecondaryColorP3uiv(GLenum type, const GLuint *color);
void VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);

void DrawArraysIndirect(GLenum mode, const GLvoid *indirect);
void DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect);

void Uniform1d(GLint location, GLdouble x);
void Uniform2d(GLint location, GLdouble x, GLdouble y);
void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void Uniform1dv(GLint location, GLsizei count, const GLdouble *value);
void Uniform2dv(GLint location, GLsizei count, const GLdouble *value);
void Uniform3dv(GLint location, GLsizei count, const GLdouble *value);
void Uniform4dv(GLint location, GLsizei count, const GLdouble *value);
void UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GetUniformdv(GLuint program, GLint location, GLdouble *params);
void ProgramUniform1dEXT(GLuint program, GLint location, GLdouble x);
void ProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y);
void ProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void ProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);

GLint GetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
GLuint GetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
void GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
void GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
void GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
void GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);

void PatchParameteri(GLenum pname, GLint value);
void PatchParameterfv(GLenum pname, const GLfloat *values);

void BindTransformFeedback(GLenum target, GLuint id);
void DeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
void GenTransformFeedbacks(GLsizei n, GLuint *ids);
GLboolean IsTransformFeedback(GLuint id);
void PauseTransformFeedback(void);
void ResumeTransformFeedback(void);
void DrawTransformFeedback(GLenum mode, GLuint id);

void DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void BeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void EndQueryIndexed(GLenum target, GLuint index);
void GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);




void BlendColorEXT(GLclampf, GLclampf, GLclampf, GLclampf);

void PolygonOffsetEXT(GLfloat, GLfloat);

void TexImage3DEXT(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);

void GetTexFilterFuncSGIS(GLenum, GLenum, GLfloat *);
void TexFilterFuncSGIS(GLenum, GLenum, GLsizei, const GLfloat *);

void TexSubImage1DEXT(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
void TexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);

void CopyTexImage1DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
void CopyTexImage2DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
void CopyTexSubImage1DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei);
void CopyTexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
void CopyTexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);

void GetHistogramEXT(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
void GetHistogramParameterfvEXT(GLenum, GLenum, GLfloat *);
void GetHistogramParameterivEXT(GLenum, GLenum, GLint *);
void GetMinmaxEXT(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
void GetMinmaxParameterfvEXT(GLenum, GLenum, GLfloat *);
void GetMinmaxParameterivEXT(GLenum, GLenum, GLint *);
void HistogramEXT(GLenum, GLsizei, GLenum, GLboolean);
void MinmaxEXT(GLenum, GLenum, GLboolean);
void ResetHistogramEXT(GLenum);
void ResetMinmaxEXT(GLenum);

void ConvolutionFilter1DEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
void ConvolutionFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void ConvolutionParameterfEXT(GLenum, GLenum, GLfloat);
void ConvolutionParameterfvEXT(GLenum, GLenum, const GLfloat *);
void ConvolutionParameteriEXT(GLenum, GLenum, GLint);
void ConvolutionParameterivEXT(GLenum, GLenum, const GLint *);
void CopyConvolutionFilter1DEXT(GLenum, GLenum, GLint, GLint, GLsizei);
void CopyConvolutionFilter2DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
void GetConvolutionFilterEXT(GLenum, GLenum, GLenum, GLvoid *);
void GetConvolutionParameterfvEXT(GLenum, GLenum, GLfloat *);
void GetConvolutionParameterivEXT(GLenum, GLenum, GLint *);
void GetSeparableFilterEXT(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
void SeparableFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);

void ColorTableSGI(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
void ColorTableParameterfvSGI(GLenum, GLenum, const GLfloat *);
void ColorTableParameterivSGI(GLenum, GLenum, const GLint *);
void CopyColorTableSGI(GLenum, GLenum, GLint, GLint, GLsizei);
void GetColorTableSGI(GLenum, GLenum, GLenum, GLvoid *);
void GetColorTableParameterfvSGI(GLenum, GLenum, GLfloat *);
void GetColorTableParameterivSGI(GLenum, GLenum, GLint *);

void PixelTexGenSGIX(GLenum);

void PixelTexGenParameteriSGIS(GLenum, GLint);
void PixelTexGenParameterivSGIS(GLenum, const GLint *);
void PixelTexGenParameterfSGIS(GLenum, GLfloat);
void PixelTexGenParameterfvSGIS(GLenum, const GLfloat *);
void GetPixelTexGenParameterivSGIS(GLenum, GLint *);
void GetPixelTexGenParameterfvSGIS(GLenum, GLfloat *);

void TexImage4DSGIS(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TexSubImage4DSGIS(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);

GLboolean AreTexturesResidentEXT(GLsizei, const GLuint *, GLboolean *);
void BindTextureEXT(GLenum, GLuint);
void DeleteTexturesEXT(GLsizei, const GLuint *);
void GenTexturesEXT(GLsizei, GLuint *);
GLboolean IsTextureEXT(GLuint);
void PrioritizeTexturesEXT(GLsizei, const GLuint *, const GLclampf *);

void DetailTexFuncSGIS(GLenum, GLsizei, const GLfloat *);
void GetDetailTexFuncSGIS(GLenum, GLfloat *);

void SharpenTexFuncSGIS(GLenum, GLsizei, const GLfloat *);
void GetSharpenTexFuncSGIS(GLenum, GLfloat *);

void SampleMaskSGIS(GLclampf, GLboolean);
void SamplePatternSGIS(GLenum);

void ArrayElementEXT(GLint);
void ColorPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
void DrawArraysEXT(GLenum, GLint, GLsizei);
void EdgeFlagPointerEXT(GLsizei, GLsizei, const GLboolean *);
void GetPointervEXT(GLenum, GLvoid* *);
void IndexPointerEXT(GLenum, GLsizei, GLsizei, const GLvoid *);
void NormalPointerEXT(GLenum, GLsizei, GLsizei, const GLvoid *);
void TexCoordPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
void VertexPointerEXT(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);

void BlendEquationEXT(GLenum);

void SpriteParameterfSGIX(GLenum, GLfloat);
void SpriteParameterfvSGIX(GLenum, const GLfloat *);
void SpriteParameteriSGIX(GLenum, GLint);
void SpriteParameterivSGIX(GLenum, const GLint *);

void PointParameterfEXT(GLenum, GLfloat);
void PointParameterfvEXT(GLenum, const GLfloat *);

void PointParameterfSGIS(GLenum, GLfloat);
void PointParameterfvSGIS(GLenum, const GLfloat *);

GLint GetInstrumentsSGIX(void);
void InstrumentsBufferSGIX(GLsizei, GLint *);
GLint PollInstrumentsSGIX(GLint *);
void ReadInstrumentsSGIX(GLint);
void StartInstrumentsSGIX(void);
void StopInstrumentsSGIX(GLint);

void FrameZoomSGIX(GLint);

void TagSampleBufferSGIX(void);

void DeformationMap3dSGIX(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
void DeformationMap3fSGIX(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
void DeformSGIX(GLbitfield);
void LoadIdentityDeformationMapSGIX(GLbitfield);

void ReferencePlaneSGIX(const GLdouble *);

void FlushRasterSGIX(void);

void FogFuncSGIS(GLsizei, const GLfloat *);
void GetFogFuncSGIS(GLfloat *);

void ImageTransformParameteriHP(GLenum, GLenum, GLint);
void ImageTransformParameterfHP(GLenum, GLenum, GLfloat);
void ImageTransformParameterivHP(GLenum, GLenum, const GLint *);
void ImageTransformParameterfvHP(GLenum, GLenum, const GLfloat *);
void GetImageTransformParameterivHP(GLenum, GLenum, GLint *);
void GetImageTransformParameterfvHP(GLenum, GLenum, GLfloat *);

void ColorSubTableEXT(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyColorSubTableEXT(GLenum, GLsizei, GLint, GLint, GLsizei);

void HintPGI(GLenum, GLint);

void ColorTableEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
void GetColorTableEXT(GLenum, GLenum, GLenum, GLvoid *);
void GetColorTableParameterivEXT(GLenum, GLenum, GLint *);
void GetColorTableParameterfvEXT(GLenum, GLenum, GLfloat *);

void GetListParameterfvSGIX(GLuint, GLenum, GLfloat *);
void GetListParameterivSGIX(GLuint, GLenum, GLint *);
void ListParameterfSGIX(GLuint, GLenum, GLfloat);
void ListParameterfvSGIX(GLuint, GLenum, const GLfloat *);
void ListParameteriSGIX(GLuint, GLenum, GLint);
void ListParameterivSGIX(GLuint, GLenum, const GLint *);

void IndexMaterialEXT(GLenum, GLenum);

void IndexFuncEXT(GLenum, GLclampf);

void LockArraysEXT(GLint, GLsizei);
void UnlockArraysEXT(void);

void CullParameterdvEXT(GLenum, GLdouble *);
void CullParameterfvEXT(GLenum, GLfloat *);

void FragmentColorMaterialSGIX(GLenum, GLenum);
void FragmentLightfSGIX(GLenum, GLenum, GLfloat);
void FragmentLightfvSGIX(GLenum, GLenum, const GLfloat *);
void FragmentLightiSGIX(GLenum, GLenum, GLint);
void FragmentLightivSGIX(GLenum, GLenum, const GLint *);
void FragmentLightModelfSGIX(GLenum, GLfloat);
void FragmentLightModelfvSGIX(GLenum, const GLfloat *);
void FragmentLightModeliSGIX(GLenum, GLint);
void FragmentLightModelivSGIX(GLenum, const GLint *);
void FragmentMaterialfSGIX(GLenum, GLenum, GLfloat);
void FragmentMaterialfvSGIX(GLenum, GLenum, const GLfloat *);
void FragmentMaterialiSGIX(GLenum, GLenum, GLint);
void FragmentMaterialivSGIX(GLenum, GLenum, const GLint *);
void GetFragmentLightfvSGIX(GLenum, GLenum, GLfloat *);
void GetFragmentLightivSGIX(GLenum, GLenum, GLint *);
void GetFragmentMaterialfvSGIX(GLenum, GLenum, GLfloat *);
void GetFragmentMaterialivSGIX(GLenum, GLenum, GLint *);
void LightEnviSGIX(GLenum, GLint);

void DrawRangeElementsEXT(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);

void ApplyTextureEXT(GLenum);
void TextureLightEXT(GLenum);
void TextureMaterialEXT(GLenum, GLenum);

void AsyncMarkerSGIX(GLuint);
GLint FinishAsyncSGIX(GLuint *);
GLint PollAsyncSGIX(GLuint *);
GLuint GenAsyncMarkersSGIX(GLsizei);
void DeleteAsyncMarkersSGIX(GLuint, GLsizei);
GLboolean IsAsyncMarkerSGIX(GLuint);

void VertexPointervINTEL(GLint, GLenum, const GLvoid* *);
void NormalPointervINTEL(GLenum, const GLvoid* *);
void ColorPointervINTEL(GLint, GLenum, const GLvoid* *);
void TexCoordPointervINTEL(GLint, GLenum, const GLvoid* *);

void PixelTransformParameteriEXT(GLenum, GLenum, GLint);
void PixelTransformParameterfEXT(GLenum, GLenum, GLfloat);
void PixelTransformParameterivEXT(GLenum, GLenum, const GLint *);
void PixelTransformParameterfvEXT(GLenum, GLenum, const GLfloat *);

void SecondaryColor3bEXT(GLbyte, GLbyte, GLbyte);
void SecondaryColor3bvEXT(const GLbyte *);
void SecondaryColor3dEXT(GLdouble, GLdouble, GLdouble);
void SecondaryColor3dvEXT(const GLdouble *);
void SecondaryColor3fEXT(GLfloat, GLfloat, GLfloat);
void SecondaryColor3fvEXT(const GLfloat *);
void SecondaryColor3iEXT(GLint, GLint, GLint);
void SecondaryColor3ivEXT(const GLint *);
void SecondaryColor3sEXT(GLshort, GLshort, GLshort);
void SecondaryColor3svEXT(const GLshort *);
void SecondaryColor3ubEXT(GLubyte, GLubyte, GLubyte);
void SecondaryColor3ubvEXT(const GLubyte *);
void SecondaryColor3uiEXT(GLuint, GLuint, GLuint);
void SecondaryColor3uivEXT(const GLuint *);
void SecondaryColor3usEXT(GLushort, GLushort, GLushort);
void SecondaryColor3usvEXT(const GLushort *);
void SecondaryColorPointerEXT(GLint, GLenum, GLsizei, const GLvoid *);

void TextureNormalEXT(GLenum);

void MultiDrawArraysEXT(GLenum, GLint *, GLsizei *, GLsizei);
void MultiDrawElementsEXT(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);

void FogCoordfEXT(GLfloat);
void FogCoordfvEXT(const GLfloat *);
void FogCoorddEXT(GLdouble);
void FogCoorddvEXT(const GLdouble *);
void FogCoordPointerEXT(GLenum, GLsizei, const GLvoid *);

void Tangent3bEXT(GLbyte, GLbyte, GLbyte);
void Tangent3bvEXT(const GLbyte *);
void Tangent3dEXT(GLdouble, GLdouble, GLdouble);
void Tangent3dvEXT(const GLdouble *);
void Tangent3fEXT(GLfloat, GLfloat, GLfloat);
void Tangent3fvEXT(const GLfloat *);
void Tangent3iEXT(GLint, GLint, GLint);
void Tangent3ivEXT(const GLint *);
void Tangent3sEXT(GLshort, GLshort, GLshort);
void Tangent3svEXT(const GLshort *);
void Binormal3bEXT(GLbyte, GLbyte, GLbyte);
void Binormal3bvEXT(const GLbyte *);
void Binormal3dEXT(GLdouble, GLdouble, GLdouble);
void Binormal3dvEXT(const GLdouble *);
void Binormal3fEXT(GLfloat, GLfloat, GLfloat);
void Binormal3fvEXT(const GLfloat *);
void Binormal3iEXT(GLint, GLint, GLint);
void Binormal3ivEXT(const GLint *);
void Binormal3sEXT(GLshort, GLshort, GLshort);
void Binormal3svEXT(const GLshort *);
void TangentPointerEXT(GLenum, GLsizei, const GLvoid *);
void BinormalPointerEXT(GLenum, GLsizei, const GLvoid *);

void FinishTextureSUNX(void);

void GlobalAlphaFactorbSUN(GLbyte);
void GlobalAlphaFactorsSUN(GLshort);
void GlobalAlphaFactoriSUN(GLint);
void GlobalAlphaFactorfSUN(GLfloat);
void GlobalAlphaFactordSUN(GLdouble);
void GlobalAlphaFactorubSUN(GLubyte);
void GlobalAlphaFactorusSUN(GLushort);
void GlobalAlphaFactoruiSUN(GLuint);

void ReplacementCodeuiSUN(GLuint);
void ReplacementCodeusSUN(GLushort);
void ReplacementCodeubSUN(GLubyte);
void ReplacementCodeuivSUN(const GLuint *);
void ReplacementCodeusvSUN(const GLushort *);
void ReplacementCodeubvSUN(const GLubyte *);
void ReplacementCodePointerSUN(GLenum, GLsizei, const GLvoid* *);

void Color4ubVertex2fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
void Color4ubVertex2fvSUN(const GLubyte *, const GLfloat *);
void Color4ubVertex3fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
void Color4ubVertex3fvSUN(const GLubyte *, const GLfloat *);
void Color3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void Color3fVertex3fvSUN(const GLfloat *, const GLfloat *);
void Normal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void Normal3fVertex3fvSUN(const GLfloat *, const GLfloat *);
void Color4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void Color4fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
void TexCoord2fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord2fVertex3fvSUN(const GLfloat *, const GLfloat *);
void TexCoord4fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord4fVertex4fvSUN(const GLfloat *, const GLfloat *);
void TexCoord2fColor4ubVertex3fSUN(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
void TexCoord2fColor4ubVertex3fvSUN(const GLfloat *, const GLubyte *, const GLfloat *);
void TexCoord2fColor3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord2fColor3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
void TexCoord2fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord2fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *);
void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void TexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiVertex3fvSUN(const GLuint *, const GLfloat *);
void ReplacementCodeuiColor4ubVertex3fSUN(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *, const GLubyte *, const GLfloat *);
void ReplacementCodeuiColor3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiColor3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
	
void BlendFuncSeparateEXT(GLenum, GLenum, GLenum, GLenum);

void BlendFuncSeparateINGR(GLenum, GLenum, GLenum, GLenum);

void VertexWeightfEXT(GLfloat);
void VertexWeightfvEXT(const GLfloat *);
void VertexWeightPointerEXT(GLsizei, GLenum, GLsizei, const GLvoid *);

void FlushVertexArrayRangeNV(void);
void VertexArrayRangeNV(GLsizei, const GLvoid *);

void CombinerParameterfvNV(GLenum, const GLfloat *);
void CombinerParameterfNV(GLenum, GLfloat);
void CombinerParameterivNV(GLenum, const GLint *);
void CombinerParameteriNV(GLenum, GLint);
void CombinerInputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
void CombinerOutputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
void FinalCombinerInputNV(GLenum, GLenum, GLenum, GLenum);
void GetCombinerInputParameterfvNV(GLenum, GLenum, GLenum, GLenum, GLfloat *);
void GetCombinerInputParameterivNV(GLenum, GLenum, GLenum, GLenum, GLint *);
void GetCombinerOutputParameterfvNV(GLenum, GLenum, GLenum, GLfloat *);
void GetCombinerOutputParameterivNV(GLenum, GLenum, GLenum, GLint *);
void GetFinalCombinerInputParameterfvNV(GLenum, GLenum, GLfloat *);
void GetFinalCombinerInputParameterivNV(GLenum, GLenum, GLint *);

void ResizeBuffersMESA(void);

void WindowPos2dMESA(GLdouble, GLdouble);
void WindowPos2dvMESA(const GLdouble *);
void WindowPos2fMESA(GLfloat, GLfloat);
void WindowPos2fvMESA(const GLfloat *);
void WindowPos2iMESA(GLint, GLint);
void WindowPos2ivMESA(const GLint *);
void WindowPos2sMESA(GLshort, GLshort);
void WindowPos2svMESA(const GLshort *);
void WindowPos3dMESA(GLdouble, GLdouble, GLdouble);
void WindowPos3dvMESA(const GLdouble *);
void WindowPos3fMESA(GLfloat, GLfloat, GLfloat);
void WindowPos3fvMESA(const GLfloat *);
void WindowPos3iMESA(GLint, GLint, GLint);
void WindowPos3ivMESA(const GLint *);
void WindowPos3sMESA(GLshort, GLshort, GLshort);
void WindowPos3svMESA(const GLshort *);
void WindowPos4dMESA(GLdouble, GLdouble, GLdouble, GLdouble);
void WindowPos4dvMESA(const GLdouble *);
void WindowPos4fMESA(GLfloat, GLfloat, GLfloat, GLfloat);
void WindowPos4fvMESA(const GLfloat *);
void WindowPos4iMESA(GLint, GLint, GLint, GLint);
void WindowPos4ivMESA(const GLint *);
void WindowPos4sMESA(GLshort, GLshort, GLshort, GLshort);
void WindowPos4svMESA(const GLshort *);

void MultiModeDrawArraysIBM(GLenum, const GLint *, const GLsizei *, GLsizei, GLint);
void MultiModeDrawElementsIBM(const GLenum *, const GLsizei *, GLenum, const GLvoid* *, GLsizei, GLint);

void ColorPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
void SecondaryColorPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
void EdgeFlagPointerListIBM(GLint, const GLboolean* *, GLint);
void FogCoordPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
void IndexPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
void NormalPointerListIBM(GLenum, GLint, const GLvoid* *, GLint);
void TexCoordPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);
void VertexPointerListIBM(GLint, GLenum, GLint, const GLvoid* *, GLint);

void TbufferMask3DFX(GLuint);

void SampleMaskEXT(GLclampf, GLboolean);
void SamplePatternEXT(GLenum);

void TextureColorMaskSGIS(GLboolean, GLboolean, GLboolean, GLboolean);

void IglooInterfaceSGIX(GLenum, const GLvoid *);

void DeleteFencesNV(GLsizei, const GLuint *);
void GenFencesNV(GLsizei, GLuint *);
GLboolean IsFenceNV(GLuint);
GLboolean TestFenceNV(GLuint);
void GetFenceivNV(GLuint, GLenum, GLint *);
void FinishFenceNV(GLuint);
void SetFenceNV(GLuint, GLenum);

void MapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const GLvoid *);
void MapParameterivNV(GLenum, GLenum, const GLint *);
void MapParameterfvNV(GLenum, GLenum, const GLfloat *);
void GetMapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, GLvoid *);
void GetMapParameterivNV(GLenum, GLenum, GLint *);
void GetMapParameterfvNV(GLenum, GLenum, GLfloat *);
void GetMapAttribParameterivNV(GLenum, GLuint, GLenum, GLint *);
void GetMapAttribParameterfvNV(GLenum, GLuint, GLenum, GLfloat *);
void EvalMapsNV(GLenum, GLenum);

void CombinerStageParameterfvNV(GLenum, GLenum, const GLfloat *);
void GetCombinerStageParameterfvNV(GLenum, GLenum, GLfloat *);

GLboolean AreProgramsResidentNV(GLsizei, const GLuint *, GLboolean *);
void BindProgramNV(GLenum, GLuint);
void DeleteProgramsNV(GLsizei, const GLuint *);
void ExecuteProgramNV(GLenum, GLuint, const GLfloat *);
void GenProgramsNV(GLsizei, GLuint *);
void GetProgramParameterdvNV(GLenum, GLuint, GLenum, GLdouble *);
void GetProgramParameterfvNV(GLenum, GLuint, GLenum, GLfloat *);
void GetProgramivNV(GLuint, GLenum, GLint *);
void GetProgramStringNV(GLuint, GLenum, GLubyte *);
void GetTrackMatrixivNV(GLenum, GLuint, GLenum, GLint *);
void GetVertexAttribdvNV(GLuint, GLenum, GLdouble *);
void GetVertexAttribfvNV(GLuint, GLenum, GLfloat *);
void GetVertexAttribivNV(GLuint, GLenum, GLint *);
void GetVertexAttribPointervNV(GLuint, GLenum, GLvoid* *);
GLboolean IsProgramNV(GLuint);
void LoadProgramNV(GLenum, GLuint, GLsizei, const GLubyte *);
void ProgramParameter4dNV(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void ProgramParameter4dvNV(GLenum, GLuint, const GLdouble *);
void ProgramParameter4fNV(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void ProgramParameter4fvNV(GLenum, GLuint, const GLfloat *);
void ProgramParameters4dvNV(GLenum, GLuint, GLuint, const GLdouble *);
void ProgramParameters4fvNV(GLenum, GLuint, GLuint, const GLfloat *);
void RequestResidentProgramsNV(GLsizei, const GLuint *);
void TrackMatrixNV(GLenum, GLuint, GLenum, GLenum);
void VertexAttribPointerNV(GLuint, GLint, GLenum, GLsizei, const GLvoid *);
void VertexAttrib1dNV(GLuint, GLdouble);
void VertexAttrib1dvNV(GLuint, const GLdouble *);
void VertexAttrib1fNV(GLuint, GLfloat);
void VertexAttrib1fvNV(GLuint, const GLfloat *);
void VertexAttrib1sNV(GLuint, GLshort);
void VertexAttrib1svNV(GLuint, const GLshort *);
void VertexAttrib2dNV(GLuint, GLdouble, GLdouble);
void VertexAttrib2dvNV(GLuint, const GLdouble *);
void VertexAttrib2fNV(GLuint, GLfloat, GLfloat);
void VertexAttrib2fvNV(GLuint, const GLfloat *);
void VertexAttrib2sNV(GLuint, GLshort, GLshort);
void VertexAttrib2svNV(GLuint, const GLshort *);
void VertexAttrib3dNV(GLuint, GLdouble, GLdouble, GLdouble);
void VertexAttrib3dvNV(GLuint, const GLdouble *);
void VertexAttrib3fNV(GLuint, GLfloat, GLfloat, GLfloat);
void VertexAttrib3fvNV(GLuint, const GLfloat *);
void VertexAttrib3sNV(GLuint, GLshort, GLshort, GLshort);
void VertexAttrib3svNV(GLuint, const GLshort *);
void VertexAttrib4dNV(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void VertexAttrib4dvNV(GLuint, const GLdouble *);
void VertexAttrib4fNV(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void VertexAttrib4fvNV(GLuint, const GLfloat *);
void VertexAttrib4sNV(GLuint, GLshort, GLshort, GLshort, GLshort);
void VertexAttrib4svNV(GLuint, const GLshort *);
void VertexAttrib4ubNV(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
void VertexAttrib4ubvNV(GLuint, const GLubyte *);
void VertexAttribs1dvNV(GLuint, GLsizei, const GLdouble *);
void VertexAttribs1fvNV(GLuint, GLsizei, const GLfloat *);
void VertexAttribs1svNV(GLuint, GLsizei, const GLshort *);
void VertexAttribs2dvNV(GLuint, GLsizei, const GLdouble *);
void VertexAttribs2fvNV(GLuint, GLsizei, const GLfloat *);
void VertexAttribs2svNV(GLuint, GLsizei, const GLshort *);
void VertexAttribs3dvNV(GLuint, GLsizei, const GLdouble *);
void VertexAttribs3fvNV(GLuint, GLsizei, const GLfloat *);
void VertexAttribs3svNV(GLuint, GLsizei, const GLshort *);
void VertexAttribs4dvNV(GLuint, GLsizei, const GLdouble *);
void VertexAttribs4fvNV(GLuint, GLsizei, const GLfloat *);
void VertexAttribs4svNV(GLuint, GLsizei, const GLshort *);
void VertexAttribs4ubvNV(GLuint, GLsizei, const GLubyte *);

void TexBumpParameterivATI(GLenum, const GLint *);
void TexBumpParameterfvATI(GLenum, const GLfloat *);
void GetTexBumpParameterivATI(GLenum, GLint *);
void GetTexBumpParameterfvATI(GLenum, GLfloat *);

GLuint GenFragmentShadersATI(GLuint);
void BindFragmentShaderATI(GLuint);
void DeleteFragmentShaderATI(GLuint);
void BeginFragmentShaderATI(void);
void EndFragmentShaderATI(void);
void PassTexCoordATI(GLuint, GLuint, GLenum);
void SampleMapATI(GLuint, GLuint, GLenum);
void ColorFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
void ColorFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
void ColorFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
void AlphaFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
void AlphaFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
void AlphaFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
void SetFragmentShaderConstantATI(GLuint, const GLfloat *);

void PNTrianglesiATI(GLenum, GLint);
void PNTrianglesfATI(GLenum, GLfloat);

GLuint NewObjectBufferATI(GLsizei, const GLvoid *, GLenum);
GLboolean IsObjectBufferATI(GLuint);
void UpdateObjectBufferATI(GLuint, GLuint, GLsizei, const GLvoid *, GLenum);
void GetObjectBufferfvATI(GLuint, GLenum, GLfloat *);
void GetObjectBufferivATI(GLuint, GLenum, GLint *);
void FreeObjectBufferATI(GLuint);
void ArrayObjectATI(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
void GetArrayObjectfvATI(GLenum, GLenum, GLfloat *);
void GetArrayObjectivATI(GLenum, GLenum, GLint *);
void VariantArrayObjectATI(GLuint, GLenum, GLsizei, GLuint, GLuint);
void GetVariantArrayObjectfvATI(GLuint, GLenum, GLfloat *);
void GetVariantArrayObjectivATI(GLuint, GLenum, GLint *);

void BeginVertexShaderEXT(void);
void EndVertexShaderEXT(void);
void BindVertexShaderEXT(GLuint);
GLuint GenVertexShadersEXT(GLuint);
void DeleteVertexShaderEXT(GLuint);
void ShaderOp1EXT(GLenum, GLuint, GLuint);
void ShaderOp2EXT(GLenum, GLuint, GLuint, GLuint);
void ShaderOp3EXT(GLenum, GLuint, GLuint, GLuint, GLuint);
void SwizzleEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
void WriteMaskEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
void InsertComponentEXT(GLuint, GLuint, GLuint);
void ExtractComponentEXT(GLuint, GLuint, GLuint);
GLuint GenSymbolsEXT(GLenum, GLenum, GLenum, GLuint);
void SetInvariantEXT(GLuint, GLenum, const GLvoid *);
void SetLocalConstantEXT(GLuint, GLenum, const GLvoid *);
void VariantbvEXT(GLuint, const GLbyte *);
void VariantsvEXT(GLuint, const GLshort *);
void VariantivEXT(GLuint, const GLint *);
void VariantfvEXT(GLuint, const GLfloat *);
void VariantdvEXT(GLuint, const GLdouble *);
void VariantubvEXT(GLuint, const GLubyte *);
void VariantusvEXT(GLuint, const GLushort *);
void VariantuivEXT(GLuint, const GLuint *);
void VariantPointerEXT(GLuint, GLenum, GLuint, const GLvoid *);
void EnableVariantClientStateEXT(GLuint);
void DisableVariantClientStateEXT(GLuint);
GLuint BindLightParameterEXT(GLenum, GLenum);
GLuint BindMaterialParameterEXT(GLenum, GLenum);
GLuint BindTexGenParameterEXT(GLenum, GLenum, GLenum);
GLuint BindTextureUnitParameterEXT(GLenum, GLenum);
GLuint BindParameterEXT(GLenum);
GLboolean IsVariantEnabledEXT(GLuint, GLenum);
void GetVariantBooleanvEXT(GLuint, GLenum, GLboolean *);
void GetVariantIntegervEXT(GLuint, GLenum, GLint *);
void GetVariantFloatvEXT(GLuint, GLenum, GLfloat *);
void GetVariantPointervEXT(GLuint, GLenum, GLvoid* *);
void GetInvariantBooleanvEXT(GLuint, GLenum, GLboolean *);
void GetInvariantIntegervEXT(GLuint, GLenum, GLint *);
void GetInvariantFloatvEXT(GLuint, GLenum, GLfloat *);
void GetLocalConstantBooleanvEXT(GLuint, GLenum, GLboolean *);
void GetLocalConstantIntegervEXT(GLuint, GLenum, GLint *);
void GetLocalConstantFloatvEXT(GLuint, GLenum, GLfloat *);

void VertexStream1sATI(GLenum, GLshort);
void VertexStream1svATI(GLenum, const GLshort *);
void VertexStream1iATI(GLenum, GLint);
void VertexStream1ivATI(GLenum, const GLint *);
void VertexStream1fATI(GLenum, GLfloat);
void VertexStream1fvATI(GLenum, const GLfloat *);
void VertexStream1dATI(GLenum, GLdouble);
void VertexStream1dvATI(GLenum, const GLdouble *);
void VertexStream2sATI(GLenum, GLshort, GLshort);
void VertexStream2svATI(GLenum, const GLshort *);
void VertexStream2iATI(GLenum, GLint, GLint);
void VertexStream2ivATI(GLenum, const GLint *);
void VertexStream2fATI(GLenum, GLfloat, GLfloat);
void VertexStream2fvATI(GLenum, const GLfloat *);
void VertexStream2dATI(GLenum, GLdouble, GLdouble);
void VertexStream2dvATI(GLenum, const GLdouble *);
void VertexStream3sATI(GLenum, GLshort, GLshort, GLshort);
void VertexStream3svATI(GLenum, const GLshort *);
void VertexStream3iATI(GLenum, GLint, GLint, GLint);
void VertexStream3ivATI(GLenum, const GLint *);
void VertexStream3fATI(GLenum, GLfloat, GLfloat, GLfloat);
void VertexStream3fvATI(GLenum, const GLfloat *);
void VertexStream3dATI(GLenum, GLdouble, GLdouble, GLdouble);
void VertexStream3dvATI(GLenum, const GLdouble *);
void VertexStream4sATI(GLenum, GLshort, GLshort, GLshort, GLshort);
void VertexStream4svATI(GLenum, const GLshort *);
void VertexStream4iATI(GLenum, GLint, GLint, GLint, GLint);
void VertexStream4ivATI(GLenum, const GLint *);
void VertexStream4fATI(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
void VertexStream4fvATI(GLenum, const GLfloat *);
void VertexStream4dATI(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
void VertexStream4dvATI(GLenum, const GLdouble *);
void NormalStream3bATI(GLenum, GLbyte, GLbyte, GLbyte);
void NormalStream3bvATI(GLenum, const GLbyte *);
void NormalStream3sATI(GLenum, GLshort, GLshort, GLshort);
void NormalStream3svATI(GLenum, const GLshort *);
void NormalStream3iATI(GLenum, GLint, GLint, GLint);
void NormalStream3ivATI(GLenum, const GLint *);
void NormalStream3fATI(GLenum, GLfloat, GLfloat, GLfloat);
void NormalStream3fvATI(GLenum, const GLfloat *);
void NormalStream3dATI(GLenum, GLdouble, GLdouble, GLdouble);
void NormalStream3dvATI(GLenum, const GLdouble *);
void ClientActiveVertexStreamATI(GLenum);
void VertexBlendEnviATI(GLenum, GLint);
void VertexBlendEnvfATI(GLenum, GLfloat);

void ElementPointerATI(GLenum, const GLvoid *);
void DrawElementArrayATI(GLenum, GLsizei);
void DrawRangeElementArrayATI(GLenum, GLuint, GLuint, GLsizei);

void DrawMeshArraysSUN(GLenum, GLint, GLsizei, GLsizei);

void GenOcclusionQueriesNV(GLsizei, GLuint *);
void DeleteOcclusionQueriesNV(GLsizei, const GLuint *);
GLboolean IsOcclusionQueryNV(GLuint);
void BeginOcclusionQueryNV(GLuint);
void EndOcclusionQueryNV(void);
void GetOcclusionQueryivNV(GLuint, GLenum, GLint *);
void GetOcclusionQueryuivNV(GLuint, GLenum, GLuint *);

void PointParameteriNV(GLenum, GLint);
void PointParameterivNV(GLenum, const GLint *);

void ActiveStencilFaceEXT(GLenum);

void ElementPointerAPPLE(GLenum, const GLvoid *);
void DrawElementArrayAPPLE(GLenum, GLint, GLsizei);
void DrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, GLint, GLsizei);
void MultiDrawElementArrayAPPLE(GLenum, const GLint *, const GLsizei *, GLsizei);
void MultiDrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);

void GenFencesAPPLE(GLsizei, GLuint *);
void DeleteFencesAPPLE(GLsizei, const GLuint *);
void SetFenceAPPLE(GLuint);
GLboolean IsFenceAPPLE(GLuint);
GLboolean TestFenceAPPLE(GLuint);
void FinishFenceAPPLE(GLuint);
GLboolean TestObjectAPPLE(GLenum, GLuint);
void FinishObjectAPPLE(GLenum, GLint);

void BindVertexArrayAPPLE(GLuint);
void DeleteVertexArraysAPPLE(GLsizei, const GLuint *);
void GenVertexArraysAPPLE(GLsizei, const GLuint *);
GLboolean IsVertexArrayAPPLE(GLuint);

void VertexArrayRangeAPPLE(GLsizei, GLvoid *);
void FlushVertexArrayRangeAPPLE(GLsizei, GLvoid *);
void VertexArrayParameteriAPPLE(GLenum, GLint);

void DrawBuffersATI(GLsizei, const GLenum *);

void ProgramNamedParameter4fNV(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
void ProgramNamedParameter4dNV(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
void ProgramNamedParameter4fvNV(GLuint, GLsizei, const GLubyte *, const GLfloat *);
void ProgramNamedParameter4dvNV(GLuint, GLsizei, const GLubyte *, const GLdouble *);
void GetProgramNamedParameterfvNV(GLuint, GLsizei, const GLubyte *, GLfloat *);
void GetProgramNamedParameterdvNV(GLuint, GLsizei, const GLubyte *, GLdouble *);

void Vertex2hNV(GLhalfNV, GLhalfNV);
void Vertex2hvNV(const GLhalfNV *);
void Vertex3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
void Vertex3hvNV(const GLhalfNV *);
void Vertex4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
void Vertex4hvNV(const GLhalfNV *);
void Normal3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
void Normal3hvNV(const GLhalfNV *);
void Color3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
void Color3hvNV(const GLhalfNV *);
void Color4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
void Color4hvNV(const GLhalfNV *);
void TexCoord1hNV(GLhalfNV);
void TexCoord1hvNV(const GLhalfNV *);
void TexCoord2hNV(GLhalfNV, GLhalfNV);
void TexCoord2hvNV(const GLhalfNV *);
void TexCoord3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
void TexCoord3hvNV(const GLhalfNV *);
void TexCoord4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
void TexCoord4hvNV(const GLhalfNV *);
void MultiTexCoord1hNV(GLenum, GLhalfNV);
void MultiTexCoord1hvNV(GLenum, const GLhalfNV *);
void MultiTexCoord2hNV(GLenum, GLhalfNV, GLhalfNV);
void MultiTexCoord2hvNV(GLenum, const GLhalfNV *);
void MultiTexCoord3hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
void MultiTexCoord3hvNV(GLenum, const GLhalfNV *);
void MultiTexCoord4hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
void MultiTexCoord4hvNV(GLenum, const GLhalfNV *);
void FogCoordhNV(GLhalfNV);
void FogCoordhvNV(const GLhalfNV *);
void SecondaryColor3hNV(GLhalfNV, GLhalfNV, GLhalfNV);
void SecondaryColor3hvNV(const GLhalfNV *);
void VertexWeighthNV(GLhalfNV);
void VertexWeighthvNV(const GLhalfNV *);
void VertexAttrib1hNV(GLuint, GLhalfNV);
void VertexAttrib1hvNV(GLuint, const GLhalfNV *);
void VertexAttrib2hNV(GLuint, GLhalfNV, GLhalfNV);
void VertexAttrib2hvNV(GLuint, const GLhalfNV *);
void VertexAttrib3hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
void VertexAttrib3hvNV(GLuint, const GLhalfNV *);
void VertexAttrib4hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
void VertexAttrib4hvNV(GLuint, const GLhalfNV *);
void VertexAttribs1hvNV(GLuint, GLsizei, const GLhalfNV *);
void VertexAttribs2hvNV(GLuint, GLsizei, const GLhalfNV *);
void VertexAttribs3hvNV(GLuint, GLsizei, const GLhalfNV *);
void VertexAttribs4hvNV(GLuint, GLsizei, const GLhalfNV *);

void PixelDataRangeNV(GLenum, GLsizei, GLvoid *);
void FlushPixelDataRangeNV(GLenum);

void PrimitiveRestartNV(void);
void PrimitiveRestartIndexNV(GLuint);

GLvoid* MapObjectBufferATI(GLuint);
void UnmapObjectBufferATI(GLuint);

void StencilOpSeparateATI(GLenum, GLenum, GLenum, GLenum);
void StencilFuncSeparateATI(GLenum, GLenum, GLint, GLuint);

void VertexAttribArrayObjectATI(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
void GetVertexAttribArrayObjectfvATI(GLuint, GLenum, GLfloat *);
void GetVertexAttribArrayObjectivATI(GLuint, GLenum, GLint *);

void Vertex2bOES( GLbyte, GLbyte );
void Vertex3bOES( GLbyte, GLbyte, GLbyte );
void Vertex4bOES( GLbyte, GLbyte, GLbyte, GLbyte );
void Vertex2bvOES( const GLbyte * );
void Vertex3bvOES( const GLbyte * );
void Vertex4bvOES( const GLbyte * );
void TexCoord1bOES( GLbyte );
void TexCoord2bOES( GLbyte, GLbyte );
void TexCoord3bOES( GLbyte, GLbyte, GLbyte );
void TexCoord4bOES( GLbyte, GLbyte, GLbyte, GLbyte );
void TexCoord1bvOES( const GLbyte * );
void TexCoord2bvOES( const GLbyte * );
void TexCoord3bvOES( const GLbyte * );
void TexCoord4bvOES( const GLbyte * );
void MultiTexCoord1bOES( GLenum, GLbyte );
void MultiTexCoord2bOES( GLenum, GLbyte, GLbyte );
void MultiTexCoord3bOES( GLenum, GLbyte, GLbyte, GLbyte );
void MultiTexCoord4bOES( GLenum, GLbyte, GLbyte, GLbyte, GLbyte );
void MultiTexCoord1bvOES( GLenum texture, const GLbyte * );
void MultiTexCoord2bvOES( GLenum texture, const GLbyte * );
void MultiTexCoord3bvOES( GLenum texture, const GLbyte * );
void MultiTexCoord4bvOES( GLenum texture, const GLbyte * );

void Vertex2xOES(GLfixed, GLfixed);
void Vertex3xOES(GLfixed, GLfixed, GLfixed);
void Vertex4xOES(GLfixed, GLfixed, GLfixed, GLfixed);
void Vertex2xvOES(const GLfixed *);
void Vertex3xvOES(const GLfixed *);
void Vertex4xvOES(const GLfixed *);
void Normal3xOES(GLfixed, GLfixed, GLfixed);
void Normal3xvOES(const GLfixed *);
void TexCoord1xOES(GLfixed);
void TexCoord2xOES(GLfixed, GLfixed);
void TexCoord3xOES(GLfixed, GLfixed, GLfixed);
void TexCoord4xOES(GLfixed, GLfixed, GLfixed, GLfixed);
void TexCoord1xvOES(const GLfixed *);
void TexCoord2xvOES(const GLfixed *);
void TexCoord3xvOES(const GLfixed *);
void TexCoord4xvOES(const GLfixed *);
void MultiTexCoord1xOES(GLenum, GLfixed);
void MultiTexCoord2xOES(GLenum, GLfixed, GLfixed);
void MultiTexCoord3xOES(GLenum, GLfixed, GLfixed, GLfixed);
void MultiTexCoord4xOES(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
void MultiTexCoord1xvOES(GLenum, const GLfixed *);
void MultiTexCoord2xvOES(GLenum, const GLfixed *);
void MultiTexCoord3xvOES(GLenum, const GLfixed *);
void MultiTexCoord4xvOES(GLenum, const GLfixed *);
void Color3xOES(GLfixed, GLfixed, GLfixed);
void Color4xOES(GLfixed, GLfixed, GLfixed, GLfixed);
void Color3xvOES(const GLfixed *);
void Color4xvOES(const GLfixed *);
void IndexxOES(GLfixed);
void IndexxvOES(const GLfixed *);
void RectxOES(GLfixed, GLfixed, GLfixed, GLfixed);
void RectxvOES(const GLfixed*, const GLfixed*);
void DepthRangexOES(GLclampx, GLclampx);
void LoadMatrixxOES(const GLfixed *);
void MultMatrixxOES(const GLfixed *);
void LoadTransposeMatrixxOES(const GLfixed *);
void MultTransposeMatrixxOES(const GLfixed *);
void RotatexOES(GLfixed, GLfixed, GLfixed, GLfixed);
void ScalexOES(GLfixed, GLfixed, GLfixed);
void TranslatexOES(GLfixed, GLfixed, GLfixed);
void FrustumxOES(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
void OrthoxOES(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
void TexGenxOES(GLenum, GLenum, GLfixed);
void TexGenxvOES(GLenum, GLenum, const GLfixed *);
void GetTexGenxvOES(GLenum, GLenum, GLfixed *);
void ClipPlanexOES(GLenum, const GLfixed *);
void GetClipPlanexOES(GLenum, GLfixed *);
void RasterPos2xOES(GLfixed, GLfixed);
void RasterPos3xOES(GLfixed, GLfixed, GLfixed);
void RasterPos4xOES(GLfixed, GLfixed, GLfixed, GLfixed);
void RasterPos2xvOES(const GLfixed *);
void RasterPos3xvOES(const GLfixed *);
void RasterPos4xvOES(const GLfixed *);
void MaterialxOES(GLenum, GLenum, GLfixed);
void MaterialxvOES(GLenum, GLenum, const GLfixed *);
void GetMaterialxOES(GLenum, GLenum, GLfixed *);
void LightxOES(GLenum, GLenum, GLfixed);
void LightxvOES(GLenum, GLenum, const GLfixed *);
void GetLightxOES(GLenum, GLenum, const GLfixed *);
void LightModelxOES(GLenum, GLfixed);
void LightModelxvOES(GLenum, const GLfixed *);
void PointSizexOES(GLfixed size);
void LineWidthxOES(GLfixed width);
void PolygonOffsetxOES(GLfixed factor, GLfixed units);
void PixelStorex(GLenum pname, GLfixed param);
void PixelTransferxOES(GLenum pname, GLfixed param);
void PixelMapx(GLenum, GLint, const GLfixed *);
void GetPixelMapxv(GLenum, GLint, GLfixed *);
void ConvolutionParameterxOES(GLenum, GLenum, GLfixed);
void ConvolutionParameterxvOES(GLenum, GLenum, const GLfixed *);
void GetConvolutionParameterxvOES(GLenum, GLenum, GLfixed *);
void GetHistogramParameterxvOES(GLenum, GLenum, GLfixed *);
void PixelZoomxOES(GLfixed, GLfixed);
void BitmapxOES(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
void TexParameterxOES(GLenum, GLenum, GLfixed);
void TexParameterxvOES(GLenum, GLenum, const GLfixed *);
void GetTexParameterxvOES(GLenum, GLenum, GLfixed *);
void GetTexLevelParameterxvOES(GLenum, GLint, GLenum, GLfixed *);
void PrioritizeTexturesxOES(GLsizei, GLuint *, GLclampx *);
void TexEnvxOES(GLenum, GLenum, GLfixed);
void TexEnvxvOES(GLenum, GLenum, const GLfixed *);
void GetTexEnvxvOES(GLenum, GLenum, GLfixed *);
void FogxOES(GLenum, GLfixed);
void FogxvOES(GLenum, const GLfixed *);
void SampleCoverageOES(GLclampx, GLboolean);
void AlphaFuncxOES(GLenum, GLclampx);
void BlendColorxOES(GLclampx, GLclampx, GLclampx, GLclampx);
void ClearColorxOES(GLclampx, GLclampx, GLclampx, GLclampx);
void ClearDepthxOES(GLclampx);
void ClearAccumxOES(GLclampx, GLclampx, GLclampx, GLclampx);
void AccumxOES(GLenum, GLfixed);
void Map1xOES(GLenum, GLfixed, GLfixed, GLint, GLint, const GLfixed *);
void Map2xOES(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, const GLfixed *);
void MapGrid1xOES(GLint, GLfixed, GLfixed);
void MapGrid2xOES(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
void GetMapxvOES(GLenum, GLenum, GLfixed *);
void EvalCoord1xOES(GLfixed);
void EvalCoord2xOES(GLfixed, GLfixed);
void EvalCoord1xvOES(const GLfixed *);
void EvalCoord2xvOES(const GLfixed *);
void FeedbackBufferxOES(GLsizei, GLenum, GLfixed *);
void PassThroughxOES(GLfixed);
void GetFixedvOES(GLenum, GLfixed *);

void DepthRangefOES(GLclampf, GLclampf);
void FrustumfOES(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void OrthofOES(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
void ClipPlanefOES(GLenum, const GLfloat*);
void GetClipPlanefOES(GLenum, GLfloat*);
void ClearDepthfOES(GLclampd);

GLbitfield QueryMatrixxOES(GLfixed *, GLint * );

void DepthBoundsEXT(GLclampd, GLclampd);


void BlendEquationSeparateEXT(GLenum, GLenum);


GLboolean IsRenderbufferEXT(GLuint);
void BindRenderbufferEXT(GLenum, GLuint);
void DeleteRenderbuffersEXT(GLsizei, const GLuint *);
void GenRenderbuffersEXT(GLsizei, GLuint *);
void RenderbufferStorageEXT(GLenum, GLenum, GLsizei, GLsizei);
void GetRenderbufferParameterivEXT(GLenum, GLenum, GLint*);
GLboolean IsFramebufferEXT(GLuint);
void BindFramebufferEXT(GLenum, GLuint);
void DeleteFramebuffersEXT(GLsizei, const GLuint *);
void GenFramebuffersEXT(GLsizei, GLuint *);
GLenum CheckFramebufferStatusEXT(GLenum);
void FramebufferTexture1DEXT(GLenum, GLenum, GLenum, GLuint, GLint);
void FramebufferTexture2DEXT(GLenum, GLenum, GLenum, GLuint, GLint);
void FramebufferTexture3DEXT(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
void FramebufferRenderbufferEXT(GLenum, GLenum, GLenum, GLuint);
void GetFramebufferAttachmentParameterivEXT(GLenum, GLenum, GLenum, GLint *);
void GenerateMipmapEXT(GLenum);

void StringMarkerGREMEDY(GLsizei, const GLvoid *);

void StencilClearTagEXT(GLsizei, GLuint);

void BlitFramebufferEXT(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);

void RenderbufferStorageMultisampleEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei);

void GetQueryObjecti64vEXT(GLuint, GLenum, GLint64EXT *);
void GetQueryObjectui64vEXT(GLuint, GLenum, GLuint64EXT *);

void ProgramEnvParameters4fvEXT(GLenum, GLuint, GLsizei, const GLfloat *);
void ProgramLocalParameters4fvEXT(GLenum, GLuint, GLsizei, const GLfloat *);

void BufferParameteriAPPLE(GLenum, GLenum, GLint);
void FlushMappedBufferRangeAPPLE(GLenum, GLintptr, GLsizeiptr);

void UniformBufferEXT(GLuint, GLint, GLuint);
GLint GetUniformBufferSizeEXT(GLuint, GLint);
GLintptr GetUniformOffsetEXT(GLuint program, GLint);

void ColorMaskIndexedEXT(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
void GetBooleanIndexedvEXT(GLenum, GLuint, GLboolean *);
void GetIntegerIndexedvEXT(GLenum, GLuint, GLint *);
void EnableIndexedEXT(GLenum, GLuint);
void DisableIndexedEXT(GLenum, GLuint);
GLboolean IsEnabledIndexedEXT(GLenum, GLuint);

void DrawArraysInstancedEXT(GLenum, GLint, GLsizei, GLsizei);
void DrawElementsInstancedEXT(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);

void ProgramParameteriEXT(GLuint, GLenum, GLint);
void FramebufferTextureEXT(GLenum, GLenum, GLuint, GLint);
void FramebufferTextureLayerEXT(GLenum, GLenum, GLuint, GLint, GLint);
void FramebufferTextureFaceEXT(GLenum, GLenum, GLuint, GLint, GLenum);

void VertexAttribI1iEXT(GLuint, GLint);
void VertexAttribI2iEXT(GLuint, GLint, GLint);
void VertexAttribI3iEXT(GLuint, GLint, GLint, GLint);
void VertexAttribI4iEXT(GLuint, GLint, GLint, GLint, GLint);
void VertexAttribI1uiEXT(GLuint, GLuint);
void VertexAttribI2uiEXT(GLuint, GLuint, GLuint);
void VertexAttribI3uiEXT(GLuint, GLuint, GLuint, GLuint);
void VertexAttribI4uiEXT(GLuint, GLuint, GLuint, GLuint, GLuint);
void VertexAttribI1ivEXT(GLuint, const GLint *);
void VertexAttribI2ivEXT(GLuint, const GLint *);
void VertexAttribI3ivEXT(GLuint, const GLint *);
void VertexAttribI4ivEXT(GLuint, const GLint *);
void VertexAttribI1uivEXT(GLuint, const GLuint *);
void VertexAttribI2uivEXT(GLuint, const GLuint *);
void VertexAttribI3uivEXT(GLuint, const GLuint *);
void VertexAttribI4uivEXT(GLuint, const GLuint *);
void VertexAttribI4bvEXT(GLuint, const GLbyte *);
void VertexAttribI4svEXT(GLuint, const GLshort *);
void VertexAttribI4ubvEXT(GLuint, const GLubyte *);
void VertexAttribI4usvEXT(GLuint, const GLushort *);
void VertexAttribIPointerEXT(GLuint, GLint, GLenum, GLsizei, const GLvoid *);
void GetVertexAttribIivEXT(GLuint, GLenum, GLint *);
void GetVertexAttribIuivEXT(GLuint, GLenum, GLint *);
void Uniform1uiEXT(GLint, GLuint);
void Uniform2uiEXT(GLint, GLuint, GLuint);
void Uniform3uiEXT(GLint, GLuint, GLuint, GLuint);
void Uniform4uiEXT(GLint, GLuint, GLuint, GLuint, GLuint);
void Uniform1uivEXT(GLint, GLsizei, const GLuint *);
void Uniform2uivEXT(GLint, GLsizei, const GLuint *);
void Uniform3uivEXT(GLint, GLsizei, const GLuint *);
void Uniform4uivEXT(GLint, GLsizei, const GLuint *);
void GetUniformuivEXT(GLuint, GLint location, GLint *);
void BindFragDataLocationEXT(GLuint, GLuint, const GLchar *);
GLint GetFragDataLocationEXT(GLuint, const GLchar *);

void FramebufferTextureLayerEXT(GLenum, GLenum, GLuint, GLint, GLint);

void TexBufferEXT(GLenum, GLenum, GLuint);

void ClearColorIiEXT       (GLint,  GLint,  GLint,  GLint);
void ClearColorIuiEXT      (GLuint, GLuint, GLuint, GLuint);
void TexParameterIivEXT    (GLenum, GLenum, GLint *);
void TexParameterIuivEXT   (GLenum, GLenum, GLuint *);
void GetTexParameterIivEXT (GLenum, GLenum, GLint *);
void GetTexParameterIiuvEXT(GLenum, GLenum, GLuint *);

void DepthRangedNV (GLdouble, GLdouble);
void ClearDepthdNV (GLdouble);
void DepthBoundsdNV(GLdouble, GLdouble);

void RenderbufferStorageMultsampleCoverageNV(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);

void ProgramVertexLimitNV(GLenum, GLint);
void FramebufferTextureEXT     (GLenum, GLenum, GLuint, GLint);
void FramebufferTextureLayerEXT(GLenum, GLenum, GLuint, GLint, GLint);

void ProgramLocalParameterI4iNV   (GLenum, GLuint, GLint, GLint, GLint, GLint);
void ProgramLocalParameterI4ivNV  (GLenum, GLuint, const GLint *);
void ProgramLocalParametersI4ivNV (GLenum, GLuint, GLsizei, const GLint *);
void ProgramLocalParameterI4uiNV  (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
void ProgramLocalParameterI4uivNV (GLenum, GLuint, const GLuint *);
void ProgramLocalParametersI4uivNV(GLenum, GLuint, GLsizei, const GLuint *);
void ProgramEnvParameterI4iNV     (GLenum, GLuint, GLint, GLint, GLint, GLint);
void ProgramEnvParameterI4ivNV    (GLenum, GLuint, const GLint *);
void ProgramEnvParametersI4ivNV   (GLenum, GLuint, GLsizei, const GLint *);
void ProgramEnvParameterI4uiNV    (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
void ProgramEnvParameterI4uivNV   (GLenum, GLuint, const GLuint *);
void ProgramEnvParametersI4uivNV  (GLenum, GLuint, GLsizei, const GLuint *);
void GetProgramLocalParameterIivNV(GLenum, GLuint, GLint *);
void GetProgramLocalParameterIuivNV(GLenum, GLuint, GLuint *);
void GetProgramEnvParameterIivNV  (GLenum, GLuint, GLint *);
void GetProgramEnvParameterIuivNV (GLenum, GLuint, GLuint *);

void BindBufferRangeNV(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
void BindBufferOffsetNV(GLenum, GLuint, GLuint, GLintptr);
void BindBufferBaseNV (GLenum, GLuint, GLuint);
void ProgramBufferParametersfvNV (GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
void ProgramBufferParametersIivNV(GLenum, GLuint, GLuint, GLsizei, const GLint *);
void ProgramBufferParametersIuivNV(GLenum, GLuint, GLuint, GLuint, const GLuint *);
void GetIntegerIndexedvEXT(GLenum, GLuint, GLboolean *);

void BindBufferRangeNV(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
void BindBufferOffsetNV(GLenum, GLuint, GLuint, GLintptr);
void BindBufferBaseNV (GLenum, GLuint, GLuint);
void TransformFeedbackAttribsNV(GLsizei, const GLint *, GLenum);
void TransformFeedbackVaryingsNV(GLuint, GLsizei, const GLint *, GLenum);
void BeginTransformFeedbackNV  (GLenum);
void EndTransformFeedbackNV    (void);
GLint GetVaryingLocationNV(GLuint, const GLchar *);
void GetActiveVaryingNV   (GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
void ActiveVaryingNV      (GLuint, const GLchar *);
void GetTransformFeedbackVaryingNV(GLuint, GLuint, GLint *);
void GetBooleanIndexedvEXT(GLenum, GLuint, GLboolean *);
//void GetIntegerIndexedvEXT(GLenum, GLuint, GLint *);

void VertexAttribI1iEXT(GLuint, GLint);
void VertexAttribI2iEXT(GLuint, GLint, GLint);
void VertexAttribI3iEXT(GLuint, GLint, GLint, GLint);
void VertexAttribI4iEXT(GLuint, GLint, GLint, GLint, GLint);
void VertexAttribI1uiEXT(GLuint, GLuint);
void VertexAttribI2uiEXT(GLuint, GLuint, GLuint);
void VertexAttribI3uiEXT(GLuint, GLuint, GLuint, GLuint);
void VertexAttribI4uiEXT(GLuint, GLuint, GLuint, GLuint, GLuint);
void VertexAttribI1ivEXT(GLuint, const GLint *);
void VertexAttribI2ivEXT(GLuint, const GLint *);
void VertexAttribI3ivEXT(GLuint, const GLint *);
void VertexAttribI4ivEXT(GLuint, const GLint *);
void VertexAttribI1uivEXT(GLuint, const GLuint *);
void VertexAttribI2uivEXT(GLuint, const GLuint *);
void VertexAttribI3uivEXT(GLuint, const GLuint *);
void VertexAttribI4uivEXT(GLuint, const GLuint *);
void VertexAttribI4bvEXT(GLuint, const GLbyte *);
void VertexAttribI4svEXT(GLuint, const GLshort *);
void VertexAttribI4ubvEXT(GLuint, const GLubyte *);
void VertexAttribI4usvEXT(GLuint, const GLushort *);
void VertexAttribIPointerEXT(GLuint, GLint, GLenum, GLsizei, const GLvoid *);
void GetVertexAttribIivEXT(GLuint, GLenum, GLint *);
void GetVertexAttribIuivEXT(GLuint, GLenum, GLint *);

void FrameTerminatorGREMEDY(void);

void BeginConditionalRenderNV(GLuint, GLenum);
void EndConditionalRenderNV(void);

void BeginTransformFeedbackEXT(GLenum);
void EndTransformFeedbackEXT(void);
void BindBufferRangeEXT(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
void BindBufferOffsetEXT(GLenum, GLuint, GLuint, GLintptr);
void BindBufferBaseEXT(GLenum, GLuint, GLuint);
void TransformFeedbackVaryingsEXT(GLuint, GLsizei, const GLint *, GLenum);
void GetTransformFeedbackVaryingEXT(GLuint, GLuint, GLint *);

void ClientAttribDefaultEXT(GLbitfield);
void PushClientAttribDefaultEXT(GLbitfield);
void MatrixLoadfEXT(GLenum, const GLfloat *);
void MatrixLoaddEXT(GLenum, const GLdouble *);
void MatrixMultfEXT(GLenum, const GLfloat *);
void MatrixMultdEXT(GLenum, const GLdouble *);
void MatrixLoadIdentityEXT(GLenum);
void MatrixRotatefEXT(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
void MatrixRotatedEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
void MatrixScalefEXT(GLenum, GLfloat, GLfloat, GLfloat);
void MatrixScaledEXT(GLenum, GLdouble, GLdouble, GLdouble);
void MatrixTranslatefEXT(GLenum, GLfloat, GLfloat, GLfloat);
void MatrixTranslatedEXT(GLenum, GLdouble, GLdouble, GLdouble);
void MatrixFrustumEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
void MatrixOrthoEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
void MatrixPopEXT(GLenum);
void MatrixPushEXT(GLenum);
void MatrixLoadTransposefEXT(GLenum, const GLfloat *);
void MatrixLoadTransposedEXT(GLenum, const GLdouble *);
void MatrixMultTransposefEXT(GLenum, const GLfloat *);
void MatrixMultTransposedEXT(GLenum, const GLdouble *);
void TextureParameterfEXT(GLuint, GLenum, GLenum, GLfloat);
void TextureParameterfvEXT(GLuint, GLenum, GLenum, const GLfloat *);
void TextureParameteriEXT(GLuint, GLenum, GLenum, GLint);
void TextureParameterivEXT(GLuint, GLenum, GLenum, const GLint *);
void TextureImage1DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TextureImage2DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
void TextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyTextureImage1DEXT(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
void CopyTextureImage2DEXT(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
void CopyTextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
void CopyTextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
void GetTextureImageEXT(GLuint, GLenum, GLint, GLenum, GLenum, GLvoid *);
void GetTextureParameterfvEXT(GLuint, GLenum, GLenum, GLfloat *);
void GetTextureParameterivEXT(GLuint, GLenum, GLenum, GLint *);
void GetTextureLevelParameterfvEXT(GLuint, GLenum, GLint, GLenum, GLfloat *);
void GetTextureLevelParameterivEXT(GLuint, GLenum, GLint, GLenum, GLint *);
void TextureImage3DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void TextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyTextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
void MultiTexParameterfEXT(GLenum, GLenum, GLenum, GLfloat);
void MultiTexParameterfvEXT(GLenum, GLenum, GLenum, const GLfloat *);
void MultiTexParameteriEXT(GLenum, GLenum, GLenum, GLint);
void MultiTexParameterivEXT(GLenum, GLenum, GLenum, const GLint *);
void MultiTexImage1DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void MultiTexImage2DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void MultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
void MultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyMultiTexImage1DEXT(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
void CopyMultiTexImage2DEXT(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
void CopyMultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
void CopyMultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
void GetMultiTexImageEXT(GLenum, GLenum, GLint, GLenum, GLenum, GLvoid *);
void GetMultiTexParameterfvEXT(GLenum, GLenum, GLenum, GLfloat *);
void GetMultiTexParameterivEXT(GLenum, GLenum, GLenum, GLint *);
void GetMultiTexLevelParameterfvEXT(GLenum, GLenum, GLint, GLenum, GLfloat *);
void GetMultiTexLevelParameterivEXT(GLenum, GLenum, GLint, GLenum, GLint *);
void MultiTexImage3DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
void MultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
void CopyMultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
void BindMultiTextureEXT(GLenum, GLenum, GLuint);
void EnableClientStateIndexedEXT(GLenum, GLuint);
void DisableClientStateIndexedEXT(GLenum, GLuint);
void MultiTexCoordPointerEXT(GLenum, GLint, GLenum, GLsizei, const GLvoid *);
void MultiTexEnvfEXT(GLenum, GLenum, GLenum, GLfloat);
void MultiTexEnvfvEXT(GLenum, GLenum, GLenum, const GLfloat *);
void MultiTexEnviEXT(GLenum, GLenum, GLenum, GLint);
void MultiTexEnvivEXT(GLenum, GLenum, GLenum, const GLint *);
void MultiTexGendEXT(GLenum, GLenum, GLenum, GLdouble);
void MultiTexGendvEXT(GLenum, GLenum, GLenum, const GLdouble *);
void MultiTexGenfEXT(GLenum, GLenum, GLenum, GLfloat);
void MultiTexGenfvEXT(GLenum, GLenum, GLenum, const GLfloat *);
void MultiTexGeniEXT(GLenum, GLenum, GLenum, GLint);
void MultiTexGenivEXT(GLenum, GLenum, GLenum, const GLint *);
void GetMultiTexEnvfvEXT(GLenum, GLenum, GLenum, GLfloat *);
void GetMultiTexEnvivEXT(GLenum, GLenum, GLenum, GLint *);
void GetMultiTexGendvEXT(GLenum, GLenum, GLenum, GLdouble *);
void GetMultiTexGenfvEXT(GLenum, GLenum, GLenum, GLfloat *);
void GetMultiTexGenivEXT(GLenum, GLenum, GLenum, GLint *);
void GetFloatIndexedvEXT(GLenum, GLuint, GLfloat *);
void GetDoubleIndexedvEXT(GLenum, GLuint, GLdouble *);
void GetPointerIndexedvEXT(GLenum, GLuint, GLvoid* *);
void CompressedTextureImage3DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTextureImage2DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTextureImage1DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedTextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedTextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
void GetCompressedTextureImageEXT(GLuint, GLenum, GLint, GLvoid *);
void CompressedMultiTexImage3DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedMultiTexImage2DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedMultiTexImage1DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
void CompressedMultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedMultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
void CompressedMultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
void GetCompressedMultiTexImageEXT(GLenum, GLenum, GLint, GLvoid *);
void NamedProgramStringEXT(GLuint, GLenum, GLenum, GLsizei, const GLvoid *);
void NamedProgramLocalParameter4dEXT(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
void NamedProgramLocalParameter4dvEXT(GLuint, GLenum, GLuint, const GLdouble *);
void NamedProgramLocalParameter4fEXT(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
void NamedProgramLocalParameter4fvEXT(GLuint, GLenum, GLuint, const GLfloat *);
void GetNamedProgramLocalParameterdvEXT(GLuint, GLenum, GLuint, GLdouble *);
void GetNamedProgramLocalParameterfvEXT(GLuint, GLenum, GLuint, GLfloat *);
void GetNamedProgramivEXT(GLuint, GLenum, GLenum, GLint *);
void GetNamedProgramStringEXT(GLuint, GLenum, GLenum, GLvoid *);
void NamedProgramLocalParameters4fvEXT(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
void NamedProgramLocalParameterI4iEXT(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
void NamedProgramLocalParameterI4ivEXT(GLuint, GLenum, GLuint, const GLint *);
void NamedProgramLocalParametersI4ivEXT(GLuint, GLenum, GLuint, GLsizei, const GLint *);
void NamedProgramLocalParameterI4uiEXT(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
void NamedProgramLocalParameterI4uivEXT(GLuint, GLenum, GLuint, const GLuint *);
void NamedProgramLocalParametersI4uivEXT(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
void GetNamedProgramLocalParameterIivEXT(GLuint, GLenum, GLuint, GLint *);
void GetNamedProgramLocalParameterIuivEXT(GLuint, GLenum, GLuint, GLuint *);
void TextureParameterIivEXT(GLuint, GLenum, GLenum, const GLint *);
void TextureParameterIuivEXT(GLuint, GLenum, GLenum, const GLuint *);
void GetTextureParameterIivEXT(GLuint, GLenum, GLenum, GLint *);
void GetTextureParameterIuivEXT(GLuint, GLenum, GLenum, GLuint *);
void MultiTexParameterIivEXT(GLenum, GLenum, GLenum, const GLint *);
void MultiTexParameterIuivEXT(GLenum, GLenum, GLenum, const GLuint *);
void GetMultiTexParameterIivEXT(GLenum, GLenum, GLenum, GLint *);
void GetMultiTexParameterIuivEXT(GLenum, GLenum, GLenum, GLuint *);
void ProgramUniform1fEXT(GLuint, GLint, GLfloat);
void ProgramUniform2fEXT(GLuint, GLint, GLfloat, GLfloat);
void ProgramUniform3fEXT(GLuint, GLint, GLfloat, GLfloat, GLfloat);
void ProgramUniform4fEXT(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
void ProgramUniform1iEXT(GLuint, GLint, GLint);
void ProgramUniform2iEXT(GLuint, GLint, GLint, GLint);
void ProgramUniform3iEXT(GLuint, GLint, GLint, GLint, GLint);
void ProgramUniform4iEXT(GLuint, GLint, GLint, GLint, GLint, GLint);
void ProgramUniform1fvEXT(GLuint, GLint, GLsizei, const GLfloat *);
void ProgramUniform2fvEXT(GLuint, GLint, GLsizei, const GLfloat *);
void ProgramUniform3fvEXT(GLuint, GLint, GLsizei, const GLfloat *);
void ProgramUniform4fvEXT(GLuint, GLint, GLsizei, const GLfloat *);
void ProgramUniform1ivEXT(GLuint, GLint, GLsizei, const GLint *);
void ProgramUniform2ivEXT(GLuint, GLint, GLsizei, const GLint *);
void ProgramUniform3ivEXT(GLuint, GLint, GLsizei, const GLint *);
void ProgramUniform4ivEXT(GLuint, GLint, GLsizei, const GLint *);
void ProgramUniformMatrix2fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix3fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix4fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix2x3fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix3x2fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix2x4fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix4x2fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix3x4fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniformMatrix4x3fvEXT(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
void ProgramUniform1uiEXT(GLuint, GLint, GLuint);
void ProgramUniform2uiEXT(GLuint, GLint, GLuint, GLuint);
void ProgramUniform3uiEXT(GLuint, GLint, GLuint, GLuint, GLuint);
void ProgramUniform4uiEXT(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
void ProgramUniform1uivEXT(GLuint, GLint, GLsizei, const GLuint *);
void ProgramUniform2uivEXT(GLuint, GLint, GLsizei, const GLuint *);
void ProgramUniform3uivEXT(GLuint, GLint, GLsizei, const GLuint *);
void ProgramUniform4uivEXT(GLuint, GLint, GLsizei, const GLuint *);
void NamedBufferDataEXT(GLuint, GLsizeiptr, const GLvoid *, GLenum);
void NamedBufferSubDataEXT(GLuint, GLintptr, GLsizeiptr, const GLvoid *);
GLvoid* MapNamedBufferEXT(GLuint, GLenum);
GLboolean UnmapNamedBufferEXT(GLuint);
void GetNamedBufferParameterivEXT(GLuint, GLenum, GLint *);
void GetNamedBufferPointervEXT(GLuint, GLenum, GLvoid* *);
void GetNamedBufferSubDataEXT(GLuint, GLintptr, GLsizeiptr, GLvoid *);
void TextureBufferEXT(GLuint, GLenum, GLenum, GLuint);
void MultiTexBufferEXT(GLenum, GLenum, GLenum, GLuint);
void NamedRenderbufferStorageEXT(GLuint, GLenum, GLsizei, GLsizei);
void GetNamedRenderbufferParameterivEXT(GLuint, GLenum, GLint *);
GLenum CheckNamedFramebufferStatusEXT(GLuint, GLenum);
void NamedFramebufferTexture1DEXT(GLuint, GLenum, GLenum, GLuint, GLint);
void NamedFramebufferTexture2DEXT(GLuint, GLenum, GLenum, GLuint, GLint);
void NamedFramebufferTexture3DEXT(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
void NamedFramebufferRenderbufferEXT(GLuint, GLenum, GLenum, GLuint);
void GetNamedFramebufferAttachmentParameterivEXT(GLuint, GLenum, GLenum, GLint *);
void GenerateTextureMipmapEXT(GLuint, GLenum);
void GenerateMultiTexMipmapEXT(GLenum, GLenum);
void FramebufferDrawBufferEXT(GLuint, GLenum);
void FramebufferDrawBuffersEXT(GLuint, GLsizei, const GLenum *);
void FramebufferReadBufferEXT(GLuint, GLenum);
void GetFramebufferParameterivEXT(GLuint, GLenum, GLint *);
void NamedRenderbufferStorageMultisampleEXT(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
void NamedRenderbufferStorageMultisampleCoverageEXT(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
void NamedFramebufferTextureEXT(GLuint, GLenum, GLuint, GLint);
void NamedFramebufferTextureLayerEXT(GLuint, GLenum, GLuint, GLint, GLint);
void NamedFramebufferTextureFaceEXT(GLuint, GLenum, GLuint, GLint, GLenum);
void TextureRenderbufferEXT(GLuint, GLenum, GLuint);
void MultiTexRenderbufferEXT(GLenum, GLenum, GLuint);

void GetMultisamplefvNV(GLenum, GLuint, GLfloat *);
void SampleMaskIndexedNV(GLuint, GLbitfield);
void TexRenderbufferNV(GLenum, GLuint);

void BindTransformFeedbackNV(GLenum, GLuint);
void DeleteTransformFeedbacksNV(GLsizei, const GLuint *);
void GenTransformFeedbacksNV(GLsizei, GLuint *);
GLboolean IsTransformFeedbackNV(GLuint);
void PauseTransformFeedbackNV(void);
void ResumeTransformFeedbackNV(void);
void DrawTransformFeedbackNV(GLenum, GLuint);

void GetPerfMonitorGroupsAMD(GLint *, GLsizei, GLuint *);
void GetPerfMonitorCountersAMD(GLuint, GLint *, GLint *, GLsizei, GLuint *);
void GetPerfMonitorGroupStringAMD(GLuint, GLsizei, GLsizei *, GLchar *);
void GetPerfMonitorCounterStringAMD(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
void GetPerfMonitorCounterInfoAMD(GLuint, GLuint, GLenum, void *);
void GenPerfMonitorsAMD(GLsizei, GLuint *);
void DeletePerfMonitorsAMD(GLsizei, GLuint *);
void SelectPerfMonitorCountersAMD(GLuint, GLboolean, GLuint, GLint, GLuint *);
void BeginPerfMonitorAMD(GLuint);
void EndPerfMonitorAMD(GLuint);
void GetPerfMonitorCounterDataAMD(GLuint, GLenum, GLsizei, GLuint *, GLint *);

void TessellationFactorAMD(GLfloat);
void TessellationModeAMD(GLenum);

void ProvokingVertexEXT(GLenum);

void BlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst);
void BlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void BlendEquationIndexedAMD(GLuint buf, GLenum mode);
void BlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha);

void TextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer);
void GetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid* *params);

void EnableVertexAttribAPPLE(GLuint index, GLenum pname);
void DisableVertexAttribAPPLE(GLuint index, GLenum pname);
GLboolean IsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
void MapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void MapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void MapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void MapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);

GLenum ObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
GLenum ObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
void GetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params);

void BeginVideoCaptureNV(GLuint video_capture_slot);
void BindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
void BindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
void EndVideoCaptureNV(GLuint video_capture_slot);
void GetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params);
void GetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
void GetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
void GetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
GLenum VideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
void VideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
void VideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
void VideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);

void UseShaderProgramEXT(GLenum type, GLuint program);
void ActiveProgramEXT(GLuint program);
GLuint CreateShaderProgramEXT(GLenum type, const GLchar *string);

void MakeBufferResidentNV(GLenum target, GLenum access);
void MakeBufferNonResidentNV(GLenum target);
GLboolean IsBufferResidentNV(GLenum target);
void MakeNamedBufferResidentNV(GLuint buffer, GLenum access);
void MakeNamedBufferNonResidentNV(GLuint buffer);
GLboolean IsNamedBufferResidentNV(GLuint buffer);
void GetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params);
void GetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params);
void GetIntegerui64vNV(GLenum value, GLuint64EXT *result);
void Uniformui64NV(GLint location, GLuint64EXT value);
void Uniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void GetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params);
void ProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value);
void ProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);

void BufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
void VertexFormatNV(GLint size, GLenum type, GLsizei stride);
void NormalFormatNV(GLenum type, GLsizei stride);
void ColorFormatNV(GLint size, GLenum type, GLsizei stride);
void IndexFormatNV(GLenum type, GLsizei stride);
void TexCoordFormatNV(GLint size, GLenum type, GLsizei stride);
void EdgeFlagFormatNV(GLsizei stride);
void SecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride);
void FogCoordFormatNV(GLenum type, GLsizei stride);
void VertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
void VertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
void GetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result);

void TextureBarrierNV(void);
