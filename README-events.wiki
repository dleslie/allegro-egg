[[tags: allegro game]]

== allegro

This document pertains to event related items found in the Allegro egg.

Please see the main [allegro] wiki page for more information.

[[toc:]]

== Enums

=== event-type

<procedure>(event-type->int event-type)</procedure>

{{event-type}} may be one of the following symbols:
* joystick-axis
* joystick-button-down
* joystick-button-up
* joystick-configuration
* key-down
* key-char
* key-up
* mouse-axes
* mouse-button-down
* mouse-button-up
* mouse-enter-display
* mouse-leave-display
* mouse-warped
* timer
* display-expose
* display-resize
* display-close
* display-lost
* display-found
* display-switch-in
* display-switch-out
* display-orientation
* audio-stream-fragment
* audio-stream-finished

<procedure>(int->event-type integer)</procedure>

== Records

=== any-event

<record>any-event</record>
<procedure>(any-event-type any-event)</procedure>
<procedure>(any-event-source any-event)</procedure>
<procedure>(any-event-timestamp any-event)</procedure>

=== display-event

<record>display-event</record>
<procedure>(display-event-type display-event)</procedure>
<procedure>(display-event-source display-event)</procedure>
<procedure>(display-event-timestamp display-event)</procedure>
<procedure>(display-event-x display-event)</procedure>
<procedure>(display-event-y display-event)</procedure>
<procedure>(display-event-width display-event)</procedure>
<procedure>(display-event-height display-event)</procedure>
<procedure>(display-event-orientation display-event)</procedure>

=== event

<record>event</record>
<procedure>(make-event)</procedure>
<procedure>(make-event*)</procedure>
<procedure>(free-event! event)</procedure>

=== event-source

<record>event-source</record>

=== event-queue

<record>event-queue</record>

=== joystick-event

<record>joystick-event</record>
<procedure>(joystick-event-type joystick-event)</procedure>
<procedure>(joystick-event-source joystick-event)</procedure>
<procedure>(joystick-event-timestamp joystick-event)</procedure>
<procedure>(joystick-event-id joystick-event)</procedure>
<procedure>(joystick-event-stick joystick-event)</procedure>
<procedure>(joystick-event-axis joystick-event)</procedure>
<procedure>(joystick-event-position joystick-event)</procedure>
<procedure>(joystick-event-button joystick-event)</procedure>

=== keyboard-event

<record>keyboard-event</record>
<procedure>(keyboard-event-type keyboard-event)</procedure>
<procedure>(keyboard-event-source keyboard-event)</procedure>
<procedure>(keyboard-event-timestamp keyboard-event)</procedure>
<procedure>(keyboard-event-display keyboard-event)</procedure>
<procedure>(keyboard-event-keycode keyboard-event)</procedure>
<procedure>(keyboard-event-unichar keyboard-event)</procedure>
<procedure>(keyboard-event-modifiers keyboard-event)</procedure>
<procedure>(keyboard-event-repeat keyboard-event)</procedure>

=== mouse-event

<record>mouse-event</record>
<procedure>(mouse-event-type mouse-event)</procedure>
<procedure>(mouse-event-source mouse-event)</procedure>
<procedure>(mouse-event-timestamp mouse-event)</procedure>
<procedure>(mouse-event-display mouse-event)</procedure>
<procedure>(mouse-event-x mouse-event)</procedure>
<procedure>(mouse-event-y mouse-event)</procedure>
<procedure>(mouse-event-z mouse-event)</procedure>
<procedure>(mouse-event-w mouse-event)</procedure>
<procedure>(mouse-event-dx mouse-event)</procedure>
<procedure>(mouse-event-dy mouse-event)</procedure>
<procedure>(mouse-event-dz mouse-event)</procedure>
<procedure>(mouse-event-dw mouse-event)</procedure>
<procedure>(mouse-event-button mouse-event)</procedure>
<procedure>(mouse-event-pressure mouse-event)</procedure>

=== timer-event

<record>timer-event</record>
<procedure>(timer-event-type timer-event)</procedure>
<procedure>(timer-event-source timer-event)</procedure>
<procedure>(timer-event-timestamp timer-event)</procedure>
<procedure>(timer-event-count timer-event)</procedure>
<procedure>(timer-event-error timer-event)</procedure>

=== user-event

<record>user-event</record>
<procedure>(user-event-type user-event)</procedure>
<procedure>(user-event-source user-event)</procedure>
<procedure>(user-event-timestamp user-event)</procedure>
<procedure>(user-event-data1 user-event)</procedure>
<setter>(user-event-data1-set! user-event integer)</setter>
<procedure>(user-event-data2 user-event)</procedure>
<setter>(user-event-data2-set! user-event integer)</setter>
<procedure>(user-event-data3 user-event)</procedure>
<setter>(user-event-data3-set! user-event integer)</setter>
<procedure>(user-event-data4 user-event)</procedure>
<setter>(user-event-data4-set! user-event integer)</setter>

== Functions

<procedure>(user-event-type? integer)</procedure>

Implements ALLEGRO_EVENT_TYPE_IS_USER.

<procedure>(make-event-type (integer a) (integer b) (integer c) (integer d))</procedure>

Implements ALLEGRO_GET_EVENT_TYPE.

<procedure>(event-type event)</procedure>

Returns the type of a given event struct.

<procedure>(event->any-event event)</procedure>

Converts an event to an any-event.

<procedure>(event->display-event event)</procedure>

Converts an event to a display-event.

<procedure>(event->joystick-event event)</procedure>

Converts an event to a joystick-event.

<procedure>(event->keyboard-event event)</procedure>

Converts an event to a keyboard-event.

<procedure>(event->mouse-event event)</procedure>

Converts an event to a mouse-event.

<procedure>(event->timer-event event)</procedure>

Converts an event to a timer-event.

<procedure>(event->user-event event)</procedure>

Converts an event to a user-event.

<procedure>(user-event-source-init! event-source)</procedure>

Implements al_init_user_event_source.

<procedure>(free-user-event-source! event-source)</procedure>

Implements al_destroy_user_event_source.

<procedure>(emit-user-event! event-source event (function void (user-event)))</procedure>

Implements al_emit_user_event.

<procedure>(user-event-unref! user-event)</procedure>

Implements al_unref_user_event.

<procedure>(event-source-data event-source)</procedure>

Implements al_get_event_source_data.

<procedure>(event-source-data-set! event-source integer)</procedure>

Implements al_set_event_source_data.

<procedure>(make-event-queue*)</procedure>

Implements al_create_event_queue.

<procedure>(make-event-queue)</procedure>

Implements al_create_event_queue, with (free-event-queue!) declared as a finalizer.

<procedure>(free-event-queue! event-queue)</procedure>

Implements al_destroy_event_queue.

<procedure>(event-queue-register-source! event-queue event-source)</procedure>

Implements al_register_event_source.

<procedure>(event-queue-unregister-source! event-queue event-source)</procedure>

Implements al_unregister_event_source.

<procedure>(event-queue-empty? event-queue)</procedure>

Implements al_is_event_queue_empty.

<procedure>(event-queue-next! event-queue event)</procedure>

Implements al_get_next_event.

<procedure>(event-queue-peek! event-queue event)</procedure>

Implements al_peek_next_event.

<procedure>(event-queue-drop-next! event-queue)</procedure>

Implements al_drop_next_event_queue.

<procedure>(event-queue-flush! event-queue)</procedure>

Implements al_drop_next_event.

<procedure>(event-queue-wait! event-queue event)</procedure>

Implements al_wait_for_event.

<procedure>(event-queue-timed-wait! event-queue event float)</procedure>

Implements al_wait_for_event_timed.

<procedure>(event-queue-wait-until! event-queue event timeout)</procedure>

Implements al_wait_for_event_until.

